
dimmer_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800f148  0800f148  00010148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f744  0800f744  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f744  0800f744  00010744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f74c  0800f74c  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f74c  0800f74c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f750  0800f750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800f754  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111e8  2**0
                  CONTENTS
 10 .bss          00005070  200001e8  200001e8  000111e8  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20005258  20005258  000111e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b8cf  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000454e  00000000  00000000  0002cae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00031038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013a9  00000000  00000000  00032950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f65  00000000  00000000  00033cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d653  00000000  00000000  00057c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf20d  00000000  00000000  000752b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001444be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e48  00000000  00000000  00144504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0014c34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f12c 	.word	0x0800f12c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f12c 	.word	0x0800f12c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <cJSON_GetNumberValue>:

    return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item))
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f002 f8b4 	bl	800317a <cJSON_IsNumber>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <cJSON_GetNumberValue+0x34>)
 800101e:	e002      	b.n	8001026 <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8001026:	ec43 2b17 	vmov	d7, r2, r3
 800102a:	eeb0 0a47 	vmov.f32	s0, s14
 800102e:	eef0 0a67 	vmov.f32	s1, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	7ff80000 	.word	0x7ff80000

0800103c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <case_insensitive_strcmp+0x16>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001052:	2301      	movs	r3, #1
 8001054:	e056      	b.n	8001104 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d10d      	bne.n	800107a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e050      	b.n	8001104 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800106a:	2300      	movs	r3, #0
 800106c:	e04a      	b.n	8001104 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3301      	adds	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	3301      	adds	r3, #1
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d103      	bne.n	800109a <case_insensitive_strcmp+0x5e>
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	f103 0220 	add.w	r2, r3, #32
 8001098:	e000      	b.n	800109c <case_insensitive_strcmp+0x60>
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	3301      	adds	r3, #1
 80010a6:	491a      	ldr	r1, [pc, #104]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 80010a8:	440b      	add	r3, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d102      	bne.n	80010ba <case_insensitive_strcmp+0x7e>
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	3320      	adds	r3, #32
 80010b8:	e000      	b.n	80010bc <case_insensitive_strcmp+0x80>
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d0d0      	beq.n	8001062 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	737b      	strb	r3, [r7, #13]
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d103      	bne.n	80010e0 <case_insensitive_strcmp+0xa4>
 80010d8:	7b7b      	ldrb	r3, [r7, #13]
 80010da:	f103 0220 	add.w	r2, r3, #32
 80010de:	e000      	b.n	80010e2 <case_insensitive_strcmp+0xa6>
 80010e0:	7b7a      	ldrb	r2, [r7, #13]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	733b      	strb	r3, [r7, #12]
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4908      	ldr	r1, [pc, #32]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 80010ee:	440b      	add	r3, r1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <case_insensitive_strcmp+0xc4>
 80010fa:	7b3b      	ldrb	r3, [r7, #12]
 80010fc:	3320      	adds	r3, #32
 80010fe:	e000      	b.n	8001102 <case_insensitive_strcmp+0xc6>
 8001100:	7b3b      	ldrb	r3, [r7, #12]
 8001102:	1ad3      	subs	r3, r2, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	0800f3d0 	.word	0x0800f3d0

08001114 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <cJSON_strdup+0x1c>
    {
        return NULL;
 800112c:	2300      	movs	r3, #0
 800112e:	e015      	b.n	800115c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f857 	bl	80001e4 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	4798      	blx	r3
 8001144:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <cJSON_strdup+0x3c>
    {
        return NULL;
 800114c:	2300      	movs	r3, #0
 800114e:	e005      	b.n	800115c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f00b fc68 	bl	800ca2a <memcpy>

    return copy;
 800115a:	68bb      	ldr	r3, [r7, #8]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2028      	movs	r0, #40	@ 0x28
 8001172:	4798      	blx	r3
 8001174:	60f8      	str	r0, [r7, #12]
    if (node)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800117c:	2228      	movs	r2, #40	@ 0x28
 800117e:	2100      	movs	r1, #0
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f00b fb5f 	bl	800c844 <memset>
    }

    return node;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800119c:	e03d      	b.n	800121a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d108      	bne.n	80011c2 <cJSON_Delete+0x32>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffe7 	bl	8001190 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <cJSON_Delete+0x58>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <cJSON_Delete+0x9c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6912      	ldr	r2, [r2, #16]
 80011de:	4610      	mov	r0, r2
 80011e0:	4798      	blx	r3
            item->valuestring = NULL;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10c      	bne.n	800120e <cJSON_Delete+0x7e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <cJSON_Delete+0x9c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6a12      	ldr	r2, [r2, #32]
 8001204:	4610      	mov	r0, r2
 8001206:	4798      	blx	r3
            item->string = NULL;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <cJSON_Delete+0x9c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
        item = next;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1be      	bne.n	800119e <cJSON_Delete+0xe>
    }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001234:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b098      	sub	sp, #96	@ 0x60
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    double number = 0;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800125a:	f7ff ffe9 	bl	8001230 <get_decimal_point>
 800125e:	4603      	mov	r3, r0
 8001260:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <parse_number+0x36>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <parse_number+0x3a>
    {
        return false;
 8001276:	2300      	movs	r3, #0
 8001278:	e0a0      	b.n	80013bc <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800127a:	2300      	movs	r3, #0
 800127c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800127e:	e03d      	b.n	80012fc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6899      	ldr	r1, [r3, #8]
 8001288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128a:	440b      	add	r3, r1
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b45      	cmp	r3, #69	@ 0x45
 8001292:	dc17      	bgt.n	80012c4 <parse_number+0x84>
 8001294:	2b2b      	cmp	r3, #43	@ 0x2b
 8001296:	db40      	blt.n	800131a <parse_number+0xda>
 8001298:	3b2b      	subs	r3, #43	@ 0x2b
 800129a:	2201      	movs	r2, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <parse_number+0x190>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10b      	bne.n	80012c8 <parse_number+0x88>
 80012b0:	f002 0308 	and.w	r3, r2, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d111      	bne.n	80012e6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80012c2:	e02a      	b.n	800131a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80012c4:	2b65      	cmp	r3, #101	@ 0x65
 80012c6:	d128      	bne.n	800131a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6899      	ldr	r1, [r3, #8]
 80012d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012d2:	440b      	add	r3, r1
 80012d4:	4413      	add	r3, r2
 80012d6:	7819      	ldrb	r1, [r3, #0]
 80012d8:	f107 0208 	add.w	r2, r7, #8
 80012dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012de:	4413      	add	r3, r2
 80012e0:	460a      	mov	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
                break;
 80012e4:	e007      	b.n	80012f6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ec:	4413      	add	r3, r2
 80012ee:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80012f2:	701a      	strb	r2, [r3, #0]
                break;
 80012f4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80012f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012f8:	3301      	adds	r3, #1
 80012fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8001300:	d80d      	bhi.n	800131e <parse_number+0xde>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00a      	beq.n	800131e <parse_number+0xde>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800130e:	441a      	add	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3b3      	bcc.n	8001280 <parse_number+0x40>
        }
    }
loop_end:
 8001318:	e001      	b.n	800131e <parse_number+0xde>
                goto loop_end;
 800131a:	bf00      	nop
 800131c:	e000      	b.n	8001320 <parse_number+0xe0>
loop_end:
 800131e:	bf00      	nop
    number_c_string[i] = '\0';
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800132c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f00b f8ee 	bl	800c518 <strtod>
 800133c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800134a:	2300      	movs	r3, #0
 800134c:	e036      	b.n	80013bc <parse_number+0x17c>
    }

    item->valuedouble = number;
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001354:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001358:	a31b      	add	r3, pc, #108	@ (adr r3, 80013c8 <parse_number+0x188>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001362:	f7ff fbdf 	bl	8000b24 <__aeabi_dcmpge>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	e015      	b.n	80013a2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <parse_number+0x194>)
 800137c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001380:	f7ff fbc6 	bl	8000b10 <__aeabi_dcmple>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	e006      	b.n	80013a2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001394:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001398:	f7ff fbee 	bl	8000b78 <__aeabi_d2iz>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2208      	movs	r2, #8
 80013a6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80013ae:	f107 0208 	add.w	r2, r7, #8
 80013b2:	1a8a      	subs	r2, r1, r2
 80013b4:	441a      	add	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	609a      	str	r2, [r3, #8]
    return true;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3760      	adds	r7, #96	@ 0x60
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	f3af 8000 	nop.w
 80013c8:	ffc00000 	.word	0xffc00000
 80013cc:	41dfffff 	.word	0x41dfffff
 80013d0:	04007fe5 	.word	0x04007fe5
 80013d4:	c1e00000 	.word	0xc1e00000

080013d8 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <ensure+0x20>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <ensure+0x24>
    {
        return NULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e083      	b.n	8001504 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <ensure+0x3c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d301      	bcc.n	8001414 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001410:	2300      	movs	r3, #0
 8001412:	e077      	b.n	8001504 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	da01      	bge.n	800141e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800141a:	2300      	movs	r3, #0
 800141c:	e072      	b.n	8001504 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	3301      	adds	r3, #1
 8001428:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d805      	bhi.n	8001440 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4413      	add	r3, r2
 800143e:	e061      	b.n	8001504 <ensure+0x12c>
    }

    if (p->noalloc) {
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <ensure+0x74>
        return NULL;
 8001448:	2300      	movs	r3, #0
 800144a:	e05b      	b.n	8001504 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001452:	d308      	bcc.n	8001466 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db03      	blt.n	8001462 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800145a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e004      	b.n	800146c <ensure+0x94>
        }
        else
        {
            return NULL;
 8001462:	2300      	movs	r3, #0
 8001464:	e04e      	b.n	8001504 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d018      	beq.n	80014a6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	4610      	mov	r0, r2
 8001480:	4798      	blx	r3
 8001482:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d132      	bne.n	80014f0 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	4610      	mov	r0, r2
 8001494:	4798      	blx	r3
            p->length = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

            return NULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e02e      	b.n	8001504 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	68b8      	ldr	r0, [r7, #8]
 80014ac:	4798      	blx	r3
 80014ae:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	4610      	mov	r0, r2
 80014c0:	4798      	blx	r3
            p->length = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

            return NULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e018      	b.n	8001504 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	3301      	adds	r3, #1
 80014dc:	461a      	mov	r2, r3
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f00b faa3 	bl	800ca2a <memcpy>
        p->hooks.deallocate(p->buffer);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	4610      	mov	r0, r2
 80014ee:	4798      	blx	r3
    }
    p->length = newsize;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d013      	beq.n	8001546 <update_offset+0x3a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00f      	beq.n	8001546 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689c      	ldr	r4, [r3, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7fe fe54 	bl	80001e4 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	18e2      	adds	r2, r4, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e000      	b.n	8001548 <update_offset+0x3c>
        return;
 8001546:	bf00      	nop
}
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
	...

08001550 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	ed87 0b02 	vstr	d0, [r7, #8]
 800155c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	68fe      	ldr	r6, [r7, #12]
 8001564:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	687e      	ldr	r6, [r7, #4]
 800156c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8001570:	f7ff fae2 	bl	8000b38 <__aeabi_dcmpgt>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <compare_double+0x34>
 800157a:	68bc      	ldr	r4, [r7, #8]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001582:	e003      	b.n	800158c <compare_double+0x3c>
 8001584:	683c      	ldr	r4, [r7, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800158c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001594:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001598:	f7fe fe86 	bl	80002a8 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4690      	mov	r8, r2
 80015a2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <compare_double+0x8c>)
 80015ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b0:	f7ff f832 	bl	8000618 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	2101      	movs	r1, #1
 80015ba:	460c      	mov	r4, r1
 80015bc:	4640      	mov	r0, r8
 80015be:	4649      	mov	r1, r9
 80015c0:	f7ff faa6 	bl	8000b10 <__aeabi_dcmple>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <compare_double+0x7e>
 80015ca:	2300      	movs	r3, #0
 80015cc:	461c      	mov	r4, r3
 80015ce:	b2e3      	uxtb	r3, r4
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015da:	bf00      	nop
 80015dc:	3cb00000 	.word	0x3cb00000

080015e0 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	b093      	sub	sp, #76	@ 0x4c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8001616:	f7ff fe0b 	bl	8001230 <get_decimal_point>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <print_number+0x56>
    {
        return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e0b4      	b.n	80017a0 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001636:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800163a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800163e:	f7ff fa85 	bl	8000b4c <__aeabi_dcmpun>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d121      	bne.n	800168c <print_number+0xac>
 8001648:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800164a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001650:	2301      	movs	r3, #1
 8001652:	461e      	mov	r6, r3
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <print_number+0x1c8>)
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7ff fa75 	bl	8000b4c <__aeabi_dcmpun>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <print_number+0xa0>
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	4b4e      	ldr	r3, [pc, #312]	@ (80017a8 <print_number+0x1c8>)
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7ff fa4d 	bl	8000b10 <__aeabi_dcmple>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <print_number+0xa0>
 800167c:	2300      	movs	r3, #0
 800167e:	461e      	mov	r6, r3
 8001680:	b2f3      	uxtb	r3, r6
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4946      	ldr	r1, [pc, #280]	@ (80017ac <print_number+0x1cc>)
 8001692:	4618      	mov	r0, r3
 8001694:	f00b f80e 	bl	800c6b4 <siprintf>
 8001698:	6478      	str	r0, [r7, #68]	@ 0x44
 800169a:	e03f      	b.n	800171c <print_number+0x13c>
    }
    else if(d == (double)item->valueint)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff4f 	bl	8000544 <__aeabi_i2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016ae:	f7ff fa1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	493b      	ldr	r1, [pc, #236]	@ (80017b0 <print_number+0x1d0>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00a fff6 	bl	800c6b4 <siprintf>
 80016c8:	6478      	str	r0, [r7, #68]	@ 0x44
 80016ca:	e027      	b.n	800171c <print_number+0x13c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80016cc:	f107 0014 	add.w	r0, r7, #20
 80016d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016d4:	4937      	ldr	r1, [pc, #220]	@ (80017b4 <print_number+0x1d4>)
 80016d6:	f00a ffed 	bl	800c6b4 <siprintf>
 80016da:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80016dc:	f107 0208 	add.w	r2, r7, #8
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4934      	ldr	r1, [pc, #208]	@ (80017b8 <print_number+0x1d8>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00b f804 	bl	800c6f4 <siscanf>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10c      	bne.n	800170c <print_number+0x12c>
 80016f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80016f6:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 80016fa:	eeb0 0a47 	vmov.f32	s0, s14
 80016fe:	eef0 0a67 	vmov.f32	s1, s15
 8001702:	f7ff ff25 	bl	8001550 <compare_double>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800170c:	f107 0014 	add.w	r0, r7, #20
 8001710:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001714:	4929      	ldr	r1, [pc, #164]	@ (80017bc <print_number+0x1dc>)
 8001716:	f00a ffcd 	bl	800c6b4 <siprintf>
 800171a:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800171c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800171e:	2b00      	cmp	r3, #0
 8001720:	db02      	blt.n	8001728 <print_number+0x148>
 8001722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001724:	2b19      	cmp	r3, #25
 8001726:	dd01      	ble.n	800172c <print_number+0x14c>
    {
        return false;
 8001728:	2300      	movs	r3, #0
 800172a:	e039      	b.n	80017a0 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800172c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172e:	3301      	adds	r3, #1
 8001730:	4619      	mov	r1, r3
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f7ff fe50 	bl	80013d8 <ensure>
 8001738:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800173a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <print_number+0x164>
    {
        return false;
 8001740:	2300      	movs	r3, #0
 8001742:	e02d      	b.n	80017a0 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001744:	2300      	movs	r3, #0
 8001746:	643b      	str	r3, [r7, #64]	@ 0x40
 8001748:	e01a      	b.n	8001780 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800174a:	f107 0214 	add.w	r2, r7, #20
 800174e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001758:	429a      	cmp	r2, r3
 800175a:	d105      	bne.n	8001768 <print_number+0x188>
        {
            output_pointer[i] = '.';
 800175c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800175e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001760:	4413      	add	r3, r2
 8001762:	222e      	movs	r2, #46	@ 0x2e
 8001764:	701a      	strb	r2, [r3, #0]
            continue;
 8001766:	e008      	b.n	800177a <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800176a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800176c:	4413      	add	r3, r2
 800176e:	f107 0114 	add.w	r1, r7, #20
 8001772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001774:	440a      	add	r2, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800177a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800177c:	3301      	adds	r3, #1
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001782:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001784:	429a      	cmp	r2, r3
 8001786:	d3e0      	bcc.n	800174a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001788:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800178a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800178c:	4413      	add	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001798:	441a      	add	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	609a      	str	r2, [r3, #8]

    return true;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	374c      	adds	r7, #76	@ 0x4c
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a8:	7fefffff 	.word	0x7fefffff
 80017ac:	0800f154 	.word	0x0800f154
 80017b0:	0800f15c 	.word	0x0800f15c
 80017b4:	0800f160 	.word	0x0800f160
 80017b8:	0800f168 	.word	0x0800f168
 80017bc:	0800f16c 	.word	0x0800f16c

080017c0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	e04c      	b.n	8001870 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b2f      	cmp	r3, #47	@ 0x2f
 80017e0:	d90f      	bls.n	8001802 <parse_hex4+0x42>
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b39      	cmp	r3, #57	@ 0x39
 80017ec:	d809      	bhi.n	8001802 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	3b30      	subs	r3, #48	@ 0x30
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e02d      	b.n	800185e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b40      	cmp	r3, #64	@ 0x40
 800180c:	d90f      	bls.n	800182e <parse_hex4+0x6e>
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b46      	cmp	r3, #70	@ 0x46
 8001818:	d809      	bhi.n	800182e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	3b37      	subs	r3, #55	@ 0x37
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e017      	b.n	800185e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b60      	cmp	r3, #96	@ 0x60
 8001838:	d90f      	bls.n	800185a <parse_hex4+0x9a>
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b66      	cmp	r3, #102	@ 0x66
 8001844:	d809      	bhi.n	800185a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	3b57      	subs	r3, #87	@ 0x57
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e001      	b.n	800185e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800185a:	2300      	movs	r3, #0
 800185c:	e00c      	b.n	8001878 <parse_hex4+0xb8>
        }

        if (i < 3)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d802      	bhi.n	800186a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3301      	adds	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d9af      	bls.n	80017d6 <parse_hex4+0x16>
        }
    }

    return h;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	f340 80b7 	ble.w	8001a2e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	3302      	adds	r3, #2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff7b 	bl	80017c0 <parse_hex4>
 80018ca:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80018d2:	d304      	bcc.n	80018de <utf16_literal_to_utf8+0x5a>
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80018da:	f0c0 80aa 	bcc.w	8001a32 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80018e4:	d337      	bcc.n	8001956 <utf16_literal_to_utf8+0xd2>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80018ec:	d233      	bcs.n	8001956 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	3306      	adds	r3, #6
 80018f2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80018f8:	230c      	movs	r3, #12
 80018fa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	f340 8096 	ble.w	8001a36 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001910:	f040 8093 	bne.w	8001a3a <utf16_literal_to_utf8+0x1b6>
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b75      	cmp	r3, #117	@ 0x75
 800191c:	f040 808d 	bne.w	8001a3a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3302      	adds	r3, #2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff4b 	bl	80017c0 <parse_hex4>
 800192a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001932:	f0c0 8084 	bcc.w	8001a3e <utf16_literal_to_utf8+0x1ba>
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800193c:	d27f      	bcs.n	8001a3e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	029a      	lsls	r2, r3, #10
 8001942:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <utf16_literal_to_utf8+0x1cc>)
 8001944:	4013      	ands	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800194c:	4313      	orrs	r3, r2
 800194e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001954:	e004      	b.n	8001960 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001956:	2306      	movs	r3, #6
 8001958:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	2b7f      	cmp	r3, #127	@ 0x7f
 8001964:	d803      	bhi.n	800196e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800196c:	e01f      	b.n	80019ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001974:	d206      	bcs.n	8001984 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001976:	2302      	movs	r3, #2
 8001978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800197c:	23c0      	movs	r3, #192	@ 0xc0
 800197e:	f887 3020 	strb.w	r3, [r7, #32]
 8001982:	e014      	b.n	80019ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198a:	d206      	bcs.n	800199a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800198c:	2303      	movs	r3, #3
 800198e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001992:	23e0      	movs	r3, #224	@ 0xe0
 8001994:	f887 3020 	strb.w	r3, [r7, #32]
 8001998:	e009      	b.n	80019ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80019a0:	d24f      	bcs.n	8001a42 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019a2:	2304      	movs	r3, #4
 80019a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019a8:	23f0      	movs	r3, #240	@ 0xf0
 80019aa:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80019b8:	e015      	b.n	80019e6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019cc:	440b      	add	r3, r1
 80019ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80019e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e5      	bne.n	80019ba <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80019ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d909      	bls.n	8001a0a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	b2d9      	uxtb	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e007      	b.n	8001a1a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a22:	441a      	add	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a28:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001a2c:	e00b      	b.n	8001a46 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a2e:	bf00      	nop
 8001a30:	e008      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a32:	bf00      	nop
 8001a34:	e006      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a36:	bf00      	nop
 8001a38:	e004      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a3a:	bf00      	nop
 8001a3c:	e002      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a3e:	bf00      	nop
 8001a40:	e000      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a42:	bf00      	nop

fail:
    return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	000ffc00 	.word	0x000ffc00

08001a54 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b22      	cmp	r3, #34	@ 0x22
 8001a90:	f040 8103 	bne.w	8001c9a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a9c:	e017      	b.n	8001ace <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b5c      	cmp	r3, #92	@ 0x5c
 8001aa4:	d110      	bne.n	8001ac8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	f080 80f1 	bcs.w	8001c9e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	3301      	adds	r3, #1
 8001acc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d203      	bcs.n	8001ae8 <parse_string+0x94>
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b22      	cmp	r3, #34	@ 0x22
 8001ae6:	d1da      	bne.n	8001a9e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	f080 80d3 	bcs.w	8001ca2 <parse_string+0x24e>
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b22      	cmp	r3, #34	@ 0x22
 8001b02:	f040 80ce 	bne.w	8001ca2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4413      	add	r3, r2
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	3201      	adds	r2, #1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4798      	blx	r3
 8001b28:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80ba 	beq.w	8001ca6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b36:	e094      	b.n	8001c62 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001b3e:	d008      	beq.n	8001b52 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b42:	1c53      	adds	r3, r2, #1
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1c59      	adds	r1, r3, #1
 8001b4a:	60f9      	str	r1, [r7, #12]
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	e087      	b.n	8001c62 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f340 80a4 	ble.w	8001caa <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b75      	cmp	r3, #117	@ 0x75
 8001b6a:	f300 80a0 	bgt.w	8001cae <parse_string+0x25a>
 8001b6e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001b70:	da04      	bge.n	8001b7c <parse_string+0x128>
 8001b72:	2b22      	cmp	r3, #34	@ 0x22
 8001b74:	d05c      	beq.n	8001c30 <parse_string+0x1dc>
 8001b76:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b78:	d05a      	beq.n	8001c30 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001b7a:	e098      	b.n	8001cae <parse_string+0x25a>
            switch (input_pointer[1])
 8001b7c:	3b5c      	subs	r3, #92	@ 0x5c
 8001b7e:	2b19      	cmp	r3, #25
 8001b80:	f200 8095 	bhi.w	8001cae <parse_string+0x25a>
 8001b84:	a201      	add	r2, pc, #4	@ (adr r2, 8001b8c <parse_string+0x138>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001c31 	.word	0x08001c31
 8001b90:	08001caf 	.word	0x08001caf
 8001b94:	08001caf 	.word	0x08001caf
 8001b98:	08001caf 	.word	0x08001caf
 8001b9c:	08001caf 	.word	0x08001caf
 8001ba0:	08001caf 	.word	0x08001caf
 8001ba4:	08001bf5 	.word	0x08001bf5
 8001ba8:	08001caf 	.word	0x08001caf
 8001bac:	08001caf 	.word	0x08001caf
 8001bb0:	08001caf 	.word	0x08001caf
 8001bb4:	08001c01 	.word	0x08001c01
 8001bb8:	08001caf 	.word	0x08001caf
 8001bbc:	08001caf 	.word	0x08001caf
 8001bc0:	08001caf 	.word	0x08001caf
 8001bc4:	08001caf 	.word	0x08001caf
 8001bc8:	08001caf 	.word	0x08001caf
 8001bcc:	08001caf 	.word	0x08001caf
 8001bd0:	08001caf 	.word	0x08001caf
 8001bd4:	08001c0d 	.word	0x08001c0d
 8001bd8:	08001caf 	.word	0x08001caf
 8001bdc:	08001caf 	.word	0x08001caf
 8001be0:	08001caf 	.word	0x08001caf
 8001be4:	08001c19 	.word	0x08001c19
 8001be8:	08001caf 	.word	0x08001caf
 8001bec:	08001c25 	.word	0x08001c25
 8001bf0:	08001c41 	.word	0x08001c41
                    *output_pointer++ = '\b';
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60fa      	str	r2, [r7, #12]
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	701a      	strb	r2, [r3, #0]
                    break;
 8001bfe:	e02c      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60fa      	str	r2, [r7, #12]
 8001c06:	220c      	movs	r2, #12
 8001c08:	701a      	strb	r2, [r3, #0]
                    break;
 8001c0a:	e026      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60fa      	str	r2, [r7, #12]
 8001c12:	220a      	movs	r2, #10
 8001c14:	701a      	strb	r2, [r3, #0]
                    break;
 8001c16:	e020      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60fa      	str	r2, [r7, #12]
 8001c1e:	220d      	movs	r2, #13
 8001c20:	701a      	strb	r2, [r3, #0]
                    break;
 8001c22:	e01a      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60fa      	str	r2, [r7, #12]
 8001c2a:	2209      	movs	r2, #9
 8001c2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c2e:	e014      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	60f9      	str	r1, [r7, #12]
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c3e:	e00c      	b.n	8001c5a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	461a      	mov	r2, r3
 8001c46:	6a39      	ldr	r1, [r7, #32]
 8001c48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c4a:	f7ff fe1b 	bl	8001884 <utf16_literal_to_utf8>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d02c      	beq.n	8001cb2 <parse_string+0x25e>
                    break;
 8001c58:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5e:	4413      	add	r3, r2
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	f4ff af66 	bcc.w	8001b38 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2210      	movs	r2, #16
 8001c76:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a3a      	ldr	r2, [r7, #32]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	609a      	str	r2, [r3, #8]

    return true;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e020      	b.n	8001cdc <parse_string+0x288>
        goto fail;
 8001c9a:	bf00      	nop
 8001c9c:	e00a      	b.n	8001cb4 <parse_string+0x260>
                    goto fail;
 8001c9e:	bf00      	nop
 8001ca0:	e008      	b.n	8001cb4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001ca2:	bf00      	nop
 8001ca4:	e006      	b.n	8001cb4 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001ca6:	bf00      	nop
 8001ca8:	e004      	b.n	8001cb4 <parse_string+0x260>
                goto fail;
 8001caa:	bf00      	nop
 8001cac:	e002      	b.n	8001cb4 <parse_string+0x260>
                    goto fail;
 8001cae:	bf00      	nop
 8001cb0:	e000      	b.n	8001cb4 <parse_string+0x260>
                        goto fail;
 8001cb2:	bf00      	nop

fail:
    if (output != NULL)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	69f8      	ldr	r0, [r7, #28]
 8001cc0:	4798      	blx	r3
        output = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3728      	adds	r7, #40	@ 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <print_string_ptr+0x28>
    {
        return false;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e110      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d111      	bne.n	8001d36 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001d12:	2103      	movs	r1, #3
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fb5f 	bl	80013d8 <ensure>
 8001d1a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <print_string_ptr+0x42>
        {
            return false;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e103      	b.n	8001f2e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4a83      	ldr	r2, [pc, #524]	@ (8001f38 <print_string_ptr+0x254>)
 8001d2a:	8811      	ldrh	r1, [r2, #0]
 8001d2c:	7892      	ldrb	r2, [r2, #2]
 8001d2e:	8019      	strh	r1, [r3, #0]
 8001d30:	709a      	strb	r2, [r3, #2]

        return true;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0fb      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e024      	b.n	8001d86 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b22      	cmp	r3, #34	@ 0x22
 8001d42:	dc0f      	bgt.n	8001d64 <print_string_ptr+0x80>
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	db13      	blt.n	8001d70 <print_string_ptr+0x8c>
 8001d48:	3b08      	subs	r3, #8
 8001d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f3c <print_string_ptr+0x258>)
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <print_string_ptr+0x84>
 8001d62:	e005      	b.n	8001d70 <print_string_ptr+0x8c>
 8001d64:	2b5c      	cmp	r3, #92	@ 0x5c
 8001d66:	d103      	bne.n	8001d70 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
                break;
 8001d6e:	e007      	b.n	8001d80 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	d802      	bhi.n	8001d7e <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3305      	adds	r3, #5
 8001d7c:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d7e:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1d6      	bne.n	8001d3c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3303      	adds	r3, #3
 8001da0:	4619      	mov	r1, r3
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff fb18 	bl	80013d8 <ensure>
 8001da8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <print_string_ptr+0xd0>
    {
        return false;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e0bc      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d117      	bne.n	8001dea <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2222      	movs	r2, #34	@ 0x22
 8001dbe:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00a fe2e 	bl	800ca2a <memcpy>
        output[output_length + 1] = '\"';
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2222      	movs	r2, #34	@ 0x22
 8001dd8:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]

        return true;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0a1      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2222      	movs	r2, #34	@ 0x22
 8001dee:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e086      	b.n	8001f0a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b1f      	cmp	r3, #31
 8001e02:	d90c      	bls.n	8001e1e <print_string_ptr+0x13a>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b22      	cmp	r3, #34	@ 0x22
 8001e0a:	d008      	beq.n	8001e1e <print_string_ptr+0x13a>
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e12:	d004      	beq.n	8001e1e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e06f      	b.n	8001efe <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	61ba      	str	r2, [r7, #24]
 8001e24:	225c      	movs	r2, #92	@ 0x5c
 8001e26:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b22      	cmp	r3, #34	@ 0x22
 8001e2e:	dc3d      	bgt.n	8001eac <print_string_ptr+0x1c8>
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	db59      	blt.n	8001ee8 <print_string_ptr+0x204>
 8001e34:	3b08      	subs	r3, #8
 8001e36:	2b1a      	cmp	r3, #26
 8001e38:	d856      	bhi.n	8001ee8 <print_string_ptr+0x204>
 8001e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e40 <print_string_ptr+0x15c>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001ec1 	.word	0x08001ec1
 8001e44:	08001ee1 	.word	0x08001ee1
 8001e48:	08001ed1 	.word	0x08001ed1
 8001e4c:	08001ee9 	.word	0x08001ee9
 8001e50:	08001ec9 	.word	0x08001ec9
 8001e54:	08001ed9 	.word	0x08001ed9
 8001e58:	08001ee9 	.word	0x08001ee9
 8001e5c:	08001ee9 	.word	0x08001ee9
 8001e60:	08001ee9 	.word	0x08001ee9
 8001e64:	08001ee9 	.word	0x08001ee9
 8001e68:	08001ee9 	.word	0x08001ee9
 8001e6c:	08001ee9 	.word	0x08001ee9
 8001e70:	08001ee9 	.word	0x08001ee9
 8001e74:	08001ee9 	.word	0x08001ee9
 8001e78:	08001ee9 	.word	0x08001ee9
 8001e7c:	08001ee9 	.word	0x08001ee9
 8001e80:	08001ee9 	.word	0x08001ee9
 8001e84:	08001ee9 	.word	0x08001ee9
 8001e88:	08001ee9 	.word	0x08001ee9
 8001e8c:	08001ee9 	.word	0x08001ee9
 8001e90:	08001ee9 	.word	0x08001ee9
 8001e94:	08001ee9 	.word	0x08001ee9
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001ee9 	.word	0x08001ee9
 8001ea0:	08001ee9 	.word	0x08001ee9
 8001ea4:	08001ee9 	.word	0x08001ee9
 8001ea8:	08001eb9 	.word	0x08001eb9
 8001eac:	2b5c      	cmp	r3, #92	@ 0x5c
 8001eae:	d11b      	bne.n	8001ee8 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	225c      	movs	r2, #92	@ 0x5c
 8001eb4:	701a      	strb	r2, [r3, #0]
                    break;
 8001eb6:	e022      	b.n	8001efe <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2222      	movs	r2, #34	@ 0x22
 8001ebc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ebe:	e01e      	b.n	8001efe <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2262      	movs	r2, #98	@ 0x62
 8001ec4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ec6:	e01a      	b.n	8001efe <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2266      	movs	r2, #102	@ 0x66
 8001ecc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ece:	e016      	b.n	8001efe <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	226e      	movs	r2, #110	@ 0x6e
 8001ed4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ed6:	e012      	b.n	8001efe <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2272      	movs	r2, #114	@ 0x72
 8001edc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ede:	e00e      	b.n	8001efe <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2274      	movs	r2, #116	@ 0x74
 8001ee4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ee6:	e00a      	b.n	8001efe <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4914      	ldr	r1, [pc, #80]	@ (8001f40 <print_string_ptr+0x25c>)
 8001ef0:	69b8      	ldr	r0, [r7, #24]
 8001ef2:	f00a fbdf 	bl	800c6b4 <siprintf>
                    output_pointer += 4;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	61bb      	str	r3, [r7, #24]
                    break;
 8001efc:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	3301      	adds	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f47f af74 	bne.w	8001dfc <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3301      	adds	r3, #1
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	2222      	movs	r2, #34	@ 0x22
 8001f1e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3302      	adds	r3, #2
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]

    return true;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	0800f174 	.word	0x0800f174
 8001f3c:	04000037 	.word	0x04000037
 8001f40:	0800f178 	.word	0x0800f178

08001f44 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fec5 	bl	8001ce4 <print_string_ptr>
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <buffer_skip_whitespace+0x16>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e02c      	b.n	8001fd8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <buffer_skip_whitespace+0x2c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d306      	bcc.n	8001f9e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	e021      	b.n	8001fd8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <buffer_skip_whitespace+0x5c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <buffer_skip_whitespace+0x5c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d9e9      	bls.n	8001f94 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d104      	bne.n	8001fd6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001fd6:	687b      	ldr	r3, [r7, #4]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <skip_utf8_bom+0x1e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <skip_utf8_bom+0x1e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <skip_utf8_bom+0x22>
    {
        return NULL;
 8002002:	2300      	movs	r3, #0
 8002004:	e01c      	b.n	8002040 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d018      	beq.n	800203e <skip_utf8_bom+0x5a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	1d1a      	adds	r2, r3, #4
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	d211      	bcs.n	800203e <skip_utf8_bom+0x5a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4413      	add	r3, r2
 8002024:	2203      	movs	r2, #3
 8002026:	4908      	ldr	r1, [pc, #32]	@ (8002048 <skip_utf8_bom+0x64>)
 8002028:	4618      	mov	r0, r3
 800202a:	f00a fc13 	bl	800c854 <strncmp>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	1cda      	adds	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800203e:	687b      	ldr	r3, [r7, #4]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	0800f180 	.word	0x0800f180

0800204c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	e00c      	b.n	800207c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7fe f8be 	bl	80001e4 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	6979      	ldr	r1, [r7, #20]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f805 	bl	8002084 <cJSON_ParseWithLengthOpts>
 800207a:	4603      	mov	r3, r0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	@ 0x38
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80020aa:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80020b0:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d042      	beq.n	8002142 <cJSON_ParseWithLengthOpts+0xbe>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03f      	beq.n	8002142 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80020ce:	4a39      	ldr	r2, [pc, #228]	@ (80021b4 <cJSON_ParseWithLengthOpts+0x130>)
 80020d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80020da:	4836      	ldr	r0, [pc, #216]	@ (80021b4 <cJSON_ParseWithLengthOpts+0x130>)
 80020dc:	f7ff f842 	bl	8001164 <cJSON_New_Item>
 80020e0:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 80020e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02e      	beq.n	8002146 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80020e8:	f107 0318 	add.w	r3, r7, #24
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff79 	bl	8001fe4 <skip_utf8_bom>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff35 	bl	8001f64 <buffer_skip_whitespace>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4619      	mov	r1, r3
 80020fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002100:	f000 f902 	bl	8002308 <parse_value>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01f      	beq.n	800214a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002110:	f107 0318 	add.w	r3, r7, #24
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff25 	bl	8001f64 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800211a:	6a3a      	ldr	r2, [r7, #32]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	429a      	cmp	r2, r3
 8002120:	d215      	bcs.n	800214e <cJSON_ParseWithLengthOpts+0xca>
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	441a      	add	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800213e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002140:	e031      	b.n	80021a6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002142:	bf00      	nop
 8002144:	e004      	b.n	8002150 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002146:	bf00      	nop
 8002148:	e002      	b.n	8002150 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800214a:	bf00      	nop
 800214c:	e000      	b.n	8002150 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800214e:	bf00      	nop

fail:
    if (item != NULL)
 8002150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002156:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002158:	f7ff f81a 	bl	8001190 <cJSON_Delete>
    }

    if (value != NULL)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800216a:	6a3a      	ldr	r2, [r7, #32]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	429a      	cmp	r2, r3
 8002170:	d202      	bcs.n	8002178 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e005      	b.n	8002184 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b01      	subs	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	441a      	add	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <cJSON_ParseWithLengthOpts+0x12c>)
 8002196:	461a      	mov	r2, r3
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021a0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3738      	adds	r7, #56	@ 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000204 	.word	0x20000204
 80021b4:	20000000 	.word	0x20000000

080021b8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff41 	bl	800204c <cJSON_ParseWithOpts>
 80021ca:	4603      	mov	r3, r0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	@ 0x38
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	2224      	movs	r2, #36	@ 0x24
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00a fb29 	bl	800c844 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	@ (80022e4 <print+0x110>)
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4610      	mov	r0, r2
 80021fc:	4798      	blx	r3
 80021fe:	4603      	mov	r3, r0
 8002200:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002202:	4b38      	ldr	r3, [pc, #224]	@ (80022e4 <print+0x110>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002212:	ca07      	ldmia	r2, {r0, r1, r2}
 8002214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d042      	beq.n	80022a4 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	4619      	mov	r1, r3
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f95b 	bl	80024e0 <print_value>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03b      	beq.n	80022a8 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f969 	bl	800150c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	6938      	ldr	r0, [r7, #16]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	3201      	adds	r2, #1
 800224c:	4611      	mov	r1, r2
 800224e:	4798      	blx	r3
 8002250:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8002252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d029      	beq.n	80022ac <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e020      	b.n	80022a0 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	3201      	adds	r2, #1
 8002266:	4610      	mov	r0, r2
 8002268:	4798      	blx	r3
 800226a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800226c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01e      	beq.n	80022b0 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002272:	6939      	ldr	r1, [r7, #16]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4293      	cmp	r3, r2
 800227c:	bf28      	it	cs
 800227e:	4613      	movcs	r3, r2
 8002280:	461a      	mov	r2, r3
 8002282:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002284:	f00a fbd1 	bl	800ca2a <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800228c:	4413      	add	r3, r2
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4610      	mov	r0, r2
 800229a:	4798      	blx	r3
        buffer->buffer = NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80022a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a2:	e01a      	b.n	80022da <print+0x106>
        goto fail;
 80022a4:	bf00      	nop
 80022a6:	e004      	b.n	80022b2 <print+0xde>
        goto fail;
 80022a8:	bf00      	nop
 80022aa:	e002      	b.n	80022b2 <print+0xde>
            goto fail;
 80022ac:	bf00      	nop
 80022ae:	e000      	b.n	80022b2 <print+0xde>
            goto fail;
 80022b0:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4610      	mov	r0, r2
 80022c0:	4798      	blx	r3
        buffer->buffer = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 80022c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <print+0x104>
    {
        hooks->deallocate(printed);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80022d2:	4798      	blx	r3
        printed = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3738      	adds	r7, #56	@ 0x38
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800f348 	.word	0x0800f348

080022e8 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <cJSON_Print+0x1c>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff6d 	bl	80021d4 <print>
 80022fa:	4603      	mov	r3, r0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000000 	.word	0x20000000

08002308 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <parse_value+0x18>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <parse_value+0x1c>
    {
        return false; /* no input */
 8002320:	2300      	movs	r3, #0
 8002322:	e0d2      	b.n	80024ca <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01d      	beq.n	8002366 <parse_value+0x5e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	1d1a      	adds	r2, r3, #4
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d816      	bhi.n	8002366 <parse_value+0x5e>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4413      	add	r3, r2
 8002342:	2204      	movs	r2, #4
 8002344:	4963      	ldr	r1, [pc, #396]	@ (80024d4 <parse_value+0x1cc>)
 8002346:	4618      	mov	r0, r3
 8002348:	f00a fa84 	bl	800c854 <strncmp>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2204      	movs	r2, #4
 8002356:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	1d1a      	adds	r2, r3, #4
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	609a      	str	r2, [r3, #8]
        return true;
 8002362:	2301      	movs	r3, #1
 8002364:	e0b1      	b.n	80024ca <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01d      	beq.n	80023a8 <parse_value+0xa0>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	1d5a      	adds	r2, r3, #5
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d816      	bhi.n	80023a8 <parse_value+0xa0>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4413      	add	r3, r2
 8002384:	2205      	movs	r2, #5
 8002386:	4954      	ldr	r1, [pc, #336]	@ (80024d8 <parse_value+0x1d0>)
 8002388:	4618      	mov	r0, r3
 800238a:	f00a fa63 	bl	800c854 <strncmp>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	1d5a      	adds	r2, r3, #5
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	609a      	str	r2, [r3, #8]
        return true;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e090      	b.n	80024ca <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <parse_value+0xe8>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	1d1a      	adds	r2, r3, #4
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d819      	bhi.n	80023f0 <parse_value+0xe8>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	2204      	movs	r2, #4
 80023c8:	4944      	ldr	r1, [pc, #272]	@ (80024dc <parse_value+0x1d4>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00a fa42 	bl	800c854 <strncmp>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	609a      	str	r2, [r3, #8]
        return true;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e06c      	b.n	80024ca <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d013      	beq.n	800241e <parse_value+0x116>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20d      	bcs.n	800241e <parse_value+0x116>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b22      	cmp	r3, #34	@ 0x22
 8002410:	d105      	bne.n	800241e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fb1d 	bl	8001a54 <parse_string>
 800241a:	4603      	mov	r3, r0
 800241c:	e055      	b.n	80024ca <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d023      	beq.n	800246c <parse_value+0x164>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d21d      	bcs.n	800246c <parse_value+0x164>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b2d      	cmp	r3, #45	@ 0x2d
 800243e:	d00f      	beq.n	8002460 <parse_value+0x158>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b2f      	cmp	r3, #47	@ 0x2f
 800244e:	d90d      	bls.n	800246c <parse_value+0x164>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b39      	cmp	r3, #57	@ 0x39
 800245e:	d805      	bhi.n	800246c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe feec 	bl	8001240 <parse_number>
 8002468:	4603      	mov	r3, r0
 800246a:	e02e      	b.n	80024ca <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <parse_value+0x192>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d20d      	bcs.n	800249a <parse_value+0x192>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b5b      	cmp	r3, #91	@ 0x5b
 800248c:	d105      	bne.n	800249a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f909 	bl	80026a8 <parse_array>
 8002496:	4603      	mov	r3, r0
 8002498:	e017      	b.n	80024ca <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <parse_value+0x1c0>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d20d      	bcs.n	80024c8 <parse_value+0x1c0>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b7b      	cmp	r3, #123	@ 0x7b
 80024ba:	d105      	bne.n	80024c8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa3c 	bl	800293c <parse_object>
 80024c4:	4603      	mov	r3, r0
 80024c6:	e000      	b.n	80024ca <parse_value+0x1c2>
    }

    return false;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	0800f154 	.word	0x0800f154
 80024d8:	0800f184 	.word	0x0800f184
 80024dc:	0800f18c 	.word	0x0800f18c

080024e0 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <print_value+0x1a>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <print_value+0x1e>
    {
        return false;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e0c9      	b.n	8002692 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	f000 808e 	beq.w	8002626 <print_value+0x146>
 800250a:	2b80      	cmp	r3, #128	@ 0x80
 800250c:	f300 80c0 	bgt.w	8002690 <print_value+0x1b0>
 8002510:	2b20      	cmp	r3, #32
 8002512:	dc49      	bgt.n	80025a8 <print_value+0xc8>
 8002514:	2b00      	cmp	r3, #0
 8002516:	f340 80bb 	ble.w	8002690 <print_value+0x1b0>
 800251a:	3b01      	subs	r3, #1
 800251c:	2b1f      	cmp	r3, #31
 800251e:	f200 80b7 	bhi.w	8002690 <print_value+0x1b0>
 8002522:	a201      	add	r2, pc, #4	@ (adr r2, 8002528 <print_value+0x48>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	080025d3 	.word	0x080025d3
 800252c:	080025f7 	.word	0x080025f7
 8002530:	08002691 	.word	0x08002691
 8002534:	080025af 	.word	0x080025af
 8002538:	08002691 	.word	0x08002691
 800253c:	08002691 	.word	0x08002691
 8002540:	08002691 	.word	0x08002691
 8002544:	0800261b 	.word	0x0800261b
 8002548:	08002691 	.word	0x08002691
 800254c:	08002691 	.word	0x08002691
 8002550:	08002691 	.word	0x08002691
 8002554:	08002691 	.word	0x08002691
 8002558:	08002691 	.word	0x08002691
 800255c:	08002691 	.word	0x08002691
 8002560:	08002691 	.word	0x08002691
 8002564:	0800266d 	.word	0x0800266d
 8002568:	08002691 	.word	0x08002691
 800256c:	08002691 	.word	0x08002691
 8002570:	08002691 	.word	0x08002691
 8002574:	08002691 	.word	0x08002691
 8002578:	08002691 	.word	0x08002691
 800257c:	08002691 	.word	0x08002691
 8002580:	08002691 	.word	0x08002691
 8002584:	08002691 	.word	0x08002691
 8002588:	08002691 	.word	0x08002691
 800258c:	08002691 	.word	0x08002691
 8002590:	08002691 	.word	0x08002691
 8002594:	08002691 	.word	0x08002691
 8002598:	08002691 	.word	0x08002691
 800259c:	08002691 	.word	0x08002691
 80025a0:	08002691 	.word	0x08002691
 80025a4:	08002679 	.word	0x08002679
 80025a8:	2b40      	cmp	r3, #64	@ 0x40
 80025aa:	d06b      	beq.n	8002684 <print_value+0x1a4>
 80025ac:	e070      	b.n	8002690 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80025ae:	2105      	movs	r1, #5
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f7fe ff11 	bl	80013d8 <ensure>
 80025b6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <print_value+0xe2>
            {
                return false;
 80025be:	2300      	movs	r3, #0
 80025c0:	e067      	b.n	8002692 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a35      	ldr	r2, [pc, #212]	@ (800269c <print_value+0x1bc>)
 80025c6:	6810      	ldr	r0, [r2, #0]
 80025c8:	6018      	str	r0, [r3, #0]
 80025ca:	7912      	ldrb	r2, [r2, #4]
 80025cc:	711a      	strb	r2, [r3, #4]
            return true;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e05f      	b.n	8002692 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80025d2:	2106      	movs	r1, #6
 80025d4:	6838      	ldr	r0, [r7, #0]
 80025d6:	f7fe feff 	bl	80013d8 <ensure>
 80025da:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <print_value+0x106>
            {
                return false;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e055      	b.n	8002692 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a2d      	ldr	r2, [pc, #180]	@ (80026a0 <print_value+0x1c0>)
 80025ea:	6810      	ldr	r0, [r2, #0]
 80025ec:	6018      	str	r0, [r3, #0]
 80025ee:	8892      	ldrh	r2, [r2, #4]
 80025f0:	809a      	strh	r2, [r3, #4]
            return true;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e04d      	b.n	8002692 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80025f6:	2105      	movs	r1, #5
 80025f8:	6838      	ldr	r0, [r7, #0]
 80025fa:	f7fe feed 	bl	80013d8 <ensure>
 80025fe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <print_value+0x12a>
            {
                return false;
 8002606:	2300      	movs	r3, #0
 8002608:	e043      	b.n	8002692 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a25      	ldr	r2, [pc, #148]	@ (80026a4 <print_value+0x1c4>)
 800260e:	6810      	ldr	r0, [r2, #0]
 8002610:	6018      	str	r0, [r3, #0]
 8002612:	7912      	ldrb	r2, [r2, #4]
 8002614:	711a      	strb	r2, [r3, #4]
            return true;
 8002616:	2301      	movs	r3, #1
 8002618:	e03b      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe ffdf 	bl	80015e0 <print_number>
 8002622:	4603      	mov	r3, r0
 8002624:	e035      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <print_value+0x156>
            {
                return false;
 8002632:	2300      	movs	r3, #0
 8002634:	e02d      	b.n	8002692 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fdd2 	bl	80001e4 <strlen>
 8002640:	4603      	mov	r3, r0
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	6838      	ldr	r0, [r7, #0]
 800264a:	f7fe fec5 	bl	80013d8 <ensure>
 800264e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <print_value+0x17a>
            {
                return false;
 8002656:	2300      	movs	r3, #0
 8002658:	e01b      	b.n	8002692 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4619      	mov	r1, r3
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f00a f9e1 	bl	800ca2a <memcpy>
            return true;
 8002668:	2301      	movs	r3, #1
 800266a:	e012      	b.n	8002692 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fc68 	bl	8001f44 <print_string>
 8002674:	4603      	mov	r3, r0
 8002676:	e00c      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8d8 	bl	8002830 <print_array>
 8002680:	4603      	mov	r3, r0
 8002682:	e006      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa64 	bl	8002b54 <print_object>
 800268c:	4603      	mov	r3, r0
 800268e:	e000      	b.n	8002692 <print_value+0x1b2>

        default:
            return false;
 8002690:	2300      	movs	r3, #0
    }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	0800f154 	.word	0x0800f154
 80026a0:	0800f184 	.word	0x0800f184
 80026a4:	0800f18c 	.word	0x0800f18c

080026a8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c2:	d301      	bcc.n	80026c8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80026c4:	2300      	movs	r3, #0
 80026c6:	e0af      	b.n	8002828 <parse_array+0x180>
    }
    input_buffer->depth++;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b5b      	cmp	r3, #91	@ 0x5b
 80026e0:	f040 8094 	bne.w	800280c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f7ff fc38 	bl	8001f64 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <parse_array+0x6e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d207      	bcs.n	8002716 <parse_array+0x6e>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b5d      	cmp	r3, #93	@ 0x5d
 8002714:	d061      	beq.n	80027da <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <parse_array+0x80>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d305      	bcc.n	8002734 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	609a      	str	r2, [r3, #8]
        goto fail;
 8002732:	e072      	b.n	800281a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3310      	adds	r3, #16
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fd0e 	bl	8001164 <cJSON_New_Item>
 8002748:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d05f      	beq.n	8002810 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e007      	b.n	8002770 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	f7ff fbf2 	bl	8001f64 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	6938      	ldr	r0, [r7, #16]
 8002784:	f7ff fdc0 	bl	8002308 <parse_value>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d042      	beq.n	8002814 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800278e:	6838      	ldr	r0, [r7, #0]
 8002790:	f7ff fbe8 	bl	8001f64 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <parse_array+0x10e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d207      	bcs.n	80027b6 <parse_array+0x10e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4413      	add	r3, r2
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80027b4:	d0c3      	beq.n	800273e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02d      	beq.n	8002818 <parse_array+0x170>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d227      	bcs.n	8002818 <parse_array+0x170>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4413      	add	r3, r2
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b5d      	cmp	r3, #93	@ 0x5d
 80027d6:	d11f      	bne.n	8002818 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80027d8:	e000      	b.n	80027dc <parse_array+0x134>
        goto success;
 80027da:	bf00      	nop
    input_buffer->depth--;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <parse_array+0x14a>
        head->prev = current_item;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	60da      	str	r2, [r3, #12]
    item->child = head;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	609a      	str	r2, [r3, #8]

    return true;
 8002808:	2301      	movs	r3, #1
 800280a:	e00d      	b.n	8002828 <parse_array+0x180>
        goto fail;
 800280c:	bf00      	nop
 800280e:	e004      	b.n	800281a <parse_array+0x172>
            goto fail; /* allocation failure */
 8002810:	bf00      	nop
 8002812:	e002      	b.n	800281a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002814:	bf00      	nop
 8002816:	e000      	b.n	800281a <parse_array+0x172>
        goto fail; /* expected end of array */
 8002818:	bf00      	nop

fail:
    if (head != NULL)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f7fe fcb5 	bl	8001190 <cJSON_Delete>
    }

    return false;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <print_array+0x22>
    {
        return false;
 800284e:	2300      	movs	r3, #0
 8002850:	e070      	b.n	8002934 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8002852:	2101      	movs	r1, #1
 8002854:	6838      	ldr	r0, [r7, #0]
 8002856:	f7fe fdbf 	bl	80013d8 <ensure>
 800285a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <print_array+0x36>
    {
        return false;
 8002862:	2300      	movs	r3, #0
 8002864:	e066      	b.n	8002934 <print_array+0x104>
    }

    *output_pointer = '[';
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	225b      	movs	r2, #91	@ 0x5b
 800286a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8002880:	e03d      	b.n	80028fe <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	6938      	ldr	r0, [r7, #16]
 8002886:	f7ff fe2b 	bl	80024e0 <print_value>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <print_array+0x64>
        {
            return false;
 8002890:	2300      	movs	r3, #0
 8002892:	e04f      	b.n	8002934 <print_array+0x104>
        }
        update_offset(output_buffer);
 8002894:	6838      	ldr	r0, [r7, #0]
 8002896:	f7fe fe39 	bl	800150c <update_offset>
        if (current_element->next)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02a      	beq.n	80028f8 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <print_array+0x7e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e000      	b.n	80028b0 <print_array+0x80>
 80028ae:	2301      	movs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4619      	mov	r1, r3
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	f7fe fd8d 	bl	80013d8 <ensure>
 80028be:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <print_array+0x9a>
            {
                return false;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e034      	b.n	8002934 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	617a      	str	r2, [r7, #20]
 80028d0:	222c      	movs	r2, #44	@ 0x2c
 80028d2:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	617a      	str	r2, [r7, #20]
 80028e2:	2220      	movs	r2, #32
 80028e4:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	441a      	add	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1be      	bne.n	8002882 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002904:	2102      	movs	r1, #2
 8002906:	6838      	ldr	r0, [r7, #0]
 8002908:	f7fe fd66 	bl	80013d8 <ensure>
 800290c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <print_array+0xe8>
    {
        return false;
 8002914:	2300      	movs	r3, #0
 8002916:	e00d      	b.n	8002934 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	617a      	str	r2, [r7, #20]
 800291e:	225d      	movs	r2, #93	@ 0x5d
 8002920:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	60da      	str	r2, [r3, #12]

    return true;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002956:	d301      	bcc.n	800295c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002958:	2300      	movs	r3, #0
 800295a:	e0f7      	b.n	8002b4c <parse_object+0x210>
    }
    input_buffer->depth++;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80db 	beq.w	8002b24 <parse_object+0x1e8>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	f080 80d4 	bcs.w	8002b24 <parse_object+0x1e8>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4413      	add	r3, r2
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b7b      	cmp	r3, #123	@ 0x7b
 800298a:	f040 80cb 	bne.w	8002b24 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	f7ff fae3 	bl	8001f64 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <parse_object+0x86>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d208      	bcs.n	80029c2 <parse_object+0x86>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b7d      	cmp	r3, #125	@ 0x7d
 80029be:	f000 8098 	beq.w	8002af2 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <parse_object+0x98>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d305      	bcc.n	80029e0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	609a      	str	r2, [r3, #8]
        goto fail;
 80029de:	e0ae      	b.n	8002b3e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3310      	adds	r3, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fbb8 	bl	8001164 <cJSON_New_Item>
 80029f4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8095 	beq.w	8002b28 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e007      	b.n	8002a1e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8083 	beq.w	8002b2c <parse_object+0x1f0>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d27b      	bcs.n	8002b2c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f7ff fa90 	bl	8001f64 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	6938      	ldr	r0, [r7, #16]
 8002a48:	f7ff f804 	bl	8001a54 <parse_string>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d06e      	beq.n	8002b30 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	f7ff fa86 	bl	8001f64 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d063      	beq.n	8002b34 <parse_object+0x1f8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d25d      	bcs.n	8002b34 <parse_object+0x1f8>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b3a      	cmp	r3, #58	@ 0x3a
 8002a86:	d155      	bne.n	8002b34 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f7ff fa66 	bl	8001f64 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	6938      	ldr	r0, [r7, #16]
 8002a9c:	f7ff fc34 	bl	8002308 <parse_value>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d048      	beq.n	8002b38 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	f7ff fa5c 	bl	8001f64 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <parse_object+0x192>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d207      	bcs.n	8002ace <parse_object+0x192>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b2c      	cmp	r3, #44	@ 0x2c
 8002acc:	d08d      	beq.n	80029ea <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d033      	beq.n	8002b3c <parse_object+0x200>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d22d      	bcs.n	8002b3c <parse_object+0x200>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4413      	add	r3, r2
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b7d      	cmp	r3, #125	@ 0x7d
 8002aee:	d125      	bne.n	8002b3c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002af0:	e000      	b.n	8002af4 <parse_object+0x1b8>
        goto success; /* empty object */
 8002af2:	bf00      	nop
    input_buffer->depth--;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <parse_object+0x1ce>
        head->prev = current_item;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	609a      	str	r2, [r3, #8]
    return true;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e013      	b.n	8002b4c <parse_object+0x210>
        goto fail; /* not an object */
 8002b24:	bf00      	nop
 8002b26:	e00a      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002b28:	bf00      	nop
 8002b2a:	e008      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002b2c:	bf00      	nop
 8002b2e:	e006      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002b30:	bf00      	nop
 8002b32:	e004      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* invalid object */
 8002b34:	bf00      	nop
 8002b36:	e002      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <parse_object+0x202>
        goto fail; /* expected end of object */
 8002b3c:	bf00      	nop

fail:
    if (head != NULL)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002b44:	6978      	ldr	r0, [r7, #20]
 8002b46:	f7fe fb23 	bl	8001190 <cJSON_Delete>
    }

    return false;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <print_object+0x22>
    {
        return false;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e108      	b.n	8002d88 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <print_object+0x2e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e000      	b.n	8002b84 <print_object+0x30>
 8002b82:	2301      	movs	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f7fe fc23 	bl	80013d8 <ensure>
 8002b92:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <print_object+0x4a>
    {
        return false;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e0f4      	b.n	8002d88 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	61fa      	str	r2, [r7, #28]
 8002ba4:	227b      	movs	r2, #123	@ 0x7b
 8002ba6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	61fa      	str	r2, [r7, #28]
 8002bc0:	220a      	movs	r2, #10
 8002bc2:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	441a      	add	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002bd0:	e0a0      	b.n	8002d14 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d022      	beq.n	8002c20 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4619      	mov	r1, r3
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	f7fe fbf9 	bl	80013d8 <ensure>
 8002be6:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <print_object+0x9e>
            {
                return false;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e0ca      	b.n	8002d88 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e007      	b.n	8002c08 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	61fa      	str	r2, [r7, #28]
 8002bfe:	2209      	movs	r2, #9
 8002c00:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3f2      	bcc.n	8002bf8 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	441a      	add	r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f85c 	bl	8001ce4 <print_string_ptr>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <print_object+0xe2>
        {
            return false;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e0a8      	b.n	8002d88 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	f7fe fc68 	bl	800150c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <print_object+0xf4>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e000      	b.n	8002c4a <print_object+0xf6>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	f7fe fbc2 	bl	80013d8 <ensure>
 8002c54:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <print_object+0x10c>
        {
            return false;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e093      	b.n	8002d88 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	61fa      	str	r2, [r7, #28]
 8002c66:	223a      	movs	r2, #58	@ 0x3a
 8002c68:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	61fa      	str	r2, [r7, #28]
 8002c78:	2209      	movs	r2, #9
 8002c7a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	441a      	add	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	69b8      	ldr	r0, [r7, #24]
 8002c8c:	f7ff fc28 	bl	80024e0 <print_value>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <print_object+0x146>
        {
            return false;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e076      	b.n	8002d88 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c9a:	6838      	ldr	r0, [r7, #0]
 8002c9c:	f7fe fc36 	bl	800150c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <print_object+0x158>
 8002ca8:	2201      	movs	r2, #1
 8002caa:	e000      	b.n	8002cae <print_object+0x15a>
 8002cac:	2200      	movs	r2, #0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <print_object+0x166>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <print_object+0x168>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f7fe fb86 	bl	80013d8 <ensure>
 8002ccc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <print_object+0x184>
        {
            return false;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e057      	b.n	8002d88 <print_object+0x234>
        }
        if (current_item->next)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	61fa      	str	r2, [r7, #28]
 8002ce6:	222c      	movs	r2, #44	@ 0x2c
 8002ce8:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	61fa      	str	r2, [r7, #28]
 8002cf8:	220a      	movs	r2, #10
 8002cfa:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	441a      	add	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f47f af5b 	bne.w	8002bd2 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <print_object+0x1d8>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	e000      	b.n	8002d2e <print_object+0x1da>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6838      	ldr	r0, [r7, #0]
 8002d32:	f7fe fb51 	bl	80013d8 <ensure>
 8002d36:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <print_object+0x1ee>
    {
        return false;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e022      	b.n	8002d88 <print_object+0x234>
    }
    if (output_buffer->format)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	e007      	b.n	8002d60 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	61fa      	str	r2, [r7, #28]
 8002d56:	2209      	movs	r2, #9
 8002d58:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3f1      	bcc.n	8002d50 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	61fa      	str	r2, [r7, #28]
 8002d72:	227d      	movs	r2, #125	@ 0x7d
 8002d74:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	60da      	str	r2, [r3, #12]

    return true;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <get_object_item+0x1c>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <get_object_item+0x20>
    {
        return NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e033      	b.n	8002e18 <get_object_item+0x88>
    }

    current_element = object->child;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dbc:	e002      	b.n	8002dc4 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01c      	beq.n	8002e04 <get_object_item+0x74>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d018      	beq.n	8002e04 <get_object_item+0x74>
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68b8      	ldr	r0, [r7, #8]
 8002dda:	f7fd f9f9 	bl	80001d0 <strcmp>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ec      	bne.n	8002dbe <get_object_item+0x2e>
 8002de4:	e00e      	b.n	8002e04 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <get_object_item+0x74>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4619      	mov	r1, r3
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f7fe f91f 	bl	800103c <case_insensitive_strcmp>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <get_object_item+0x82>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <get_object_item+0x86>
        return NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <get_object_item+0x88>
    }

    return current_element;
 8002e16:	697b      	ldr	r3, [r7, #20]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffae 	bl	8002d90 <get_object_item>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <add_item_to_array+0x22>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <add_item_to_array+0x22>
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d101      	bne.n	8002e86 <add_item_to_array+0x26>
    {
        return false;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e01e      	b.n	8002ec4 <add_item_to_array+0x64>
    }

    child = array->child;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e00d      	b.n	8002ec2 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ffc2 	bl	8002e3e <suffix_object>
            array->child->prev = item;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002ed4:	687b      	ldr	r3, [r7, #4]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <add_item_to_object+0x30>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <add_item_to_object+0x30>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <add_item_to_object+0x30>
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d101      	bne.n	8002f16 <add_item_to_object+0x34>
    {
        return false;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e036      	b.n	8002f84 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002f1c:	68b8      	ldr	r0, [r7, #8]
 8002f1e:	f7ff ffd5 	bl	8002ecc <cast_away_const>
 8002f22:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e00e      	b.n	8002f4e <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	68b8      	ldr	r0, [r7, #8]
 8002f34:	f7fe f8ee 	bl	8001114 <cJSON_strdup>
 8002f38:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <add_item_to_object+0x62>
        {
            return false;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e01f      	b.n	8002f84 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f4c:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <add_item_to_object+0x8c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6a12      	ldr	r2, [r2, #32]
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4798      	blx	r3
    }

    item->string = new_key;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ff6f 	bl	8002e60 <add_item_to_array>
 8002f82:	4603      	mov	r3, r0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <cJSON_AddItemToObject+0x28>)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff ff9d 	bl	8002ee2 <add_item_to_object>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002fc6:	ed97 0b00 	vldr	d0, [r7]
 8002fca:	f000 f83d 	bl	8003048 <cJSON_CreateNumber>
 8002fce:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <cJSON_AddNumberToObject+0x44>)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ff81 	bl	8002ee2 <add_item_to_object>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	e003      	b.n	8002ff2 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7fe f8d0 	bl	8001190 <cJSON_Delete>
    return NULL;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000

08003000 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f863 	bl	80030d8 <cJSON_CreateString>
 8003012:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8003014:	2300      	movs	r3, #0
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <cJSON_AddStringToObject+0x40>)
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff ff5f 	bl	8002ee2 <add_item_to_object>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	e003      	b.n	8003036 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7fe f8ae 	bl	8001190 <cJSON_Delete>
    return NULL;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000
 8003044:	00000000 	.word	0x00000000

08003048 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003052:	481f      	ldr	r0, [pc, #124]	@ (80030d0 <cJSON_CreateNumber+0x88>)
 8003054:	f7fe f886 	bl	8001164 <cJSON_New_Item>
 8003058:	60f8      	str	r0, [r7, #12]
    if(item)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02c      	beq.n	80030ba <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2208      	movs	r2, #8
 8003064:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800306c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8003070:	a315      	add	r3, pc, #84	@ (adr r3, 80030c8 <cJSON_CreateNumber+0x80>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800307a:	f7fd fd53 	bl	8000b24 <__aeabi_dcmpge>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800308a:	615a      	str	r2, [r3, #20]
 800308c:	e015      	b.n	80030ba <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <cJSON_CreateNumber+0x8c>)
 8003094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003098:	f7fd fd3a 	bl	8000b10 <__aeabi_dcmple>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030a8:	615a      	str	r2, [r3, #20]
 80030aa:	e006      	b.n	80030ba <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80030ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030b0:	f7fd fd62 	bl	8000b78 <__aeabi_d2iz>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f3af 8000 	nop.w
 80030c8:	ffc00000 	.word	0xffc00000
 80030cc:	41dfffff 	.word	0x41dfffff
 80030d0:	20000000 	.word	0x20000000
 80030d4:	c1e00000 	.word	0xc1e00000

080030d8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80030e0:	480f      	ldr	r0, [pc, #60]	@ (8003120 <cJSON_CreateString+0x48>)
 80030e2:	f7fe f83f 	bl	8001164 <cJSON_New_Item>
 80030e6:	60f8      	str	r0, [r7, #12]
    if(item)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2210      	movs	r2, #16
 80030f2:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80030f4:	490a      	ldr	r1, [pc, #40]	@ (8003120 <cJSON_CreateString+0x48>)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe f80c 	bl	8001114 <cJSON_strdup>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fe f840 	bl	8001190 <cJSON_Delete>
            return NULL;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8003114:	68fb      	ldr	r3, [r7, #12]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000

08003124 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800312a:	4807      	ldr	r0, [pc, #28]	@ (8003148 <cJSON_CreateObject+0x24>)
 800312c:	f7fe f81a 	bl	8001164 <cJSON_New_Item>
 8003130:	6078      	str	r0, [r7, #4]
    if (item)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	@ 0x40
 800313c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800313e:	687b      	ldr	r3, [r7, #4]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000000 	.word	0x20000000

0800314c <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <cJSON_IsTrue+0x12>
    {
        return false;
 800315a:	2300      	movs	r3, #0
 800315c:	e007      	b.n	800316e <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <cJSON_IsNumber+0x12>
    {
        return false;
 8003188:	2300      	movs	r3, #0
 800318a:	e007      	b.n	800319c <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b08      	cmp	r3, #8
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <cJSON_free+0x1c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
    object = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	607b      	str	r3, [r7, #4]
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000000 	.word	0x20000000

080031c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <MX_DMA_Init+0x4c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003214 <MX_DMA_Init+0x4c>)
 80031d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b0d      	ldr	r3, [pc, #52]	@ (8003214 <MX_DMA_Init+0x4c>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2105      	movs	r1, #5
 80031ee:	2010      	movs	r0, #16
 80031f0:	f002 f87a 	bl	80052e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80031f4:	2010      	movs	r0, #16
 80031f6:	f002 f893 	bl	8005320 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2105      	movs	r1, #5
 80031fe:	2011      	movs	r0, #17
 8003200:	f002 f872 	bl	80052e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003204:	2011      	movs	r0, #17
 8003206:	f002 f88b 	bl	8005320 <HAL_NVIC_EnableIRQ>

}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800

08003218 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800321e:	2306      	movs	r3, #6
 8003220:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003222:	2306      	movs	r3, #6
 8003224:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	83fb      	strh	r3, [r7, #30]
 800322e:	2300      	movs	r3, #0
 8003230:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 8003232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003236:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800323c:	4ba1      	ldr	r3, [pc, #644]	@ (80034c4 <EE_Init+0x2ac>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8003242:	4ba1      	ldr	r3, [pc, #644]	@ (80034c8 <EE_Init+0x2b0>)
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8003248:	2300      	movs	r3, #0
 800324a:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 800324c:	230a      	movs	r3, #10
 800324e:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8003250:	2301      	movs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003254:	2302      	movs	r3, #2
 8003256:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8003258:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800325a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <EE_Init+0x62>
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003266:	f280 8196 	bge.w	8003596 <EE_Init+0x37e>
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80f8 	beq.w	8003460 <EE_Init+0x248>
 8003270:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003274:	4293      	cmp	r3, r2
 8003276:	d050      	beq.n	800331a <EE_Init+0x102>
 8003278:	e18d      	b.n	8003596 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800327a:	8c3b      	ldrh	r3, [r7, #32]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d116      	bne.n	80032ae <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8003280:	4890      	ldr	r0, [pc, #576]	@ (80034c4 <EE_Init+0x2ac>)
 8003282:	f000 f9a9 	bl	80035d8 <EE_VerifyPageFullyErased>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 818e 	bne.w	80035aa <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800328e:	f107 0214 	add.w	r2, r7, #20
 8003292:	463b      	mov	r3, r7
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f002 fe74 	bl	8005f84 <HAL_FLASHEx_Erase>
 800329c:	4603      	mov	r3, r0
 800329e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80032a0:	7efb      	ldrb	r3, [r7, #27]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8181 	beq.w	80035aa <EE_Init+0x392>
          {
            return FlashStatus;
 80032a8:	7efb      	ldrb	r3, [r7, #27]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	e185      	b.n	80035ba <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80032ae:	8c3b      	ldrh	r3, [r7, #32]
 80032b0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d125      	bne.n	8003304 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80032b8:	4882      	ldr	r0, [pc, #520]	@ (80034c4 <EE_Init+0x2ac>)
 80032ba:	f000 f98d 	bl	80035d8 <EE_VerifyPageFullyErased>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10e      	bne.n	80032e2 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80032c4:	f107 0214 	add.w	r2, r7, #20
 80032c8:	463b      	mov	r3, r7
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 fe59 	bl	8005f84 <HAL_FLASHEx_Erase>
 80032d2:	4603      	mov	r3, r0
 80032d4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80032d6:	7efb      	ldrb	r3, [r7, #27]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <EE_Init+0xca>
          {
            return FlashStatus;
 80032dc:	7efb      	ldrb	r3, [r7, #27]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	e16b      	b.n	80035ba <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	4977      	ldr	r1, [pc, #476]	@ (80034c8 <EE_Init+0x2b0>)
 80032ec:	2001      	movs	r0, #1
 80032ee:	f002 fc93 	bl	8005c18 <HAL_FLASH_Program>
 80032f2:	4603      	mov	r3, r0
 80032f4:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80032f6:	7efb      	ldrb	r3, [r7, #27]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8156 	beq.w	80035aa <EE_Init+0x392>
        {
          return FlashStatus;
 80032fe:	7efb      	ldrb	r3, [r7, #27]
 8003300:	b29b      	uxth	r3, r3
 8003302:	e15a      	b.n	80035ba <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8003304:	f000 f9fc 	bl	8003700 <EE_Format>
 8003308:	4603      	mov	r3, r0
 800330a:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800330c:	7efb      	ldrb	r3, [r7, #27]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 814b 	beq.w	80035aa <EE_Init+0x392>
        {
          return FlashStatus;
 8003314:	7efb      	ldrb	r3, [r7, #27]
 8003316:	b29b      	uxth	r3, r3
 8003318:	e14f      	b.n	80035ba <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800331a:	8c3b      	ldrh	r3, [r7, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d163      	bne.n	80033e8 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003320:	2300      	movs	r3, #0
 8003322:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003324:	e030      	b.n	8003388 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8003326:	4b69      	ldr	r3, [pc, #420]	@ (80034cc <EE_Init+0x2b4>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29a      	uxth	r2, r3
 800332c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800332e:	4968      	ldr	r1, [pc, #416]	@ (80034d0 <EE_Init+0x2b8>)
 8003330:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003334:	429a      	cmp	r2, r3
 8003336:	d101      	bne.n	800333c <EE_Init+0x124>
          {
            x = VarIdx;
 8003338:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800333a:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800333c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800333e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003342:	429a      	cmp	r2, r3
 8003344:	d01d      	beq.n	8003382 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8003346:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003348:	4a61      	ldr	r2, [pc, #388]	@ (80034d0 <EE_Init+0x2b8>)
 800334a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800334e:	4961      	ldr	r1, [pc, #388]	@ (80034d4 <EE_Init+0x2bc>)
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f96b 	bl	800362c <EE_ReadVariable>
 8003356:	4603      	mov	r3, r0
 8003358:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800335a:	8bbb      	ldrh	r3, [r7, #28]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d010      	beq.n	8003382 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8003360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003362:	4a5b      	ldr	r2, [pc, #364]	@ (80034d0 <EE_Init+0x2b8>)
 8003364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003368:	4a5a      	ldr	r2, [pc, #360]	@ (80034d4 <EE_Init+0x2bc>)
 800336a:	8812      	ldrh	r2, [r2, #0]
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa5e 	bl	8003830 <EE_VerifyPageFullWriteVariable>
 8003374:	4603      	mov	r3, r0
 8003376:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8003378:	8bfb      	ldrh	r3, [r7, #30]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <EE_Init+0x16a>
              {
                return EepromStatus;
 800337e:	8bfb      	ldrh	r3, [r7, #30]
 8003380:	e11b      	b.n	80035ba <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003382:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003384:	3301      	adds	r3, #1
 8003386:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003388:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800338a:	2b1f      	cmp	r3, #31
 800338c:	d9cb      	bls.n	8003326 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	494b      	ldr	r1, [pc, #300]	@ (80034c4 <EE_Init+0x2ac>)
 8003398:	2001      	movs	r0, #1
 800339a:	f002 fc3d 	bl	8005c18 <HAL_FLASH_Program>
 800339e:	4603      	mov	r3, r0
 80033a0:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80033a2:	7efb      	ldrb	r3, [r7, #27]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <EE_Init+0x196>
        {
          return FlashStatus;
 80033a8:	7efb      	ldrb	r3, [r7, #27]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	e105      	b.n	80035ba <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 80033ae:	230b      	movs	r3, #11
 80033b0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80033b6:	2302      	movs	r3, #2
 80033b8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80033ba:	4843      	ldr	r0, [pc, #268]	@ (80034c8 <EE_Init+0x2b0>)
 80033bc:	f000 f90c 	bl	80035d8 <EE_VerifyPageFullyErased>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f040 80f3 	bne.w	80035ae <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80033c8:	f107 0214 	add.w	r2, r7, #20
 80033cc:	463b      	mov	r3, r7
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f002 fdd7 	bl	8005f84 <HAL_FLASHEx_Erase>
 80033d6:	4603      	mov	r3, r0
 80033d8:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80033da:	7efb      	ldrb	r3, [r7, #27]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80e6 	beq.w	80035ae <EE_Init+0x396>
          {
            return FlashStatus;
 80033e2:	7efb      	ldrb	r3, [r7, #27]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	e0e8      	b.n	80035ba <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80033e8:	8c3b      	ldrh	r3, [r7, #32]
 80033ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d12b      	bne.n	800344a <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 80033f2:	230b      	movs	r3, #11
 80033f4:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80033fa:	2302      	movs	r3, #2
 80033fc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80033fe:	4832      	ldr	r0, [pc, #200]	@ (80034c8 <EE_Init+0x2b0>)
 8003400:	f000 f8ea 	bl	80035d8 <EE_VerifyPageFullyErased>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10e      	bne.n	8003428 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800340a:	f107 0214 	add.w	r2, r7, #20
 800340e:	463b      	mov	r3, r7
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f002 fdb6 	bl	8005f84 <HAL_FLASHEx_Erase>
 8003418:	4603      	mov	r3, r0
 800341a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800341c:	7efb      	ldrb	r3, [r7, #27]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <EE_Init+0x210>
          {
            return FlashStatus;
 8003422:	7efb      	ldrb	r3, [r7, #27]
 8003424:	b29b      	uxth	r3, r3
 8003426:	e0c8      	b.n	80035ba <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	4924      	ldr	r1, [pc, #144]	@ (80034c4 <EE_Init+0x2ac>)
 8003432:	2001      	movs	r0, #1
 8003434:	f002 fbf0 	bl	8005c18 <HAL_FLASH_Program>
 8003438:	4603      	mov	r3, r0
 800343a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800343c:	7efb      	ldrb	r3, [r7, #27]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80b5 	beq.w	80035ae <EE_Init+0x396>
        {
          return FlashStatus;
 8003444:	7efb      	ldrb	r3, [r7, #27]
 8003446:	b29b      	uxth	r3, r3
 8003448:	e0b7      	b.n	80035ba <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800344a:	f000 f959 	bl	8003700 <EE_Format>
 800344e:	4603      	mov	r3, r0
 8003450:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003452:	7efb      	ldrb	r3, [r7, #27]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80aa 	beq.w	80035ae <EE_Init+0x396>
        {
          return FlashStatus;
 800345a:	7efb      	ldrb	r3, [r7, #27]
 800345c:	b29b      	uxth	r3, r3
 800345e:	e0ac      	b.n	80035ba <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8003460:	8c3b      	ldrh	r3, [r7, #32]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10a      	bne.n	800347c <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8003466:	f000 f94b 	bl	8003700 <EE_Format>
 800346a:	4603      	mov	r3, r0
 800346c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800346e:	7efb      	ldrb	r3, [r7, #27]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 809e 	beq.w	80035b2 <EE_Init+0x39a>
        {
          return FlashStatus;
 8003476:	7efb      	ldrb	r3, [r7, #27]
 8003478:	b29b      	uxth	r3, r3
 800347a:	e09e      	b.n	80035ba <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800347c:	8c3b      	ldrh	r3, [r7, #32]
 800347e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003482:	4293      	cmp	r3, r2
 8003484:	d11b      	bne.n	80034be <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 8003486:	230b      	movs	r3, #11
 8003488:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800348e:	2302      	movs	r3, #2
 8003490:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003492:	480d      	ldr	r0, [pc, #52]	@ (80034c8 <EE_Init+0x2b0>)
 8003494:	f000 f8a0 	bl	80035d8 <EE_VerifyPageFullyErased>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 8089 	bne.w	80035b2 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80034a0:	f107 0214 	add.w	r2, r7, #20
 80034a4:	463b      	mov	r3, r7
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f002 fd6b 	bl	8005f84 <HAL_FLASHEx_Erase>
 80034ae:	4603      	mov	r3, r0
 80034b0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80034b2:	7efb      	ldrb	r3, [r7, #27]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d07c      	beq.n	80035b2 <EE_Init+0x39a>
          {
            return FlashStatus;
 80034b8:	7efb      	ldrb	r3, [r7, #27]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	e07d      	b.n	80035ba <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80034be:	2300      	movs	r3, #0
 80034c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80034c2:	e03a      	b.n	800353a <EE_Init+0x322>
 80034c4:	080c0000 	.word	0x080c0000
 80034c8:	080e0000 	.word	0x080e0000
 80034cc:	080c0006 	.word	0x080c0006
 80034d0:	200008e0 	.word	0x200008e0
 80034d4:	2000020c 	.word	0x2000020c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80034d8:	4b3a      	ldr	r3, [pc, #232]	@ (80035c4 <EE_Init+0x3ac>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80034e0:	4939      	ldr	r1, [pc, #228]	@ (80035c8 <EE_Init+0x3b0>)
 80034e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d101      	bne.n	80034ee <EE_Init+0x2d6>
          {
            x = VarIdx;
 80034ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80034ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 80034ee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80034f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d01d      	beq.n	8003534 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80034f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80034fa:	4a33      	ldr	r2, [pc, #204]	@ (80035c8 <EE_Init+0x3b0>)
 80034fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003500:	4932      	ldr	r1, [pc, #200]	@ (80035cc <EE_Init+0x3b4>)
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f892 	bl	800362c <EE_ReadVariable>
 8003508:	4603      	mov	r3, r0
 800350a:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800350c:	8bbb      	ldrh	r3, [r7, #28]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d010      	beq.n	8003534 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8003512:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003514:	4a2c      	ldr	r2, [pc, #176]	@ (80035c8 <EE_Init+0x3b0>)
 8003516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800351a:	4a2c      	ldr	r2, [pc, #176]	@ (80035cc <EE_Init+0x3b4>)
 800351c:	8812      	ldrh	r2, [r2, #0]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f000 f985 	bl	8003830 <EE_VerifyPageFullWriteVariable>
 8003526:	4603      	mov	r3, r0
 8003528:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800352a:	8bfb      	ldrh	r3, [r7, #30]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <EE_Init+0x31c>
              {
                return EepromStatus;
 8003530:	8bfb      	ldrh	r3, [r7, #30]
 8003532:	e042      	b.n	80035ba <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003534:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003536:	3301      	adds	r3, #1
 8003538:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800353a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800353c:	2b1f      	cmp	r3, #31
 800353e:	d9cb      	bls.n	80034d8 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	4921      	ldr	r1, [pc, #132]	@ (80035d0 <EE_Init+0x3b8>)
 800354a:	2001      	movs	r0, #1
 800354c:	f002 fb64 	bl	8005c18 <HAL_FLASH_Program>
 8003550:	4603      	mov	r3, r0
 8003552:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003554:	7efb      	ldrb	r3, [r7, #27]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <EE_Init+0x348>
        {
          return FlashStatus;
 800355a:	7efb      	ldrb	r3, [r7, #27]
 800355c:	b29b      	uxth	r3, r3
 800355e:	e02c      	b.n	80035ba <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8003560:	230a      	movs	r3, #10
 8003562:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8003564:	2301      	movs	r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003568:	2302      	movs	r3, #2
 800356a:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800356c:	4819      	ldr	r0, [pc, #100]	@ (80035d4 <EE_Init+0x3bc>)
 800356e:	f000 f833 	bl	80035d8 <EE_VerifyPageFullyErased>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d11c      	bne.n	80035b2 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003578:	f107 0214 	add.w	r2, r7, #20
 800357c:	463b      	mov	r3, r7
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f002 fcff 	bl	8005f84 <HAL_FLASHEx_Erase>
 8003586:	4603      	mov	r3, r0
 8003588:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800358a:	7efb      	ldrb	r3, [r7, #27]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d010      	beq.n	80035b2 <EE_Init+0x39a>
          {
            return FlashStatus;
 8003590:	7efb      	ldrb	r3, [r7, #27]
 8003592:	b29b      	uxth	r3, r3
 8003594:	e011      	b.n	80035ba <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8003596:	f000 f8b3 	bl	8003700 <EE_Format>
 800359a:	4603      	mov	r3, r0
 800359c:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800359e:	7efb      	ldrb	r3, [r7, #27]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <EE_Init+0x39e>
      {
        return FlashStatus;
 80035a4:	7efb      	ldrb	r3, [r7, #27]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	e007      	b.n	80035ba <EE_Init+0x3a2>
      break;
 80035aa:	bf00      	nop
 80035ac:	e004      	b.n	80035b8 <EE_Init+0x3a0>
      break;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <EE_Init+0x3a0>
      break;
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <EE_Init+0x3a0>
      }
      break;
 80035b6:	bf00      	nop
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3728      	adds	r7, #40	@ 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	080e0006 	.word	0x080e0006
 80035c8:	200008e0 	.word	0x200008e0
 80035cc:	2000020c 	.word	0x2000020c
 80035d0:	080e0000 	.word	0x080e0000
 80035d4:	080c0000 	.word	0x080c0000

080035d8 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 80035e0:	2301      	movs	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 80035e8:	f245 5355 	movw	r3, #21845	@ 0x5555
 80035ec:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 80035ee:	e00d      	b.n	800360c <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80035f6:	89fb      	ldrh	r3, [r7, #14]
 80035f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d002      	beq.n	8003606 <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

      break;
 8003604:	e00a      	b.n	800361c <EE_VerifyPageFullyErased+0x44>
    }
    /* Next address location */
    Address = Address + 4;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f503 33ff 	add.w	r3, r3, #130560	@ 0x1fe00
 8003612:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d9e9      	bls.n	80035f0 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	b29b      	uxth	r3, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8003638:	2300      	movs	r3, #0
 800363a:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800363c:	f245 5355 	movw	r3, #21845	@ 0x5555
 8003640:	81bb      	strh	r3, [r7, #12]
 8003642:	2301      	movs	r3, #1
 8003644:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8003646:	4b1b      	ldr	r3, [pc, #108]	@ (80036b4 <EE_ReadVariable+0x88>)
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <EE_ReadVariable+0x88>)
 800364c:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800364e:	2000      	movs	r0, #0
 8003650:	f000 f8a8 	bl	80037a4 <EE_FindValidPage>
 8003654:	4603      	mov	r3, r0
 8003656:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8003658:	89fb      	ldrh	r3, [r7, #14]
 800365a:	2bab      	cmp	r3, #171	@ 0xab
 800365c:	d101      	bne.n	8003662 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800365e:	23ab      	movs	r3, #171	@ 0xab
 8003660:	e024      	b.n	80036ac <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8003662:	89fb      	ldrh	r3, [r7, #14]
 8003664:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003668:	045b      	lsls	r3, r3, #17
 800366a:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	3301      	adds	r3, #1
 8003670:	045a      	lsls	r2, r3, #17
 8003672:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <EE_ReadVariable+0x8c>)
 8003674:	4413      	add	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8003678:	e012      	b.n	80036a0 <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 8003680:	89ba      	ldrh	r2, [r7, #12]
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	429a      	cmp	r2, r3
 8003686:	d108      	bne.n	800369a <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3b02      	subs	r3, #2
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	b29a      	uxth	r2, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	82fb      	strh	r3, [r7, #22]

      break;
 8003698:	e007      	b.n	80036aa <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3b04      	subs	r3, #4
 800369e:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	3302      	adds	r3, #2
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d8e7      	bhi.n	800367a <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80036aa:	8afb      	ldrh	r3, [r7, #22]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	080c0000 	.word	0x080c0000
 80036b8:	080bfffe 	.word	0x080bfffe

080036bc <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	460a      	mov	r2, r1
 80036c6:	80fb      	strh	r3, [r7, #6]
 80036c8:	4613      	mov	r3, r2
 80036ca:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80036d0:	88ba      	ldrh	r2, [r7, #4]
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f8aa 	bl	8003830 <EE_VerifyPageFullWriteVariable>
 80036dc:	4603      	mov	r3, r0
 80036de:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80036e0:	89fb      	ldrh	r3, [r7, #14]
 80036e2:	2b80      	cmp	r3, #128	@ 0x80
 80036e4:	d107      	bne.n	80036f6 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80036e6:	88ba      	ldrh	r2, [r7, #4]
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f901 	bl	80038f4 <EE_PageTransfer>
 80036f2:	4603      	mov	r3, r0
 80036f4:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80036f6:	89fb      	ldrh	r3, [r7, #14]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8003712:	230a      	movs	r3, #10
 8003714:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800371a:	2302      	movs	r3, #2
 800371c:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800371e:	481f      	ldr	r0, [pc, #124]	@ (800379c <EE_Format+0x9c>)
 8003720:	f7ff ff5a 	bl	80035d8 <EE_VerifyPageFullyErased>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800372a:	f107 0218 	add.w	r2, r7, #24
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f002 fc26 	bl	8005f84 <HAL_FLASHEx_Erase>
 8003738:	4603      	mov	r3, r0
 800373a:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <EE_Format+0x46>
    {
      return FlashStatus;
 8003742:	7ffb      	ldrb	r3, [r7, #31]
 8003744:	e025      	b.n	8003792 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	4913      	ldr	r1, [pc, #76]	@ (800379c <EE_Format+0x9c>)
 8003750:	2001      	movs	r0, #1
 8003752:	f002 fa61 	bl	8005c18 <HAL_FLASH_Program>
 8003756:	4603      	mov	r3, r0
 8003758:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <EE_Format+0x64>
  {
    return FlashStatus;
 8003760:	7ffb      	ldrb	r3, [r7, #31]
 8003762:	e016      	b.n	8003792 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8003764:	230b      	movs	r3, #11
 8003766:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8003768:	480d      	ldr	r0, [pc, #52]	@ (80037a0 <EE_Format+0xa0>)
 800376a:	f7ff ff35 	bl	80035d8 <EE_VerifyPageFullyErased>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10d      	bne.n	8003790 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8003774:	f107 0218 	add.w	r2, r7, #24
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f002 fc01 	bl	8005f84 <HAL_FLASHEx_Erase>
 8003782:	4603      	mov	r3, r0
 8003784:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8003786:	7ffb      	ldrb	r3, [r7, #31]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <EE_Format+0x90>
    {
      return FlashStatus;
 800378c:	7ffb      	ldrb	r3, [r7, #31]
 800378e:	e000      	b.n	8003792 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	080c0000 	.word	0x080c0000
 80037a0:	080e0000 	.word	0x080e0000

080037a4 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80037ae:	2306      	movs	r3, #6
 80037b0:	81fb      	strh	r3, [r7, #14]
 80037b2:	2306      	movs	r3, #6
 80037b4:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80037b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003828 <EE_FindValidPage+0x84>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80037bc:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <EE_FindValidPage+0x88>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01b      	beq.n	8003800 <EE_FindValidPage+0x5c>
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d125      	bne.n	8003818 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 80037cc:	89bb      	ldrh	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d108      	bne.n	80037e4 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80037d8:	4293      	cmp	r3, r2
 80037da:	d101      	bne.n	80037e0 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 80037dc:	2300      	movs	r3, #0
 80037de:	e01c      	b.n	800381a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 80037e0:	2301      	movs	r3, #1
 80037e2:	e01a      	b.n	800381a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 80037e4:	89fb      	ldrh	r3, [r7, #14]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 80037ea:	89bb      	ldrh	r3, [r7, #12]
 80037ec:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 80037f4:	2301      	movs	r3, #1
 80037f6:	e010      	b.n	800381a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 80037f8:	2300      	movs	r3, #0
 80037fa:	e00e      	b.n	800381a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 80037fc:	23ab      	movs	r3, #171	@ 0xab
 80037fe:	e00c      	b.n	800381a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8003800:	89fb      	ldrh	r3, [r7, #14]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8003806:	2300      	movs	r3, #0
 8003808:	e007      	b.n	800381a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800380a:	89bb      	ldrh	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8003810:	2301      	movs	r3, #1
 8003812:	e002      	b.n	800381a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8003814:	23ab      	movs	r3, #171	@ 0xab
 8003816:	e000      	b.n	800381a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8003818:	2300      	movs	r3, #0
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	080c0000 	.word	0x080c0000
 800382c:	080e0000 	.word	0x080e0000

08003830 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8003830:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	460a      	mov	r2, r1
 800383c:	80fb      	strh	r3, [r7, #6]
 800383e:	4613      	mov	r3, r2
 8003840:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8003846:	2300      	movs	r3, #0
 8003848:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800384a:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <EE_VerifyPageFullWriteVariable+0xb8>)
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	4b27      	ldr	r3, [pc, #156]	@ (80038ec <EE_VerifyPageFullWriteVariable+0xbc>)
 8003850:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8003852:	2001      	movs	r0, #1
 8003854:	f7ff ffa6 	bl	80037a4 <EE_FindValidPage>
 8003858:	4603      	mov	r3, r0
 800385a:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800385c:	8a3b      	ldrh	r3, [r7, #16]
 800385e:	2bab      	cmp	r3, #171	@ 0xab
 8003860:	d101      	bne.n	8003866 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8003862:	23ab      	movs	r3, #171	@ 0xab
 8003864:	e03a      	b.n	80038dc <EE_VerifyPageFullWriteVariable+0xac>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8003866:	8a3b      	ldrh	r3, [r7, #16]
 8003868:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800386c:	045b      	lsls	r3, r3, #17
 800386e:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8003870:	8a3b      	ldrh	r3, [r7, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	045a      	lsls	r2, r3, #17
 8003876:	4b1e      	ldr	r3, [pc, #120]	@ (80038f0 <EE_VerifyPageFullWriteVariable+0xc0>)
 8003878:	4413      	add	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800387c:	e029      	b.n	80038d2 <EE_VerifyPageFullWriteVariable+0xa2>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d121      	bne.n	80038cc <EE_VerifyPageFullWriteVariable+0x9c>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8003888:	88bb      	ldrh	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	461c      	mov	r4, r3
 800388e:	4615      	mov	r5, r2
 8003890:	4622      	mov	r2, r4
 8003892:	462b      	mov	r3, r5
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	2001      	movs	r0, #1
 8003898:	f002 f9be 	bl	8005c18 <HAL_FLASH_Program>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	e017      	b.n	80038dc <EE_VerifyPageFullWriteVariable+0xac>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	1c99      	adds	r1, r3, #2
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	2200      	movs	r2, #0
 80038b4:	4698      	mov	r8, r3
 80038b6:	4691      	mov	r9, r2
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	2001      	movs	r0, #1
 80038be:	f002 f9ab 	bl	8005c18 <HAL_FLASH_Program>
 80038c2:	4603      	mov	r3, r0
 80038c4:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	e007      	b.n	80038dc <EE_VerifyPageFullWriteVariable+0xac>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3304      	adds	r3, #4
 80038d0:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d3d1      	bcc.n	800387e <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80038da:	2380      	movs	r3, #128	@ 0x80
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038e6:	bf00      	nop
 80038e8:	080c0000 	.word	0x080c0000
 80038ec:	080e0000 	.word	0x080e0000
 80038f0:	080bffff 	.word	0x080bffff

080038f4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08c      	sub	sp, #48	@ 0x30
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	4603      	mov	r3, r0
 80038fc:	460a      	mov	r2, r1
 80038fe:	80fb      	strh	r3, [r7, #6]
 8003900:	4613      	mov	r3, r2
 8003902:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800390a:	4b54      	ldr	r3, [pc, #336]	@ (8003a5c <EE_PageTransfer+0x168>)
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 800390e:	2300      	movs	r3, #0
 8003910:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003916:	2300      	movs	r3, #0
 8003918:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800391e:	2300      	movs	r3, #0
 8003920:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003926:	2000      	movs	r0, #0
 8003928:	f7ff ff3c 	bl	80037a4 <EE_FindValidPage>
 800392c:	4603      	mov	r3, r0
 800392e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8003930:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003932:	2b01      	cmp	r3, #1
 8003934:	d104      	bne.n	8003940 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8003936:	4b49      	ldr	r3, [pc, #292]	@ (8003a5c <EE_PageTransfer+0x168>)
 8003938:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800393a:	230b      	movs	r3, #11
 800393c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800393e:	e009      	b.n	8003954 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8003940:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8003946:	4b46      	ldr	r3, [pc, #280]	@ (8003a60 <EE_PageTransfer+0x16c>)
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800394a:	230a      	movs	r3, #10
 800394c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800394e:	e001      	b.n	8003954 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8003950:	23ab      	movs	r3, #171	@ 0xab
 8003952:	e07e      	b.n	8003a52 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8003954:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800395e:	2001      	movs	r0, #1
 8003960:	f002 f95a 	bl	8005c18 <HAL_FLASH_Program>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800396a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8003972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003976:	b29b      	uxth	r3, r3
 8003978:	e06b      	b.n	8003a52 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800397a:	88ba      	ldrh	r2, [r7, #4]
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff55 	bl	8003830 <EE_VerifyPageFullWriteVariable>
 8003986:	4603      	mov	r3, r0
 8003988:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800398a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8003990:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003992:	e05e      	b.n	8003a52 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003994:	2300      	movs	r3, #0
 8003996:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003998:	e027      	b.n	80039ea <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800399a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800399c:	4a31      	ldr	r2, [pc, #196]	@ (8003a64 <EE_PageTransfer+0x170>)
 800399e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d01d      	beq.n	80039e4 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80039a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80039aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <EE_PageTransfer+0x170>)
 80039ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039b0:	492d      	ldr	r1, [pc, #180]	@ (8003a68 <EE_PageTransfer+0x174>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fe3a 	bl	800362c <EE_ReadVariable>
 80039b8:	4603      	mov	r3, r0
 80039ba:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80039bc:	8c3b      	ldrh	r3, [r7, #32]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d010      	beq.n	80039e4 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80039c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80039c4:	4a27      	ldr	r2, [pc, #156]	@ (8003a64 <EE_PageTransfer+0x170>)
 80039c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ca:	4a27      	ldr	r2, [pc, #156]	@ (8003a68 <EE_PageTransfer+0x174>)
 80039cc:	8812      	ldrh	r2, [r2, #0]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff2d 	bl	8003830 <EE_VerifyPageFullWriteVariable>
 80039d6:	4603      	mov	r3, r0
 80039d8:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80039da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 80039e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039e2:	e036      	b.n	8003a52 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80039e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80039e6:	3301      	adds	r3, #1
 80039e8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80039ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80039ec:	2b1f      	cmp	r3, #31
 80039ee:	d9d4      	bls.n	800399a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 80039f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80039f6:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 80039f8:	2301      	movs	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8003a00:	f107 021c 	add.w	r2, r7, #28
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f002 faba 	bl	8005f84 <HAL_FLASHEx_Erase>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8003a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8003a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	e015      	b.n	8003a52 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a30:	2001      	movs	r0, #1
 8003a32:	f002 f8f1 	bl	8005c18 <HAL_FLASH_Program>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8003a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8003a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	e002      	b.n	8003a52 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8003a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a50:	b29b      	uxth	r3, r3
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3730      	adds	r7, #48	@ 0x30
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	080c0000 	.word	0x080c0000
 8003a60:	080e0000 	.word	0x080e0000
 8003a64:	200008e0 	.word	0x200008e0
 8003a68:	2000020c 	.word	0x2000020c

08003a6c <map>:
void actoin_set(cJSON *obj, uint8_t save);
void actoin_resp_all_set(void);
void actoin_resp_status(void);

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a76:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a7a:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a7e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a82:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003a86:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a92:	edd7 6a01 	vldr	s13, [r7, #4]
 8003a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a9e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003aa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003aba:	eeb0 0a67 	vmov.f32	s0, s15
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4a07      	ldr	r2, [pc, #28]	@ (8003af4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ad8:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4a06      	ldr	r2, [pc, #24]	@ (8003af8 <vApplicationGetIdleTaskMemory+0x30>)
 8003ade:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2280      	movs	r2, #128	@ 0x80
 8003ae4:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000634 	.word	0x20000634
 8003af8:	200006d4 	.word	0x200006d4

08003afc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	b094      	sub	sp, #80	@ 0x50
 8003b00:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of eepromSem */
  osSemaphoreDef(eepromSem);
 8003b02:	2300      	movs	r3, #0
 8003b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b06:	2300      	movs	r3, #0
 8003b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  eepromSemHandle = osSemaphoreCreate(osSemaphore(eepromSem), 1);
 8003b0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4618      	mov	r0, r3
 8003b12:	f005 fb9c 	bl	800924e <osSemaphoreCreate>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <MX_FREERTOS_Init+0x90>)
 8003b1a:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of rxDataUART2 */
  osMessageQDef(rxDataUART2, 16, uint16_t);
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <MX_FREERTOS_Init+0x94>)
 8003b1e:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8003b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  rxDataUART2Handle = osMessageCreate(osMessageQ(rxDataUART2), NULL);
 8003b28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f005 fbbf 	bl	80092b2 <osMessageCreate>
 8003b34:	4603      	mov	r3, r0
 8003b36:	4a17      	ldr	r2, [pc, #92]	@ (8003b94 <MX_FREERTOS_Init+0x98>)
 8003b38:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MainTask */
  osThreadDef(MainTask, mainTask, osPriorityNormal, 0, 512);
 8003b3a:	4b17      	ldr	r3, [pc, #92]	@ (8003b98 <MX_FREERTOS_Init+0x9c>)
 8003b3c:	f107 041c 	add.w	r4, r7, #28
 8003b40:	461d      	mov	r5, r3
 8003b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8003b4e:	f107 031c 	add.w	r3, r7, #28
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f005 fb1a 	bl	800918e <osThreadCreate>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b9c <MX_FREERTOS_Init+0xa0>)
 8003b5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SettingsTask */
  osThreadDef(SettingsTask, settingsTask, osPriorityNormal, 0, 512);
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <MX_FREERTOS_Init+0xa4>)
 8003b62:	463c      	mov	r4, r7
 8003b64:	461d      	mov	r5, r3
 8003b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SettingsTaskHandle = osThreadCreate(osThread(SettingsTask), NULL);
 8003b72:	463b      	mov	r3, r7
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f005 fb09 	bl	800918e <osThreadCreate>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <MX_FREERTOS_Init+0xa8>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003b82:	bf00      	nop
 8003b84:	3750      	adds	r7, #80	@ 0x50
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000630 	.word	0x20000630
 8003b90:	0800f194 	.word	0x0800f194
 8003b94:	2000062c 	.word	0x2000062c
 8003b98:	0800f1b0 	.word	0x0800f1b0
 8003b9c:	20000624 	.word	0x20000624
 8003ba0:	0800f1dc 	.word	0x0800f1dc
 8003ba4:	20000628 	.word	0x20000628

08003ba8 <mainTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void mainTask(void const * argument)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainTask */


	oldTime = HAL_GetTick();
 8003bb0:	f001 fab2 	bl	8005118 <HAL_GetTick>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4a35      	ldr	r2, [pc, #212]	@ (8003c8c <mainTask+0xe4>)
 8003bb8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_RESET);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4834      	ldr	r0, [pc, #208]	@ (8003c90 <mainTask+0xe8>)
 8003bc0:	f002 fd9a 	bl	80066f8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim13);
 8003bc4:	4833      	ldr	r0, [pc, #204]	@ (8003c94 <mainTask+0xec>)
 8003bc6:	f003 fa8b 	bl	80070e0 <HAL_TIM_Base_Start>

	//get_ROMid();
	/* Infinite loop */
	for (;;) {
		// чтение температуры по таймауту
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2180      	movs	r1, #128	@ 0x80
 8003bce:	4832      	ldr	r0, [pc, #200]	@ (8003c98 <mainTask+0xf0>)
 8003bd0:	f002 fd92 	bl	80066f8 <HAL_GPIO_WritePin>
		//get_Temperature();
		  DS18B20_SampleTemp();               // Convert (Sample) Temperature Now
 8003bd4:	f000 fb82 	bl	80042dc <DS18B20_SampleTemp>
		  osDelay(300);
 8003bd8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003bdc:	f005 fb23 	bl	8009226 <osDelay>
		  Temp[0] = DS18B20_ReadTemp();  // Read The Conversion Result Temperature Value
 8003be0:	f000 fb88 	bl	80042f4 <DS18B20_ReadTemp>
 8003be4:	eef0 7a40 	vmov.f32	s15, s0
 8003be8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c9c <mainTask+0xf4>)
 8003bea:	edc3 7a00 	vstr	s15, [r3]
		  current_temp = Temp[0];
 8003bee:	4b2b      	ldr	r3, [pc, #172]	@ (8003c9c <mainTask+0xf4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca0 <mainTask+0xf8>)
 8003bf4:	6013      	str	r3, [r2, #0]
		if (Temp[0] < termo_set.setTEMP) {
 8003bf6:	4b29      	ldr	r3, [pc, #164]	@ (8003c9c <mainTask+0xf4>)
 8003bf8:	ed93 7a00 	vldr	s14, [r3]
 8003bfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ca4 <mainTask+0xfc>)
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	d504      	bpl.n	8003c16 <mainTask+0x6e>
			//Temperature = 0;
			delay_dimm_us = 11000;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <mainTask+0x100>)
 8003c0e:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e02f      	b.n	8003c76 <mainTask+0xce>
		} else if (Temp[0] > termo_set.maxTemp) {
 8003c16:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <mainTask+0xf4>)
 8003c18:	ed93 7a00 	vldr	s14, [r3]
 8003c1c:	4b21      	ldr	r3, [pc, #132]	@ (8003ca4 <mainTask+0xfc>)
 8003c1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2a:	dd07      	ble.n	8003c3c <mainTask+0x94>
			Temp[0] = termo_set.maxTemp;
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca4 <mainTask+0xfc>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a1a      	ldr	r2, [pc, #104]	@ (8003c9c <mainTask+0xf4>)
 8003c32:	6013      	str	r3, [r2, #0]
			delay_dimm_us = 1;
 8003c34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <mainTask+0x100>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e01c      	b.n	8003c76 <mainTask+0xce>
		} else {
			// управление симистором
			delay_dimm_us = (uint32_t) map(Temp[0], termo_set.setTEMP, termo_set.maxTemp, FAN_START, 1);
 8003c3c:	4b17      	ldr	r3, [pc, #92]	@ (8003c9c <mainTask+0xf4>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	4b18      	ldr	r3, [pc, #96]	@ (8003ca4 <mainTask+0xfc>)
 8003c44:	ed93 7a00 	vldr	s14, [r3]
 8003c48:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <mainTask+0xfc>)
 8003c4a:	edd3 6a01 	vldr	s13, [r3, #4]
 8003c4e:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8003c52:	eddf 1a16 	vldr	s3, [pc, #88]	@ 8003cac <mainTask+0x104>
 8003c56:	eeb0 1a66 	vmov.f32	s2, s13
 8003c5a:	eef0 0a47 	vmov.f32	s1, s14
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	f7ff ff03 	bl	8003a6c <map>
 8003c66:	eef0 7a40 	vmov.f32	s15, s0
 8003c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6e:	ee17 2a90 	vmov	r2, s15
 8003c72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <mainTask+0x100>)
 8003c74:	601a      	str	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2180      	movs	r1, #128	@ 0x80
 8003c7a:	4807      	ldr	r0, [pc, #28]	@ (8003c98 <mainTask+0xf0>)
 8003c7c:	f002 fd3c 	bl	80066f8 <HAL_GPIO_WritePin>
		osDelay(700);
 8003c80:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003c84:	f005 facf 	bl	8009226 <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003c88:	e79f      	b.n	8003bca <mainTask+0x22>
 8003c8a:	bf00      	nop
 8003c8c:	20000218 	.word	0x20000218
 8003c90:	40020400 	.word	0x40020400
 8003c94:	200011b4 	.word	0x200011b4
 8003c98:	40020800 	.word	0x40020800
 8003c9c:	20000210 	.word	0x20000210
 8003ca0:	20000214 	.word	0x20000214
 8003ca4:	200008d4 	.word	0x200008d4
 8003ca8:	2000000c 	.word	0x2000000c
 8003cac:	45dac000 	.word	0x45dac000

08003cb0 <settingsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_settingsTask */
void settingsTask(void const * argument)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08e      	sub	sp, #56	@ 0x38
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN settingsTask */
	//HAL_UART_Receive_DMA(&huart2, UART2_rx, UART2_RX_LENGTH);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART2_rx, UART2_RX_LENGTH);
 8003cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cbc:	494b      	ldr	r1, [pc, #300]	@ (8003dec <settingsTask+0x13c>)
 8003cbe:	484c      	ldr	r0, [pc, #304]	@ (8003df0 <settingsTask+0x140>)
 8003cc0:	f003 ff02 	bl	8007ac8 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <settingsTask+0x144>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b4a      	ldr	r3, [pc, #296]	@ (8003df4 <settingsTask+0x144>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0208 	bic.w	r2, r2, #8
 8003cd2:	601a      	str	r2, [r3, #0]
	//__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_TC);
	/* Infinite loop */
	for (;;) {
		// ожидать собщение
		osMessageGet(rxDataUART2Handle, osWaitForever);
 8003cd4:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <settingsTask+0x148>)
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	463b      	mov	r3, r7
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fb50 	bl	8009384 <osMessageGet>
		//uint32_t message_len = strlen((char*) message_rx);
		//HAL_UART_Transmit(&huart2, message_rx, message_len, HAL_MAX_DELAY);

		// парсим  json
		cJSON *json = cJSON_Parse((char*) message_rx);
 8003ce4:	4845      	ldr	r0, [pc, #276]	@ (8003dfc <settingsTask+0x14c>)
 8003ce6:	f7fe fa67 	bl	80021b8 <cJSON_Parse>
 8003cea:	6338      	str	r0, [r7, #48]	@ 0x30
		if (json != NULL) {
 8003cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d074      	beq.n	8003ddc <settingsTask+0x12c>

			cJSON *id = cJSON_GetObjectItemCaseSensitive(json, "id");
 8003cf2:	4943      	ldr	r1, [pc, #268]	@ (8003e00 <settingsTask+0x150>)
 8003cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cf6:	f7ff f893 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003cfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
			cJSON *name_device = cJSON_GetObjectItemCaseSensitive(json, "name_device");
 8003cfc:	4941      	ldr	r1, [pc, #260]	@ (8003e04 <settingsTask+0x154>)
 8003cfe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d00:	f7ff f88e 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d04:	62b8      	str	r0, [r7, #40]	@ 0x28
			cJSON *type_data = cJSON_GetObjectItemCaseSensitive(json, "type_data");
 8003d06:	4940      	ldr	r1, [pc, #256]	@ (8003e08 <settingsTask+0x158>)
 8003d08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d0a:	f7ff f889 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d0e:	6278      	str	r0, [r7, #36]	@ 0x24
			cJSON *save_settings = cJSON_GetObjectItemCaseSensitive(json, "save_settings");
 8003d10:	493e      	ldr	r1, [pc, #248]	@ (8003e0c <settingsTask+0x15c>)
 8003d12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d14:	f7ff f884 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d18:	6238      	str	r0, [r7, #32]
			cJSON *obj = cJSON_GetObjectItemCaseSensitive(json, "obj");
 8003d1a:	493d      	ldr	r1, [pc, #244]	@ (8003e10 <settingsTask+0x160>)
 8003d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d1e:	f7ff f87f 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d22:	61f8      	str	r0, [r7, #28]

			if (cJSON_IsNumber(id) && cJSON_GetNumberValue(id) == ID_CTRL) {
 8003d24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d26:	f7ff fa28 	bl	800317a <cJSON_IsNumber>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d04c      	beq.n	8003dca <settingsTask+0x11a>
 8003d30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d32:	f7fd f967 	bl	8001004 <cJSON_GetNumberValue>
 8003d36:	ec51 0b10 	vmov	r0, r1, d0
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <settingsTask+0x164>)
 8003d40:	f7fc fed2 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d03f      	beq.n	8003dca <settingsTask+0x11a>
				uint8_t save_set = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				if (cJSON_IsTrue(save_settings)) {
 8003d50:	6a38      	ldr	r0, [r7, #32]
 8003d52:	f7ff f9fb 	bl	800314c <cJSON_IsTrue>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <settingsTask+0xb4>
					save_set = 1;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8003d62:	e002      	b.n	8003d6a <settingsTask+0xba>
				} else {
					save_set = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				}

				if (cJSON_IsNumber(type_data)) {
 8003d6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d6c:	f7ff fa05 	bl	800317a <cJSON_IsNumber>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d02d      	beq.n	8003dd2 <settingsTask+0x122>
					switch (type_data->valueint) {
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d81f      	bhi.n	8003dc0 <settingsTask+0x110>
 8003d80:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <settingsTask+0xd8>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003da7 	.word	0x08003da7
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003dbb 	.word	0x08003dbb
					case 1: // ip settings
						actoin_set(obj, save_set);
 8003d98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	69f8      	ldr	r0, [r7, #28]
 8003da0:	f000 f84c 	bl	8003e3c <actoin_set>
						break;
 8003da4:	e010      	b.n	8003dc8 <settingsTask+0x118>
					case 2: // motor settings
						actoin_motor_set(obj, save_set);
 8003da6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003daa:	4619      	mov	r1, r3
 8003dac:	69f8      	ldr	r0, [r7, #28]
 8003dae:	f000 f839 	bl	8003e24 <actoin_motor_set>
						break;
 8003db2:	e009      	b.n	8003dc8 <settingsTask+0x118>
					case 3:
						actoin_resp_all_set();
 8003db4:	f000 f8c0 	bl	8003f38 <actoin_resp_all_set>
						break;
 8003db8:	e006      	b.n	8003dc8 <settingsTask+0x118>
					case 4:
						actoin_resp_status();
 8003dba:	f000 f8c5 	bl	8003f48 <actoin_resp_status>
						break;
 8003dbe:	e003      	b.n	8003dc8 <settingsTask+0x118>
					default:
						STM_LOG("data type not registered");
 8003dc0:	4815      	ldr	r0, [pc, #84]	@ (8003e18 <settingsTask+0x168>)
 8003dc2:	f000 fc83 	bl	80046cc <STM_LOG>
						break;
 8003dc6:	bf00      	nop
			if (cJSON_IsNumber(id) && cJSON_GetNumberValue(id) == ID_CTRL) {
 8003dc8:	e003      	b.n	8003dd2 <settingsTask+0x122>
					}
				}
			} else {
				STM_LOG("id not valid");
 8003dca:	4814      	ldr	r0, [pc, #80]	@ (8003e1c <settingsTask+0x16c>)
 8003dcc:	f000 fc7e 	bl	80046cc <STM_LOG>
 8003dd0:	e000      	b.n	8003dd4 <settingsTask+0x124>
			if (cJSON_IsNumber(id) && cJSON_GetNumberValue(id) == ID_CTRL) {
 8003dd2:	bf00      	nop
			}

			cJSON_Delete(json);
 8003dd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dd6:	f7fd f9db 	bl	8001190 <cJSON_Delete>
 8003dda:	e002      	b.n	8003de2 <settingsTask+0x132>
		} else {
			STM_LOG("Invalid JSON");
 8003ddc:	4810      	ldr	r0, [pc, #64]	@ (8003e20 <settingsTask+0x170>)
 8003dde:	f000 fc75 	bl	80046cc <STM_LOG>
		}

		osDelay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f005 fa1f 	bl	8009226 <osDelay>
	for (;;) {
 8003de8:	e774      	b.n	8003cd4 <settingsTask+0x24>
 8003dea:	bf00      	nop
 8003dec:	2000041c 	.word	0x2000041c
 8003df0:	2000128c 	.word	0x2000128c
 8003df4:	200012d4 	.word	0x200012d4
 8003df8:	2000062c 	.word	0x2000062c
 8003dfc:	2000021c 	.word	0x2000021c
 8003e00:	0800f1f8 	.word	0x0800f1f8
 8003e04:	0800f1fc 	.word	0x0800f1fc
 8003e08:	0800f208 	.word	0x0800f208
 8003e0c:	0800f214 	.word	0x0800f214
 8003e10:	0800f224 	.word	0x0800f224
 8003e14:	40080000 	.word	0x40080000
 8003e18:	0800f228 	.word	0x0800f228
 8003e1c:	0800f244 	.word	0x0800f244
 8003e20:	0800f254 	.word	0x0800f254

08003e24 <actoin_motor_set>:
	} else {
		__NOP();
	}
}

void actoin_motor_set(cJSON *obj, uint8_t save) {
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]


}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <actoin_set>:

void actoin_set(cJSON *obj, uint8_t save) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]

	cJSON *j_SET_TEMP = cJSON_GetObjectItemCaseSensitive(obj, "set_temp");
 8003e48:	4936      	ldr	r1, [pc, #216]	@ (8003f24 <actoin_set+0xe8>)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fe ffe8 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003e50:	6178      	str	r0, [r7, #20]
	cJSON *j_MAX_TEMP = cJSON_GetObjectItemCaseSensitive(obj, "max_temp");
 8003e52:	4935      	ldr	r1, [pc, #212]	@ (8003f28 <actoin_set+0xec>)
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fe ffe3 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003e5a:	6138      	str	r0, [r7, #16]
	cJSON *j_STEP_TEMP = cJSON_GetObjectItemCaseSensitive(obj, "step_temp");
 8003e5c:	4933      	ldr	r1, [pc, #204]	@ (8003f2c <actoin_set+0xf0>)
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fe ffde 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003e64:	60f8      	str	r0, [r7, #12]

	if((j_SET_TEMP != NULL) && cJSON_IsNumber(j_SET_TEMP))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <actoin_set+0x54>
 8003e6c:	6978      	ldr	r0, [r7, #20]
 8003e6e:	f7ff f984 	bl	800317a <cJSON_IsNumber>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <actoin_set+0x54>
	{
		termo_set.setTEMP = (float)cJSON_GetNumberValue(j_SET_TEMP);
 8003e78:	6978      	ldr	r0, [r7, #20]
 8003e7a:	f7fd f8c3 	bl	8001004 <cJSON_GetNumberValue>
 8003e7e:	ec53 2b10 	vmov	r2, r3, d0
 8003e82:	4610      	mov	r0, r2
 8003e84:	4619      	mov	r1, r3
 8003e86:	f7fc febf 	bl	8000c08 <__aeabi_d2f>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <actoin_set+0xf4>)
 8003e8e:	6013      	str	r3, [r2, #0]
	}
	if((j_MAX_TEMP != NULL) && cJSON_IsNumber(j_MAX_TEMP))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d011      	beq.n	8003eba <actoin_set+0x7e>
 8003e96:	6938      	ldr	r0, [r7, #16]
 8003e98:	f7ff f96f 	bl	800317a <cJSON_IsNumber>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <actoin_set+0x7e>
	{
		termo_set.maxTemp = (float)cJSON_GetNumberValue(j_MAX_TEMP);
 8003ea2:	6938      	ldr	r0, [r7, #16]
 8003ea4:	f7fd f8ae 	bl	8001004 <cJSON_GetNumberValue>
 8003ea8:	ec53 2b10 	vmov	r2, r3, d0
 8003eac:	4610      	mov	r0, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f7fc feaa 	bl	8000c08 <__aeabi_d2f>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <actoin_set+0xf4>)
 8003eb8:	6053      	str	r3, [r2, #4]
	}
	if((j_STEP_TEMP != NULL) && cJSON_IsNumber(j_STEP_TEMP))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d011      	beq.n	8003ee4 <actoin_set+0xa8>
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff f95a 	bl	800317a <cJSON_IsNumber>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <actoin_set+0xa8>
	{
		termo_set.stepTemp = (float)cJSON_GetNumberValue(j_STEP_TEMP);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7fd f899 	bl	8001004 <cJSON_GetNumberValue>
 8003ed2:	ec53 2b10 	vmov	r2, r3, d0
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7fc fe95 	bl	8000c08 <__aeabi_d2f>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a13      	ldr	r2, [pc, #76]	@ (8003f30 <actoin_set+0xf4>)
 8003ee2:	6093      	str	r3, [r2, #8]
	}

	HAL_StatusTypeDef ret;
	HAL_FLASH_Unlock();
 8003ee4:	f001 feec 	bl	8005cc0 <HAL_FLASH_Unlock>
	ret = eeprom_write(termo_set);
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <actoin_set+0xf4>)
 8003eea:	edd3 6a00 	vldr	s13, [r3]
 8003eee:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ef2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ef6:	eeb0 0a66 	vmov.f32	s0, s13
 8003efa:	eef0 0a47 	vmov.f32	s1, s14
 8003efe:	eeb0 1a67 	vmov.f32	s2, s15
 8003f02:	f000 fc5b 	bl	80047bc <eeprom_write>
 8003f06:	4603      	mov	r3, r0
 8003f08:	72fb      	strb	r3, [r7, #11]
	if (ret != HAL_OK) {
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <actoin_set+0xda>
		STM_LOG("Fail write settings");
 8003f10:	4808      	ldr	r0, [pc, #32]	@ (8003f34 <actoin_set+0xf8>)
 8003f12:	f000 fbdb 	bl	80046cc <STM_LOG>
	}
	HAL_FLASH_Lock();
 8003f16:	f001 fef5 	bl	8005d04 <HAL_FLASH_Lock>
}
 8003f1a:	bf00      	nop
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	0800f264 	.word	0x0800f264
 8003f28:	0800f270 	.word	0x0800f270
 8003f2c:	0800f27c 	.word	0x0800f27c
 8003f30:	200008d4 	.word	0x200008d4
 8003f34:	0800f288 	.word	0x0800f288

08003f38 <actoin_resp_all_set>:

void actoin_resp_all_set() {
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0

}
 8003f3c:	bf00      	nop
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <actoin_resp_status>:

void actoin_resp_status() {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
	//STM_LOG("actoin_resp_status()");
	cJSON *j_all_settings_obj = cJSON_CreateObject();
 8003f4e:	f7ff f8e9 	bl	8003124 <cJSON_CreateObject>
 8003f52:	60f8      	str	r0, [r7, #12]
	cJSON *j_to_host = cJSON_CreateObject();
 8003f54:	f7ff f8e6 	bl	8003124 <cJSON_CreateObject>
 8003f58:	60b8      	str	r0, [r7, #8]

	cJSON_AddNumberToObject(j_to_host, "id", ID_CTRL);
 8003f5a:	ed9f 0b2f 	vldr	d0, [pc, #188]	@ 8004018 <actoin_resp_status+0xd0>
 8003f5e:	4932      	ldr	r1, [pc, #200]	@ (8004028 <actoin_resp_status+0xe0>)
 8003f60:	68b8      	ldr	r0, [r7, #8]
 8003f62:	f7ff f829 	bl	8002fb8 <cJSON_AddNumberToObject>
	cJSON_AddStringToObject(j_to_host, "name_device", NAME);
 8003f66:	4a31      	ldr	r2, [pc, #196]	@ (800402c <actoin_resp_status+0xe4>)
 8003f68:	4931      	ldr	r1, [pc, #196]	@ (8004030 <actoin_resp_status+0xe8>)
 8003f6a:	68b8      	ldr	r0, [r7, #8]
 8003f6c:	f7ff f848 	bl	8003000 <cJSON_AddStringToObject>
	cJSON_AddNumberToObject(j_to_host, "type_data", 4);
 8003f70:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8004020 <actoin_resp_status+0xd8>
 8003f74:	492f      	ldr	r1, [pc, #188]	@ (8004034 <actoin_resp_status+0xec>)
 8003f76:	68b8      	ldr	r0, [r7, #8]
 8003f78:	f7ff f81e 	bl	8002fb8 <cJSON_AddNumberToObject>

	cJSON_AddNumberToObject(j_all_settings_obj, "set_temp", (double)termo_set.setTEMP);
 8003f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8004038 <actoin_resp_status+0xf0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fc faf1 	bl	8000568 <__aeabi_f2d>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	ec43 2b10 	vmov	d0, r2, r3
 8003f8e:	492b      	ldr	r1, [pc, #172]	@ (800403c <actoin_resp_status+0xf4>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff f811 	bl	8002fb8 <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(j_all_settings_obj, "max_temp", (double)termo_set.maxTemp);
 8003f96:	4b28      	ldr	r3, [pc, #160]	@ (8004038 <actoin_resp_status+0xf0>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fae4 	bl	8000568 <__aeabi_f2d>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	ec43 2b10 	vmov	d0, r2, r3
 8003fa8:	4925      	ldr	r1, [pc, #148]	@ (8004040 <actoin_resp_status+0xf8>)
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff f804 	bl	8002fb8 <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(j_all_settings_obj, "step_temp", (double)termo_set.stepTemp);
 8003fb0:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <actoin_resp_status+0xf0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc fad7 	bl	8000568 <__aeabi_f2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	ec43 2b10 	vmov	d0, r2, r3
 8003fc2:	4920      	ldr	r1, [pc, #128]	@ (8004044 <actoin_resp_status+0xfc>)
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7fe fff7 	bl	8002fb8 <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(j_all_settings_obj, "current", (double)(current_temp));
 8003fca:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <actoin_resp_status+0x100>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc faca 	bl	8000568 <__aeabi_f2d>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	ec43 2b10 	vmov	d0, r2, r3
 8003fdc:	491b      	ldr	r1, [pc, #108]	@ (800404c <actoin_resp_status+0x104>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7fe ffea 	bl	8002fb8 <cJSON_AddNumberToObject>

	cJSON_AddItemToObject(j_to_host, "obj", j_all_settings_obj);
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	491a      	ldr	r1, [pc, #104]	@ (8004050 <actoin_resp_status+0x108>)
 8003fe8:	68b8      	ldr	r0, [r7, #8]
 8003fea:	f7fe ffcf 	bl	8002f8c <cJSON_AddItemToObject>

	char *str_to_host = cJSON_Print(j_to_host);
 8003fee:	68b8      	ldr	r0, [r7, #8]
 8003ff0:	f7fe f97a 	bl	80022e8 <cJSON_Print>
 8003ff4:	6078      	str	r0, [r7, #4]
	//string out = str_to_host;
	//out += '\r';

	//HAL_UART_Transmit(&huart2, (uint8_t*)out.c_str(), out.size(), HAL_MAX_DELAY);
	STM_LOG("%s", str_to_host);
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4816      	ldr	r0, [pc, #88]	@ (8004054 <actoin_resp_status+0x10c>)
 8003ffa:	f000 fb67 	bl	80046cc <STM_LOG>

	cJSON_free(str_to_host);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff f8d2 	bl	80031a8 <cJSON_free>
	cJSON_Delete(j_to_host);
 8004004:	68b8      	ldr	r0, [r7, #8]
 8004006:	f7fd f8c3 	bl	8001190 <cJSON_Delete>
}
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	f3af 8000 	nop.w
 8004018:	00000000 	.word	0x00000000
 800401c:	40080000 	.word	0x40080000
 8004020:	00000000 	.word	0x00000000
 8004024:	40100000 	.word	0x40100000
 8004028:	0800f1f8 	.word	0x0800f1f8
 800402c:	0800f29c 	.word	0x0800f29c
 8004030:	0800f1fc 	.word	0x0800f1fc
 8004034:	0800f208 	.word	0x0800f208
 8004038:	200008d4 	.word	0x200008d4
 800403c:	0800f264 	.word	0x0800f264
 8004040:	0800f270 	.word	0x0800f270
 8004044:	0800f27c 	.word	0x0800f27c
 8004048:	20000214 	.word	0x20000214
 800404c:	0800f2a4 	.word	0x0800f2a4
 8004050:	0800f224 	.word	0x0800f224
 8004054:	0800f2ac 	.word	0x0800f2ac

08004058 <HAL_UARTEx_RxEventCallback>:

/******************************************************************************************************
 Handlers
 ******************************************************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <HAL_UARTEx_RxEventCallback+0x140>)
 800406a:	4293      	cmp	r3, r2
 800406c:	f040 808f 	bne.w	800418e <HAL_UARTEx_RxEventCallback+0x136>

		while ( __HAL_UART_GET_FLAG(huart, UART_FLAG_TC) != SET) {
 8004070:	bf00      	nop
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b40      	cmp	r3, #64	@ 0x40
 800407e:	d1f8      	bne.n	8004072 <HAL_UARTEx_RxEventCallback+0x1a>
		};

		uint16_t Size_Data = Size - Start_index;
 8004080:	4b46      	ldr	r3, [pc, #280]	@ (800419c <HAL_UARTEx_RxEventCallback+0x144>)
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	887a      	ldrh	r2, [r7, #2]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	81fb      	strh	r3, [r7, #14]

		HAL_UART_RxEventTypeTypeDef rxEventType;
		rxEventType = HAL_UARTEx_GetRxEventType(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f003 fd79 	bl	8007b82 <HAL_UARTEx_GetRxEventType>
 8004090:	60b8      	str	r0, [r7, #8]
		switch (rxEventType) {
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d009      	beq.n	80040ac <HAL_UARTEx_RxEventCallback+0x54>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d864      	bhi.n	8004168 <HAL_UARTEx_RxEventCallback+0x110>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d048      	beq.n	8004136 <HAL_UARTEx_RxEventCallback+0xde>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d062      	beq.n	8004170 <HAL_UARTEx_RxEventCallback+0x118>
 80040aa:	e05d      	b.n	8004168 <HAL_UARTEx_RxEventCallback+0x110>
		case HAL_UART_RXEVENT_IDLE:
			//STM_LOG( "IDLE. Size:%d sd:%d sti:%d", Size, Size_Data, Start_index);
			// копировать с индекса сообщения
			memcpy(&message_rx[indx_message_rx], &UART2_rx[Start_index],
 80040ac:	4b3c      	ldr	r3, [pc, #240]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b3c      	ldr	r3, [pc, #240]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80040b4:	4413      	add	r3, r2
 80040b6:	4a39      	ldr	r2, [pc, #228]	@ (800419c <HAL_UARTEx_RxEventCallback+0x144>)
 80040b8:	8812      	ldrh	r2, [r2, #0]
 80040ba:	4611      	mov	r1, r2
 80040bc:	4a3a      	ldr	r2, [pc, #232]	@ (80041a8 <HAL_UARTEx_RxEventCallback+0x150>)
 80040be:	4411      	add	r1, r2
 80040c0:	89fa      	ldrh	r2, [r7, #14]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f008 fcb1 	bl	800ca2a <memcpy>
					Size_Data);

			//|| (message_rx[indx_message_rx + Size_Data - 1] == '\n')
			if ((message_rx[indx_message_rx + Size_Data - 1] == '\r')
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	89fb      	ldrh	r3, [r7, #14]
 80040d0:	4413      	add	r3, r2
 80040d2:	3b01      	subs	r3, #1
 80040d4:	4a33      	ldr	r2, [pc, #204]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	2b0d      	cmp	r3, #13
 80040da:	d009      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x98>
					|| (message_rx[indx_message_rx + Size_Data - 1] == 0)) {
 80040dc:	4b30      	ldr	r3, [pc, #192]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	89fb      	ldrh	r3, [r7, #14]
 80040e4:	4413      	add	r3, r2
 80040e6:	3b01      	subs	r3, #1
 80040e8:	4a2e      	ldr	r2, [pc, #184]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80040ea:	5cd3      	ldrb	r3, [r2, r3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d117      	bne.n	8004120 <HAL_UARTEx_RxEventCallback+0xc8>
				message_rx[indx_message_rx + Size_Data] = 0;
 80040f0:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	89fb      	ldrh	r3, [r7, #14]
 80040f8:	4413      	add	r3, r2
 80040fa:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x14c>)
 80040fc:	2100      	movs	r1, #0
 80040fe:	54d1      	strb	r1, [r2, r3]
				// выдать сигнал
				osMessagePut(rxDataUART2Handle, (uint32_t) indx_message_rx, 0);
 8004100:	4b2a      	ldr	r3, [pc, #168]	@ (80041ac <HAL_UARTEx_RxEventCallback+0x154>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a26      	ldr	r2, [pc, #152]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 8004106:	8812      	ldrh	r2, [r2, #0]
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f005 f8f9 	bl	8009304 <osMessagePut>
				Size_message = 0;
 8004112:	4b27      	ldr	r3, [pc, #156]	@ (80041b0 <HAL_UARTEx_RxEventCallback+0x158>)
 8004114:	2200      	movs	r2, #0
 8004116:	801a      	strh	r2, [r3, #0]
				// обнулить индекс сообщения
				indx_message_rx = 0;
 8004118:	4b21      	ldr	r3, [pc, #132]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 800411a:	2200      	movs	r2, #0
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	e006      	b.n	800412e <HAL_UARTEx_RxEventCallback+0xd6>
			} else {
				indx_message_rx += Size_Data;
 8004120:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	89fb      	ldrh	r3, [r7, #14]
 8004126:	4413      	add	r3, r2
 8004128:	b29a      	uxth	r2, r3
 800412a:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 800412c:	801a      	strh	r2, [r3, #0]
			}

			Start_index = Size;
 800412e:	4a1b      	ldr	r2, [pc, #108]	@ (800419c <HAL_UARTEx_RxEventCallback+0x144>)
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	8013      	strh	r3, [r2, #0]

			//STM_LOG( "\n" );
			break;
 8004134:	e01d      	b.n	8004172 <HAL_UARTEx_RxEventCallback+0x11a>
			break;

		case HAL_UART_RXEVENT_TC:
			//STM_LOG( "TC Size:%d sd:%d sti:%d", Size, Size_Data, Start_index);
			// скопировать в начало буфера
			memcpy(&message_rx[indx_message_rx], &UART2_rx[Start_index],
 8004136:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	461a      	mov	r2, r3
 800413c:	4b19      	ldr	r3, [pc, #100]	@ (80041a4 <HAL_UARTEx_RxEventCallback+0x14c>)
 800413e:	4413      	add	r3, r2
 8004140:	4a16      	ldr	r2, [pc, #88]	@ (800419c <HAL_UARTEx_RxEventCallback+0x144>)
 8004142:	8812      	ldrh	r2, [r2, #0]
 8004144:	4611      	mov	r1, r2
 8004146:	4a18      	ldr	r2, [pc, #96]	@ (80041a8 <HAL_UARTEx_RxEventCallback+0x150>)
 8004148:	4411      	add	r1, r2
 800414a:	89fa      	ldrh	r2, [r7, #14]
 800414c:	4618      	mov	r0, r3
 800414e:	f008 fc6c 	bl	800ca2a <memcpy>
					Size_Data);
			// сохронить индекс сообщения
			indx_message_rx += Size_Data;
 8004152:	4b13      	ldr	r3, [pc, #76]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	89fb      	ldrh	r3, [r7, #14]
 8004158:	4413      	add	r3, r2
 800415a:	b29a      	uxth	r2, r3
 800415c:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <HAL_UARTEx_RxEventCallback+0x148>)
 800415e:	801a      	strh	r2, [r3, #0]
			Start_index = 0;
 8004160:	4b0e      	ldr	r3, [pc, #56]	@ (800419c <HAL_UARTEx_RxEventCallback+0x144>)
 8004162:	2200      	movs	r2, #0
 8004164:	801a      	strh	r2, [r3, #0]
			break;
 8004166:	e004      	b.n	8004172 <HAL_UARTEx_RxEventCallback+0x11a>

		default:
			STM_LOG("???");
 8004168:	4812      	ldr	r0, [pc, #72]	@ (80041b4 <HAL_UARTEx_RxEventCallback+0x15c>)
 800416a:	f000 faaf 	bl	80046cc <STM_LOG>
			break;
 800416e:	e000      	b.n	8004172 <HAL_UARTEx_RxEventCallback+0x11a>
			break;
 8004170:	bf00      	nop
		}

		HAL_UARTEx_ReceiveToIdle_DMA(huart, UART2_rx, UART2_RX_LENGTH);
 8004172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004176:	490c      	ldr	r1, [pc, #48]	@ (80041a8 <HAL_UARTEx_RxEventCallback+0x150>)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f003 fca5 	bl	8007ac8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x160>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <HAL_UARTEx_RxEventCallback+0x160>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0208 	bic.w	r2, r2, #8
 800418c:	601a      	str	r2, [r3, #0]
		//usart_rx_check(Size);
	}

}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40004400 	.word	0x40004400
 800419c:	20000620 	.word	0x20000620
 80041a0:	2000061c 	.word	0x2000061c
 80041a4:	2000021c 	.word	0x2000021c
 80041a8:	2000041c 	.word	0x2000041c
 80041ac:	2000062c 	.word	0x2000062c
 80041b0:	2000061e 	.word	0x2000061e
 80041b4:	0800f2b0 	.word	0x0800f2b0
 80041b8:	200012d4 	.word	0x200012d4

080041bc <DS18B20_Init>:

static uint8_t DS18B20_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
	uint8_t ResetByte = 0xF0, PresenceByte;
 80041c2:	23f0      	movs	r3, #240	@ 0xf0
 80041c4:	71fb      	strb	r3, [r7, #7]
	//LL_USART_SetBaudRate(huart1.Instance, HAL_RCC_GetPCLK2Freq(), 9600);
	DS18B20_usart_setup(9600);
 80041c6:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80041ca:	f000 f8c1 	bl	8004350 <DS18B20_usart_setup>
	// Send reset pulse (0xF0)
	HAL_UART_Transmit(&huart1, &ResetByte, 1, 1);
 80041ce:	1df9      	adds	r1, r7, #7
 80041d0:	2301      	movs	r3, #1
 80041d2:	2201      	movs	r2, #1
 80041d4:	480b      	ldr	r0, [pc, #44]	@ (8004204 <DS18B20_Init+0x48>)
 80041d6:	f003 fae5 	bl	80077a4 <HAL_UART_Transmit>
	// Wait for the presence pulse
	HAL_UART_Receive(&huart1, &PresenceByte, 1, 1);
 80041da:	1db9      	adds	r1, r7, #6
 80041dc:	2301      	movs	r3, #1
 80041de:	2201      	movs	r2, #1
 80041e0:	4808      	ldr	r0, [pc, #32]	@ (8004204 <DS18B20_Init+0x48>)
 80041e2:	f003 fb6a 	bl	80078ba <HAL_UART_Receive>
	//LL_USART_SetBaudRate(huart1.Instance, HAL_RCC_GetPCLK2Freq(), 115200);
	DS18B20_usart_setup(115200);
 80041e6:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80041ea:	f000 f8b1 	bl	8004350 <DS18B20_usart_setup>
	// Check presence pulse
	if (PresenceByte != ResetByte){
 80041ee:	79ba      	ldrb	r2, [r7, #6]
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d001      	beq.n	80041fa <DS18B20_Init+0x3e>
		return 1; // Presence pulse detected
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <DS18B20_Init+0x40>
	}
	else{
		return 0; // No presence pulse detected
 80041fa:	2300      	movs	r3, #0
	}
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20001244 	.word	0x20001244

08004208 <DS18B20_ReadBit>:

static uint8_t DS18B20_ReadBit(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
    uint8_t ReadBitCMD = 0xFF;
 800420e:	23ff      	movs	r3, #255	@ 0xff
 8004210:	71bb      	strb	r3, [r7, #6]
    uint8_t RxBit;

    // Send Read Bit CMD
    HAL_UART_Transmit(&huart1, &ReadBitCMD, 1, 1);
 8004212:	1db9      	adds	r1, r7, #6
 8004214:	2301      	movs	r3, #1
 8004216:	2201      	movs	r2, #1
 8004218:	4807      	ldr	r0, [pc, #28]	@ (8004238 <DS18B20_ReadBit+0x30>)
 800421a:	f003 fac3 	bl	80077a4 <HAL_UART_Transmit>
    // Receive The Bit
    //HAL_UART_Receive(&huart1, &RxBit, 1, 1);
    RxBit = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF);
 800421e:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <DS18B20_ReadBit+0x30>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	71fb      	strb	r3, [r7, #7]

    return (RxBit & 0x01);
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20001244 	.word	0x20001244

0800423c <DS18B20_ReadByte>:

static uint8_t DS18B20_ReadByte(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
	uint8_t RxByte = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8004246:	2300      	movs	r3, #0
 8004248:	71bb      	strb	r3, [r7, #6]
 800424a:	e00e      	b.n	800426a <DS18B20_ReadByte+0x2e>
	{
		RxByte >>= 1;
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	085b      	lsrs	r3, r3, #1
 8004250:	71fb      	strb	r3, [r7, #7]
		if (DS18B20_ReadBit())
 8004252:	f7ff ffd9 	bl	8004208 <DS18B20_ReadBit>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <DS18B20_ReadByte+0x28>
		{
			RxByte |= 0x80;
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004262:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++)
 8004264:	79bb      	ldrb	r3, [r7, #6]
 8004266:	3301      	adds	r3, #1
 8004268:	71bb      	strb	r3, [r7, #6]
 800426a:	79bb      	ldrb	r3, [r7, #6]
 800426c:	2b07      	cmp	r3, #7
 800426e:	d9ed      	bls.n	800424c <DS18B20_ReadByte+0x10>
		}
	}
	return RxByte;
 8004270:	79fb      	ldrb	r3, [r7, #7]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <DS18B20_WriteByte>:

static void DS18B20_WriteByte(uint8_t data)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[8];
    for (int i=0; i<8; i++)
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e017      	b.n	80042bc <DS18B20_WriteByte+0x40>
    {
	  if ((data & (1<<i)) != 0){
 800428c:	79fa      	ldrb	r2, [r7, #7]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	fa42 f303 	asr.w	r3, r2, r3
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d006      	beq.n	80042aa <DS18B20_WriteByte+0x2e>
		  TxBuffer[i] = 0xFF;
 800429c:	f107 020c 	add.w	r2, r7, #12
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	4413      	add	r3, r2
 80042a4:	22ff      	movs	r2, #255	@ 0xff
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e005      	b.n	80042b6 <DS18B20_WriteByte+0x3a>
	  }
	  else{
		  TxBuffer[i] = 0;
 80042aa:	f107 020c 	add.w	r2, r7, #12
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4413      	add	r3, r2
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<8; i++)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b07      	cmp	r3, #7
 80042c0:	dde4      	ble.n	800428c <DS18B20_WriteByte+0x10>
	  }
    }
    HAL_UART_Transmit(&huart1, TxBuffer, 8, 10);
 80042c2:	f107 010c 	add.w	r1, r7, #12
 80042c6:	230a      	movs	r3, #10
 80042c8:	2208      	movs	r2, #8
 80042ca:	4803      	ldr	r0, [pc, #12]	@ (80042d8 <DS18B20_WriteByte+0x5c>)
 80042cc:	f003 fa6a 	bl	80077a4 <HAL_UART_Transmit>
}
 80042d0:	bf00      	nop
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20001244 	.word	0x20001244

080042dc <DS18B20_SampleTemp>:

void DS18B20_SampleTemp(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
	DS18B20_Init();
 80042e0:	f7ff ff6c 	bl	80041bc <DS18B20_Init>
	DS18B20_WriteByte(0xCC);  // Skip ROM   (ROM-CMD)
 80042e4:	20cc      	movs	r0, #204	@ 0xcc
 80042e6:	f7ff ffc9 	bl	800427c <DS18B20_WriteByte>
	DS18B20_WriteByte(0x44);  // Convert T  (F-CMD)
 80042ea:	2044      	movs	r0, #68	@ 0x44
 80042ec:	f7ff ffc6 	bl	800427c <DS18B20_WriteByte>
}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB, Temp_MSB;
	uint16_t Temp;
	float Temperature;

	DS18B20_Init();
 80042fa:	f7ff ff5f 	bl	80041bc <DS18B20_Init>
	DS18B20_WriteByte(0xCC);  // Skip ROM         (ROM-CMD)
 80042fe:	20cc      	movs	r0, #204	@ 0xcc
 8004300:	f7ff ffbc 	bl	800427c <DS18B20_WriteByte>
	DS18B20_WriteByte(0xBE);  // Read Scratchpad  (F-CMD)
 8004304:	20be      	movs	r0, #190	@ 0xbe
 8004306:	f7ff ffb9 	bl	800427c <DS18B20_WriteByte>
	Temp_LSB = DS18B20_ReadByte();
 800430a:	f7ff ff97 	bl	800423c <DS18B20_ReadByte>
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
	Temp_MSB = DS18B20_ReadByte();
 8004312:	f7ff ff93 	bl	800423c <DS18B20_ReadByte>
 8004316:	4603      	mov	r3, r0
 8004318:	71bb      	strb	r3, [r7, #6]
	Temp = ((Temp_MSB<<8))|Temp_LSB;
 800431a:	79bb      	ldrb	r3, [r7, #6]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	b21a      	sxth	r2, r3
 8004320:	79fb      	ldrb	r3, [r7, #7]
 8004322:	b21b      	sxth	r3, r3
 8004324:	4313      	orrs	r3, r2
 8004326:	b21b      	sxth	r3, r3
 8004328:	80bb      	strh	r3, [r7, #4]
	Temperature = (float)Temp/16.0;
 800432a:	88bb      	ldrh	r3, [r7, #4]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004334:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800433c:	edc7 7a00 	vstr	s15, [r7]

	return Temperature;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	ee07 3a90 	vmov	s15, r3
}
 8004346:	eeb0 0a67 	vmov.f32	s0, s15
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <DS18B20_usart_setup>:

void DS18B20_usart_setup(uint32_t baud) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

	huart1.Instance = USART1;
 8004358:	4b18      	ldr	r3, [pc, #96]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 800435a:	4a19      	ldr	r2, [pc, #100]	@ (80043c0 <DS18B20_usart_setup+0x70>)
 800435c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = baud;
 800435e:	4a17      	ldr	r2, [pc, #92]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6053      	str	r3, [r2, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004364:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800436a:	4b14      	ldr	r3, [pc, #80]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 800436c:	2200      	movs	r2, #0
 800436e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004370:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 8004372:	2200      	movs	r2, #0
 8004374:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004376:	4b11      	ldr	r3, [pc, #68]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 8004378:	220c      	movs	r2, #12
 800437a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800437c:	4b0f      	ldr	r3, [pc, #60]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 800437e:	2200      	movs	r2, #0
 8004380:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004382:	4b0e      	ldr	r3, [pc, #56]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 8004384:	2200      	movs	r2, #0
 8004386:	61da      	str	r2, [r3, #28]

	HAL_UART_Abort_IT(&huart1);
 8004388:	480c      	ldr	r0, [pc, #48]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 800438a:	f003 fc07 	bl	8007b9c <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&huart1);
 800438e:	480b      	ldr	r0, [pc, #44]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 8004390:	f003 f9d6 	bl	8007740 <HAL_UART_DeInit>
	if (HAL_UART_Init(&huart1) != HAL_OK) //HAL_UART_Init
 8004394:	4809      	ldr	r0, [pc, #36]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 8004396:	f003 f983 	bl	80076a0 <HAL_UART_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d000      	beq.n	80043a2 <DS18B20_usart_setup+0x52>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80043a0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80043a2:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4b04      	ldr	r3, [pc, #16]	@ (80043bc <DS18B20_usart_setup+0x6c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0220 	orr.w	r2, r2, #32
 80043b0:	60da      	str	r2, [r3, #12]
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20001244 	.word	0x20001244
 80043c0:	40011000 	.word	0x40011000

080043c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ca:	f107 030c 	add.w	r3, r7, #12
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	60da      	str	r2, [r3, #12]
 80043d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
 80043de:	4b3a      	ldr	r3, [pc, #232]	@ (80044c8 <MX_GPIO_Init+0x104>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a39      	ldr	r2, [pc, #228]	@ (80044c8 <MX_GPIO_Init+0x104>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b37      	ldr	r3, [pc, #220]	@ (80044c8 <MX_GPIO_Init+0x104>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	4b33      	ldr	r3, [pc, #204]	@ (80044c8 <MX_GPIO_Init+0x104>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	4a32      	ldr	r2, [pc, #200]	@ (80044c8 <MX_GPIO_Init+0x104>)
 8004400:	f043 0302 	orr.w	r3, r3, #2
 8004404:	6313      	str	r3, [r2, #48]	@ 0x30
 8004406:	4b30      	ldr	r3, [pc, #192]	@ (80044c8 <MX_GPIO_Init+0x104>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4b2c      	ldr	r3, [pc, #176]	@ (80044c8 <MX_GPIO_Init+0x104>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	4a2b      	ldr	r2, [pc, #172]	@ (80044c8 <MX_GPIO_Init+0x104>)
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	6313      	str	r3, [r2, #48]	@ 0x30
 8004422:	4b29      	ldr	r3, [pc, #164]	@ (80044c8 <MX_GPIO_Init+0x104>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B1_Pin|B2_Pin, GPIO_PIN_RESET);
 800442e:	2200      	movs	r2, #0
 8004430:	21c0      	movs	r1, #192	@ 0xc0
 8004432:	4826      	ldr	r0, [pc, #152]	@ (80044cc <MX_GPIO_Init+0x108>)
 8004434:	f002 f960 	bl	80066f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_RESET);
 8004438:	2200      	movs	r2, #0
 800443a:	2102      	movs	r1, #2
 800443c:	4824      	ldr	r0, [pc, #144]	@ (80044d0 <MX_GPIO_Init+0x10c>)
 800443e:	f002 f95b 	bl	80066f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED1_Pin, GPIO_PIN_RESET);
 8004442:	2200      	movs	r2, #0
 8004444:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8004448:	4822      	ldr	r0, [pc, #136]	@ (80044d4 <MX_GPIO_Init+0x110>)
 800444a:	f002 f955 	bl	80066f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800444e:	23c0      	movs	r3, #192	@ 0xc0
 8004450:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004452:	2301      	movs	r3, #1
 8004454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445e:	f107 030c 	add.w	r3, r7, #12
 8004462:	4619      	mov	r1, r3
 8004464:	4819      	ldr	r0, [pc, #100]	@ (80044cc <MX_GPIO_Init+0x108>)
 8004466:	f001 feaf 	bl	80061c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTR_Pin;
 800446a:	2302      	movs	r3, #2
 800446c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800446e:	2301      	movs	r3, #1
 8004470:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CTR_GPIO_Port, &GPIO_InitStruct);
 800447a:	f107 030c 	add.w	r3, r7, #12
 800447e:	4619      	mov	r1, r3
 8004480:	4813      	ldr	r0, [pc, #76]	@ (80044d0 <MX_GPIO_Init+0x10c>)
 8004482:	f001 fea1 	bl	80061c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Zc_INT_Pin;
 8004486:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800448a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800448c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Zc_INT_GPIO_Port, &GPIO_InitStruct);
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	4619      	mov	r1, r3
 800449c:	480c      	ldr	r0, [pc, #48]	@ (80044d0 <MX_GPIO_Init+0x10c>)
 800449e:	f001 fe93 	bl	80061c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin;
 80044a2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80044a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a8:	2301      	movs	r3, #1
 80044aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	4619      	mov	r1, r3
 80044ba:	4806      	ldr	r0, [pc, #24]	@ (80044d4 <MX_GPIO_Init+0x110>)
 80044bc:	f001 fe84 	bl	80061c8 <HAL_GPIO_Init>

}
 80044c0:	bf00      	nop
 80044c2:	3720      	adds	r7, #32
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	40020000 	.word	0x40020000
 80044d0:	40020400 	.word	0x40020400
 80044d4:	40020800 	.word	0x40020800

080044d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044de:	f000 fde5 	bl	80050ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044e2:	f000 f889 	bl	80045f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044e6:	f7ff ff6d 	bl	80043c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80044ea:	f7fe fe6d 	bl	80031c8 <MX_DMA_Init>
  MX_TIM13_Init();
 80044ee:	f000 fbb1 	bl	8004c54 <MX_TIM13_Init>
  MX_TIM14_Init();
 80044f2:	f000 fbd3 	bl	8004c9c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80044f6:	f000 fc33 	bl	8004d60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80044fa:	f000 fc5b 	bl	8004db4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	STM_LOG("start dimmer");
 80044fe:	4834      	ldr	r0, [pc, #208]	@ (80045d0 <main+0xf8>)
 8004500:	f000 f8e4 	bl	80046cc <STM_LOG>

	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 8004504:	f001 fbdc 	bl	8005cc0 <HAL_FLASH_Unlock>
	/* EEPROM Init */
	STM_LOG("eeprom init start");
 8004508:	4832      	ldr	r0, [pc, #200]	@ (80045d4 <main+0xfc>)
 800450a:	f000 f8df 	bl	80046cc <STM_LOG>
	if (EE_Init() != EE_OK) {
 800450e:	f7fe fe83 	bl	8003218 <EE_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <main+0x48>
		STM_LOG("eeprom init fault");
 8004518:	482f      	ldr	r0, [pc, #188]	@ (80045d8 <main+0x100>)
 800451a:	f000 f8d7 	bl	80046cc <STM_LOG>
 800451e:	e04f      	b.n	80045c0 <main+0xe8>
	} else {
		// Fill EEPROM variables addresses
		for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 8004520:	4b2e      	ldr	r3, [pc, #184]	@ (80045dc <main+0x104>)
 8004522:	2201      	movs	r2, #1
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	e00d      	b.n	8004544 <main+0x6c>
			VirtAddVarTab[VarIndex - 1] = VarIndex;
 8004528:	4b2c      	ldr	r3, [pc, #176]	@ (80045dc <main+0x104>)
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	3b01      	subs	r3, #1
 800452e:	4a2b      	ldr	r2, [pc, #172]	@ (80045dc <main+0x104>)
 8004530:	8811      	ldrh	r1, [r2, #0]
 8004532:	4a2b      	ldr	r2, [pc, #172]	@ (80045e0 <main+0x108>)
 8004534:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 8004538:	4b28      	ldr	r3, [pc, #160]	@ (80045dc <main+0x104>)
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	4b26      	ldr	r3, [pc, #152]	@ (80045dc <main+0x104>)
 8004542:	801a      	strh	r2, [r3, #0]
 8004544:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <main+0x104>)
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	2b20      	cmp	r3, #32
 800454a:	d9ed      	bls.n	8004528 <main+0x50>
		}

		HAL_StatusTypeDef ret;
		ret = eeprom_read(&termo_set);
 800454c:	4825      	ldr	r0, [pc, #148]	@ (80045e4 <main+0x10c>)
 800454e:	f000 f8f5 	bl	800473c <eeprom_read>
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
		if (ret != HAL_OK) {
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d031      	beq.n	80045c0 <main+0xe8>
			STM_LOG("var  not foud in eeprom. wtite default");
 800455c:	4822      	ldr	r0, [pc, #136]	@ (80045e8 <main+0x110>)
 800455e:	f000 f8b5 	bl	80046cc <STM_LOG>
			termo_set.setTEMP = SETTEMP;
 8004562:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <main+0x10c>)
 8004564:	4a21      	ldr	r2, [pc, #132]	@ (80045ec <main+0x114>)
 8004566:	601a      	str	r2, [r3, #0]
			termo_set.maxTemp = MAXTEMP;
 8004568:	4b1e      	ldr	r3, [pc, #120]	@ (80045e4 <main+0x10c>)
 800456a:	4a21      	ldr	r2, [pc, #132]	@ (80045f0 <main+0x118>)
 800456c:	605a      	str	r2, [r3, #4]
			termo_set.stepTemp = STEPTEMP;
 800456e:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <main+0x10c>)
 8004570:	4a20      	ldr	r2, [pc, #128]	@ (80045f4 <main+0x11c>)
 8004572:	609a      	str	r2, [r3, #8]

			ret = eeprom_write(termo_set);
 8004574:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <main+0x10c>)
 8004576:	edd3 6a00 	vldr	s13, [r3]
 800457a:	ed93 7a01 	vldr	s14, [r3, #4]
 800457e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004582:	eeb0 0a66 	vmov.f32	s0, s13
 8004586:	eef0 0a47 	vmov.f32	s1, s14
 800458a:	eeb0 1a67 	vmov.f32	s2, s15
 800458e:	f000 f915 	bl	80047bc <eeprom_write>
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
			if (ret != HAL_OK) {
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <main+0xca>
				eeprom_read(&termo_set);
 800459c:	4811      	ldr	r0, [pc, #68]	@ (80045e4 <main+0x10c>)
 800459e:	f000 f8cd 	bl	800473c <eeprom_read>
			}
			termo_set.setTEMP = 0;
 80045a2:	4b10      	ldr	r3, [pc, #64]	@ (80045e4 <main+0x10c>)
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
			termo_set.maxTemp = 0;
 80045aa:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <main+0x10c>)
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]
			termo_set.stepTemp = 0;
 80045b2:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <main+0x10c>)
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
			eeprom_read(&termo_set);
 80045ba:	480a      	ldr	r0, [pc, #40]	@ (80045e4 <main+0x10c>)
 80045bc:	f000 f8be 	bl	800473c <eeprom_read>

		}

	}
	HAL_FLASH_Lock();
 80045c0:	f001 fba0 	bl	8005d04 <HAL_FLASH_Lock>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80045c4:	f7ff fa9a 	bl	8003afc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80045c8:	f004 fdda 	bl	8009180 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <main+0xf4>
 80045d0:	0800f2b4 	.word	0x0800f2b4
 80045d4:	0800f2c4 	.word	0x0800f2c4
 80045d8:	0800f2d8 	.word	0x0800f2d8
 80045dc:	20000960 	.word	0x20000960
 80045e0:	200008e0 	.word	0x200008e0
 80045e4:	200008d4 	.word	0x200008d4
 80045e8:	0800f2ec 	.word	0x0800f2ec
 80045ec:	41f00000 	.word	0x41f00000
 80045f0:	42340000 	.word	0x42340000
 80045f4:	41700000 	.word	0x41700000

080045f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b094      	sub	sp, #80	@ 0x50
 80045fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045fe:	f107 0320 	add.w	r3, r7, #32
 8004602:	2230      	movs	r2, #48	@ 0x30
 8004604:	2100      	movs	r1, #0
 8004606:	4618      	mov	r0, r3
 8004608:	f008 f91c 	bl	800c844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800460c:	f107 030c 	add.w	r3, r7, #12
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800461c:	2300      	movs	r3, #0
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <SystemClock_Config+0xcc>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	4a27      	ldr	r2, [pc, #156]	@ (80046c4 <SystemClock_Config+0xcc>)
 8004626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800462a:	6413      	str	r3, [r2, #64]	@ 0x40
 800462c:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <SystemClock_Config+0xcc>)
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004638:	2300      	movs	r3, #0
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	4b22      	ldr	r3, [pc, #136]	@ (80046c8 <SystemClock_Config+0xd0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a21      	ldr	r2, [pc, #132]	@ (80046c8 <SystemClock_Config+0xd0>)
 8004642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b1f      	ldr	r3, [pc, #124]	@ (80046c8 <SystemClock_Config+0xd0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004650:	607b      	str	r3, [r7, #4]
 8004652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004654:	2302      	movs	r3, #2
 8004656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004658:	2301      	movs	r3, #1
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800465c:	2310      	movs	r3, #16
 800465e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004660:	2302      	movs	r3, #2
 8004662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004664:	2300      	movs	r3, #0
 8004666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004668:	2308      	movs	r3, #8
 800466a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800466c:	23a8      	movs	r3, #168	@ 0xa8
 800466e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004670:	2302      	movs	r3, #2
 8004672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004674:	2304      	movs	r3, #4
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004678:	f107 0320 	add.w	r3, r7, #32
 800467c:	4618      	mov	r0, r3
 800467e:	f002 f855 	bl	800672c <HAL_RCC_OscConfig>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004688:	f000 f910 	bl	80048ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800468c:	230f      	movs	r3, #15
 800468e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004690:	2302      	movs	r3, #2
 8004692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004698:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800469c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800469e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	2105      	movs	r1, #5
 80046aa:	4618      	mov	r0, r3
 80046ac:	f002 fab6 	bl	8006c1c <HAL_RCC_ClockConfig>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80046b6:	f000 f8f9 	bl	80048ac <Error_Handler>
  }
}
 80046ba:	bf00      	nop
 80046bc:	3750      	adds	r7, #80	@ 0x50
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40007000 	.word	0x40007000

080046cc <STM_LOG>:

/* USER CODE BEGIN 4 */
uint8_t log_tx_buffer[LOG_TX_BUF_SIZE + 2];

void STM_LOG(const char *format, ...) {
 80046cc:	b40f      	push	{r0, r1, r2, r3}
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
	while (DBG_PORT.gState != HAL_UART_STATE_READY);
 80046d4:	bf00      	nop
 80046d6:	4b17      	ldr	r3, [pc, #92]	@ (8004734 <STM_LOG+0x68>)
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d1f9      	bne.n	80046d6 <STM_LOG+0xa>

	va_list args;
	int size = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]

	va_start(args, format);
 80046e6:	f107 0314 	add.w	r3, r7, #20
 80046ea:	603b      	str	r3, [r7, #0]
	//vsprintf((char *)log_tx_buffer, format, args);
	size = vsnprintf((char*) log_tx_buffer, LOG_TX_BUF_SIZE, format, args);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046f4:	4810      	ldr	r0, [pc, #64]	@ (8004738 <STM_LOG+0x6c>)
 80046f6:	f008 f897 	bl	800c828 <vsniprintf>
 80046fa:	6078      	str	r0, [r7, #4]
	va_end(args);

	// добавить \r
	log_tx_buffer[size] = '\r';
 80046fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004738 <STM_LOG+0x6c>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	220d      	movs	r2, #13
 8004704:	701a      	strb	r2, [r3, #0]
	log_tx_buffer[size + 1] = 0;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3301      	adds	r3, #1
 800470a:	4a0b      	ldr	r2, [pc, #44]	@ (8004738 <STM_LOG+0x6c>)
 800470c:	2100      	movs	r1, #0
 800470e:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_DMA(&DBG_PORT, log_tx_buffer,
			strlen((const char*) log_tx_buffer));
 8004710:	4809      	ldr	r0, [pc, #36]	@ (8004738 <STM_LOG+0x6c>)
 8004712:	f7fb fd67 	bl	80001e4 <strlen>
 8004716:	4603      	mov	r3, r0
	HAL_UART_Transmit_DMA(&DBG_PORT, log_tx_buffer,
 8004718:	b29b      	uxth	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	4906      	ldr	r1, [pc, #24]	@ (8004738 <STM_LOG+0x6c>)
 800471e:	4805      	ldr	r0, [pc, #20]	@ (8004734 <STM_LOG+0x68>)
 8004720:	f003 f962 	bl	80079e8 <HAL_UART_Transmit_DMA>
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800472e:	b004      	add	sp, #16
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	2000128c 	.word	0x2000128c
 8004738:	20000964 	.word	0x20000964

0800473c <eeprom_read>:

uint16_t eeprom_read(trmo_settings *ts) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	 }
	 }

	 *Data = (*(float*) &arr[start_vIndex]);*/

	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <eeprom_read+0x70>)
 8004746:	2200      	movs	r2, #0
 8004748:	801a      	strh	r2, [r3, #0]
 800474a:	e021      	b.n	8004790 <eeprom_read+0x54>
		ret = EE_ReadVariable(VirtAddVarTab[VarIndex], &VarDataTabRead[VarIndex]);
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <eeprom_read+0x70>)
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	4b17      	ldr	r3, [pc, #92]	@ (80047b0 <eeprom_read+0x74>)
 8004754:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004758:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <eeprom_read+0x70>)
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4915      	ldr	r1, [pc, #84]	@ (80047b4 <eeprom_read+0x78>)
 8004760:	440b      	add	r3, r1
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f7fe ff61 	bl	800362c <EE_ReadVariable>
 800476a:	4603      	mov	r3, r0
 800476c:	81fb      	strh	r3, [r7, #14]
		if (ret != HAL_OK) {
 800476e:	89fb      	ldrh	r3, [r7, #14]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <eeprom_read+0x48>
			STM_LOG("fail write eeprom: vindex %d", VarIndex);
 8004774:	4b0d      	ldr	r3, [pc, #52]	@ (80047ac <eeprom_read+0x70>)
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	480f      	ldr	r0, [pc, #60]	@ (80047b8 <eeprom_read+0x7c>)
 800477c:	f7ff ffa6 	bl	80046cc <STM_LOG>
			return ret;
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	e00f      	b.n	80047a4 <eeprom_read+0x68>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8004784:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <eeprom_read+0x70>)
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <eeprom_read+0x70>)
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <eeprom_read+0x70>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	2b1f      	cmp	r3, #31
 8004796:	d9d9      	bls.n	800474c <eeprom_read+0x10>
		}
	}

	*ts = (*(trmo_settings*) VarDataTabRead);
 8004798:	4a06      	ldr	r2, [pc, #24]	@ (80047b4 <eeprom_read+0x78>)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	ca07      	ldmia	r2, {r0, r1, r2}
 800479e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return ret;
 80047a2:	89fb      	ldrh	r3, [r7, #14]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20000960 	.word	0x20000960
 80047b0:	200008e0 	.word	0x200008e0
 80047b4:	20000920 	.word	0x20000920
 80047b8:	0800f314 	.word	0x0800f314

080047bc <eeprom_write>:

uint16_t eeprom_write(trmo_settings ts) {
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	eef0 6a40 	vmov.f32	s13, s0
 80047c6:	eeb0 7a60 	vmov.f32	s14, s1
 80047ca:	eef0 7a41 	vmov.f32	s15, s2
 80047ce:	edc7 6a01 	vstr	s13, [r7, #4]
 80047d2:	ed87 7a02 	vstr	s14, [r7, #8]
 80047d6:	edc7 7a03 	vstr	s15, [r7, #12]
	 return ret;
	 }
	 }*/
	//uint16_t *arr = (uint16_t*)(&ts);
	//VarDataTabRead = (uint16_t*)(&ts);
	memcpy(VarDataTabRead, (uint16_t*)(&ts), sizeof(ts));
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <eeprom_write+0x8c>)
 80047dc:	461c      	mov	r4, r3
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80047e8:	4b18      	ldr	r3, [pc, #96]	@ (800484c <eeprom_write+0x90>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	801a      	strh	r2, [r3, #0]
 80047ee:	e022      	b.n	8004836 <eeprom_write+0x7a>
		ret = EE_WriteVariable(VirtAddVarTab[VarIndex], VarDataTabRead[VarIndex]);
 80047f0:	4b16      	ldr	r3, [pc, #88]	@ (800484c <eeprom_write+0x90>)
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <eeprom_write+0x94>)
 80047f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80047fc:	4a13      	ldr	r2, [pc, #76]	@ (800484c <eeprom_write+0x90>)
 80047fe:	8812      	ldrh	r2, [r2, #0]
 8004800:	4611      	mov	r1, r2
 8004802:	4a11      	ldr	r2, [pc, #68]	@ (8004848 <eeprom_write+0x8c>)
 8004804:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe ff56 	bl	80036bc <EE_WriteVariable>
 8004810:	4603      	mov	r3, r0
 8004812:	82fb      	strh	r3, [r7, #22]
		if (ret != HAL_OK) {
 8004814:	8afb      	ldrh	r3, [r7, #22]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <eeprom_write+0x6e>
			STM_LOG("fail write eeprom: vindex %d", VarIndex);
 800481a:	4b0c      	ldr	r3, [pc, #48]	@ (800484c <eeprom_write+0x90>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	4619      	mov	r1, r3
 8004820:	480c      	ldr	r0, [pc, #48]	@ (8004854 <eeprom_write+0x98>)
 8004822:	f7ff ff53 	bl	80046cc <STM_LOG>
			return ret;
 8004826:	8afb      	ldrh	r3, [r7, #22]
 8004828:	e00a      	b.n	8004840 <eeprom_write+0x84>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 800482a:	4b08      	ldr	r3, [pc, #32]	@ (800484c <eeprom_write+0x90>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	3301      	adds	r3, #1
 8004830:	b29a      	uxth	r2, r3
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <eeprom_write+0x90>)
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	4b05      	ldr	r3, [pc, #20]	@ (800484c <eeprom_write+0x90>)
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	2b1f      	cmp	r3, #31
 800483c:	d9d8      	bls.n	80047f0 <eeprom_write+0x34>
		}
	}
	return ret;
 800483e:	8afb      	ldrh	r3, [r7, #22]
}
 8004840:	4618      	mov	r0, r3
 8004842:	371c      	adds	r7, #28
 8004844:	46bd      	mov	sp, r7
 8004846:	bd90      	pop	{r4, r7, pc}
 8004848:	20000920 	.word	0x20000920
 800484c:	20000960 	.word	0x20000960
 8004850:	200008e0 	.word	0x200008e0
 8004854:	0800f314 	.word	0x0800f314

08004858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0d      	ldr	r2, [pc, #52]	@ (800489c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800486a:	f000 fc41 	bl	80050f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == htim14.Instance) {
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d10c      	bne.n	8004894 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_TIM_Base_Stop_IT(&htim14);
 800487a:	4809      	ldr	r0, [pc, #36]	@ (80048a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800487c:	f002 fd08 	bl	8007290 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_SET);
 8004880:	2201      	movs	r2, #1
 8004882:	2102      	movs	r1, #2
 8004884:	4807      	ldr	r0, [pc, #28]	@ (80048a4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004886:	f001 ff37 	bl	80066f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 800488a:	2201      	movs	r2, #1
 800488c:	2140      	movs	r1, #64	@ 0x40
 800488e:	4806      	ldr	r0, [pc, #24]	@ (80048a8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004890:	f001 ff32 	bl	80066f8 <HAL_GPIO_WritePin>
	}
  /* USER CODE END Callback 1 */
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40001800 	.word	0x40001800
 80048a0:	200011fc 	.word	0x200011fc
 80048a4:	40020400 	.word	0x40020400
 80048a8:	40020000 	.word	0x40020000

080048ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048b0:	b672      	cpsid	i
}
 80048b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <Error_Handler+0x8>

080048b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	4b12      	ldr	r3, [pc, #72]	@ (800490c <HAL_MspInit+0x54>)
 80048c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c6:	4a11      	ldr	r2, [pc, #68]	@ (800490c <HAL_MspInit+0x54>)
 80048c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80048ce:	4b0f      	ldr	r3, [pc, #60]	@ (800490c <HAL_MspInit+0x54>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4b0b      	ldr	r3, [pc, #44]	@ (800490c <HAL_MspInit+0x54>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	4a0a      	ldr	r2, [pc, #40]	@ (800490c <HAL_MspInit+0x54>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80048ea:	4b08      	ldr	r3, [pc, #32]	@ (800490c <HAL_MspInit+0x54>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	210f      	movs	r1, #15
 80048fa:	f06f 0001 	mvn.w	r0, #1
 80048fe:	f000 fcf3 	bl	80052e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800

08004910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08e      	sub	sp, #56	@ 0x38
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	4b33      	ldr	r3, [pc, #204]	@ (80049f4 <HAL_InitTick+0xe4>)
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	4a32      	ldr	r2, [pc, #200]	@ (80049f4 <HAL_InitTick+0xe4>)
 800492a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800492e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004930:	4b30      	ldr	r3, [pc, #192]	@ (80049f4 <HAL_InitTick+0xe4>)
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800493c:	f107 0210 	add.w	r2, r7, #16
 8004940:	f107 0314 	add.w	r3, r7, #20
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f002 fb48 	bl	8006fdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM12 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004956:	f002 fb19 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 800495a:	6378      	str	r0, [r7, #52]	@ 0x34
 800495c:	e004      	b.n	8004968 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800495e:	f002 fb15 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8004962:	4603      	mov	r3, r0
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	4a23      	ldr	r2, [pc, #140]	@ (80049f8 <HAL_InitTick+0xe8>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	0c9b      	lsrs	r3, r3, #18
 8004972:	3b01      	subs	r3, #1
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8004976:	4b21      	ldr	r3, [pc, #132]	@ (80049fc <HAL_InitTick+0xec>)
 8004978:	4a21      	ldr	r2, [pc, #132]	@ (8004a00 <HAL_InitTick+0xf0>)
 800497a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 800497c:	4b1f      	ldr	r3, [pc, #124]	@ (80049fc <HAL_InitTick+0xec>)
 800497e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004982:	60da      	str	r2, [r3, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 8004984:	4a1d      	ldr	r2, [pc, #116]	@ (80049fc <HAL_InitTick+0xec>)
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	6053      	str	r3, [r2, #4]
  htim12.Init.ClockDivision = 0;
 800498a:	4b1c      	ldr	r3, [pc, #112]	@ (80049fc <HAL_InitTick+0xec>)
 800498c:	2200      	movs	r2, #0
 800498e:	611a      	str	r2, [r3, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004990:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <HAL_InitTick+0xec>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004996:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <HAL_InitTick+0xec>)
 8004998:	2200      	movs	r2, #0
 800499a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim12);
 800499c:	4817      	ldr	r0, [pc, #92]	@ (80049fc <HAL_InitTick+0xec>)
 800499e:	f002 fb4f 	bl	8007040 <HAL_TIM_Base_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80049a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11b      	bne.n	80049e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim12);
 80049b0:	4812      	ldr	r0, [pc, #72]	@ (80049fc <HAL_InitTick+0xec>)
 80049b2:	f002 fbfd 	bl	80071b0 <HAL_TIM_Base_Start_IT>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80049bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d111      	bne.n	80049e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM12 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80049c4:	202b      	movs	r0, #43	@ 0x2b
 80049c6:	f000 fcab 	bl	8005320 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d808      	bhi.n	80049e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority, 0U);
 80049d0:	2200      	movs	r2, #0
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	202b      	movs	r0, #43	@ 0x2b
 80049d6:	f000 fc87 	bl	80052e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049da:	4a0a      	ldr	r2, [pc, #40]	@ (8004a04 <HAL_InitTick+0xf4>)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	e002      	b.n	80049e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80049e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3738      	adds	r7, #56	@ 0x38
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	431bde83 	.word	0x431bde83
 80049fc:	20001168 	.word	0x20001168
 8004a00:	40001800 	.word	0x40001800
 8004a04:	20000014 	.word	0x20000014

08004a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a0c:	bf00      	nop
 8004a0e:	e7fd      	b.n	8004a0c <NMI_Handler+0x4>

08004a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <HardFault_Handler+0x4>

08004a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <MemManage_Handler+0x4>

08004a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <BusFault_Handler+0x4>

08004a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <UsageFault_Handler+0x4>

08004a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a44:	4802      	ldr	r0, [pc, #8]	@ (8004a50 <DMA1_Stream5_IRQHandler+0x10>)
 8004a46:	f000 fe7d 	bl	8005744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	200012d4 	.word	0x200012d4

08004a54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a58:	4802      	ldr	r0, [pc, #8]	@ (8004a64 <DMA1_Stream6_IRQHandler+0x10>)
 8004a5a:	f000 fe73 	bl	8005744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20001334 	.word	0x20001334

08004a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a6c:	4802      	ldr	r0, [pc, #8]	@ (8004a78 <USART2_IRQHandler+0x10>)
 8004a6e:	f003 f9a9 	bl	8007dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000128c 	.word	0x2000128c

08004a7c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004a80:	4802      	ldr	r0, [pc, #8]	@ (8004a8c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004a82:	f002 fc34 	bl	80072ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20001168 	.word	0x20001168

08004a90 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004a94:	4802      	ldr	r0, [pc, #8]	@ (8004aa0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004a96:	f002 fc2a 	bl	80072ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200011fc 	.word	0x200011fc

08004aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return 1;
 8004aa8:	2301      	movs	r3, #1
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <_kill>:

int _kill(int pid, int sig)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004abe:	f007 ff87 	bl	800c9d0 <__errno>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2216      	movs	r2, #22
 8004ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_exit>:

void _exit (int status)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ffe7 	bl	8004ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ae6:	bf00      	nop
 8004ae8:	e7fd      	b.n	8004ae6 <_exit+0x12>

08004aea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e00a      	b.n	8004b12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004afc:	f3af 8000 	nop.w
 8004b00:	4601      	mov	r1, r0
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	60ba      	str	r2, [r7, #8]
 8004b08:	b2ca      	uxtb	r2, r1
 8004b0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	dbf0      	blt.n	8004afc <_read+0x12>
  }

  return len;
 8004b1a:	687b      	ldr	r3, [r7, #4]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e009      	b.n	8004b4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	60ba      	str	r2, [r7, #8]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	3301      	adds	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	dbf1      	blt.n	8004b36 <_write+0x12>
  }
  return len;
 8004b52:	687b      	ldr	r3, [r7, #4]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <_close>:

int _close(int file)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b84:	605a      	str	r2, [r3, #4]
  return 0;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <_isatty>:

int _isatty(int file)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b9c:	2301      	movs	r3, #1
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bcc:	4a14      	ldr	r2, [pc, #80]	@ (8004c20 <_sbrk+0x5c>)
 8004bce:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <_sbrk+0x60>)
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bd8:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <_sbrk+0x64>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <_sbrk+0x64>)
 8004be2:	4a12      	ldr	r2, [pc, #72]	@ (8004c2c <_sbrk+0x68>)
 8004be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004be6:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <_sbrk+0x64>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d207      	bcs.n	8004c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bf4:	f007 feec 	bl	800c9d0 <__errno>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	220c      	movs	r2, #12
 8004bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	e009      	b.n	8004c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c04:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <_sbrk+0x64>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c0a:	4b07      	ldr	r3, [pc, #28]	@ (8004c28 <_sbrk+0x64>)
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	4a05      	ldr	r2, [pc, #20]	@ (8004c28 <_sbrk+0x64>)
 8004c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c16:	68fb      	ldr	r3, [r7, #12]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20020000 	.word	0x20020000
 8004c24:	00004000 	.word	0x00004000
 8004c28:	200011b0 	.word	0x200011b0
 8004c2c:	20005258 	.word	0x20005258

08004c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <SystemInit+0x20>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3a:	4a05      	ldr	r2, [pc, #20]	@ (8004c50 <SystemInit+0x20>)
 8004c3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004c58:	4b0e      	ldr	r3, [pc, #56]	@ (8004c94 <MX_TIM13_Init+0x40>)
 8004c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8004c98 <MX_TIM13_Init+0x44>)
 8004c5c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <MX_TIM13_Init+0x40>)
 8004c60:	22a7      	movs	r2, #167	@ 0xa7
 8004c62:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c64:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <MX_TIM13_Init+0x40>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <MX_TIM13_Init+0x40>)
 8004c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c70:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c72:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <MX_TIM13_Init+0x40>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c78:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <MX_TIM13_Init+0x40>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004c7e:	4805      	ldr	r0, [pc, #20]	@ (8004c94 <MX_TIM13_Init+0x40>)
 8004c80:	f002 f9de 	bl	8007040 <HAL_TIM_Base_Init>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004c8a:	f7ff fe0f 	bl	80048ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200011b4 	.word	0x200011b4
 8004c98:	40001c00 	.word	0x40001c00

08004c9c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8004cdc <MX_TIM14_Init+0x40>)
 8004ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce0 <MX_TIM14_Init+0x44>)
 8004ca4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168-1;
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <MX_TIM14_Init+0x40>)
 8004ca8:	22a7      	movs	r2, #167	@ 0xa7
 8004caa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cac:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <MX_TIM14_Init+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8004cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <MX_TIM14_Init+0x40>)
 8004cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cb8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cba:	4b08      	ldr	r3, [pc, #32]	@ (8004cdc <MX_TIM14_Init+0x40>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cc0:	4b06      	ldr	r3, [pc, #24]	@ (8004cdc <MX_TIM14_Init+0x40>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004cc6:	4805      	ldr	r0, [pc, #20]	@ (8004cdc <MX_TIM14_Init+0x40>)
 8004cc8:	f002 f9ba 	bl	8007040 <HAL_TIM_Base_Init>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004cd2:	f7ff fdeb 	bl	80048ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200011fc 	.word	0x200011fc
 8004ce0:	40002000 	.word	0x40002000

08004ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	@ (8004d54 <HAL_TIM_Base_MspInit+0x70>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <HAL_TIM_Base_MspInit+0x74>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	4a16      	ldr	r2, [pc, #88]	@ (8004d58 <HAL_TIM_Base_MspInit+0x74>)
 8004d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d06:	4b14      	ldr	r3, [pc, #80]	@ (8004d58 <HAL_TIM_Base_MspInit+0x74>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004d12:	e01a      	b.n	8004d4a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a10      	ldr	r2, [pc, #64]	@ (8004d5c <HAL_TIM_Base_MspInit+0x78>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d115      	bne.n	8004d4a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	4b0d      	ldr	r3, [pc, #52]	@ (8004d58 <HAL_TIM_Base_MspInit+0x74>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	4a0c      	ldr	r2, [pc, #48]	@ (8004d58 <HAL_TIM_Base_MspInit+0x74>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <HAL_TIM_Base_MspInit+0x74>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d36:	60bb      	str	r3, [r7, #8]
 8004d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2105      	movs	r1, #5
 8004d3e:	202d      	movs	r0, #45	@ 0x2d
 8004d40:	f000 fad2 	bl	80052e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004d44:	202d      	movs	r0, #45	@ 0x2d
 8004d46:	f000 faeb 	bl	8005320 <HAL_NVIC_EnableIRQ>
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40001c00 	.word	0x40001c00
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40002000 	.word	0x40002000

08004d60 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d64:	4b11      	ldr	r3, [pc, #68]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d66:	4a12      	ldr	r2, [pc, #72]	@ (8004db0 <MX_USART1_UART_Init+0x50>)
 8004d68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004d70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d72:	4b0e      	ldr	r3, [pc, #56]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d78:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d84:	4b09      	ldr	r3, [pc, #36]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d86:	220c      	movs	r2, #12
 8004d88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d96:	4805      	ldr	r0, [pc, #20]	@ (8004dac <MX_USART1_UART_Init+0x4c>)
 8004d98:	f002 fc82 	bl	80076a0 <HAL_UART_Init>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004da2:	f7ff fd83 	bl	80048ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20001244 	.word	0x20001244
 8004db0:	40011000 	.word	0x40011000

08004db4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004db8:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004dba:	4a12      	ldr	r2, [pc, #72]	@ (8004e04 <MX_USART2_UART_Init+0x50>)
 8004dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004dbe:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004dd8:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004dda:	220c      	movs	r2, #12
 8004ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dde:	4b08      	ldr	r3, [pc, #32]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004de4:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dea:	4805      	ldr	r0, [pc, #20]	@ (8004e00 <MX_USART2_UART_Init+0x4c>)
 8004dec:	f002 fc58 	bl	80076a0 <HAL_UART_Init>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004df6:	f7ff fd59 	bl	80048ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	2000128c 	.word	0x2000128c
 8004e04:	40004400 	.word	0x40004400

08004e08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08c      	sub	sp, #48	@ 0x30
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 031c 	add.w	r3, r7, #28
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a65      	ldr	r2, [pc, #404]	@ (8004fbc <HAL_UART_MspInit+0x1b4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d12d      	bne.n	8004e86 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	4b64      	ldr	r3, [pc, #400]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	4a63      	ldr	r2, [pc, #396]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e34:	f043 0310 	orr.w	r3, r3, #16
 8004e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e3a:	4b61      	ldr	r3, [pc, #388]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e56:	4b5a      	ldr	r3, [pc, #360]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004e62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e70:	2303      	movs	r3, #3
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004e74:	2307      	movs	r3, #7
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e78:	f107 031c 	add.w	r3, r7, #28
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4851      	ldr	r0, [pc, #324]	@ (8004fc4 <HAL_UART_MspInit+0x1bc>)
 8004e80:	f001 f9a2 	bl	80061c8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004e84:	e096      	b.n	8004fb4 <HAL_UART_MspInit+0x1ac>
  else if(uartHandle->Instance==USART2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4f      	ldr	r2, [pc, #316]	@ (8004fc8 <HAL_UART_MspInit+0x1c0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	f040 8091 	bne.w	8004fb4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	4a49      	ldr	r2, [pc, #292]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ea2:	4b47      	ldr	r3, [pc, #284]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	4b43      	ldr	r3, [pc, #268]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	4a42      	ldr	r2, [pc, #264]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ebe:	4b40      	ldr	r3, [pc, #256]	@ (8004fc0 <HAL_UART_MspInit+0x1b8>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004eca:	230c      	movs	r3, #12
 8004ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004eda:	2307      	movs	r3, #7
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ede:	f107 031c 	add.w	r3, r7, #28
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4837      	ldr	r0, [pc, #220]	@ (8004fc4 <HAL_UART_MspInit+0x1bc>)
 8004ee6:	f001 f96f 	bl	80061c8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004eea:	4b38      	ldr	r3, [pc, #224]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004eec:	4a38      	ldr	r2, [pc, #224]	@ (8004fd0 <HAL_UART_MspInit+0x1c8>)
 8004eee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004ef0:	4b36      	ldr	r3, [pc, #216]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004ef2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004ef6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ef8:	4b34      	ldr	r3, [pc, #208]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004efe:	4b33      	ldr	r3, [pc, #204]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f04:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f0a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f12:	4b2e      	ldr	r3, [pc, #184]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004f18:	4b2c      	ldr	r3, [pc, #176]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f20:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f26:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f2c:	4827      	ldr	r0, [pc, #156]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f2e:	f000 fa13 	bl	8005358 <HAL_DMA_Init>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8004f38:	f7ff fcb8 	bl	80048ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a23      	ldr	r2, [pc, #140]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f42:	4a22      	ldr	r2, [pc, #136]	@ (8004fcc <HAL_UART_MspInit+0x1c4>)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004f48:	4b22      	ldr	r3, [pc, #136]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f4a:	4a23      	ldr	r2, [pc, #140]	@ (8004fd8 <HAL_UART_MspInit+0x1d0>)
 8004f4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004f4e:	4b21      	ldr	r3, [pc, #132]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004f54:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f56:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f58:	2240      	movs	r2, #64	@ 0x40
 8004f5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f62:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f68:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f70:	4b18      	ldr	r3, [pc, #96]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004f76:	4b17      	ldr	r3, [pc, #92]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f7c:	4b15      	ldr	r3, [pc, #84]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f82:	4b14      	ldr	r3, [pc, #80]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004f88:	4812      	ldr	r0, [pc, #72]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f8a:	f000 f9e5 	bl	8005358 <HAL_DMA_Init>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8004f94:	f7ff fc8a 	bl	80048ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004f9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8004fd4 <HAL_UART_MspInit+0x1cc>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2105      	movs	r1, #5
 8004fa8:	2026      	movs	r0, #38	@ 0x26
 8004faa:	f000 f99d 	bl	80052e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004fae:	2026      	movs	r0, #38	@ 0x26
 8004fb0:	f000 f9b6 	bl	8005320 <HAL_NVIC_EnableIRQ>
}
 8004fb4:	bf00      	nop
 8004fb6:	3730      	adds	r7, #48	@ 0x30
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40011000 	.word	0x40011000
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40020000 	.word	0x40020000
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	200012d4 	.word	0x200012d4
 8004fd0:	40026088 	.word	0x40026088
 8004fd4:	20001334 	.word	0x20001334
 8004fd8:	400260a0 	.word	0x400260a0

08004fdc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <HAL_UART_MspDeInit+0x6c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d10b      	bne.n	8005006 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004fee:	4b17      	ldr	r3, [pc, #92]	@ (800504c <HAL_UART_MspDeInit+0x70>)
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	4a16      	ldr	r2, [pc, #88]	@ (800504c <HAL_UART_MspDeInit+0x70>)
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004ffa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ffe:	4814      	ldr	r0, [pc, #80]	@ (8005050 <HAL_UART_MspDeInit+0x74>)
 8005000:	f001 fa7e 	bl	8006500 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8005004:	e01b      	b.n	800503e <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a12      	ldr	r2, [pc, #72]	@ (8005054 <HAL_UART_MspDeInit+0x78>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d116      	bne.n	800503e <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005010:	4b0e      	ldr	r3, [pc, #56]	@ (800504c <HAL_UART_MspDeInit+0x70>)
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	4a0d      	ldr	r2, [pc, #52]	@ (800504c <HAL_UART_MspDeInit+0x70>)
 8005016:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800501a:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800501c:	210c      	movs	r1, #12
 800501e:	480c      	ldr	r0, [pc, #48]	@ (8005050 <HAL_UART_MspDeInit+0x74>)
 8005020:	f001 fa6e 	bl	8006500 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005028:	4618      	mov	r0, r3
 800502a:	f000 fa43 	bl	80054b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fa3e 	bl	80054b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005038:	2026      	movs	r0, #38	@ 0x26
 800503a:	f000 f97f 	bl	800533c <HAL_NVIC_DisableIRQ>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40011000 	.word	0x40011000
 800504c:	40023800 	.word	0x40023800
 8005050:	40020000 	.word	0x40020000
 8005054:	40004400 	.word	0x40004400

08005058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800505c:	f7ff fde8 	bl	8004c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005060:	480c      	ldr	r0, [pc, #48]	@ (8005094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005062:	490d      	ldr	r1, [pc, #52]	@ (8005098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005064:	4a0d      	ldr	r2, [pc, #52]	@ (800509c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005068:	e002      	b.n	8005070 <LoopCopyDataInit>

0800506a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800506a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800506c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800506e:	3304      	adds	r3, #4

08005070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005074:	d3f9      	bcc.n	800506a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005076:	4a0a      	ldr	r2, [pc, #40]	@ (80050a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005078:	4c0a      	ldr	r4, [pc, #40]	@ (80050a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800507a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800507c:	e001      	b.n	8005082 <LoopFillZerobss>

0800507e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800507e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005080:	3204      	adds	r2, #4

08005082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005084:	d3fb      	bcc.n	800507e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8005086:	f007 fca9 	bl	800c9dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800508a:	f7ff fa25 	bl	80044d8 <main>
  bx  lr    
 800508e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005098:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800509c:	0800f754 	.word	0x0800f754
  ldr r2, =_sbss
 80050a0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80050a4:	20005258 	.word	0x20005258

080050a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050a8:	e7fe      	b.n	80050a8 <ADC_IRQHandler>
	...

080050ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050b0:	4b0e      	ldr	r3, [pc, #56]	@ (80050ec <HAL_Init+0x40>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a0d      	ldr	r2, [pc, #52]	@ (80050ec <HAL_Init+0x40>)
 80050b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_Init+0x40>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	@ (80050ec <HAL_Init+0x40>)
 80050c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050c8:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <HAL_Init+0x40>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a07      	ldr	r2, [pc, #28]	@ (80050ec <HAL_Init+0x40>)
 80050ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050d4:	2003      	movs	r0, #3
 80050d6:	f000 f8fc 	bl	80052d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050da:	200f      	movs	r0, #15
 80050dc:	f7ff fc18 	bl	8004910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050e0:	f7ff fbea 	bl	80048b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	40023c00 	.word	0x40023c00

080050f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050f4:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_IncTick+0x20>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <HAL_IncTick+0x24>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4413      	add	r3, r2
 8005100:	4a04      	ldr	r2, [pc, #16]	@ (8005114 <HAL_IncTick+0x24>)
 8005102:	6013      	str	r3, [r2, #0]
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	20000018 	.word	0x20000018
 8005114:	20001394 	.word	0x20001394

08005118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return uwTick;
 800511c:	4b03      	ldr	r3, [pc, #12]	@ (800512c <HAL_GetTick+0x14>)
 800511e:	681b      	ldr	r3, [r3, #0]
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20001394 	.word	0x20001394

08005130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005140:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800515c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005162:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	60d3      	str	r3, [r2, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800517c:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <__NVIC_GetPriorityGrouping+0x18>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 0307 	and.w	r3, r3, #7
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db0b      	blt.n	80051be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	f003 021f 	and.w	r2, r3, #31
 80051ac:	4907      	ldr	r1, [pc, #28]	@ (80051cc <__NVIC_EnableIRQ+0x38>)
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2001      	movs	r0, #1
 80051b6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000e100 	.word	0xe000e100

080051d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	db12      	blt.n	8005208 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	f003 021f 	and.w	r2, r3, #31
 80051e8:	490a      	ldr	r1, [pc, #40]	@ (8005214 <__NVIC_DisableIRQ+0x44>)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	2001      	movs	r0, #1
 80051f2:	fa00 f202 	lsl.w	r2, r0, r2
 80051f6:	3320      	adds	r3, #32
 80051f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80051fc:	f3bf 8f4f 	dsb	sy
}
 8005200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005202:	f3bf 8f6f 	isb	sy
}
 8005206:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000e100 	.word	0xe000e100

08005218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	6039      	str	r1, [r7, #0]
 8005222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005228:	2b00      	cmp	r3, #0
 800522a:	db0a      	blt.n	8005242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	490c      	ldr	r1, [pc, #48]	@ (8005264 <__NVIC_SetPriority+0x4c>)
 8005232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005236:	0112      	lsls	r2, r2, #4
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	440b      	add	r3, r1
 800523c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005240:	e00a      	b.n	8005258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	4908      	ldr	r1, [pc, #32]	@ (8005268 <__NVIC_SetPriority+0x50>)
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	3b04      	subs	r3, #4
 8005250:	0112      	lsls	r2, r2, #4
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	440b      	add	r3, r1
 8005256:	761a      	strb	r2, [r3, #24]
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	e000e100 	.word	0xe000e100
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800526c:	b480      	push	{r7}
 800526e:	b089      	sub	sp, #36	@ 0x24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f1c3 0307 	rsb	r3, r3, #7
 8005286:	2b04      	cmp	r3, #4
 8005288:	bf28      	it	cs
 800528a:	2304      	movcs	r3, #4
 800528c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3304      	adds	r3, #4
 8005292:	2b06      	cmp	r3, #6
 8005294:	d902      	bls.n	800529c <NVIC_EncodePriority+0x30>
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3b03      	subs	r3, #3
 800529a:	e000      	b.n	800529e <NVIC_EncodePriority+0x32>
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43da      	mvns	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	401a      	ands	r2, r3
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052b4:	f04f 31ff 	mov.w	r1, #4294967295
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	43d9      	mvns	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c4:	4313      	orrs	r3, r2
         );
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3724      	adds	r7, #36	@ 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ff28 	bl	8005130 <__NVIC_SetPriorityGrouping>
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052fa:	f7ff ff3d 	bl	8005178 <__NVIC_GetPriorityGrouping>
 80052fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f7ff ffb1 	bl	800526c <NVIC_EncodePriority>
 800530a:	4602      	mov	r2, r0
 800530c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ff80 	bl	8005218 <__NVIC_SetPriority>
}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800532a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff30 	bl	8005194 <__NVIC_EnableIRQ>
}
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff ff40 	bl	80051d0 <__NVIC_DisableIRQ>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005364:	f7ff fed8 	bl	8005118 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e099      	b.n	80054a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005394:	e00f      	b.n	80053b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005396:	f7ff febf 	bl	8005118 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	d908      	bls.n	80053b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2203      	movs	r2, #3
 80053ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e078      	b.n	80054a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e8      	bne.n	8005396 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4b38      	ldr	r3, [pc, #224]	@ (80054b0 <HAL_DMA_Init+0x158>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	2b04      	cmp	r3, #4
 800540e:	d107      	bne.n	8005420 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005418:	4313      	orrs	r3, r2
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0307 	bic.w	r3, r3, #7
 8005436:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	2b04      	cmp	r3, #4
 8005448:	d117      	bne.n	800547a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00e      	beq.n	800547a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fb5f 	bl	8005b20 <DMA_CheckFifoParam>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2240      	movs	r2, #64	@ 0x40
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005476:	2301      	movs	r3, #1
 8005478:	e016      	b.n	80054a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fb16 	bl	8005ab4 <DMA_CalcBaseAndBitshift>
 8005488:	4603      	mov	r3, r0
 800548a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005490:	223f      	movs	r2, #63	@ 0x3f
 8005492:	409a      	lsls	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	f010803f 	.word	0xf010803f

080054b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e050      	b.n	8005568 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d101      	bne.n	80054d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
 80054d4:	e048      	b.n	8005568 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2221      	movs	r2, #33	@ 0x21
 8005514:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 facc 	bl	8005ab4 <DMA_CalcBaseAndBitshift>
 800551c:	4603      	mov	r3, r0
 800551e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005548:	223f      	movs	r2, #63	@ 0x3f
 800554a:	409a      	lsls	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005586:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_DMA_Start_IT+0x26>
 8005592:	2302      	movs	r3, #2
 8005594:	e040      	b.n	8005618 <HAL_DMA_Start_IT+0xa8>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d12f      	bne.n	800560a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa4a 	bl	8005a58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	223f      	movs	r2, #63	@ 0x3f
 80055ca:	409a      	lsls	r2, r3
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0216 	orr.w	r2, r2, #22
 80055de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0208 	orr.w	r2, r2, #8
 80055f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e005      	b.n	8005616 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005612:	2302      	movs	r3, #2
 8005614:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800562c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800562e:	f7ff fd73 	bl	8005118 <HAL_GetTick>
 8005632:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d008      	beq.n	8005652 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2280      	movs	r2, #128	@ 0x80
 8005644:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e052      	b.n	80056f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0216 	bic.w	r2, r2, #22
 8005660:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005670:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <HAL_DMA_Abort+0x62>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0208 	bic.w	r2, r2, #8
 8005690:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056a2:	e013      	b.n	80056cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056a4:	f7ff fd38 	bl	8005118 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d90c      	bls.n	80056cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2203      	movs	r2, #3
 80056bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e015      	b.n	80056f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e4      	bne.n	80056a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056de:	223f      	movs	r2, #63	@ 0x3f
 80056e0:	409a      	lsls	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d004      	beq.n	800571e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2280      	movs	r2, #128	@ 0x80
 8005718:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e00c      	b.n	8005738 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2205      	movs	r2, #5
 8005722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005750:	4b8e      	ldr	r3, [pc, #568]	@ (800598c <HAL_DMA_IRQHandler+0x248>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a8e      	ldr	r2, [pc, #568]	@ (8005990 <HAL_DMA_IRQHandler+0x24c>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	0a9b      	lsrs	r3, r3, #10
 800575c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576e:	2208      	movs	r2, #8
 8005770:	409a      	lsls	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4013      	ands	r3, r2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01a      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d013      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0204 	bic.w	r2, r2, #4
 8005796:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579c:	2208      	movs	r2, #8
 800579e:	409a      	lsls	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a8:	f043 0201 	orr.w	r2, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b4:	2201      	movs	r2, #1
 80057b6:	409a      	lsls	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4013      	ands	r3, r2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d012      	beq.n	80057e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00b      	beq.n	80057e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057de:	f043 0202 	orr.w	r2, r3, #2
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ea:	2204      	movs	r2, #4
 80057ec:	409a      	lsls	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d012      	beq.n	800581c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005808:	2204      	movs	r2, #4
 800580a:	409a      	lsls	r2, r3
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005820:	2210      	movs	r2, #16
 8005822:	409a      	lsls	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d043      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d03c      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583e:	2210      	movs	r2, #16
 8005840:	409a      	lsls	r2, r3
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d018      	beq.n	8005886 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d108      	bne.n	8005874 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d024      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
 8005872:	e01f      	b.n	80058b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01b      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3
 8005884:	e016      	b.n	80058b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005890:	2b00      	cmp	r3, #0
 8005892:	d107      	bne.n	80058a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0208 	bic.w	r2, r2, #8
 80058a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	2220      	movs	r2, #32
 80058ba:	409a      	lsls	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4013      	ands	r3, r2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 808f 	beq.w	80059e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8087 	beq.w	80059e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058da:	2220      	movs	r2, #32
 80058dc:	409a      	lsls	r2, r3
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d136      	bne.n	800595c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0216 	bic.w	r2, r2, #22
 80058fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800590c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <HAL_DMA_IRQHandler+0x1da>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0208 	bic.w	r2, r2, #8
 800592c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005932:	223f      	movs	r2, #63	@ 0x3f
 8005934:	409a      	lsls	r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594e:	2b00      	cmp	r3, #0
 8005950:	d07e      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
        }
        return;
 800595a:	e079      	b.n	8005a50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01d      	beq.n	80059a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10d      	bne.n	8005994 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597c:	2b00      	cmp	r3, #0
 800597e:	d031      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
 8005988:	e02c      	b.n	80059e4 <HAL_DMA_IRQHandler+0x2a0>
 800598a:	bf00      	nop
 800598c:	20000010 	.word	0x20000010
 8005990:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d023      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	4798      	blx	r3
 80059a4:	e01e      	b.n	80059e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10f      	bne.n	80059d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0210 	bic.w	r2, r2, #16
 80059c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d032      	beq.n	8005a52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d022      	beq.n	8005a3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2205      	movs	r2, #5
 80059fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d307      	bcc.n	8005a2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f2      	bne.n	8005a10 <HAL_DMA_IRQHandler+0x2cc>
 8005a2a:	e000      	b.n	8005a2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
 8005a4e:	e000      	b.n	8005a52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a50:	bf00      	nop
    }
  }
}
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b40      	cmp	r3, #64	@ 0x40
 8005a84:	d108      	bne.n	8005a98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a96:	e007      	b.n	8005aa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	60da      	str	r2, [r3, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	3b10      	subs	r3, #16
 8005ac4:	4a14      	ldr	r2, [pc, #80]	@ (8005b18 <DMA_CalcBaseAndBitshift+0x64>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	091b      	lsrs	r3, r3, #4
 8005acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ace:	4a13      	ldr	r2, [pc, #76]	@ (8005b1c <DMA_CalcBaseAndBitshift+0x68>)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d909      	bls.n	8005af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	659a      	str	r2, [r3, #88]	@ 0x58
 8005af4:	e007      	b.n	8005b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005afe:	f023 0303 	bic.w	r3, r3, #3
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	aaaaaaab 	.word	0xaaaaaaab
 8005b1c:	0800f364 	.word	0x0800f364

08005b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d11f      	bne.n	8005b7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d856      	bhi.n	8005bee <DMA_CheckFifoParam+0xce>
 8005b40:	a201      	add	r2, pc, #4	@ (adr r2, 8005b48 <DMA_CheckFifoParam+0x28>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b59 	.word	0x08005b59
 8005b4c:	08005b6b 	.word	0x08005b6b
 8005b50:	08005b59 	.word	0x08005b59
 8005b54:	08005bef 	.word	0x08005bef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d046      	beq.n	8005bf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b68:	e043      	b.n	8005bf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b72:	d140      	bne.n	8005bf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b78:	e03d      	b.n	8005bf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b82:	d121      	bne.n	8005bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b03      	cmp	r3, #3
 8005b88:	d837      	bhi.n	8005bfa <DMA_CheckFifoParam+0xda>
 8005b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <DMA_CheckFifoParam+0x70>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005ba1 	.word	0x08005ba1
 8005b94:	08005ba7 	.word	0x08005ba7
 8005b98:	08005ba1 	.word	0x08005ba1
 8005b9c:	08005bb9 	.word	0x08005bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba4:	e030      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005baa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d025      	beq.n	8005bfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb6:	e022      	b.n	8005bfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bc0:	d11f      	bne.n	8005c02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bc6:	e01c      	b.n	8005c02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d903      	bls.n	8005bd6 <DMA_CheckFifoParam+0xb6>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d003      	beq.n	8005bdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bd4:	e018      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bda:	e015      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00e      	beq.n	8005c06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	73fb      	strb	r3, [r7, #15]
      break;
 8005bec:	e00b      	b.n	8005c06 <DMA_CheckFifoParam+0xe6>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e00a      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e008      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e006      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e004      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <DMA_CheckFifoParam+0xe8>
      break;
 8005c06:	bf00      	nop
    }
  } 
  
  return status; 
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop

08005c18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c2a:	4b23      	ldr	r3, [pc, #140]	@ (8005cb8 <HAL_FLASH_Program+0xa0>)
 8005c2c:	7e1b      	ldrb	r3, [r3, #24]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_FLASH_Program+0x1e>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e03b      	b.n	8005cae <HAL_FLASH_Program+0x96>
 8005c36:	4b20      	ldr	r3, [pc, #128]	@ (8005cb8 <HAL_FLASH_Program+0xa0>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c3c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c40:	f000 f870 	bl	8005d24 <FLASH_WaitForLastOperation>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d12b      	bne.n	8005ca6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005c54:	783b      	ldrb	r3, [r7, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	68b8      	ldr	r0, [r7, #8]
 8005c5a:	f000 f91b 	bl	8005e94 <FLASH_Program_Byte>
 8005c5e:	e016      	b.n	8005c8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d105      	bne.n	8005c72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005c66:	883b      	ldrh	r3, [r7, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68b8      	ldr	r0, [r7, #8]
 8005c6c:	f000 f8ee 	bl	8005e4c <FLASH_Program_HalfWord>
 8005c70:	e00d      	b.n	8005c8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d105      	bne.n	8005c84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	68b8      	ldr	r0, [r7, #8]
 8005c7e:	f000 f8c3 	bl	8005e08 <FLASH_Program_Word>
 8005c82:	e004      	b.n	8005c8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c88:	68b8      	ldr	r0, [r7, #8]
 8005c8a:	f000 f88b 	bl	8005da4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c8e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c92:	f000 f847 	bl	8005d24 <FLASH_WaitForLastOperation>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005c9a:	4b08      	ldr	r3, [pc, #32]	@ (8005cbc <HAL_FLASH_Program+0xa4>)
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	4a07      	ldr	r2, [pc, #28]	@ (8005cbc <HAL_FLASH_Program+0xa4>)
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ca6:	4b04      	ldr	r3, [pc, #16]	@ (8005cb8 <HAL_FLASH_Program+0xa0>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20001398 	.word	0x20001398
 8005cbc:	40023c00 	.word	0x40023c00

08005cc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cca:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf8 <HAL_FLASH_Unlock+0x38>)
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	da0b      	bge.n	8005cea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cd2:	4b09      	ldr	r3, [pc, #36]	@ (8005cf8 <HAL_FLASH_Unlock+0x38>)
 8005cd4:	4a09      	ldr	r2, [pc, #36]	@ (8005cfc <HAL_FLASH_Unlock+0x3c>)
 8005cd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cd8:	4b07      	ldr	r3, [pc, #28]	@ (8005cf8 <HAL_FLASH_Unlock+0x38>)
 8005cda:	4a09      	ldr	r2, [pc, #36]	@ (8005d00 <HAL_FLASH_Unlock+0x40>)
 8005cdc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cde:	4b06      	ldr	r3, [pc, #24]	@ (8005cf8 <HAL_FLASH_Unlock+0x38>)
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	da01      	bge.n	8005cea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005cea:	79fb      	ldrb	r3, [r7, #7]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	40023c00 	.word	0x40023c00
 8005cfc:	45670123 	.word	0x45670123
 8005d00:	cdef89ab 	.word	0xcdef89ab

08005d04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005d08:	4b05      	ldr	r3, [pc, #20]	@ (8005d20 <HAL_FLASH_Lock+0x1c>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	4a04      	ldr	r2, [pc, #16]	@ (8005d20 <HAL_FLASH_Lock+0x1c>)
 8005d0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40023c00 	.word	0x40023c00

08005d24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d30:	4b1a      	ldr	r3, [pc, #104]	@ (8005d9c <FLASH_WaitForLastOperation+0x78>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005d36:	f7ff f9ef 	bl	8005118 <HAL_GetTick>
 8005d3a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005d3c:	e010      	b.n	8005d60 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d00c      	beq.n	8005d60 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d007      	beq.n	8005d5c <FLASH_WaitForLastOperation+0x38>
 8005d4c:	f7ff f9e4 	bl	8005118 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d201      	bcs.n	8005d60 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e019      	b.n	8005d94 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005d60:	4b0f      	ldr	r3, [pc, #60]	@ (8005da0 <FLASH_WaitForLastOperation+0x7c>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1e8      	bne.n	8005d3e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <FLASH_WaitForLastOperation+0x7c>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d78:	4b09      	ldr	r3, [pc, #36]	@ (8005da0 <FLASH_WaitForLastOperation+0x7c>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005d7e:	4b08      	ldr	r3, [pc, #32]	@ (8005da0 <FLASH_WaitForLastOperation+0x7c>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005d8a:	f000 f8a5 	bl	8005ed8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
  
}  
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20001398 	.word	0x20001398
 8005da0:	40023c00 	.word	0x40023c00

08005da4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005db0:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <FLASH_Program_DoubleWord+0x60>)
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	4a13      	ldr	r2, [pc, #76]	@ (8005e04 <FLASH_Program_DoubleWord+0x60>)
 8005db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005dbc:	4b11      	ldr	r3, [pc, #68]	@ (8005e04 <FLASH_Program_DoubleWord+0x60>)
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	4a10      	ldr	r2, [pc, #64]	@ (8005e04 <FLASH_Program_DoubleWord+0x60>)
 8005dc2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005dc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e04 <FLASH_Program_DoubleWord+0x60>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e04 <FLASH_Program_DoubleWord+0x60>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005dda:	f3bf 8f6f 	isb	sy
}
 8005dde:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	000a      	movs	r2, r1
 8005dee:	2300      	movs	r3, #0
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	3104      	adds	r1, #4
 8005df4:	4613      	mov	r3, r2
 8005df6:	600b      	str	r3, [r1, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	40023c00 	.word	0x40023c00

08005e08 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e12:	4b0d      	ldr	r3, [pc, #52]	@ (8005e48 <FLASH_Program_Word+0x40>)
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	4a0c      	ldr	r2, [pc, #48]	@ (8005e48 <FLASH_Program_Word+0x40>)
 8005e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e48 <FLASH_Program_Word+0x40>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	4a09      	ldr	r2, [pc, #36]	@ (8005e48 <FLASH_Program_Word+0x40>)
 8005e24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e2a:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <FLASH_Program_Word+0x40>)
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	4a06      	ldr	r2, [pc, #24]	@ (8005e48 <FLASH_Program_Word+0x40>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	601a      	str	r2, [r3, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40023c00 	.word	0x40023c00

08005e4c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	460b      	mov	r3, r1
 8005e56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e58:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <FLASH_Program_HalfWord+0x44>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005e90 <FLASH_Program_HalfWord+0x44>)
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005e64:	4b0a      	ldr	r3, [pc, #40]	@ (8005e90 <FLASH_Program_HalfWord+0x44>)
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	4a09      	ldr	r2, [pc, #36]	@ (8005e90 <FLASH_Program_HalfWord+0x44>)
 8005e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <FLASH_Program_HalfWord+0x44>)
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	4a06      	ldr	r2, [pc, #24]	@ (8005e90 <FLASH_Program_HalfWord+0x44>)
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	801a      	strh	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40023c00 	.word	0x40023c00

08005e94 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed4 <FLASH_Program_Byte+0x40>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed4 <FLASH_Program_Byte+0x40>)
 8005ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005eac:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <FLASH_Program_Byte+0x40>)
 8005eae:	4a09      	ldr	r2, [pc, #36]	@ (8005ed4 <FLASH_Program_Byte+0x40>)
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005eb4:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <FLASH_Program_Byte+0x40>)
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	4a06      	ldr	r2, [pc, #24]	@ (8005ed4 <FLASH_Program_Byte+0x40>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	701a      	strb	r2, [r3, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40023c00 	.word	0x40023c00

08005ed8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005edc:	4b27      	ldr	r3, [pc, #156]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005ee8:	4b25      	ldr	r3, [pc, #148]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f043 0310 	orr.w	r3, r3, #16
 8005ef0:	4a23      	ldr	r2, [pc, #140]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005ef2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005ef4:	4b21      	ldr	r3, [pc, #132]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005ef6:	2210      	movs	r2, #16
 8005ef8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005efa:	4b20      	ldr	r3, [pc, #128]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d008      	beq.n	8005f18 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005f06:	4b1e      	ldr	r3, [pc, #120]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f043 0308 	orr.w	r3, r3, #8
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f10:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005f12:	4b1a      	ldr	r3, [pc, #104]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005f14:	2220      	movs	r2, #32
 8005f16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005f18:	4b18      	ldr	r3, [pc, #96]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005f24:	4b16      	ldr	r3, [pc, #88]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f043 0304 	orr.w	r3, r3, #4
 8005f2c:	4a14      	ldr	r2, [pc, #80]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005f30:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005f32:	2240      	movs	r2, #64	@ 0x40
 8005f34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005f36:	4b11      	ldr	r3, [pc, #68]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005f42:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f043 0302 	orr.w	r3, r3, #2
 8005f4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f4c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005f50:	2280      	movs	r2, #128	@ 0x80
 8005f52:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005f54:	4b09      	ldr	r3, [pc, #36]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d008      	beq.n	8005f72 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005f60:	4b07      	ldr	r3, [pc, #28]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f043 0320 	orr.w	r3, r3, #32
 8005f68:	4a05      	ldr	r2, [pc, #20]	@ (8005f80 <FLASH_SetErrorCode+0xa8>)
 8005f6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005f6c:	4b03      	ldr	r3, [pc, #12]	@ (8005f7c <FLASH_SetErrorCode+0xa4>)
 8005f6e:	2202      	movs	r2, #2
 8005f70:	60da      	str	r2, [r3, #12]
  }
}
 8005f72:	bf00      	nop
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	40023c00 	.word	0x40023c00
 8005f80:	20001398 	.word	0x20001398

08005f84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f96:	4b31      	ldr	r3, [pc, #196]	@ (800605c <HAL_FLASHEx_Erase+0xd8>)
 8005f98:	7e1b      	ldrb	r3, [r3, #24]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_FLASHEx_Erase+0x1e>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e058      	b.n	8006054 <HAL_FLASHEx_Erase+0xd0>
 8005fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800605c <HAL_FLASHEx_Erase+0xd8>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fa8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005fac:	f7ff feba 	bl	8005d24 <FLASH_WaitForLastOperation>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d148      	bne.n	800604c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d115      	bne.n	8005ff6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f000 f844 	bl	8006064 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fdc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005fe0:	f7ff fea0 	bl	8005d24 <FLASH_WaitForLastOperation>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8006060 <HAL_FLASHEx_Erase+0xdc>)
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	4a1c      	ldr	r2, [pc, #112]	@ (8006060 <HAL_FLASHEx_Erase+0xdc>)
 8005fee:	f023 0304 	bic.w	r3, r3, #4
 8005ff2:	6113      	str	r3, [r2, #16]
 8005ff4:	e028      	b.n	8006048 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	e01c      	b.n	8006038 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f000 f850 	bl	80060ac <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800600c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006010:	f7ff fe88 	bl	8005d24 <FLASH_WaitForLastOperation>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006018:	4b11      	ldr	r3, [pc, #68]	@ (8006060 <HAL_FLASHEx_Erase+0xdc>)
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	4a10      	ldr	r2, [pc, #64]	@ (8006060 <HAL_FLASHEx_Erase+0xdc>)
 800601e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8006022:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	601a      	str	r2, [r3, #0]
          break;
 8006030:	e00a      	b.n	8006048 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	3301      	adds	r3, #1
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4413      	add	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	d3da      	bcc.n	8005ffe <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006048:	f000 f878 	bl	800613c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800604c:	4b03      	ldr	r3, [pc, #12]	@ (800605c <HAL_FLASHEx_Erase+0xd8>)
 800604e:	2200      	movs	r2, #0
 8006050:	761a      	strb	r2, [r3, #24]

  return status;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20001398 	.word	0x20001398
 8006060:	40023c00 	.word	0x40023c00

08006064 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	6039      	str	r1, [r7, #0]
 800606e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006070:	4b0d      	ldr	r3, [pc, #52]	@ (80060a8 <FLASH_MassErase+0x44>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	4a0c      	ldr	r2, [pc, #48]	@ (80060a8 <FLASH_MassErase+0x44>)
 8006076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800607a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800607c:	4b0a      	ldr	r3, [pc, #40]	@ (80060a8 <FLASH_MassErase+0x44>)
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	4a09      	ldr	r2, [pc, #36]	@ (80060a8 <FLASH_MassErase+0x44>)
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006088:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <FLASH_MassErase+0x44>)
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	79fb      	ldrb	r3, [r7, #7]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	4313      	orrs	r3, r2
 8006092:	4a05      	ldr	r2, [pc, #20]	@ (80060a8 <FLASH_MassErase+0x44>)
 8006094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006098:	6113      	str	r3, [r2, #16]
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40023c00 	.word	0x40023c00

080060ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
 80060c6:	e010      	b.n	80060ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d103      	bne.n	80060d6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80060ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e009      	b.n	80060ea <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d103      	bne.n	80060e4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80060dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	e002      	b.n	80060ea <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80060e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80060e8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060ea:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	4a12      	ldr	r2, [pc, #72]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 80060f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80060f6:	4b10      	ldr	r3, [pc, #64]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	490f      	ldr	r1, [pc, #60]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	4a0c      	ldr	r2, [pc, #48]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 8006108:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800610c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800610e:	4b0a      	ldr	r3, [pc, #40]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4313      	orrs	r3, r2
 8006118:	4a07      	ldr	r2, [pc, #28]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006120:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	4a04      	ldr	r2, [pc, #16]	@ (8006138 <FLASH_Erase_Sector+0x8c>)
 8006126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800612a:	6113      	str	r3, [r2, #16]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	40023c00 	.word	0x40023c00

0800613c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006140:	4b20      	ldr	r3, [pc, #128]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006148:	2b00      	cmp	r3, #0
 800614a:	d017      	beq.n	800617c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800614c:	4b1d      	ldr	r3, [pc, #116]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1c      	ldr	r2, [pc, #112]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 8006152:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006156:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006158:	4b1a      	ldr	r3, [pc, #104]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a19      	ldr	r2, [pc, #100]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800615e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	4b17      	ldr	r3, [pc, #92]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a16      	ldr	r2, [pc, #88]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800616a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800616e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006170:	4b14      	ldr	r3, [pc, #80]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a13      	ldr	r2, [pc, #76]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 8006176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800617a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800617c:	4b11      	ldr	r3, [pc, #68]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006184:	2b00      	cmp	r3, #0
 8006186:	d017      	beq.n	80061b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006188:	4b0e      	ldr	r3, [pc, #56]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a0d      	ldr	r2, [pc, #52]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800618e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006192:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006194:	4b0b      	ldr	r3, [pc, #44]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a0a      	ldr	r2, [pc, #40]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 800619a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	4b08      	ldr	r3, [pc, #32]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a07      	ldr	r2, [pc, #28]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 80061a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80061ac:	4b05      	ldr	r3, [pc, #20]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a04      	ldr	r2, [pc, #16]	@ (80061c4 <FLASH_FlushCaches+0x88>)
 80061b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061b6:	6013      	str	r3, [r2, #0]
  }
}
 80061b8:	bf00      	nop
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40023c00 	.word	0x40023c00

080061c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b089      	sub	sp, #36	@ 0x24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061d2:	2300      	movs	r3, #0
 80061d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061de:	2300      	movs	r3, #0
 80061e0:	61fb      	str	r3, [r7, #28]
 80061e2:	e16b      	b.n	80064bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061e4:	2201      	movs	r2, #1
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4013      	ands	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	f040 815a 	bne.w	80064b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b01      	cmp	r3, #1
 800620c:	d005      	beq.n	800621a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006216:	2b02      	cmp	r3, #2
 8006218:	d130      	bne.n	800627c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	2203      	movs	r2, #3
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	43db      	mvns	r3, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4013      	ands	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006250:	2201      	movs	r2, #1
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	43db      	mvns	r3, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4013      	ands	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	091b      	lsrs	r3, r3, #4
 8006266:	f003 0201 	and.w	r2, r3, #1
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	2b03      	cmp	r3, #3
 8006286:	d017      	beq.n	80062b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	2203      	movs	r2, #3
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d123      	bne.n	800630c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	08da      	lsrs	r2, r3, #3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3208      	adds	r2, #8
 80062cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	220f      	movs	r2, #15
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43db      	mvns	r3, r3
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	4013      	ands	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	691a      	ldr	r2, [r3, #16]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	08da      	lsrs	r2, r3, #3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3208      	adds	r2, #8
 8006306:	69b9      	ldr	r1, [r7, #24]
 8006308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	2203      	movs	r2, #3
 8006318:	fa02 f303 	lsl.w	r3, r2, r3
 800631c:	43db      	mvns	r3, r3
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	4013      	ands	r3, r2
 8006322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 0203 	and.w	r2, r3, #3
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	4313      	orrs	r3, r2
 8006338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80b4 	beq.w	80064b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	4b60      	ldr	r3, [pc, #384]	@ (80064d4 <HAL_GPIO_Init+0x30c>)
 8006354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006356:	4a5f      	ldr	r2, [pc, #380]	@ (80064d4 <HAL_GPIO_Init+0x30c>)
 8006358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800635c:	6453      	str	r3, [r2, #68]	@ 0x44
 800635e:	4b5d      	ldr	r3, [pc, #372]	@ (80064d4 <HAL_GPIO_Init+0x30c>)
 8006360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800636a:	4a5b      	ldr	r2, [pc, #364]	@ (80064d8 <HAL_GPIO_Init+0x310>)
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	089b      	lsrs	r3, r3, #2
 8006370:	3302      	adds	r3, #2
 8006372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	220f      	movs	r2, #15
 8006382:	fa02 f303 	lsl.w	r3, r2, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4013      	ands	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a52      	ldr	r2, [pc, #328]	@ (80064dc <HAL_GPIO_Init+0x314>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02b      	beq.n	80063ee <HAL_GPIO_Init+0x226>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a51      	ldr	r2, [pc, #324]	@ (80064e0 <HAL_GPIO_Init+0x318>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d025      	beq.n	80063ea <HAL_GPIO_Init+0x222>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a50      	ldr	r2, [pc, #320]	@ (80064e4 <HAL_GPIO_Init+0x31c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d01f      	beq.n	80063e6 <HAL_GPIO_Init+0x21e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a4f      	ldr	r2, [pc, #316]	@ (80064e8 <HAL_GPIO_Init+0x320>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d019      	beq.n	80063e2 <HAL_GPIO_Init+0x21a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a4e      	ldr	r2, [pc, #312]	@ (80064ec <HAL_GPIO_Init+0x324>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_GPIO_Init+0x216>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a4d      	ldr	r2, [pc, #308]	@ (80064f0 <HAL_GPIO_Init+0x328>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00d      	beq.n	80063da <HAL_GPIO_Init+0x212>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a4c      	ldr	r2, [pc, #304]	@ (80064f4 <HAL_GPIO_Init+0x32c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <HAL_GPIO_Init+0x20e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a4b      	ldr	r2, [pc, #300]	@ (80064f8 <HAL_GPIO_Init+0x330>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d101      	bne.n	80063d2 <HAL_GPIO_Init+0x20a>
 80063ce:	2307      	movs	r3, #7
 80063d0:	e00e      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063d2:	2308      	movs	r3, #8
 80063d4:	e00c      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063d6:	2306      	movs	r3, #6
 80063d8:	e00a      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063da:	2305      	movs	r3, #5
 80063dc:	e008      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063de:	2304      	movs	r3, #4
 80063e0:	e006      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063e2:	2303      	movs	r3, #3
 80063e4:	e004      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e002      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <HAL_GPIO_Init+0x228>
 80063ee:	2300      	movs	r3, #0
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	f002 0203 	and.w	r2, r2, #3
 80063f6:	0092      	lsls	r2, r2, #2
 80063f8:	4093      	lsls	r3, r2
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006400:	4935      	ldr	r1, [pc, #212]	@ (80064d8 <HAL_GPIO_Init+0x310>)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	089b      	lsrs	r3, r3, #2
 8006406:	3302      	adds	r3, #2
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800640e:	4b3b      	ldr	r3, [pc, #236]	@ (80064fc <HAL_GPIO_Init+0x334>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	43db      	mvns	r3, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4013      	ands	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006432:	4a32      	ldr	r2, [pc, #200]	@ (80064fc <HAL_GPIO_Init+0x334>)
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006438:	4b30      	ldr	r3, [pc, #192]	@ (80064fc <HAL_GPIO_Init+0x334>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	43db      	mvns	r3, r3
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	4013      	ands	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800645c:	4a27      	ldr	r2, [pc, #156]	@ (80064fc <HAL_GPIO_Init+0x334>)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006462:	4b26      	ldr	r3, [pc, #152]	@ (80064fc <HAL_GPIO_Init+0x334>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4313      	orrs	r3, r2
 8006484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006486:	4a1d      	ldr	r2, [pc, #116]	@ (80064fc <HAL_GPIO_Init+0x334>)
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800648c:	4b1b      	ldr	r3, [pc, #108]	@ (80064fc <HAL_GPIO_Init+0x334>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064b0:	4a12      	ldr	r2, [pc, #72]	@ (80064fc <HAL_GPIO_Init+0x334>)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	2b0f      	cmp	r3, #15
 80064c0:	f67f ae90 	bls.w	80061e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	3724      	adds	r7, #36	@ 0x24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40013800 	.word	0x40013800
 80064dc:	40020000 	.word	0x40020000
 80064e0:	40020400 	.word	0x40020400
 80064e4:	40020800 	.word	0x40020800
 80064e8:	40020c00 	.word	0x40020c00
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40021400 	.word	0x40021400
 80064f4:	40021800 	.word	0x40021800
 80064f8:	40021c00 	.word	0x40021c00
 80064fc:	40013c00 	.word	0x40013c00

08006500 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800650a:	2300      	movs	r3, #0
 800650c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	e0cd      	b.n	80066b8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800651c:	2201      	movs	r2, #1
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4013      	ands	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	429a      	cmp	r2, r3
 8006534:	f040 80bd 	bne.w	80066b2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006538:	4a65      	ldr	r2, [pc, #404]	@ (80066d0 <HAL_GPIO_DeInit+0x1d0>)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	089b      	lsrs	r3, r3, #2
 800653e:	3302      	adds	r3, #2
 8006540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006544:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	220f      	movs	r2, #15
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a5d      	ldr	r2, [pc, #372]	@ (80066d4 <HAL_GPIO_DeInit+0x1d4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d02b      	beq.n	80065ba <HAL_GPIO_DeInit+0xba>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a5c      	ldr	r2, [pc, #368]	@ (80066d8 <HAL_GPIO_DeInit+0x1d8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d025      	beq.n	80065b6 <HAL_GPIO_DeInit+0xb6>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a5b      	ldr	r2, [pc, #364]	@ (80066dc <HAL_GPIO_DeInit+0x1dc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01f      	beq.n	80065b2 <HAL_GPIO_DeInit+0xb2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a5a      	ldr	r2, [pc, #360]	@ (80066e0 <HAL_GPIO_DeInit+0x1e0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d019      	beq.n	80065ae <HAL_GPIO_DeInit+0xae>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a59      	ldr	r2, [pc, #356]	@ (80066e4 <HAL_GPIO_DeInit+0x1e4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_GPIO_DeInit+0xaa>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a58      	ldr	r2, [pc, #352]	@ (80066e8 <HAL_GPIO_DeInit+0x1e8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00d      	beq.n	80065a6 <HAL_GPIO_DeInit+0xa6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a57      	ldr	r2, [pc, #348]	@ (80066ec <HAL_GPIO_DeInit+0x1ec>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d007      	beq.n	80065a2 <HAL_GPIO_DeInit+0xa2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a56      	ldr	r2, [pc, #344]	@ (80066f0 <HAL_GPIO_DeInit+0x1f0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d101      	bne.n	800659e <HAL_GPIO_DeInit+0x9e>
 800659a:	2307      	movs	r3, #7
 800659c:	e00e      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 800659e:	2308      	movs	r3, #8
 80065a0:	e00c      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 80065a2:	2306      	movs	r3, #6
 80065a4:	e00a      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 80065a6:	2305      	movs	r3, #5
 80065a8:	e008      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 80065aa:	2304      	movs	r3, #4
 80065ac:	e006      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 80065ae:	2303      	movs	r3, #3
 80065b0:	e004      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e002      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <HAL_GPIO_DeInit+0xbc>
 80065ba:	2300      	movs	r3, #0
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	f002 0203 	and.w	r2, r2, #3
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	4093      	lsls	r3, r2
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d132      	bne.n	8006632 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065cc:	4b49      	ldr	r3, [pc, #292]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	43db      	mvns	r3, r3
 80065d4:	4947      	ldr	r1, [pc, #284]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065da:	4b46      	ldr	r3, [pc, #280]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	4944      	ldr	r1, [pc, #272]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065e8:	4b42      	ldr	r3, [pc, #264]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	4940      	ldr	r1, [pc, #256]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065f6:	4b3f      	ldr	r3, [pc, #252]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	493d      	ldr	r1, [pc, #244]	@ (80066f4 <HAL_GPIO_DeInit+0x1f4>)
 8006600:	4013      	ands	r3, r2
 8006602:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	220f      	movs	r2, #15
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006614:	4a2e      	ldr	r2, [pc, #184]	@ (80066d0 <HAL_GPIO_DeInit+0x1d0>)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	089b      	lsrs	r3, r3, #2
 800661a:	3302      	adds	r3, #2
 800661c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	43da      	mvns	r2, r3
 8006624:	482a      	ldr	r0, [pc, #168]	@ (80066d0 <HAL_GPIO_DeInit+0x1d0>)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	089b      	lsrs	r3, r3, #2
 800662a:	400a      	ands	r2, r1
 800662c:	3302      	adds	r3, #2
 800662e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	2103      	movs	r1, #3
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	08da      	lsrs	r2, r3, #3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3208      	adds	r2, #8
 8006650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	220f      	movs	r2, #15
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	43db      	mvns	r3, r3
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	08d2      	lsrs	r2, r2, #3
 8006668:	4019      	ands	r1, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3208      	adds	r2, #8
 800666e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	2103      	movs	r1, #3
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	401a      	ands	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	2101      	movs	r1, #1
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	fa01 f303 	lsl.w	r3, r1, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	401a      	ands	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	2103      	movs	r1, #3
 80066a6:	fa01 f303 	lsl.w	r3, r1, r3
 80066aa:	43db      	mvns	r3, r3
 80066ac:	401a      	ands	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	3301      	adds	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	f67f af2e 	bls.w	800651c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40020000 	.word	0x40020000
 80066d8:	40020400 	.word	0x40020400
 80066dc:	40020800 	.word	0x40020800
 80066e0:	40020c00 	.word	0x40020c00
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40021400 	.word	0x40021400
 80066ec:	40021800 	.word	0x40021800
 80066f0:	40021c00 	.word	0x40021c00
 80066f4:	40013c00 	.word	0x40013c00

080066f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	807b      	strh	r3, [r7, #2]
 8006704:	4613      	mov	r3, r2
 8006706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006708:	787b      	ldrb	r3, [r7, #1]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800670e:	887a      	ldrh	r2, [r7, #2]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006714:	e003      	b.n	800671e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006716:	887b      	ldrh	r3, [r7, #2]
 8006718:	041a      	lsls	r2, r3, #16
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	619a      	str	r2, [r3, #24]
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e267      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d075      	beq.n	8006836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800674a:	4b88      	ldr	r3, [pc, #544]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	2b04      	cmp	r3, #4
 8006754:	d00c      	beq.n	8006770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006756:	4b85      	ldr	r3, [pc, #532]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800675e:	2b08      	cmp	r3, #8
 8006760:	d112      	bne.n	8006788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006762:	4b82      	ldr	r3, [pc, #520]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800676a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800676e:	d10b      	bne.n	8006788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	4b7e      	ldr	r3, [pc, #504]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d05b      	beq.n	8006834 <HAL_RCC_OscConfig+0x108>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d157      	bne.n	8006834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e242      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006790:	d106      	bne.n	80067a0 <HAL_RCC_OscConfig+0x74>
 8006792:	4b76      	ldr	r3, [pc, #472]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a75      	ldr	r2, [pc, #468]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e01d      	b.n	80067dc <HAL_RCC_OscConfig+0xb0>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067a8:	d10c      	bne.n	80067c4 <HAL_RCC_OscConfig+0x98>
 80067aa:	4b70      	ldr	r3, [pc, #448]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6f      	ldr	r2, [pc, #444]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4b6d      	ldr	r3, [pc, #436]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a6c      	ldr	r2, [pc, #432]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e00b      	b.n	80067dc <HAL_RCC_OscConfig+0xb0>
 80067c4:	4b69      	ldr	r3, [pc, #420]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a68      	ldr	r2, [pc, #416]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ce:	6013      	str	r3, [r2, #0]
 80067d0:	4b66      	ldr	r3, [pc, #408]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a65      	ldr	r2, [pc, #404]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80067d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d013      	beq.n	800680c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e4:	f7fe fc98 	bl	8005118 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067ec:	f7fe fc94 	bl	8005118 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b64      	cmp	r3, #100	@ 0x64
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e207      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fe:	4b5b      	ldr	r3, [pc, #364]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0xc0>
 800680a:	e014      	b.n	8006836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7fe fc84 	bl	8005118 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006814:	f7fe fc80 	bl	8005118 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	@ 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e1f3      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006826:	4b51      	ldr	r3, [pc, #324]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0xe8>
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d063      	beq.n	800690a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006842:	4b4a      	ldr	r3, [pc, #296]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684e:	4b47      	ldr	r3, [pc, #284]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006856:	2b08      	cmp	r3, #8
 8006858:	d11c      	bne.n	8006894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800685a:	4b44      	ldr	r3, [pc, #272]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d116      	bne.n	8006894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006866:	4b41      	ldr	r3, [pc, #260]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_RCC_OscConfig+0x152>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e1c7      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687e:	4b3b      	ldr	r3, [pc, #236]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	4937      	ldr	r1, [pc, #220]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 800688e:	4313      	orrs	r3, r2
 8006890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006892:	e03a      	b.n	800690a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d020      	beq.n	80068de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800689c:	4b34      	ldr	r3, [pc, #208]	@ (8006970 <HAL_RCC_OscConfig+0x244>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a2:	f7fe fc39 	bl	8005118 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068aa:	f7fe fc35 	bl	8005118 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e1a8      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068bc:	4b2b      	ldr	r3, [pc, #172]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c8:	4b28      	ldr	r3, [pc, #160]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4925      	ldr	r1, [pc, #148]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	600b      	str	r3, [r1, #0]
 80068dc:	e015      	b.n	800690a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068de:	4b24      	ldr	r3, [pc, #144]	@ (8006970 <HAL_RCC_OscConfig+0x244>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e4:	f7fe fc18 	bl	8005118 <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ec:	f7fe fc14 	bl	8005118 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e187      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068fe:	4b1b      	ldr	r3, [pc, #108]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1f0      	bne.n	80068ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0308 	and.w	r3, r3, #8
 8006912:	2b00      	cmp	r3, #0
 8006914:	d036      	beq.n	8006984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d016      	beq.n	800694c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800691e:	4b15      	ldr	r3, [pc, #84]	@ (8006974 <HAL_RCC_OscConfig+0x248>)
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006924:	f7fe fbf8 	bl	8005118 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800692c:	f7fe fbf4 	bl	8005118 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e167      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693e:	4b0b      	ldr	r3, [pc, #44]	@ (800696c <HAL_RCC_OscConfig+0x240>)
 8006940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0x200>
 800694a:	e01b      	b.n	8006984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800694c:	4b09      	ldr	r3, [pc, #36]	@ (8006974 <HAL_RCC_OscConfig+0x248>)
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006952:	f7fe fbe1 	bl	8005118 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006958:	e00e      	b.n	8006978 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800695a:	f7fe fbdd 	bl	8005118 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d907      	bls.n	8006978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e150      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
 800696c:	40023800 	.word	0x40023800
 8006970:	42470000 	.word	0x42470000
 8006974:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006978:	4b88      	ldr	r3, [pc, #544]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 800697a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1ea      	bne.n	800695a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	f000 8097 	beq.w	8006ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006992:	2300      	movs	r3, #0
 8006994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006996:	4b81      	ldr	r3, [pc, #516]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a2:	2300      	movs	r3, #0
 80069a4:	60bb      	str	r3, [r7, #8]
 80069a6:	4b7d      	ldr	r3, [pc, #500]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069aa:	4a7c      	ldr	r2, [pc, #496]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 80069ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069b2:	4b7a      	ldr	r3, [pc, #488]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 80069b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	60bb      	str	r3, [r7, #8]
 80069bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c2:	4b77      	ldr	r3, [pc, #476]	@ (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d118      	bne.n	8006a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ce:	4b74      	ldr	r3, [pc, #464]	@ (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a73      	ldr	r2, [pc, #460]	@ (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069da:	f7fe fb9d 	bl	8005118 <HAL_GetTick>
 80069de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e0:	e008      	b.n	80069f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069e2:	f7fe fb99 	bl	8005118 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e10c      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f4:	4b6a      	ldr	r3, [pc, #424]	@ (8006ba0 <HAL_RCC_OscConfig+0x474>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x2ea>
 8006a08:	4b64      	ldr	r3, [pc, #400]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0c:	4a63      	ldr	r2, [pc, #396]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a14:	e01c      	b.n	8006a50 <HAL_RCC_OscConfig+0x324>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b05      	cmp	r3, #5
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x30c>
 8006a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a22:	4a5e      	ldr	r2, [pc, #376]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a24:	f043 0304 	orr.w	r3, r3, #4
 8006a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a36:	e00b      	b.n	8006a50 <HAL_RCC_OscConfig+0x324>
 8006a38:	4b58      	ldr	r3, [pc, #352]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3c:	4a57      	ldr	r2, [pc, #348]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a44:	4b55      	ldr	r3, [pc, #340]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a48:	4a54      	ldr	r2, [pc, #336]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a4a:	f023 0304 	bic.w	r3, r3, #4
 8006a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d015      	beq.n	8006a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a58:	f7fe fb5e 	bl	8005118 <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a60:	f7fe fb5a 	bl	8005118 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e0cb      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a76:	4b49      	ldr	r3, [pc, #292]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0ee      	beq.n	8006a60 <HAL_RCC_OscConfig+0x334>
 8006a82:	e014      	b.n	8006aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a84:	f7fe fb48 	bl	8005118 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a8a:	e00a      	b.n	8006aa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a8c:	f7fe fb44 	bl	8005118 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e0b5      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1ee      	bne.n	8006a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ab4:	4b39      	ldr	r3, [pc, #228]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab8:	4a38      	ldr	r2, [pc, #224]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80a1 	beq.w	8006c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aca:	4b34      	ldr	r3, [pc, #208]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d05c      	beq.n	8006b90 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d141      	bne.n	8006b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ade:	4b31      	ldr	r3, [pc, #196]	@ (8006ba4 <HAL_RCC_OscConfig+0x478>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae4:	f7fe fb18 	bl	8005118 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aec:	f7fe fb14 	bl	8005118 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e087      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afe:	4b27      	ldr	r3, [pc, #156]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f0      	bne.n	8006aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	69da      	ldr	r2, [r3, #28]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	3b01      	subs	r3, #1
 8006b24:	041b      	lsls	r3, r3, #16
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	061b      	lsls	r3, r3, #24
 8006b2e:	491b      	ldr	r1, [pc, #108]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b34:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba4 <HAL_RCC_OscConfig+0x478>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3a:	f7fe faed 	bl	8005118 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b42:	f7fe fae9 	bl	8005118 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e05c      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b54:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x416>
 8006b60:	e054      	b.n	8006c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b62:	4b10      	ldr	r3, [pc, #64]	@ (8006ba4 <HAL_RCC_OscConfig+0x478>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b68:	f7fe fad6 	bl	8005118 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b70:	f7fe fad2 	bl	8005118 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e045      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b82:	4b06      	ldr	r3, [pc, #24]	@ (8006b9c <HAL_RCC_OscConfig+0x470>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x444>
 8006b8e:	e03d      	b.n	8006c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e038      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40007000 	.word	0x40007000
 8006ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <HAL_RCC_OscConfig+0x4ec>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d028      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d121      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d11a      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006bd8:	4013      	ands	r3, r2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d111      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d107      	bne.n	8006c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d001      	beq.n	8006c0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800

08006c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e0cc      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c30:	4b68      	ldr	r3, [pc, #416]	@ (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d90c      	bls.n	8006c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3e:	4b65      	ldr	r3, [pc, #404]	@ (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c46:	4b63      	ldr	r3, [pc, #396]	@ (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d001      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e0b8      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d020      	beq.n	8006ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c70:	4b59      	ldr	r3, [pc, #356]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	4a58      	ldr	r2, [pc, #352]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c88:	4b53      	ldr	r3, [pc, #332]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4a52      	ldr	r2, [pc, #328]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c94:	4b50      	ldr	r3, [pc, #320]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	494d      	ldr	r1, [pc, #308]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d044      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d107      	bne.n	8006cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cba:	4b47      	ldr	r3, [pc, #284]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d119      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e07f      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d003      	beq.n	8006cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d107      	bne.n	8006cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cda:	4b3f      	ldr	r3, [pc, #252]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e06f      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cea:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e067      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cfa:	4b37      	ldr	r3, [pc, #220]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f023 0203 	bic.w	r2, r3, #3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	4934      	ldr	r1, [pc, #208]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d0c:	f7fe fa04 	bl	8005118 <HAL_GetTick>
 8006d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d12:	e00a      	b.n	8006d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d14:	f7fe fa00 	bl	8005118 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e04f      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f003 020c 	and.w	r2, r3, #12
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d1eb      	bne.n	8006d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d3c:	4b25      	ldr	r3, [pc, #148]	@ (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d20c      	bcs.n	8006d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d4a:	4b22      	ldr	r3, [pc, #136]	@ (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d52:	4b20      	ldr	r3, [pc, #128]	@ (8006dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e032      	b.n	8006dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d70:	4b19      	ldr	r3, [pc, #100]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	4916      	ldr	r1, [pc, #88]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d8e:	4b12      	ldr	r3, [pc, #72]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	490e      	ldr	r1, [pc, #56]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006da2:	f000 f821 	bl	8006de8 <HAL_RCC_GetSysClockFreq>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	490a      	ldr	r1, [pc, #40]	@ (8006ddc <HAL_RCC_ClockConfig+0x1c0>)
 8006db4:	5ccb      	ldrb	r3, [r1, r3]
 8006db6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dba:	4a09      	ldr	r2, [pc, #36]	@ (8006de0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dbe:	4b09      	ldr	r3, [pc, #36]	@ (8006de4 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fd fda4 	bl	8004910 <HAL_InitTick>

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40023c00 	.word	0x40023c00
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	0800f34c 	.word	0x0800f34c
 8006de0:	20000010 	.word	0x20000010
 8006de4:	20000014 	.word	0x20000014

08006de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dec:	b090      	sub	sp, #64	@ 0x40
 8006dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df4:	2300      	movs	r3, #0
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006df8:	2300      	movs	r3, #0
 8006dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e00:	4b59      	ldr	r3, [pc, #356]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 030c 	and.w	r3, r3, #12
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d00d      	beq.n	8006e28 <HAL_RCC_GetSysClockFreq+0x40>
 8006e0c:	2b08      	cmp	r3, #8
 8006e0e:	f200 80a1 	bhi.w	8006f54 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <HAL_RCC_GetSysClockFreq+0x34>
 8006e16:	2b04      	cmp	r3, #4
 8006e18:	d003      	beq.n	8006e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e1a:	e09b      	b.n	8006f54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e1c:	4b53      	ldr	r3, [pc, #332]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8006e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006e20:	e09b      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e22:	4b53      	ldr	r3, [pc, #332]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e26:	e098      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e28:	4b4f      	ldr	r3, [pc, #316]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e32:	4b4d      	ldr	r3, [pc, #308]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d028      	beq.n	8006e90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	099b      	lsrs	r3, r3, #6
 8006e44:	2200      	movs	r2, #0
 8006e46:	623b      	str	r3, [r7, #32]
 8006e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006e50:	2100      	movs	r1, #0
 8006e52:	4b47      	ldr	r3, [pc, #284]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e54:	fb03 f201 	mul.w	r2, r3, r1
 8006e58:	2300      	movs	r3, #0
 8006e5a:	fb00 f303 	mul.w	r3, r0, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	4a43      	ldr	r2, [pc, #268]	@ (8006f70 <HAL_RCC_GetSysClockFreq+0x188>)
 8006e62:	fba0 1202 	umull	r1, r2, r0, r2
 8006e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e68:	460a      	mov	r2, r1
 8006e6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e6e:	4413      	add	r3, r2
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e74:	2200      	movs	r2, #0
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	61fa      	str	r2, [r7, #28]
 8006e7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006e82:	f7f9 ff11 	bl	8000ca8 <__aeabi_uldivmod>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8e:	e053      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e90:	4b35      	ldr	r3, [pc, #212]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	099b      	lsrs	r3, r3, #6
 8006e96:	2200      	movs	r2, #0
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	617a      	str	r2, [r7, #20]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ea2:	f04f 0b00 	mov.w	fp, #0
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	465b      	mov	r3, fp
 8006eaa:	f04f 0000 	mov.w	r0, #0
 8006eae:	f04f 0100 	mov.w	r1, #0
 8006eb2:	0159      	lsls	r1, r3, #5
 8006eb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eb8:	0150      	lsls	r0, r2, #5
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	ebb2 080a 	subs.w	r8, r2, sl
 8006ec2:	eb63 090b 	sbc.w	r9, r3, fp
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ed2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ed6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006eda:	ebb2 0408 	subs.w	r4, r2, r8
 8006ede:	eb63 0509 	sbc.w	r5, r3, r9
 8006ee2:	f04f 0200 	mov.w	r2, #0
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	00eb      	lsls	r3, r5, #3
 8006eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ef0:	00e2      	lsls	r2, r4, #3
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	461d      	mov	r5, r3
 8006ef6:	eb14 030a 	adds.w	r3, r4, sl
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	eb45 030b 	adc.w	r3, r5, fp
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	f04f 0200 	mov.w	r2, #0
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f0e:	4629      	mov	r1, r5
 8006f10:	028b      	lsls	r3, r1, #10
 8006f12:	4621      	mov	r1, r4
 8006f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f18:	4621      	mov	r1, r4
 8006f1a:	028a      	lsls	r2, r1, #10
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	2200      	movs	r2, #0
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	60fa      	str	r2, [r7, #12]
 8006f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f2c:	f7f9 febc 	bl	8000ca8 <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4613      	mov	r3, r2
 8006f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f38:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	3301      	adds	r3, #1
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006f48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f52:	e002      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f54:	4b05      	ldr	r3, [pc, #20]	@ (8006f6c <HAL_RCC_GetSysClockFreq+0x184>)
 8006f56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3740      	adds	r7, #64	@ 0x40
 8006f60:	46bd      	mov	sp, r7
 8006f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f66:	bf00      	nop
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	00f42400 	.word	0x00f42400
 8006f70:	017d7840 	.word	0x017d7840

08006f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f78:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000010 	.word	0x20000010

08006f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f90:	f7ff fff0 	bl	8006f74 <HAL_RCC_GetHCLKFreq>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	0a9b      	lsrs	r3, r3, #10
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	4903      	ldr	r1, [pc, #12]	@ (8006fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fa2:	5ccb      	ldrb	r3, [r1, r3]
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40023800 	.word	0x40023800
 8006fb0:	0800f35c 	.word	0x0800f35c

08006fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fb8:	f7ff ffdc 	bl	8006f74 <HAL_RCC_GetHCLKFreq>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	0b5b      	lsrs	r3, r3, #13
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	4903      	ldr	r1, [pc, #12]	@ (8006fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fca:	5ccb      	ldrb	r3, [r1, r3]
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40023800 	.word	0x40023800
 8006fd8:	0800f35c 	.word	0x0800f35c

08006fdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220f      	movs	r2, #15
 8006fea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006fec:	4b12      	ldr	r3, [pc, #72]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 0203 	and.w	r2, r3, #3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007004:	4b0c      	ldr	r3, [pc, #48]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007010:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <HAL_RCC_GetClockConfig+0x5c>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	08db      	lsrs	r3, r3, #3
 8007016:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800701e:	4b07      	ldr	r3, [pc, #28]	@ (800703c <HAL_RCC_GetClockConfig+0x60>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0207 	and.w	r2, r3, #7
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	601a      	str	r2, [r3, #0]
}
 800702a:	bf00      	nop
 800702c:	370c      	adds	r7, #12
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40023800 	.word	0x40023800
 800703c:	40023c00 	.word	0x40023c00

08007040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e041      	b.n	80070d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fd fe3c 	bl	8004ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f000 fa4e 	bl	8007520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d001      	beq.n	80070f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e046      	b.n	8007186 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a23      	ldr	r2, [pc, #140]	@ (8007194 <HAL_TIM_Base_Start+0xb4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d022      	beq.n	8007150 <HAL_TIM_Base_Start+0x70>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007112:	d01d      	beq.n	8007150 <HAL_TIM_Base_Start+0x70>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1f      	ldr	r2, [pc, #124]	@ (8007198 <HAL_TIM_Base_Start+0xb8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d018      	beq.n	8007150 <HAL_TIM_Base_Start+0x70>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1e      	ldr	r2, [pc, #120]	@ (800719c <HAL_TIM_Base_Start+0xbc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d013      	beq.n	8007150 <HAL_TIM_Base_Start+0x70>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1c      	ldr	r2, [pc, #112]	@ (80071a0 <HAL_TIM_Base_Start+0xc0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d00e      	beq.n	8007150 <HAL_TIM_Base_Start+0x70>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1b      	ldr	r2, [pc, #108]	@ (80071a4 <HAL_TIM_Base_Start+0xc4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d009      	beq.n	8007150 <HAL_TIM_Base_Start+0x70>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a19      	ldr	r2, [pc, #100]	@ (80071a8 <HAL_TIM_Base_Start+0xc8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d004      	beq.n	8007150 <HAL_TIM_Base_Start+0x70>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a18      	ldr	r2, [pc, #96]	@ (80071ac <HAL_TIM_Base_Start+0xcc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d111      	bne.n	8007174 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b06      	cmp	r3, #6
 8007160:	d010      	beq.n	8007184 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007172:	e007      	b.n	8007184 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40010000 	.word	0x40010000
 8007198:	40000400 	.word	0x40000400
 800719c:	40000800 	.word	0x40000800
 80071a0:	40000c00 	.word	0x40000c00
 80071a4:	40010400 	.word	0x40010400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40001800 	.word	0x40001800

080071b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d001      	beq.n	80071c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e04e      	b.n	8007266 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68da      	ldr	r2, [r3, #12]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a23      	ldr	r2, [pc, #140]	@ (8007274 <HAL_TIM_Base_Start_IT+0xc4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d022      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x80>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071f2:	d01d      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x80>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007278 <HAL_TIM_Base_Start_IT+0xc8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d018      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x80>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1e      	ldr	r2, [pc, #120]	@ (800727c <HAL_TIM_Base_Start_IT+0xcc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x80>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1c      	ldr	r2, [pc, #112]	@ (8007280 <HAL_TIM_Base_Start_IT+0xd0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00e      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x80>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1b      	ldr	r2, [pc, #108]	@ (8007284 <HAL_TIM_Base_Start_IT+0xd4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d009      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x80>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a19      	ldr	r2, [pc, #100]	@ (8007288 <HAL_TIM_Base_Start_IT+0xd8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_TIM_Base_Start_IT+0x80>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a18      	ldr	r2, [pc, #96]	@ (800728c <HAL_TIM_Base_Start_IT+0xdc>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d111      	bne.n	8007254 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b06      	cmp	r3, #6
 8007240:	d010      	beq.n	8007264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f042 0201 	orr.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007252:	e007      	b.n	8007264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40010400 	.word	0x40010400
 8007288:	40014000 	.word	0x40014000
 800728c:	40001800 	.word	0x40001800

08007290 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6a1a      	ldr	r2, [r3, #32]
 80072ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10f      	bne.n	80072d8 <HAL_TIM_Base_Stop_IT+0x48>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	f240 4344 	movw	r3, #1092	@ 0x444
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d107      	bne.n	80072d8 <HAL_TIM_Base_Stop_IT+0x48>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0201 	bic.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d020      	beq.n	8007352 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d01b      	beq.n	8007352 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f06f 0202 	mvn.w	r2, #2
 8007322:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f8d2 	bl	80074e2 <HAL_TIM_IC_CaptureCallback>
 800733e:	e005      	b.n	800734c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8c4 	bl	80074ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f8d5 	bl	80074f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d020      	beq.n	800739e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01b      	beq.n	800739e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f06f 0204 	mvn.w	r2, #4
 800736e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f8ac 	bl	80074e2 <HAL_TIM_IC_CaptureCallback>
 800738a:	e005      	b.n	8007398 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f89e 	bl	80074ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f8af 	bl	80074f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d020      	beq.n	80073ea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01b      	beq.n	80073ea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f06f 0208 	mvn.w	r2, #8
 80073ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2204      	movs	r2, #4
 80073c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f886 	bl	80074e2 <HAL_TIM_IC_CaptureCallback>
 80073d6:	e005      	b.n	80073e4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f878 	bl	80074ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f889 	bl	80074f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d020      	beq.n	8007436 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01b      	beq.n	8007436 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0210 	mvn.w	r2, #16
 8007406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2208      	movs	r2, #8
 800740c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f860 	bl	80074e2 <HAL_TIM_IC_CaptureCallback>
 8007422:	e005      	b.n	8007430 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f852 	bl	80074ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f863 	bl	80074f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f06f 0201 	mvn.w	r2, #1
 8007452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7fd f9ff 	bl	8004858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f907 	bl	800768c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00c      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f834 	bl	800750a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f06f 0220 	mvn.w	r2, #32
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8d9 	bl	8007678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ea:	bf00      	nop
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
	...

08007520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a46      	ldr	r2, [pc, #280]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	d00f      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a43      	ldr	r2, [pc, #268]	@ (8007650 <TIM_Base_SetConfig+0x130>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a42      	ldr	r2, [pc, #264]	@ (8007654 <TIM_Base_SetConfig+0x134>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a41      	ldr	r2, [pc, #260]	@ (8007658 <TIM_Base_SetConfig+0x138>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a40      	ldr	r2, [pc, #256]	@ (800765c <TIM_Base_SetConfig+0x13c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d108      	bne.n	8007572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a35      	ldr	r2, [pc, #212]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d02b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007580:	d027      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a32      	ldr	r2, [pc, #200]	@ (8007650 <TIM_Base_SetConfig+0x130>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d023      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a31      	ldr	r2, [pc, #196]	@ (8007654 <TIM_Base_SetConfig+0x134>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01f      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a30      	ldr	r2, [pc, #192]	@ (8007658 <TIM_Base_SetConfig+0x138>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2f      	ldr	r2, [pc, #188]	@ (800765c <TIM_Base_SetConfig+0x13c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d017      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007660 <TIM_Base_SetConfig+0x140>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d013      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007664 <TIM_Base_SetConfig+0x144>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00f      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007668 <TIM_Base_SetConfig+0x148>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00b      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2b      	ldr	r2, [pc, #172]	@ (800766c <TIM_Base_SetConfig+0x14c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d007      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007670 <TIM_Base_SetConfig+0x150>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d003      	beq.n	80075d2 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a29      	ldr	r2, [pc, #164]	@ (8007674 <TIM_Base_SetConfig+0x154>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d108      	bne.n	80075e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a10      	ldr	r2, [pc, #64]	@ (800764c <TIM_Base_SetConfig+0x12c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d003      	beq.n	8007618 <TIM_Base_SetConfig+0xf8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a12      	ldr	r2, [pc, #72]	@ (800765c <TIM_Base_SetConfig+0x13c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d103      	bne.n	8007620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d105      	bne.n	800763e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f023 0201 	bic.w	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	611a      	str	r2, [r3, #16]
  }
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40000c00 	.word	0x40000c00
 800765c:	40010400 	.word	0x40010400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800
 800766c:	40001800 	.word	0x40001800
 8007670:	40001c00 	.word	0x40001c00
 8007674:	40002000 	.word	0x40002000

08007678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e042      	b.n	8007738 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fd fb9e 	bl	8004e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2224      	movs	r2, #36	@ 0x24
 80076d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 faad 	bl	8008c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691a      	ldr	r2, [r3, #16]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2220      	movs	r2, #32
 8007724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e024      	b.n	800779c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2224      	movs	r2, #36	@ 0x24
 8007756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007768:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fd fc36 	bl	8004fdc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	@ 0x28
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d175      	bne.n	80078b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <HAL_UART_Transmit+0x2c>
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e06e      	b.n	80078b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2221      	movs	r2, #33	@ 0x21
 80077de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077e2:	f7fd fc99 	bl	8005118 <HAL_GetTick>
 80077e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	88fa      	ldrh	r2, [r7, #6]
 80077ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	88fa      	ldrh	r2, [r7, #6]
 80077f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077fc:	d108      	bne.n	8007810 <HAL_UART_Transmit+0x6c>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d104      	bne.n	8007810 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	e003      	b.n	8007818 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007814:	2300      	movs	r3, #0
 8007816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007818:	e02e      	b.n	8007878 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	2180      	movs	r1, #128	@ 0x80
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fef4 	bl	8008612 <UART_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e03a      	b.n	80078b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	3302      	adds	r3, #2
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e007      	b.n	800786a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	781a      	ldrb	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	3301      	adds	r3, #1
 8007868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800787c:	b29b      	uxth	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1cb      	bne.n	800781a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	2140      	movs	r1, #64	@ 0x40
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fec0 	bl	8008612 <UART_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e006      	b.n	80078b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	e000      	b.n	80078b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078b0:	2302      	movs	r3, #2
  }
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b08a      	sub	sp, #40	@ 0x28
 80078be:	af02      	add	r7, sp, #8
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	f040 8081 	bne.w	80079de <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_UART_Receive+0x2e>
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e079      	b.n	80079e0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2222      	movs	r2, #34	@ 0x22
 80078f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007900:	f7fd fc0a 	bl	8005118 <HAL_GetTick>
 8007904:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	88fa      	ldrh	r2, [r7, #6]
 8007910:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800791a:	d108      	bne.n	800792e <HAL_UART_Receive+0x74>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007924:	2300      	movs	r3, #0
 8007926:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	e003      	b.n	8007936 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007932:	2300      	movs	r3, #0
 8007934:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007936:	e047      	b.n	80079c8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2200      	movs	r2, #0
 8007940:	2120      	movs	r1, #32
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fe65 	bl	8008612 <UART_WaitOnFlagUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e042      	b.n	80079e0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10c      	bne.n	800797a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	b29a      	uxth	r2, r3
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	3302      	adds	r3, #2
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	e01f      	b.n	80079ba <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007982:	d007      	beq.n	8007994 <HAL_UART_Receive+0xda>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <HAL_UART_Receive+0xe8>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d106      	bne.n	80079a2 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b2da      	uxtb	r2, r3
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e008      	b.n	80079b4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	3301      	adds	r3, #1
 80079b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079be:	b29b      	uxth	r3, r3
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1b2      	bne.n	8007938 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	e000      	b.n	80079e0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3720      	adds	r7, #32
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08c      	sub	sp, #48	@ 0x30
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d156      	bne.n	8007ab0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_UART_Transmit_DMA+0x26>
 8007a08:	88fb      	ldrh	r3, [r7, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e04f      	b.n	8007ab2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	88fa      	ldrh	r2, [r7, #6]
 8007a22:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2221      	movs	r2, #33	@ 0x21
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a36:	4a21      	ldr	r2, [pc, #132]	@ (8007abc <HAL_UART_Transmit_DMA+0xd4>)
 8007a38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	4a20      	ldr	r2, [pc, #128]	@ (8007ac0 <HAL_UART_Transmit_DMA+0xd8>)
 8007a40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	4a1f      	ldr	r2, [pc, #124]	@ (8007ac4 <HAL_UART_Transmit_DMA+0xdc>)
 8007a48:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4e:	2200      	movs	r2, #0
 8007a50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007a52:	f107 0308 	add.w	r3, r7, #8
 8007a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5e:	6819      	ldr	r1, [r3, #0]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3304      	adds	r3, #4
 8007a66:	461a      	mov	r2, r3
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	f7fd fd81 	bl	8005570 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3314      	adds	r3, #20
 8007a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	617b      	str	r3, [r7, #20]
   return(result);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a98:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6a39      	ldr	r1, [r7, #32]
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e5      	bne.n	8007a78 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	e000      	b.n	8007ab2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3730      	adds	r7, #48	@ 0x30
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	08008361 	.word	0x08008361
 8007ac0:	080083fb 	.word	0x080083fb
 8007ac4:	0800857f 	.word	0x0800857f

08007ac8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08c      	sub	sp, #48	@ 0x30
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	d14a      	bne.n	8007b78 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007ae8:	88fb      	ldrh	r3, [r7, #6]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e043      	b.n	8007b7a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	461a      	mov	r2, r3
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fddd 	bl	80086c4 <UART_Start_Receive_DMA>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007b10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d12c      	bne.n	8007b72 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d125      	bne.n	8007b6c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b20:	2300      	movs	r3, #0
 8007b22:	613b      	str	r3, [r7, #16]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	617b      	str	r3, [r7, #20]
   return(result);
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f043 0310 	orr.w	r3, r3, #16
 8007b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b56:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	6a39      	ldr	r1, [r7, #32]
 8007b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e5      	bne.n	8007b36 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007b6a:	e002      	b.n	8007b72 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007b72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b76:	e000      	b.n	8007b7a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3730      	adds	r7, #48	@ 0x30
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return(huart->RxEventType);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b0a2      	sub	sp, #136	@ 0x88
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	330c      	adds	r3, #12
 8007bb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bbc:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e3      	bne.n	8007baa <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3314      	adds	r3, #20
 8007be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3314      	adds	r3, #20
 8007c00:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007c02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c04:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e5      	bne.n	8007be2 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d119      	bne.n	8007c52 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	330c      	adds	r3, #12
 8007c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c30:	f023 0310 	bic.w	r3, r3, #16
 8007c34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	330c      	adds	r3, #12
 8007c3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007c3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e5      	bne.n	8007c1e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00f      	beq.n	8007c7a <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c64:	2b80      	cmp	r3, #128	@ 0x80
 8007c66:	d104      	bne.n	8007c72 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c6c:	4a53      	ldr	r2, [pc, #332]	@ (8007dbc <HAL_UART_Abort_IT+0x220>)
 8007c6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c70:	e003      	b.n	8007c7a <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c76:	2200      	movs	r2, #0
 8007c78:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00f      	beq.n	8007ca2 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8c:	2b40      	cmp	r3, #64	@ 0x40
 8007c8e:	d104      	bne.n	8007c9a <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c94:	4a4a      	ldr	r2, [pc, #296]	@ (8007dc0 <HAL_UART_Abort_IT+0x224>)
 8007c96:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c98:	e003      	b.n	8007ca2 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cac:	2b80      	cmp	r3, #128	@ 0x80
 8007cae:	d12d      	bne.n	8007d0c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3314      	adds	r3, #20
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	623b      	str	r3, [r7, #32]
   return(result);
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007cd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e5      	bne.n	8007cb0 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00f      	beq.n	8007d0c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fd05 	bl	8005700 <HAL_DMA_Abort_IT>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d00:	2200      	movs	r2, #0
 8007d02:	651a      	str	r2, [r3, #80]	@ 0x50
 8007d04:	e002      	b.n	8007d0c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d16:	2b40      	cmp	r3, #64	@ 0x40
 8007d18:	d130      	bne.n	8007d7c <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3314      	adds	r3, #20
 8007d20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d30:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3314      	adds	r3, #20
 8007d38:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007d3a:	61fa      	str	r2, [r7, #28]
 8007d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	69b9      	ldr	r1, [r7, #24]
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	617b      	str	r3, [r7, #20]
   return(result);
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e5      	bne.n	8007d1a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d012      	beq.n	8007d7c <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fd fcd0 	bl	8005700 <HAL_DMA_Abort_IT>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d74:	e002      	b.n	8007d7c <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8007d7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d116      	bne.n	8007db2 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 facd 	bl	800834c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3788      	adds	r7, #136	@ 0x88
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	08008937 	.word	0x08008937
 8007dc0:	08008997 	.word	0x08008997

08007dc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b0ba      	sub	sp, #232	@ 0xe8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10f      	bne.n	8007e2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <HAL_UART_IRQHandler+0x66>
 8007e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fe4f 	bl	8008ac6 <UART_Receive_IT>
      return;
 8007e28:	e25b      	b.n	80082e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80de 	beq.w	8007ff0 <HAL_UART_IRQHandler+0x22c>
 8007e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 80d1 	beq.w	8007ff0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e52:	f003 0301 	and.w	r3, r3, #1
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <HAL_UART_IRQHandler+0xae>
 8007e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d005      	beq.n	8007e72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e6a:	f043 0201 	orr.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <HAL_UART_IRQHandler+0xd2>
 8007e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8e:	f043 0202 	orr.w	r2, r3, #2
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <HAL_UART_IRQHandler+0xf6>
 8007ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d005      	beq.n	8007eba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb2:	f043 0204 	orr.w	r2, r3, #4
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d011      	beq.n	8007eea <HAL_UART_IRQHandler+0x126>
 8007ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d105      	bne.n	8007ede <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d005      	beq.n	8007eea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee2:	f043 0208 	orr.w	r2, r3, #8
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 81f2 	beq.w	80082d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef8:	f003 0320 	and.w	r3, r3, #32
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_UART_IRQHandler+0x14e>
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fdda 	bl	8008ac6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1c:	2b40      	cmp	r3, #64	@ 0x40
 8007f1e:	bf0c      	ite	eq
 8007f20:	2301      	moveq	r3, #1
 8007f22:	2300      	movne	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d103      	bne.n	8007f3e <HAL_UART_IRQHandler+0x17a>
 8007f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d04f      	beq.n	8007fde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fc82 	bl	8008848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b40      	cmp	r3, #64	@ 0x40
 8007f50:	d141      	bne.n	8007fd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3314      	adds	r3, #20
 8007f58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3314      	adds	r3, #20
 8007f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1d9      	bne.n	8007f52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d013      	beq.n	8007fce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007faa:	4a7e      	ldr	r2, [pc, #504]	@ (80081a4 <HAL_UART_IRQHandler+0x3e0>)
 8007fac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fd fba4 	bl	8005700 <HAL_DMA_Abort_IT>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d016      	beq.n	8007fec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fcc:	e00e      	b.n	8007fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f9b2 	bl	8008338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd4:	e00a      	b.n	8007fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f9ae 	bl	8008338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	e006      	b.n	8007fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f9aa 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007fea:	e175      	b.n	80082d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	bf00      	nop
    return;
 8007fee:	e173      	b.n	80082d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	f040 814f 	bne.w	8008298 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ffe:	f003 0310 	and.w	r3, r3, #16
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 8148 	beq.w	8008298 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800800c:	f003 0310 	and.w	r3, r3, #16
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8141 	beq.w	8008298 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008016:	2300      	movs	r3, #0
 8008018:	60bb      	str	r3, [r7, #8]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60bb      	str	r3, [r7, #8]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	60bb      	str	r3, [r7, #8]
 800802a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008036:	2b40      	cmp	r3, #64	@ 0x40
 8008038:	f040 80b6 	bne.w	80081a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8145 	beq.w	80082dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800805a:	429a      	cmp	r2, r3
 800805c:	f080 813e 	bcs.w	80082dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008066:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800806c:	69db      	ldr	r3, [r3, #28]
 800806e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008072:	f000 8088 	beq.w	8008186 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800808c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	330c      	adds	r3, #12
 800809e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1d9      	bne.n	8008076 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3314      	adds	r3, #20
 80080c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080d4:	f023 0301 	bic.w	r3, r3, #1
 80080d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3314      	adds	r3, #20
 80080e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e1      	bne.n	80080c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3314      	adds	r3, #20
 8008104:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800810e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3314      	adds	r3, #20
 800811e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008122:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008124:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008128:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e3      	bne.n	80080fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	330c      	adds	r3, #12
 800814a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800814e:	e853 3f00 	ldrex	r3, [r3]
 8008152:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008156:	f023 0310 	bic.w	r3, r3, #16
 800815a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008168:	65ba      	str	r2, [r7, #88]	@ 0x58
 800816a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800816e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e3      	bne.n	8008144 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008180:	4618      	mov	r0, r3
 8008182:	f7fd fa4d 	bl	8005620 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2202      	movs	r2, #2
 800818a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008194:	b29b      	uxth	r3, r3
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	b29b      	uxth	r3, r3
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fb ff5b 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081a2:	e09b      	b.n	80082dc <HAL_UART_IRQHandler+0x518>
 80081a4:	0800890f 	.word	0x0800890f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 808e 	beq.w	80082e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80081c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 8089 	beq.w	80082e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	330c      	adds	r3, #12
 80081d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80081f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80081f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e3      	bne.n	80081ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3314      	adds	r3, #20
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	623b      	str	r3, [r7, #32]
   return(result);
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3314      	adds	r3, #20
 8008226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800822a:	633a      	str	r2, [r7, #48]	@ 0x30
 800822c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e3      	bne.n	8008206 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	330c      	adds	r3, #12
 8008252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	60fb      	str	r3, [r7, #12]
   return(result);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0310 	bic.w	r3, r3, #16
 8008262:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008270:	61fa      	str	r2, [r7, #28]
 8008272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008274:	69b9      	ldr	r1, [r7, #24]
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	e841 2300 	strex	r3, r2, [r1]
 800827c:	617b      	str	r3, [r7, #20]
   return(result);
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1e3      	bne.n	800824c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800828a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7fb fee1 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008296:	e023      	b.n	80082e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800829c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <HAL_UART_IRQHandler+0x4f4>
 80082a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d003      	beq.n	80082b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fba0 	bl	80089f6 <UART_Transmit_IT>
    return;
 80082b6:	e014      	b.n	80082e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00e      	beq.n	80082e2 <HAL_UART_IRQHandler+0x51e>
 80082c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d008      	beq.n	80082e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fbe0 	bl	8008a96 <UART_EndTransmit_IT>
    return;
 80082d6:	e004      	b.n	80082e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80082d8:	bf00      	nop
 80082da:	e002      	b.n	80082e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80082dc:	bf00      	nop
 80082de:	e000      	b.n	80082e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80082e0:	bf00      	nop
  }
}
 80082e2:	37e8      	adds	r7, #232	@ 0xe8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b090      	sub	sp, #64	@ 0x40
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008378:	2b00      	cmp	r3, #0
 800837a:	d137      	bne.n	80083ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800837c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800837e:	2200      	movs	r2, #0
 8008380:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	623b      	str	r3, [r7, #32]
   return(result);
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800839a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3314      	adds	r3, #20
 80083a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80083a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083aa:	e841 2300 	strex	r3, r2, [r1]
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d1e5      	bne.n	8008382 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	330c      	adds	r3, #12
 80083bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d6:	61fa      	str	r2, [r7, #28]
 80083d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	69b9      	ldr	r1, [r7, #24]
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	617b      	str	r3, [r7, #20]
   return(result);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e5      	bne.n	80083b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083ea:	e002      	b.n	80083f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80083ee:	f7ff ff7b 	bl	80082e8 <HAL_UART_TxCpltCallback>
}
 80083f2:	bf00      	nop
 80083f4:	3740      	adds	r7, #64	@ 0x40
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008406:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f7ff ff77 	bl	80082fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b09c      	sub	sp, #112	@ 0x70
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800842e:	2b00      	cmp	r3, #0
 8008430:	d172      	bne.n	8008518 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008432:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008434:	2200      	movs	r2, #0
 8008436:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	330c      	adds	r3, #12
 800843e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800844a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800844e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008450:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	330c      	adds	r3, #12
 8008456:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008458:	65ba      	str	r2, [r7, #88]	@ 0x58
 800845a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800845e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e5      	bne.n	8008438 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3314      	adds	r3, #20
 8008472:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	e853 3f00 	ldrex	r3, [r3]
 800847a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800847c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847e:	f023 0301 	bic.w	r3, r3, #1
 8008482:	667b      	str	r3, [r7, #100]	@ 0x64
 8008484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3314      	adds	r3, #20
 800848a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800848c:	647a      	str	r2, [r7, #68]	@ 0x44
 800848e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008494:	e841 2300 	strex	r3, r2, [r1]
 8008498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800849a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1e5      	bne.n	800846c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	623b      	str	r3, [r7, #32]
   return(result);
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80084b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3314      	adds	r3, #20
 80084be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e5      	bne.n	80084a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084d6:	2220      	movs	r2, #32
 80084d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d119      	bne.n	8008518 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	330c      	adds	r3, #12
 80084ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0310 	bic.w	r3, r3, #16
 80084fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	330c      	adds	r3, #12
 8008502:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008504:	61fa      	str	r2, [r7, #28]
 8008506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	69b9      	ldr	r1, [r7, #24]
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	617b      	str	r3, [r7, #20]
   return(result);
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e5      	bne.n	80084e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800851a:	2200      	movs	r2, #0
 800851c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008522:	2b01      	cmp	r3, #1
 8008524:	d106      	bne.n	8008534 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008528:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800852a:	4619      	mov	r1, r3
 800852c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800852e:	f7fb fd93 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008532:	e002      	b.n	800853a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008534:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008536:	f7ff feeb 	bl	8008310 <HAL_UART_RxCpltCallback>
}
 800853a:	bf00      	nop
 800853c:	3770      	adds	r7, #112	@ 0x70
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855a:	2b01      	cmp	r3, #1
 800855c:	d108      	bne.n	8008570 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	b29b      	uxth	r3, r3
 8008566:	4619      	mov	r1, r3
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7fb fd75 	bl	8004058 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800856e:	e002      	b.n	8008576 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7ff fed7 	bl	8008324 <HAL_UART_RxHalfCpltCallback>
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008586:	2300      	movs	r3, #0
 8008588:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800859a:	2b80      	cmp	r3, #128	@ 0x80
 800859c:	bf0c      	ite	eq
 800859e:	2301      	moveq	r3, #1
 80085a0:	2300      	movne	r3, #0
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b21      	cmp	r3, #33	@ 0x21
 80085b0:	d108      	bne.n	80085c4 <UART_DMAError+0x46>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f000 f91a 	bl	80087f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ce:	2b40      	cmp	r3, #64	@ 0x40
 80085d0:	bf0c      	ite	eq
 80085d2:	2301      	moveq	r3, #1
 80085d4:	2300      	movne	r3, #0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b22      	cmp	r3, #34	@ 0x22
 80085e4:	d108      	bne.n	80085f8 <UART_DMAError+0x7a>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d005      	beq.n	80085f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2200      	movs	r2, #0
 80085f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80085f2:	68b8      	ldr	r0, [r7, #8]
 80085f4:	f000 f928 	bl	8008848 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fc:	f043 0210 	orr.w	r2, r3, #16
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008604:	68b8      	ldr	r0, [r7, #8]
 8008606:	f7ff fe97 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	4613      	mov	r3, r2
 8008620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008622:	e03b      	b.n	800869c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800862a:	d037      	beq.n	800869c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800862c:	f7fc fd74 	bl	8005118 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	429a      	cmp	r2, r3
 800863a:	d302      	bcc.n	8008642 <UART_WaitOnFlagUntilTimeout+0x30>
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e03a      	b.n	80086bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0304 	and.w	r3, r3, #4
 8008650:	2b00      	cmp	r3, #0
 8008652:	d023      	beq.n	800869c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b80      	cmp	r3, #128	@ 0x80
 8008658:	d020      	beq.n	800869c <UART_WaitOnFlagUntilTimeout+0x8a>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b40      	cmp	r3, #64	@ 0x40
 800865e:	d01d      	beq.n	800869c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b08      	cmp	r3, #8
 800866c:	d116      	bne.n	800869c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 f8df 	bl	8008848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2208      	movs	r2, #8
 800868e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e00f      	b.n	80086bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	4013      	ands	r3, r2
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	bf0c      	ite	eq
 80086ac:	2301      	moveq	r3, #1
 80086ae:	2300      	movne	r3, #0
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d0b4      	beq.n	8008624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b098      	sub	sp, #96	@ 0x60
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	88fa      	ldrh	r2, [r7, #6]
 80086dc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2222      	movs	r2, #34	@ 0x22
 80086e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f0:	4a3e      	ldr	r2, [pc, #248]	@ (80087ec <UART_Start_Receive_DMA+0x128>)
 80086f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f8:	4a3d      	ldr	r2, [pc, #244]	@ (80087f0 <UART_Start_Receive_DMA+0x12c>)
 80086fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008700:	4a3c      	ldr	r2, [pc, #240]	@ (80087f4 <UART_Start_Receive_DMA+0x130>)
 8008702:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008708:	2200      	movs	r2, #0
 800870a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800870c:	f107 0308 	add.w	r3, r7, #8
 8008710:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	88fb      	ldrh	r3, [r7, #6]
 8008724:	f7fc ff24 	bl	8005570 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d019      	beq.n	800877a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	330c      	adds	r3, #12
 800874c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800875c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	330c      	adds	r3, #12
 8008764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008766:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008768:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800876c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1e5      	bne.n	8008746 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	3314      	adds	r3, #20
 8008780:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800878a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878c:	f043 0301 	orr.w	r3, r3, #1
 8008790:	657b      	str	r3, [r7, #84]	@ 0x54
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3314      	adds	r3, #20
 8008798:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800879a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80087a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e5      	bne.n	800877a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3314      	adds	r3, #20
 80087b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	617b      	str	r3, [r7, #20]
   return(result);
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3314      	adds	r3, #20
 80087cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80087ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80087d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6a39      	ldr	r1, [r7, #32]
 80087d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	61fb      	str	r3, [r7, #28]
   return(result);
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e5      	bne.n	80087ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3760      	adds	r7, #96	@ 0x60
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	08008417 	.word	0x08008417
 80087f0:	08008543 	.word	0x08008543
 80087f4:	0800857f 	.word	0x0800857f

080087f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b089      	sub	sp, #36	@ 0x24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	330c      	adds	r3, #12
 8008806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	e853 3f00 	ldrex	r3, [r3]
 800880e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	330c      	adds	r3, #12
 800881e:	69fa      	ldr	r2, [r7, #28]
 8008820:	61ba      	str	r2, [r7, #24]
 8008822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6979      	ldr	r1, [r7, #20]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	613b      	str	r3, [r7, #16]
   return(result);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e5      	bne.n	8008800 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2220      	movs	r2, #32
 8008838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800883c:	bf00      	nop
 800883e:	3724      	adds	r7, #36	@ 0x24
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b095      	sub	sp, #84	@ 0x54
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008870:	643a      	str	r2, [r7, #64]	@ 0x40
 8008872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800887e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e5      	bne.n	8008850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3314      	adds	r3, #20
 800888a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	61fb      	str	r3, [r7, #28]
   return(result);
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3314      	adds	r3, #20
 80088a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e5      	bne.n	8008884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d119      	bne.n	80088f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	330c      	adds	r3, #12
 80088c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f023 0310 	bic.w	r3, r3, #16
 80088d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e0:	61ba      	str	r2, [r7, #24]
 80088e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6979      	ldr	r1, [r7, #20]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	613b      	str	r3, [r7, #16]
   return(result);
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e5      	bne.n	80088c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008902:	bf00      	nop
 8008904:	3754      	adds	r7, #84	@ 0x54
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff fd05 	bl	8008338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008942:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008948:	2200      	movs	r2, #0
 800894a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800895a:	2b00      	cmp	r3, #0
 800895c:	d117      	bne.n	800898e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff fce0 	bl	800834c <HAL_UART_AbortCpltCallback>
 800898c:	e000      	b.n	8008990 <UART_DMATxAbortCallback+0x5a>
      return;
 800898e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a8:	2200      	movs	r2, #0
 80089aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d117      	bne.n	80089ee <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7ff fcb0 	bl	800834c <HAL_UART_AbortCpltCallback>
 80089ec:	e000      	b.n	80089f0 <UART_DMARxAbortCallback+0x5a>
      return;
 80089ee:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b21      	cmp	r3, #33	@ 0x21
 8008a08:	d13e      	bne.n	8008a88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a12:	d114      	bne.n	8008a3e <UART_Transmit_IT+0x48>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d110      	bne.n	8008a3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a1b      	ldr	r3, [r3, #32]
 8008a20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	1c9a      	adds	r2, r3, #2
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	621a      	str	r2, [r3, #32]
 8008a3c:	e008      	b.n	8008a50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	1c59      	adds	r1, r3, #1
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6211      	str	r1, [r2, #32]
 8008a48:	781a      	ldrb	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b01      	subs	r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10f      	bne.n	8008a84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68da      	ldr	r2, [r3, #12]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e000      	b.n	8008a8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008a88:	2302      	movs	r3, #2
  }
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008aac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff fc16 	bl	80082e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b08c      	sub	sp, #48	@ 0x30
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b22      	cmp	r3, #34	@ 0x22
 8008ad8:	f040 80ae 	bne.w	8008c38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae4:	d117      	bne.n	8008b16 <UART_Receive_IT+0x50>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d113      	bne.n	8008b16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0e:	1c9a      	adds	r2, r3, #2
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b14:	e026      	b.n	8008b64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b28:	d007      	beq.n	8008b3a <UART_Receive_IT+0x74>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <UART_Receive_IT+0x82>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	e008      	b.n	8008b5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b54:	b2da      	uxtb	r2, r3
 8008b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4619      	mov	r1, r3
 8008b72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d15d      	bne.n	8008c34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0220 	bic.w	r2, r2, #32
 8008b86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f022 0201 	bic.w	r2, r2, #1
 8008ba6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d135      	bne.n	8008c2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	330c      	adds	r3, #12
 8008bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f023 0310 	bic.w	r3, r3, #16
 8008bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	330c      	adds	r3, #12
 8008be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008be4:	623a      	str	r2, [r7, #32]
 8008be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	69f9      	ldr	r1, [r7, #28]
 8008bea:	6a3a      	ldr	r2, [r7, #32]
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0310 	and.w	r3, r3, #16
 8008c02:	2b10      	cmp	r3, #16
 8008c04:	d10a      	bne.n	8008c1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c06:	2300      	movs	r3, #0
 8008c08:	60fb      	str	r3, [r7, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fb fa18 	bl	8004058 <HAL_UARTEx_RxEventCallback>
 8008c28:	e002      	b.n	8008c30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7ff fb70 	bl	8008310 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	e002      	b.n	8008c3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	e000      	b.n	8008c3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008c38:	2302      	movs	r3, #2
  }
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3730      	adds	r7, #48	@ 0x30
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c48:	b0c0      	sub	sp, #256	@ 0x100
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c60:	68d9      	ldr	r1, [r3, #12]
 8008c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	ea40 0301 	orr.w	r3, r0, r1
 8008c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c9c:	f021 010c 	bic.w	r1, r1, #12
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008caa:	430b      	orrs	r3, r1
 8008cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cbe:	6999      	ldr	r1, [r3, #24]
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	ea40 0301 	orr.w	r3, r0, r1
 8008cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8008f10 <UART_SetConfig+0x2cc>)
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d005      	beq.n	8008ce4 <UART_SetConfig+0xa0>
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b8d      	ldr	r3, [pc, #564]	@ (8008f14 <UART_SetConfig+0x2d0>)
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d104      	bne.n	8008cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ce4:	f7fe f966 	bl	8006fb4 <HAL_RCC_GetPCLK2Freq>
 8008ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008cec:	e003      	b.n	8008cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cee:	f7fe f94d 	bl	8006f8c <HAL_RCC_GetPCLK1Freq>
 8008cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d00:	f040 810c 	bne.w	8008f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d16:	4622      	mov	r2, r4
 8008d18:	462b      	mov	r3, r5
 8008d1a:	1891      	adds	r1, r2, r2
 8008d1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d1e:	415b      	adcs	r3, r3
 8008d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d26:	4621      	mov	r1, r4
 8008d28:	eb12 0801 	adds.w	r8, r2, r1
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	eb43 0901 	adc.w	r9, r3, r1
 8008d32:	f04f 0200 	mov.w	r2, #0
 8008d36:	f04f 0300 	mov.w	r3, #0
 8008d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d46:	4690      	mov	r8, r2
 8008d48:	4699      	mov	r9, r3
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	eb18 0303 	adds.w	r3, r8, r3
 8008d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d54:	462b      	mov	r3, r5
 8008d56:	eb49 0303 	adc.w	r3, r9, r3
 8008d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d72:	460b      	mov	r3, r1
 8008d74:	18db      	adds	r3, r3, r3
 8008d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d78:	4613      	mov	r3, r2
 8008d7a:	eb42 0303 	adc.w	r3, r2, r3
 8008d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d88:	f7f7 ff8e 	bl	8000ca8 <__aeabi_uldivmod>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4b61      	ldr	r3, [pc, #388]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008d92:	fba3 2302 	umull	r2, r3, r3, r2
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	011c      	lsls	r4, r3, #4
 8008d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008da4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008dac:	4642      	mov	r2, r8
 8008dae:	464b      	mov	r3, r9
 8008db0:	1891      	adds	r1, r2, r2
 8008db2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008db4:	415b      	adcs	r3, r3
 8008db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ddc:	4692      	mov	sl, r2
 8008dde:	469b      	mov	fp, r3
 8008de0:	4643      	mov	r3, r8
 8008de2:	eb1a 0303 	adds.w	r3, sl, r3
 8008de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008dea:	464b      	mov	r3, r9
 8008dec:	eb4b 0303 	adc.w	r3, fp, r3
 8008df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	18db      	adds	r3, r3, r3
 8008e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e0e:	4613      	mov	r3, r2
 8008e10:	eb42 0303 	adc.w	r3, r2, r3
 8008e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e1e:	f7f7 ff43 	bl	8000ca8 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	4b3b      	ldr	r3, [pc, #236]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	2264      	movs	r2, #100	@ 0x64
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
 8008e36:	1acb      	subs	r3, r1, r3
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e3e:	4b36      	ldr	r3, [pc, #216]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008e40:	fba3 2302 	umull	r2, r3, r3, r2
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e4c:	441c      	add	r4, r3
 8008e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e60:	4642      	mov	r2, r8
 8008e62:	464b      	mov	r3, r9
 8008e64:	1891      	adds	r1, r2, r2
 8008e66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e68:	415b      	adcs	r3, r3
 8008e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e70:	4641      	mov	r1, r8
 8008e72:	1851      	adds	r1, r2, r1
 8008e74:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e76:	4649      	mov	r1, r9
 8008e78:	414b      	adcs	r3, r1
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e88:	4659      	mov	r1, fp
 8008e8a:	00cb      	lsls	r3, r1, #3
 8008e8c:	4651      	mov	r1, sl
 8008e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e92:	4651      	mov	r1, sl
 8008e94:	00ca      	lsls	r2, r1, #3
 8008e96:	4610      	mov	r0, r2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	189b      	adds	r3, r3, r2
 8008ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	460a      	mov	r2, r1
 8008ea8:	eb42 0303 	adc.w	r3, r2, r3
 8008eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	18db      	adds	r3, r3, r3
 8008ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eca:	4613      	mov	r3, r2
 8008ecc:	eb42 0303 	adc.w	r3, r2, r3
 8008ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008eda:	f7f7 fee5 	bl	8000ca8 <__aeabi_uldivmod>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	2164      	movs	r1, #100	@ 0x64
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	3332      	adds	r3, #50	@ 0x32
 8008ef6:	4a08      	ldr	r2, [pc, #32]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	f003 0207 	and.w	r2, r3, #7
 8008f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4422      	add	r2, r4
 8008f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f0c:	e106      	b.n	800911c <UART_SetConfig+0x4d8>
 8008f0e:	bf00      	nop
 8008f10:	40011000 	.word	0x40011000
 8008f14:	40011400 	.word	0x40011400
 8008f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	1891      	adds	r1, r2, r2
 8008f34:	6239      	str	r1, [r7, #32]
 8008f36:	415b      	adcs	r3, r3
 8008f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f3e:	4641      	mov	r1, r8
 8008f40:	1854      	adds	r4, r2, r1
 8008f42:	4649      	mov	r1, r9
 8008f44:	eb43 0501 	adc.w	r5, r3, r1
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	00eb      	lsls	r3, r5, #3
 8008f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f56:	00e2      	lsls	r2, r4, #3
 8008f58:	4614      	mov	r4, r2
 8008f5a:	461d      	mov	r5, r3
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	18e3      	adds	r3, r4, r3
 8008f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f64:	464b      	mov	r3, r9
 8008f66:	eb45 0303 	adc.w	r3, r5, r3
 8008f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	008b      	lsls	r3, r1, #2
 8008f8e:	4621      	mov	r1, r4
 8008f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f94:	4621      	mov	r1, r4
 8008f96:	008a      	lsls	r2, r1, #2
 8008f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f9c:	f7f7 fe84 	bl	8000ca8 <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4b60      	ldr	r3, [pc, #384]	@ (8009128 <UART_SetConfig+0x4e4>)
 8008fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	011c      	lsls	r4, r3, #4
 8008fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	1891      	adds	r1, r2, r2
 8008fc6:	61b9      	str	r1, [r7, #24]
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	61fb      	str	r3, [r7, #28]
 8008fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	1851      	adds	r1, r2, r1
 8008fd4:	6139      	str	r1, [r7, #16]
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	414b      	adcs	r3, r1
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fe8:	4659      	mov	r1, fp
 8008fea:	00cb      	lsls	r3, r1, #3
 8008fec:	4651      	mov	r1, sl
 8008fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	00ca      	lsls	r2, r1, #3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009004:	464b      	mov	r3, r9
 8009006:	460a      	mov	r2, r1
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800901a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009028:	4649      	mov	r1, r9
 800902a:	008b      	lsls	r3, r1, #2
 800902c:	4641      	mov	r1, r8
 800902e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009032:	4641      	mov	r1, r8
 8009034:	008a      	lsls	r2, r1, #2
 8009036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800903a:	f7f7 fe35 	bl	8000ca8 <__aeabi_uldivmod>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4611      	mov	r1, r2
 8009044:	4b38      	ldr	r3, [pc, #224]	@ (8009128 <UART_SetConfig+0x4e4>)
 8009046:	fba3 2301 	umull	r2, r3, r3, r1
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	2264      	movs	r2, #100	@ 0x64
 800904e:	fb02 f303 	mul.w	r3, r2, r3
 8009052:	1acb      	subs	r3, r1, r3
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	3332      	adds	r3, #50	@ 0x32
 8009058:	4a33      	ldr	r2, [pc, #204]	@ (8009128 <UART_SetConfig+0x4e4>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009064:	441c      	add	r4, r3
 8009066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800906a:	2200      	movs	r2, #0
 800906c:	673b      	str	r3, [r7, #112]	@ 0x70
 800906e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009074:	4642      	mov	r2, r8
 8009076:	464b      	mov	r3, r9
 8009078:	1891      	adds	r1, r2, r2
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	415b      	adcs	r3, r3
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009084:	4641      	mov	r1, r8
 8009086:	1851      	adds	r1, r2, r1
 8009088:	6039      	str	r1, [r7, #0]
 800908a:	4649      	mov	r1, r9
 800908c:	414b      	adcs	r3, r1
 800908e:	607b      	str	r3, [r7, #4]
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800909c:	4659      	mov	r1, fp
 800909e:	00cb      	lsls	r3, r1, #3
 80090a0:	4651      	mov	r1, sl
 80090a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090a6:	4651      	mov	r1, sl
 80090a8:	00ca      	lsls	r2, r1, #3
 80090aa:	4610      	mov	r0, r2
 80090ac:	4619      	mov	r1, r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	4642      	mov	r2, r8
 80090b2:	189b      	adds	r3, r3, r2
 80090b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090b6:	464b      	mov	r3, r9
 80090b8:	460a      	mov	r2, r1
 80090ba:	eb42 0303 	adc.w	r3, r2, r3
 80090be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80090ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80090cc:	f04f 0200 	mov.w	r2, #0
 80090d0:	f04f 0300 	mov.w	r3, #0
 80090d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80090d8:	4649      	mov	r1, r9
 80090da:	008b      	lsls	r3, r1, #2
 80090dc:	4641      	mov	r1, r8
 80090de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090e2:	4641      	mov	r1, r8
 80090e4:	008a      	lsls	r2, r1, #2
 80090e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090ea:	f7f7 fddd 	bl	8000ca8 <__aeabi_uldivmod>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <UART_SetConfig+0x4e4>)
 80090f4:	fba3 1302 	umull	r1, r3, r3, r2
 80090f8:	095b      	lsrs	r3, r3, #5
 80090fa:	2164      	movs	r1, #100	@ 0x64
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	3332      	adds	r3, #50	@ 0x32
 8009106:	4a08      	ldr	r2, [pc, #32]	@ (8009128 <UART_SetConfig+0x4e4>)
 8009108:	fba2 2303 	umull	r2, r3, r2, r3
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	f003 020f 	and.w	r2, r3, #15
 8009112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4422      	add	r2, r4
 800911a:	609a      	str	r2, [r3, #8]
}
 800911c:	bf00      	nop
 800911e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009122:	46bd      	mov	sp, r7
 8009124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009128:	51eb851f 	.word	0x51eb851f

0800912c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009136:	2300      	movs	r3, #0
 8009138:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800913a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800913e:	2b84      	cmp	r3, #132	@ 0x84
 8009140:	d005      	beq.n	800914e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009142:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	3303      	adds	r3, #3
 800914c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800914e:	68fb      	ldr	r3, [r7, #12]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009162:	f3ef 8305 	mrs	r3, IPSR
 8009166:	607b      	str	r3, [r7, #4]
  return(result);
 8009168:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800916a:	2b00      	cmp	r3, #0
 800916c:	bf14      	ite	ne
 800916e:	2301      	movne	r3, #1
 8009170:	2300      	moveq	r3, #0
 8009172:	b2db      	uxtb	r3, r3
}
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009184:	f001 f962 	bl	800a44c <vTaskStartScheduler>
  
  return osOK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	bd80      	pop	{r7, pc}

0800918e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800918e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009190:	b089      	sub	sp, #36	@ 0x24
 8009192:	af04      	add	r7, sp, #16
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	695b      	ldr	r3, [r3, #20]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d020      	beq.n	80091e2 <osThreadCreate+0x54>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d01c      	beq.n	80091e2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685c      	ldr	r4, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691e      	ldr	r6, [r3, #16]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7ff ffb6 	bl	800912c <makeFreeRtosPriority>
 80091c0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091ca:	9202      	str	r2, [sp, #8]
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	9100      	str	r1, [sp, #0]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	4632      	mov	r2, r6
 80091d4:	4629      	mov	r1, r5
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 ff52 	bl	800a080 <xTaskCreateStatic>
 80091dc:	4603      	mov	r3, r0
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	e01c      	b.n	800921c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685c      	ldr	r4, [r3, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091ee:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff ff98 	bl	800912c <makeFreeRtosPriority>
 80091fc:	4602      	mov	r2, r0
 80091fe:	f107 030c 	add.w	r3, r7, #12
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	9200      	str	r2, [sp, #0]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	4632      	mov	r2, r6
 800920a:	4629      	mov	r1, r5
 800920c:	4620      	mov	r0, r4
 800920e:	f000 ff97 	bl	800a140 <xTaskCreate>
 8009212:	4603      	mov	r3, r0
 8009214:	2b01      	cmp	r3, #1
 8009216:	d001      	beq.n	800921c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009218:	2300      	movs	r3, #0
 800921a:	e000      	b.n	800921e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800921c:	68fb      	ldr	r3, [r7, #12]
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009226 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <osDelay+0x16>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	e000      	b.n	800923e <osDelay+0x18>
 800923c:	2301      	movs	r3, #1
 800923e:	4618      	mov	r0, r3
 8009240:	f001 f8ce 	bl	800a3e0 <vTaskDelay>
  
  return osOK;
 8009244:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af02      	add	r7, sp, #8
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00f      	beq.n	8009280 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d10a      	bne.n	800927c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	2203      	movs	r2, #3
 800926c:	9200      	str	r2, [sp, #0]
 800926e:	2200      	movs	r2, #0
 8009270:	2100      	movs	r1, #0
 8009272:	2001      	movs	r0, #1
 8009274:	f000 fa18 	bl	80096a8 <xQueueGenericCreateStatic>
 8009278:	4603      	mov	r3, r0
 800927a:	e016      	b.n	80092aa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	e014      	b.n	80092aa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d110      	bne.n	80092a8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009286:	2203      	movs	r2, #3
 8009288:	2100      	movs	r1, #0
 800928a:	2001      	movs	r0, #1
 800928c:	f000 fa89 	bl	80097a2 <xQueueGenericCreate>
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d005      	beq.n	80092a4 <osSemaphoreCreate+0x56>
 8009298:	2300      	movs	r3, #0
 800929a:	2200      	movs	r2, #0
 800929c:	2100      	movs	r1, #0
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f000 fada 	bl	8009858 <xQueueGenericSend>
      return sema;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	e000      	b.n	80092aa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80092a8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80092b2:	b590      	push	{r4, r7, lr}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af02      	add	r7, sp, #8
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d011      	beq.n	80092e8 <osMessageCreate+0x36>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00d      	beq.n	80092e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6859      	ldr	r1, [r3, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	2400      	movs	r4, #0
 80092de:	9400      	str	r4, [sp, #0]
 80092e0:	f000 f9e2 	bl	80096a8 <xQueueGenericCreateStatic>
 80092e4:	4603      	mov	r3, r0
 80092e6:	e008      	b.n	80092fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6818      	ldr	r0, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	4619      	mov	r1, r3
 80092f4:	f000 fa55 	bl	80097a2 <xQueueGenericCreate>
 80092f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd90      	pop	{r4, r7, pc}
	...

08009304 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <osMessagePut+0x1e>
    ticks = 1;
 800931e:	2301      	movs	r3, #1
 8009320:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009322:	f7ff ff1b 	bl	800915c <inHandlerMode>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d018      	beq.n	800935e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800932c:	f107 0210 	add.w	r2, r7, #16
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	2300      	movs	r3, #0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fb90 	bl	8009a5c <xQueueGenericSendFromISR>
 800933c:	4603      	mov	r3, r0
 800933e:	2b01      	cmp	r3, #1
 8009340:	d001      	beq.n	8009346 <osMessagePut+0x42>
      return osErrorOS;
 8009342:	23ff      	movs	r3, #255	@ 0xff
 8009344:	e018      	b.n	8009378 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d014      	beq.n	8009376 <osMessagePut+0x72>
 800934c:	4b0c      	ldr	r3, [pc, #48]	@ (8009380 <osMessagePut+0x7c>)
 800934e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	e00b      	b.n	8009376 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800935e:	f107 0108 	add.w	r1, r7, #8
 8009362:	2300      	movs	r3, #0
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 fa76 	bl	8009858 <xQueueGenericSend>
 800936c:	4603      	mov	r3, r0
 800936e:	2b01      	cmp	r3, #1
 8009370:	d001      	beq.n	8009376 <osMessagePut+0x72>
      return osErrorOS;
 8009372:	23ff      	movs	r3, #255	@ 0xff
 8009374:	e000      	b.n	8009378 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009384:	b590      	push	{r4, r7, lr}
 8009386:	b08b      	sub	sp, #44	@ 0x2c
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800939e:	2380      	movs	r3, #128	@ 0x80
 80093a0:	617b      	str	r3, [r7, #20]
    return event;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	461c      	mov	r4, r3
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093b2:	e054      	b.n	800945e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c2:	d103      	bne.n	80093cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80093c4:	f04f 33ff 	mov.w	r3, #4294967295
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ca:	e009      	b.n	80093e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d006      	beq.n	80093e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <osMessageGet+0x5c>
      ticks = 1;
 80093dc:	2301      	movs	r3, #1
 80093de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80093e0:	f7ff febc 	bl	800915c <inHandlerMode>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01c      	beq.n	8009424 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80093ea:	f107 0220 	add.w	r2, r7, #32
 80093ee:	f107 0314 	add.w	r3, r7, #20
 80093f2:	3304      	adds	r3, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	68b8      	ldr	r0, [r7, #8]
 80093f8:	f000 fcb0 	bl	8009d5c <xQueueReceiveFromISR>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d102      	bne.n	8009408 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009402:	2310      	movs	r3, #16
 8009404:	617b      	str	r3, [r7, #20]
 8009406:	e001      	b.n	800940c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009408:	2300      	movs	r3, #0
 800940a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d01d      	beq.n	800944e <osMessageGet+0xca>
 8009412:	4b15      	ldr	r3, [pc, #84]	@ (8009468 <osMessageGet+0xe4>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	e014      	b.n	800944e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009424:	f107 0314 	add.w	r3, r7, #20
 8009428:	3304      	adds	r3, #4
 800942a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800942c:	4619      	mov	r1, r3
 800942e:	68b8      	ldr	r0, [r7, #8]
 8009430:	f000 fbb2 	bl	8009b98 <xQueueReceive>
 8009434:	4603      	mov	r3, r0
 8009436:	2b01      	cmp	r3, #1
 8009438:	d102      	bne.n	8009440 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800943a:	2310      	movs	r3, #16
 800943c:	617b      	str	r3, [r7, #20]
 800943e:	e006      	b.n	800944e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <osMessageGet+0xc6>
 8009446:	2300      	movs	r3, #0
 8009448:	e000      	b.n	800944c <osMessageGet+0xc8>
 800944a:	2340      	movs	r3, #64	@ 0x40
 800944c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	461c      	mov	r4, r3
 8009452:	f107 0314 	add.w	r3, r7, #20
 8009456:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800945a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	372c      	adds	r7, #44	@ 0x2c
 8009462:	46bd      	mov	sp, r7
 8009464:	bd90      	pop	{r4, r7, pc}
 8009466:	bf00      	nop
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f103 0208 	add.w	r2, r3, #8
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f103 0208 	add.w	r2, r3, #8
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f103 0208 	add.w	r2, r3, #8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094c6:	b480      	push	{r7}
 80094c8:	b085      	sub	sp, #20
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	601a      	str	r2, [r3, #0]
}
 8009502:	bf00      	nop
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d103      	bne.n	800952e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	e00c      	b.n	8009548 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3308      	adds	r3, #8
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	e002      	b.n	800953c <vListInsert+0x2e>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	429a      	cmp	r2, r3
 8009546:	d2f6      	bcs.n	8009536 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	685a      	ldr	r2, [r3, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	6892      	ldr	r2, [r2, #8]
 8009596:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6852      	ldr	r2, [r2, #4]
 80095a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d103      	bne.n	80095b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689a      	ldr	r2, [r3, #8]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	1e5a      	subs	r2, r3, #1
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10b      	bne.n	8009600 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095fa:	bf00      	nop
 80095fc:	bf00      	nop
 80095fe:	e7fd      	b.n	80095fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009600:	f001 fd82 	bl	800b108 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800960c:	68f9      	ldr	r1, [r7, #12]
 800960e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009610:	fb01 f303 	mul.w	r3, r1, r3
 8009614:	441a      	add	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009630:	3b01      	subs	r3, #1
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009636:	fb01 f303 	mul.w	r3, r1, r3
 800963a:	441a      	add	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	22ff      	movs	r2, #255	@ 0xff
 8009644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	22ff      	movs	r2, #255	@ 0xff
 800964c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d114      	bne.n	8009680 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d01a      	beq.n	8009694 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3310      	adds	r3, #16
 8009662:	4618      	mov	r0, r3
 8009664:	f001 f94c 	bl	800a900 <xTaskRemoveFromEventList>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d012      	beq.n	8009694 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800966e:	4b0d      	ldr	r3, [pc, #52]	@ (80096a4 <xQueueGenericReset+0xd0>)
 8009670:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	e009      	b.n	8009694 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3310      	adds	r3, #16
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff fef1 	bl	800946c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3324      	adds	r3, #36	@ 0x24
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff feec 	bl	800946c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009694:	f001 fd6a 	bl	800b16c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009698:	2301      	movs	r3, #1
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	e000ed04 	.word	0xe000ed04

080096a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08e      	sub	sp, #56	@ 0x38
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80096da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	e7fd      	b.n	80096ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <xQueueGenericCreateStatic+0x56>
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <xQueueGenericCreateStatic+0x5a>
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <xQueueGenericCreateStatic+0x5c>
 8009702:	2300      	movs	r3, #0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10b      	bne.n	8009720 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	f383 8811 	msr	BASEPRI, r3
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	623b      	str	r3, [r7, #32]
}
 800971a:	bf00      	nop
 800971c:	bf00      	nop
 800971e:	e7fd      	b.n	800971c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <xQueueGenericCreateStatic+0x84>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <xQueueGenericCreateStatic+0x88>
 800972c:	2301      	movs	r3, #1
 800972e:	e000      	b.n	8009732 <xQueueGenericCreateStatic+0x8a>
 8009730:	2300      	movs	r3, #0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10b      	bne.n	800974e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	61fb      	str	r3, [r7, #28]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800974e:	2348      	movs	r3, #72	@ 0x48
 8009750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b48      	cmp	r3, #72	@ 0x48
 8009756:	d00b      	beq.n	8009770 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61bb      	str	r3, [r7, #24]
}
 800976a:	bf00      	nop
 800976c:	bf00      	nop
 800976e:	e7fd      	b.n	800976c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009770:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00d      	beq.n	8009798 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009784:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	4613      	mov	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 f840 	bl	8009818 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800979a:	4618      	mov	r0, r3
 800979c:	3730      	adds	r7, #48	@ 0x30
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b08a      	sub	sp, #40	@ 0x28
 80097a6:	af02      	add	r7, sp, #8
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	4613      	mov	r3, r2
 80097ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10b      	bne.n	80097ce <xQueueGenericCreate+0x2c>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	613b      	str	r3, [r7, #16]
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	e7fd      	b.n	80097ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	fb02 f303 	mul.w	r3, r2, r3
 80097d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	3348      	adds	r3, #72	@ 0x48
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 fdb5 	bl	800b34c <pvPortMalloc>
 80097e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d011      	beq.n	800980e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	3348      	adds	r3, #72	@ 0x48
 80097f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097fc:	79fa      	ldrb	r2, [r7, #7]
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	4613      	mov	r3, r2
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f805 	bl	8009818 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800980e:	69bb      	ldr	r3, [r7, #24]
	}
 8009810:	4618      	mov	r0, r3
 8009812:	3720      	adds	r7, #32
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	69ba      	ldr	r2, [r7, #24]
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	e002      	b.n	800983a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009846:	2101      	movs	r1, #1
 8009848:	69b8      	ldr	r0, [r7, #24]
 800984a:	f7ff fec3 	bl	80095d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08e      	sub	sp, #56	@ 0x38
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009866:	2300      	movs	r3, #0
 8009868:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10b      	bne.n	800988c <xQueueGenericSend+0x34>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009886:	bf00      	nop
 8009888:	bf00      	nop
 800988a:	e7fd      	b.n	8009888 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d103      	bne.n	800989a <xQueueGenericSend+0x42>
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <xQueueGenericSend+0x46>
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <xQueueGenericSend+0x48>
 800989e:	2300      	movs	r3, #0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10b      	bne.n	80098bc <xQueueGenericSend+0x64>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
 80098ba:	e7fd      	b.n	80098b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d103      	bne.n	80098ca <xQueueGenericSend+0x72>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <xQueueGenericSend+0x76>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e000      	b.n	80098d0 <xQueueGenericSend+0x78>
 80098ce:	2300      	movs	r3, #0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <xQueueGenericSend+0x94>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	623b      	str	r3, [r7, #32]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098ec:	f001 f9ce 	bl	800ac8c <xTaskGetSchedulerState>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <xQueueGenericSend+0xa4>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <xQueueGenericSend+0xa8>
 80098fc:	2301      	movs	r3, #1
 80098fe:	e000      	b.n	8009902 <xQueueGenericSend+0xaa>
 8009900:	2300      	movs	r3, #0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10b      	bne.n	800991e <xQueueGenericSend+0xc6>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	61fb      	str	r3, [r7, #28]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800991e:	f001 fbf3 	bl	800b108 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992a:	429a      	cmp	r2, r3
 800992c:	d302      	bcc.n	8009934 <xQueueGenericSend+0xdc>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d129      	bne.n	8009988 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	68b9      	ldr	r1, [r7, #8]
 8009938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800993a:	f000 fa91 	bl	8009e60 <prvCopyDataToQueue>
 800993e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009944:	2b00      	cmp	r3, #0
 8009946:	d010      	beq.n	800996a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994a:	3324      	adds	r3, #36	@ 0x24
 800994c:	4618      	mov	r0, r3
 800994e:	f000 ffd7 	bl	800a900 <xTaskRemoveFromEventList>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d013      	beq.n	8009980 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009958:	4b3f      	ldr	r3, [pc, #252]	@ (8009a58 <xQueueGenericSend+0x200>)
 800995a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	e00a      	b.n	8009980 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800996a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d007      	beq.n	8009980 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009970:	4b39      	ldr	r3, [pc, #228]	@ (8009a58 <xQueueGenericSend+0x200>)
 8009972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009980:	f001 fbf4 	bl	800b16c <vPortExitCritical>
				return pdPASS;
 8009984:	2301      	movs	r3, #1
 8009986:	e063      	b.n	8009a50 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d103      	bne.n	8009996 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800998e:	f001 fbed 	bl	800b16c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009992:	2300      	movs	r3, #0
 8009994:	e05c      	b.n	8009a50 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800999c:	f107 0314 	add.w	r3, r7, #20
 80099a0:	4618      	mov	r0, r3
 80099a2:	f001 f811 	bl	800a9c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099a6:	2301      	movs	r3, #1
 80099a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099aa:	f001 fbdf 	bl	800b16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099ae:	f000 fdb7 	bl	800a520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099b2:	f001 fba9 	bl	800b108 <vPortEnterCritical>
 80099b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80099bc:	b25b      	sxtb	r3, r3
 80099be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c2:	d103      	bne.n	80099cc <xQueueGenericSend+0x174>
 80099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099d2:	b25b      	sxtb	r3, r3
 80099d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d8:	d103      	bne.n	80099e2 <xQueueGenericSend+0x18a>
 80099da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099e2:	f001 fbc3 	bl	800b16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099e6:	1d3a      	adds	r2, r7, #4
 80099e8:	f107 0314 	add.w	r3, r7, #20
 80099ec:	4611      	mov	r1, r2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f001 f800 	bl	800a9f4 <xTaskCheckForTimeOut>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d124      	bne.n	8009a44 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80099fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80099fc:	f000 fb28 	bl	800a050 <prvIsQueueFull>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d018      	beq.n	8009a38 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a08:	3310      	adds	r3, #16
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 ff50 	bl	800a8b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a16:	f000 fab3 	bl	8009f80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009a1a:	f000 fd8f 	bl	800a53c <xTaskResumeAll>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f47f af7c 	bne.w	800991e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009a26:	4b0c      	ldr	r3, [pc, #48]	@ (8009a58 <xQueueGenericSend+0x200>)
 8009a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	e772      	b.n	800991e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a3a:	f000 faa1 	bl	8009f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a3e:	f000 fd7d 	bl	800a53c <xTaskResumeAll>
 8009a42:	e76c      	b.n	800991e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a46:	f000 fa9b 	bl	8009f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a4a:	f000 fd77 	bl	800a53c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009a4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3738      	adds	r7, #56	@ 0x38
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b090      	sub	sp, #64	@ 0x40
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10b      	bne.n	8009a8c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	e7fd      	b.n	8009a88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <xQueueGenericSendFromISR+0x3e>
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <xQueueGenericSendFromISR+0x42>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e000      	b.n	8009aa0 <xQueueGenericSendFromISR+0x44>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10b      	bne.n	8009abc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d103      	bne.n	8009aca <xQueueGenericSendFromISR+0x6e>
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d101      	bne.n	8009ace <xQueueGenericSendFromISR+0x72>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <xQueueGenericSendFromISR+0x74>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10b      	bne.n	8009aec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	623b      	str	r3, [r7, #32]
}
 8009ae6:	bf00      	nop
 8009ae8:	bf00      	nop
 8009aea:	e7fd      	b.n	8009ae8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009aec:	f001 fbec 	bl	800b2c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009af0:	f3ef 8211 	mrs	r2, BASEPRI
 8009af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	61fa      	str	r2, [r7, #28]
 8009b06:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b08:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b0a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d302      	bcc.n	8009b1e <xQueueGenericSendFromISR+0xc2>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d12f      	bne.n	8009b7e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b34:	f000 f994 	bl	8009e60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b38:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b40:	d112      	bne.n	8009b68 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d016      	beq.n	8009b78 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4c:	3324      	adds	r3, #36	@ 0x24
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fed6 	bl	800a900 <xTaskRemoveFromEventList>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00e      	beq.n	8009b78 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e007      	b.n	8009b78 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	b25a      	sxtb	r2, r3
 8009b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009b7c:	e001      	b.n	8009b82 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b84:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3740      	adds	r7, #64	@ 0x40
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08c      	sub	sp, #48	@ 0x30
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <xQueueReceive+0x32>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	623b      	str	r3, [r7, #32]
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d103      	bne.n	8009bd8 <xQueueReceive+0x40>
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <xQueueReceive+0x44>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e000      	b.n	8009bde <xQueueReceive+0x46>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10b      	bne.n	8009bfa <xQueueReceive+0x62>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	61fb      	str	r3, [r7, #28]
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	e7fd      	b.n	8009bf6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bfa:	f001 f847 	bl	800ac8c <xTaskGetSchedulerState>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d102      	bne.n	8009c0a <xQueueReceive+0x72>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <xQueueReceive+0x76>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <xQueueReceive+0x78>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10b      	bne.n	8009c2c <xQueueReceive+0x94>
	__asm volatile
 8009c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	61bb      	str	r3, [r7, #24]
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	e7fd      	b.n	8009c28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c2c:	f001 fa6c 	bl	800b108 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01f      	beq.n	8009c7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c40:	f000 f978 	bl	8009f34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c46:	1e5a      	subs	r2, r3, #1
 8009c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00f      	beq.n	8009c74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c56:	3310      	adds	r3, #16
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f000 fe51 	bl	800a900 <xTaskRemoveFromEventList>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d007      	beq.n	8009c74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c64:	4b3c      	ldr	r3, [pc, #240]	@ (8009d58 <xQueueReceive+0x1c0>)
 8009c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c74:	f001 fa7a 	bl	800b16c <vPortExitCritical>
				return pdPASS;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e069      	b.n	8009d50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d103      	bne.n	8009c8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c82:	f001 fa73 	bl	800b16c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c86:	2300      	movs	r3, #0
 8009c88:	e062      	b.n	8009d50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d106      	bne.n	8009c9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c90:	f107 0310 	add.w	r3, r7, #16
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fe97 	bl	800a9c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c9e:	f001 fa65 	bl	800b16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ca2:	f000 fc3d 	bl	800a520 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ca6:	f001 fa2f 	bl	800b108 <vPortEnterCritical>
 8009caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cb0:	b25b      	sxtb	r3, r3
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d103      	bne.n	8009cc0 <xQueueReceive+0x128>
 8009cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cc6:	b25b      	sxtb	r3, r3
 8009cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ccc:	d103      	bne.n	8009cd6 <xQueueReceive+0x13e>
 8009cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cd6:	f001 fa49 	bl	800b16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009cda:	1d3a      	adds	r2, r7, #4
 8009cdc:	f107 0310 	add.w	r3, r7, #16
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 fe86 	bl	800a9f4 <xTaskCheckForTimeOut>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d123      	bne.n	8009d36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cf0:	f000 f998 	bl	800a024 <prvIsQueueEmpty>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d017      	beq.n	8009d2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfc:	3324      	adds	r3, #36	@ 0x24
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 fdd6 	bl	800a8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d0a:	f000 f939 	bl	8009f80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d0e:	f000 fc15 	bl	800a53c <xTaskResumeAll>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d189      	bne.n	8009c2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009d18:	4b0f      	ldr	r3, [pc, #60]	@ (8009d58 <xQueueReceive+0x1c0>)
 8009d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	e780      	b.n	8009c2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d2c:	f000 f928 	bl	8009f80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d30:	f000 fc04 	bl	800a53c <xTaskResumeAll>
 8009d34:	e77a      	b.n	8009c2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d38:	f000 f922 	bl	8009f80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d3c:	f000 fbfe 	bl	800a53c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d42:	f000 f96f 	bl	800a024 <prvIsQueueEmpty>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f43f af6f 	beq.w	8009c2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3730      	adds	r7, #48	@ 0x30
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08e      	sub	sp, #56	@ 0x38
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10b      	bne.n	8009d8a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	623b      	str	r3, [r7, #32]
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	e7fd      	b.n	8009d86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d103      	bne.n	8009d98 <xQueueReceiveFromISR+0x3c>
 8009d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <xQueueReceiveFromISR+0x40>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e000      	b.n	8009d9e <xQueueReceiveFromISR+0x42>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10b      	bne.n	8009dba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	61fb      	str	r3, [r7, #28]
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop
 8009db8:	e7fd      	b.n	8009db6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dba:	f001 fa85 	bl	800b2c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	61ba      	str	r2, [r7, #24]
 8009dd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009dd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dde:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d02f      	beq.n	8009e46 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009df4:	f000 f89e 	bl	8009f34 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfa:	1e5a      	subs	r2, r3, #1
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d112      	bne.n	8009e30 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d016      	beq.n	8009e40 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	3310      	adds	r3, #16
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fd72 	bl	800a900 <xTaskRemoveFromEventList>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e007      	b.n	8009e40 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e34:	3301      	adds	r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	b25a      	sxtb	r2, r3
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009e40:	2301      	movs	r3, #1
 8009e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e44:	e001      	b.n	8009e4a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f383 8811 	msr	BASEPRI, r3
}
 8009e54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3738      	adds	r7, #56	@ 0x38
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10d      	bne.n	8009e9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d14d      	bne.n	8009f22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 ff1c 	bl	800acc8 <xTaskPriorityDisinherit>
 8009e90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	609a      	str	r2, [r3, #8]
 8009e98:	e043      	b.n	8009f22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d119      	bne.n	8009ed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6858      	ldr	r0, [r3, #4]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	68b9      	ldr	r1, [r7, #8]
 8009eac:	f002 fdbd 	bl	800ca2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb8:	441a      	add	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d32b      	bcc.n	8009f22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	605a      	str	r2, [r3, #4]
 8009ed2:	e026      	b.n	8009f22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	68d8      	ldr	r0, [r3, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009edc:	461a      	mov	r2, r3
 8009ede:	68b9      	ldr	r1, [r7, #8]
 8009ee0:	f002 fda3 	bl	800ca2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eec:	425b      	negs	r3, r3
 8009eee:	441a      	add	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	68da      	ldr	r2, [r3, #12]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d207      	bcs.n	8009f10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f08:	425b      	negs	r3, r3
 8009f0a:	441a      	add	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d105      	bne.n	8009f22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f2a:	697b      	ldr	r3, [r7, #20]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d018      	beq.n	8009f78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f4e:	441a      	add	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d303      	bcc.n	8009f68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68d9      	ldr	r1, [r3, #12]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f70:	461a      	mov	r2, r3
 8009f72:	6838      	ldr	r0, [r7, #0]
 8009f74:	f002 fd59 	bl	800ca2a <memcpy>
	}
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f88:	f001 f8be 	bl	800b108 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f94:	e011      	b.n	8009fba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d012      	beq.n	8009fc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3324      	adds	r3, #36	@ 0x24
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 fcac 	bl	800a900 <xTaskRemoveFromEventList>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d001      	beq.n	8009fb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fae:	f000 fd85 	bl	800aabc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	dce9      	bgt.n	8009f96 <prvUnlockQueue+0x16>
 8009fc2:	e000      	b.n	8009fc6 <prvUnlockQueue+0x46>
					break;
 8009fc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	22ff      	movs	r2, #255	@ 0xff
 8009fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009fce:	f001 f8cd 	bl	800b16c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009fd2:	f001 f899 	bl	800b108 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009fde:	e011      	b.n	800a004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d012      	beq.n	800a00e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3310      	adds	r3, #16
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fc87 	bl	800a900 <xTaskRemoveFromEventList>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ff8:	f000 fd60 	bl	800aabc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	b2db      	uxtb	r3, r3
 800a002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dce9      	bgt.n	8009fe0 <prvUnlockQueue+0x60>
 800a00c:	e000      	b.n	800a010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a00e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	22ff      	movs	r2, #255	@ 0xff
 800a014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a018:	f001 f8a8 	bl	800b16c <vPortExitCritical>
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a02c:	f001 f86c 	bl	800b108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a038:	2301      	movs	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	e001      	b.n	800a042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a042:	f001 f893 	bl	800b16c <vPortExitCritical>

	return xReturn;
 800a046:	68fb      	ldr	r3, [r7, #12]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a058:	f001 f856 	bl	800b108 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a064:	429a      	cmp	r2, r3
 800a066:	d102      	bne.n	800a06e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a068:	2301      	movs	r3, #1
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	e001      	b.n	800a072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a072:	f001 f87b 	bl	800b16c <vPortExitCritical>

	return xReturn;
 800a076:	68fb      	ldr	r3, [r7, #12]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08e      	sub	sp, #56	@ 0x38
 800a084:	af04      	add	r7, sp, #16
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10b      	bne.n	800a0ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	623b      	str	r3, [r7, #32]
}
 800a0a6:	bf00      	nop
 800a0a8:	bf00      	nop
 800a0aa:	e7fd      	b.n	800a0a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	61fb      	str	r3, [r7, #28]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0ca:	23a0      	movs	r3, #160	@ 0xa0
 800a0cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	2ba0      	cmp	r3, #160	@ 0xa0
 800a0d2:	d00b      	beq.n	800a0ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	61bb      	str	r3, [r7, #24]
}
 800a0e6:	bf00      	nop
 800a0e8:	bf00      	nop
 800a0ea:	e7fd      	b.n	800a0e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a0ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01e      	beq.n	800a132 <xTaskCreateStatic+0xb2>
 800a0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01b      	beq.n	800a132 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a102:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a106:	2202      	movs	r2, #2
 800a108:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a10c:	2300      	movs	r3, #0
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a112:	9302      	str	r3, [sp, #8]
 800a114:	f107 0314 	add.w	r3, r7, #20
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f851 	bl	800a1cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a12a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a12c:	f000 f8ee 	bl	800a30c <prvAddNewTaskToReadyList>
 800a130:	e001      	b.n	800a136 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a136:	697b      	ldr	r3, [r7, #20]
	}
 800a138:	4618      	mov	r0, r3
 800a13a:	3728      	adds	r7, #40	@ 0x28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08c      	sub	sp, #48	@ 0x30
 800a144:	af04      	add	r7, sp, #16
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	4613      	mov	r3, r2
 800a14e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4618      	mov	r0, r3
 800a156:	f001 f8f9 	bl	800b34c <pvPortMalloc>
 800a15a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00e      	beq.n	800a180 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a162:	20a0      	movs	r0, #160	@ 0xa0
 800a164:	f001 f8f2 	bl	800b34c <pvPortMalloc>
 800a168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	631a      	str	r2, [r3, #48]	@ 0x30
 800a176:	e005      	b.n	800a184 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a178:	6978      	ldr	r0, [r7, #20]
 800a17a:	f001 f9b5 	bl	800b4e8 <vPortFree>
 800a17e:	e001      	b.n	800a184 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a180:	2300      	movs	r3, #0
 800a182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d017      	beq.n	800a1ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a192:	88fa      	ldrh	r2, [r7, #6]
 800a194:	2300      	movs	r3, #0
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	9302      	str	r3, [sp, #8]
 800a19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19e:	9301      	str	r3, [sp, #4]
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 f80f 	bl	800a1cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1ae:	69f8      	ldr	r0, [r7, #28]
 800a1b0:	f000 f8ac 	bl	800a30c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	61bb      	str	r3, [r7, #24]
 800a1b8:	e002      	b.n	800a1c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a1be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
	}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	607a      	str	r2, [r7, #4]
 800a1d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	f023 0307 	bic.w	r3, r3, #7
 800a1f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00b      	beq.n	800a216 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	617b      	str	r3, [r7, #20]
}
 800a210:	bf00      	nop
 800a212:	bf00      	nop
 800a214:	e7fd      	b.n	800a212 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01f      	beq.n	800a25c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a21c:	2300      	movs	r3, #0
 800a21e:	61fb      	str	r3, [r7, #28]
 800a220:	e012      	b.n	800a248 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	4413      	add	r3, r2
 800a228:	7819      	ldrb	r1, [r3, #0]
 800a22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	4413      	add	r3, r2
 800a230:	3334      	adds	r3, #52	@ 0x34
 800a232:	460a      	mov	r2, r1
 800a234:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	4413      	add	r3, r2
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d006      	beq.n	800a250 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	3301      	adds	r3, #1
 800a246:	61fb      	str	r3, [r7, #28]
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	2b0f      	cmp	r3, #15
 800a24c:	d9e9      	bls.n	800a222 <prvInitialiseNewTask+0x56>
 800a24e:	e000      	b.n	800a252 <prvInitialiseNewTask+0x86>
			{
				break;
 800a250:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a254:	2200      	movs	r2, #0
 800a256:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a25a:	e003      	b.n	800a264 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a266:	2b06      	cmp	r3, #6
 800a268:	d901      	bls.n	800a26e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a26a:	2306      	movs	r3, #6
 800a26c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a272:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a278:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	2200      	movs	r2, #0
 800a27e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a282:	3304      	adds	r3, #4
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff f911 	bl	80094ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	3318      	adds	r3, #24
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff f90c 	bl	80094ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a298:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29c:	f1c3 0207 	rsb	r2, r3, #7
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	334c      	adds	r3, #76	@ 0x4c
 800a2be:	224c      	movs	r2, #76	@ 0x4c
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f002 fabe 	bl	800c844 <memset>
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ca:	4a0d      	ldr	r2, [pc, #52]	@ (800a300 <prvInitialiseNewTask+0x134>)
 800a2cc:	651a      	str	r2, [r3, #80]	@ 0x50
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	4a0c      	ldr	r2, [pc, #48]	@ (800a304 <prvInitialiseNewTask+0x138>)
 800a2d2:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a308 <prvInitialiseNewTask+0x13c>)
 800a2d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	68f9      	ldr	r1, [r7, #12]
 800a2de:	69b8      	ldr	r0, [r7, #24]
 800a2e0:	f000 fde0 	bl	800aea4 <pxPortInitialiseStack>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2f6:	bf00      	nop
 800a2f8:	3720      	adds	r7, #32
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	20005114 	.word	0x20005114
 800a304:	2000517c 	.word	0x2000517c
 800a308:	200051e4 	.word	0x200051e4

0800a30c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a314:	f000 fef8 	bl	800b108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a318:	4b2a      	ldr	r3, [pc, #168]	@ (800a3c4 <prvAddNewTaskToReadyList+0xb8>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3301      	adds	r3, #1
 800a31e:	4a29      	ldr	r2, [pc, #164]	@ (800a3c4 <prvAddNewTaskToReadyList+0xb8>)
 800a320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a322:	4b29      	ldr	r3, [pc, #164]	@ (800a3c8 <prvAddNewTaskToReadyList+0xbc>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d109      	bne.n	800a33e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a32a:	4a27      	ldr	r2, [pc, #156]	@ (800a3c8 <prvAddNewTaskToReadyList+0xbc>)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a330:	4b24      	ldr	r3, [pc, #144]	@ (800a3c4 <prvAddNewTaskToReadyList+0xb8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d110      	bne.n	800a35a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a338:	f000 fbe4 	bl	800ab04 <prvInitialiseTaskLists>
 800a33c:	e00d      	b.n	800a35a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a33e:	4b23      	ldr	r3, [pc, #140]	@ (800a3cc <prvAddNewTaskToReadyList+0xc0>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d109      	bne.n	800a35a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a346:	4b20      	ldr	r3, [pc, #128]	@ (800a3c8 <prvAddNewTaskToReadyList+0xbc>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a350:	429a      	cmp	r2, r3
 800a352:	d802      	bhi.n	800a35a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a354:	4a1c      	ldr	r2, [pc, #112]	@ (800a3c8 <prvAddNewTaskToReadyList+0xbc>)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a35a:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d0 <prvAddNewTaskToReadyList+0xc4>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3301      	adds	r3, #1
 800a360:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d0 <prvAddNewTaskToReadyList+0xc4>)
 800a362:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a368:	2201      	movs	r2, #1
 800a36a:	409a      	lsls	r2, r3
 800a36c:	4b19      	ldr	r3, [pc, #100]	@ (800a3d4 <prvAddNewTaskToReadyList+0xc8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4313      	orrs	r3, r2
 800a372:	4a18      	ldr	r2, [pc, #96]	@ (800a3d4 <prvAddNewTaskToReadyList+0xc8>)
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37a:	4613      	mov	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4a15      	ldr	r2, [pc, #84]	@ (800a3d8 <prvAddNewTaskToReadyList+0xcc>)
 800a384:	441a      	add	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3304      	adds	r3, #4
 800a38a:	4619      	mov	r1, r3
 800a38c:	4610      	mov	r0, r2
 800a38e:	f7ff f89a 	bl	80094c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a392:	f000 feeb 	bl	800b16c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a396:	4b0d      	ldr	r3, [pc, #52]	@ (800a3cc <prvAddNewTaskToReadyList+0xc0>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00e      	beq.n	800a3bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a39e:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c8 <prvAddNewTaskToReadyList+0xbc>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d207      	bcs.n	800a3bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a3dc <prvAddNewTaskToReadyList+0xd0>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3bc:	bf00      	nop
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	200014b8 	.word	0x200014b8
 800a3c8:	200013b8 	.word	0x200013b8
 800a3cc:	200014c4 	.word	0x200014c4
 800a3d0:	200014d4 	.word	0x200014d4
 800a3d4:	200014c0 	.word	0x200014c0
 800a3d8:	200013bc 	.word	0x200013bc
 800a3dc:	e000ed04 	.word	0xe000ed04

0800a3e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d018      	beq.n	800a424 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a3f2:	4b14      	ldr	r3, [pc, #80]	@ (800a444 <vTaskDelay+0x64>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00b      	beq.n	800a412 <vTaskDelay+0x32>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	60bb      	str	r3, [r7, #8]
}
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
 800a410:	e7fd      	b.n	800a40e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a412:	f000 f885 	bl	800a520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a416:	2100      	movs	r1, #0
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fcdd 	bl	800add8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a41e:	f000 f88d 	bl	800a53c <xTaskResumeAll>
 800a422:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d107      	bne.n	800a43a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a42a:	4b07      	ldr	r3, [pc, #28]	@ (800a448 <vTaskDelay+0x68>)
 800a42c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a43a:	bf00      	nop
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	200014e0 	.word	0x200014e0
 800a448:	e000ed04 	.word	0xe000ed04

0800a44c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08a      	sub	sp, #40	@ 0x28
 800a450:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a45a:	463a      	mov	r2, r7
 800a45c:	1d39      	adds	r1, r7, #4
 800a45e:	f107 0308 	add.w	r3, r7, #8
 800a462:	4618      	mov	r0, r3
 800a464:	f7f9 fb30 	bl	8003ac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	9202      	str	r2, [sp, #8]
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	2300      	movs	r3, #0
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	2300      	movs	r3, #0
 800a478:	460a      	mov	r2, r1
 800a47a:	4921      	ldr	r1, [pc, #132]	@ (800a500 <vTaskStartScheduler+0xb4>)
 800a47c:	4821      	ldr	r0, [pc, #132]	@ (800a504 <vTaskStartScheduler+0xb8>)
 800a47e:	f7ff fdff 	bl	800a080 <xTaskCreateStatic>
 800a482:	4603      	mov	r3, r0
 800a484:	4a20      	ldr	r2, [pc, #128]	@ (800a508 <vTaskStartScheduler+0xbc>)
 800a486:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a488:	4b1f      	ldr	r3, [pc, #124]	@ (800a508 <vTaskStartScheduler+0xbc>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a490:	2301      	movs	r3, #1
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	e001      	b.n	800a49a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a496:	2300      	movs	r3, #0
 800a498:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d11b      	bne.n	800a4d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	613b      	str	r3, [r7, #16]
}
 800a4b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4b4:	4b15      	ldr	r3, [pc, #84]	@ (800a50c <vTaskStartScheduler+0xc0>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	334c      	adds	r3, #76	@ 0x4c
 800a4ba:	4a15      	ldr	r2, [pc, #84]	@ (800a510 <vTaskStartScheduler+0xc4>)
 800a4bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a4be:	4b15      	ldr	r3, [pc, #84]	@ (800a514 <vTaskStartScheduler+0xc8>)
 800a4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a4c6:	4b14      	ldr	r3, [pc, #80]	@ (800a518 <vTaskStartScheduler+0xcc>)
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a4cc:	4b13      	ldr	r3, [pc, #76]	@ (800a51c <vTaskStartScheduler+0xd0>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a4d2:	f000 fd75 	bl	800afc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a4d6:	e00f      	b.n	800a4f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d10b      	bne.n	800a4f8 <vTaskStartScheduler+0xac>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <vTaskStartScheduler+0xa8>
}
 800a4f8:	bf00      	nop
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	0800f334 	.word	0x0800f334
 800a504:	0800aad5 	.word	0x0800aad5
 800a508:	200014dc 	.word	0x200014dc
 800a50c:	200013b8 	.word	0x200013b8
 800a510:	20000198 	.word	0x20000198
 800a514:	200014d8 	.word	0x200014d8
 800a518:	200014c4 	.word	0x200014c4
 800a51c:	200014bc 	.word	0x200014bc

0800a520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a520:	b480      	push	{r7}
 800a522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a524:	4b04      	ldr	r3, [pc, #16]	@ (800a538 <vTaskSuspendAll+0x18>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	4a03      	ldr	r2, [pc, #12]	@ (800a538 <vTaskSuspendAll+0x18>)
 800a52c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a52e:	bf00      	nop
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	200014e0 	.word	0x200014e0

0800a53c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a54a:	4b42      	ldr	r3, [pc, #264]	@ (800a654 <xTaskResumeAll+0x118>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10b      	bne.n	800a56a <xTaskResumeAll+0x2e>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	603b      	str	r3, [r7, #0]
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	e7fd      	b.n	800a566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a56a:	f000 fdcd 	bl	800b108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a56e:	4b39      	ldr	r3, [pc, #228]	@ (800a654 <xTaskResumeAll+0x118>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3b01      	subs	r3, #1
 800a574:	4a37      	ldr	r2, [pc, #220]	@ (800a654 <xTaskResumeAll+0x118>)
 800a576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a578:	4b36      	ldr	r3, [pc, #216]	@ (800a654 <xTaskResumeAll+0x118>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d161      	bne.n	800a644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a580:	4b35      	ldr	r3, [pc, #212]	@ (800a658 <xTaskResumeAll+0x11c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d05d      	beq.n	800a644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a588:	e02e      	b.n	800a5e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a58a:	4b34      	ldr	r3, [pc, #208]	@ (800a65c <xTaskResumeAll+0x120>)
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3318      	adds	r3, #24
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe fff2 	bl	8009580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7fe ffed 	bl	8009580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	409a      	lsls	r2, r3
 800a5ae:	4b2c      	ldr	r3, [pc, #176]	@ (800a660 <xTaskResumeAll+0x124>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	4a2a      	ldr	r2, [pc, #168]	@ (800a660 <xTaskResumeAll+0x124>)
 800a5b6:	6013      	str	r3, [r2, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5bc:	4613      	mov	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4a27      	ldr	r2, [pc, #156]	@ (800a664 <xTaskResumeAll+0x128>)
 800a5c6:	441a      	add	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f7fe ff79 	bl	80094c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d8:	4b23      	ldr	r3, [pc, #140]	@ (800a668 <xTaskResumeAll+0x12c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d302      	bcc.n	800a5e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a5e2:	4b22      	ldr	r3, [pc, #136]	@ (800a66c <xTaskResumeAll+0x130>)
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a5e8:	4b1c      	ldr	r3, [pc, #112]	@ (800a65c <xTaskResumeAll+0x120>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d1cc      	bne.n	800a58a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a5f6:	f000 fb29 	bl	800ac4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800a670 <xTaskResumeAll+0x134>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d010      	beq.n	800a628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a606:	f000 f837 	bl	800a678 <xTaskIncrementTick>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a610:	4b16      	ldr	r3, [pc, #88]	@ (800a66c <xTaskResumeAll+0x130>)
 800a612:	2201      	movs	r2, #1
 800a614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	3b01      	subs	r3, #1
 800a61a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f1      	bne.n	800a606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a622:	4b13      	ldr	r3, [pc, #76]	@ (800a670 <xTaskResumeAll+0x134>)
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a628:	4b10      	ldr	r3, [pc, #64]	@ (800a66c <xTaskResumeAll+0x130>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d009      	beq.n	800a644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a630:	2301      	movs	r3, #1
 800a632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a634:	4b0f      	ldr	r3, [pc, #60]	@ (800a674 <xTaskResumeAll+0x138>)
 800a636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a644:	f000 fd92 	bl	800b16c <vPortExitCritical>

	return xAlreadyYielded;
 800a648:	68bb      	ldr	r3, [r7, #8]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	200014e0 	.word	0x200014e0
 800a658:	200014b8 	.word	0x200014b8
 800a65c:	20001478 	.word	0x20001478
 800a660:	200014c0 	.word	0x200014c0
 800a664:	200013bc 	.word	0x200013bc
 800a668:	200013b8 	.word	0x200013b8
 800a66c:	200014cc 	.word	0x200014cc
 800a670:	200014c8 	.word	0x200014c8
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a67e:	2300      	movs	r3, #0
 800a680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a682:	4b4f      	ldr	r3, [pc, #316]	@ (800a7c0 <xTaskIncrementTick+0x148>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	f040 808f 	bne.w	800a7aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a68c:	4b4d      	ldr	r3, [pc, #308]	@ (800a7c4 <xTaskIncrementTick+0x14c>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3301      	adds	r3, #1
 800a692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a694:	4a4b      	ldr	r2, [pc, #300]	@ (800a7c4 <xTaskIncrementTick+0x14c>)
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d121      	bne.n	800a6e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a6a0:	4b49      	ldr	r3, [pc, #292]	@ (800a7c8 <xTaskIncrementTick+0x150>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00b      	beq.n	800a6c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	603b      	str	r3, [r7, #0]
}
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	e7fd      	b.n	800a6be <xTaskIncrementTick+0x46>
 800a6c2:	4b41      	ldr	r3, [pc, #260]	@ (800a7c8 <xTaskIncrementTick+0x150>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]
 800a6c8:	4b40      	ldr	r3, [pc, #256]	@ (800a7cc <xTaskIncrementTick+0x154>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a3e      	ldr	r2, [pc, #248]	@ (800a7c8 <xTaskIncrementTick+0x150>)
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	4a3e      	ldr	r2, [pc, #248]	@ (800a7cc <xTaskIncrementTick+0x154>)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	4b3e      	ldr	r3, [pc, #248]	@ (800a7d0 <xTaskIncrementTick+0x158>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	4a3c      	ldr	r2, [pc, #240]	@ (800a7d0 <xTaskIncrementTick+0x158>)
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	f000 fab4 	bl	800ac4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a6e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a7d4 <xTaskIncrementTick+0x15c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d348      	bcc.n	800a780 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6ee:	4b36      	ldr	r3, [pc, #216]	@ (800a7c8 <xTaskIncrementTick+0x150>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d104      	bne.n	800a702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f8:	4b36      	ldr	r3, [pc, #216]	@ (800a7d4 <xTaskIncrementTick+0x15c>)
 800a6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6fe:	601a      	str	r2, [r3, #0]
					break;
 800a700:	e03e      	b.n	800a780 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a702:	4b31      	ldr	r3, [pc, #196]	@ (800a7c8 <xTaskIncrementTick+0x150>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d203      	bcs.n	800a722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a71a:	4a2e      	ldr	r2, [pc, #184]	@ (800a7d4 <xTaskIncrementTick+0x15c>)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a720:	e02e      	b.n	800a780 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	3304      	adds	r3, #4
 800a726:	4618      	mov	r0, r3
 800a728:	f7fe ff2a 	bl	8009580 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a730:	2b00      	cmp	r3, #0
 800a732:	d004      	beq.n	800a73e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	3318      	adds	r3, #24
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe ff21 	bl	8009580 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a742:	2201      	movs	r2, #1
 800a744:	409a      	lsls	r2, r3
 800a746:	4b24      	ldr	r3, [pc, #144]	@ (800a7d8 <xTaskIncrementTick+0x160>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	4a22      	ldr	r2, [pc, #136]	@ (800a7d8 <xTaskIncrementTick+0x160>)
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4a1f      	ldr	r2, [pc, #124]	@ (800a7dc <xTaskIncrementTick+0x164>)
 800a75e:	441a      	add	r2, r3
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	3304      	adds	r3, #4
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f7fe fead 	bl	80094c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a770:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e0 <xTaskIncrementTick+0x168>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	429a      	cmp	r2, r3
 800a778:	d3b9      	bcc.n	800a6ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a77a:	2301      	movs	r3, #1
 800a77c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a77e:	e7b6      	b.n	800a6ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a780:	4b17      	ldr	r3, [pc, #92]	@ (800a7e0 <xTaskIncrementTick+0x168>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a786:	4915      	ldr	r1, [pc, #84]	@ (800a7dc <xTaskIncrementTick+0x164>)
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	440b      	add	r3, r1
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d901      	bls.n	800a79c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a798:	2301      	movs	r3, #1
 800a79a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a79c:	4b11      	ldr	r3, [pc, #68]	@ (800a7e4 <xTaskIncrementTick+0x16c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d007      	beq.n	800a7b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e004      	b.n	800a7b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a7aa:	4b0f      	ldr	r3, [pc, #60]	@ (800a7e8 <xTaskIncrementTick+0x170>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a7e8 <xTaskIncrementTick+0x170>)
 800a7b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a7b4:	697b      	ldr	r3, [r7, #20]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	200014e0 	.word	0x200014e0
 800a7c4:	200014bc 	.word	0x200014bc
 800a7c8:	20001470 	.word	0x20001470
 800a7cc:	20001474 	.word	0x20001474
 800a7d0:	200014d0 	.word	0x200014d0
 800a7d4:	200014d8 	.word	0x200014d8
 800a7d8:	200014c0 	.word	0x200014c0
 800a7dc:	200013bc 	.word	0x200013bc
 800a7e0:	200013b8 	.word	0x200013b8
 800a7e4:	200014cc 	.word	0x200014cc
 800a7e8:	200014c8 	.word	0x200014c8

0800a7ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a89c <vTaskSwitchContext+0xb0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a7fa:	4b29      	ldr	r3, [pc, #164]	@ (800a8a0 <vTaskSwitchContext+0xb4>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a800:	e045      	b.n	800a88e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800a802:	4b27      	ldr	r3, [pc, #156]	@ (800a8a0 <vTaskSwitchContext+0xb4>)
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a808:	4b26      	ldr	r3, [pc, #152]	@ (800a8a4 <vTaskSwitchContext+0xb8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	fab3 f383 	clz	r3, r3
 800a814:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a816:	7afb      	ldrb	r3, [r7, #11]
 800a818:	f1c3 031f 	rsb	r3, r3, #31
 800a81c:	617b      	str	r3, [r7, #20]
 800a81e:	4922      	ldr	r1, [pc, #136]	@ (800a8a8 <vTaskSwitchContext+0xbc>)
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10b      	bne.n	800a84a <vTaskSwitchContext+0x5e>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	607b      	str	r3, [r7, #4]
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	e7fd      	b.n	800a846 <vTaskSwitchContext+0x5a>
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4a14      	ldr	r2, [pc, #80]	@ (800a8a8 <vTaskSwitchContext+0xbc>)
 800a856:	4413      	add	r3, r2
 800a858:	613b      	str	r3, [r7, #16]
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	685a      	ldr	r2, [r3, #4]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	605a      	str	r2, [r3, #4]
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	3308      	adds	r3, #8
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d104      	bne.n	800a87a <vTaskSwitchContext+0x8e>
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	605a      	str	r2, [r3, #4]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	4a0a      	ldr	r2, [pc, #40]	@ (800a8ac <vTaskSwitchContext+0xc0>)
 800a882:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a884:	4b09      	ldr	r3, [pc, #36]	@ (800a8ac <vTaskSwitchContext+0xc0>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	334c      	adds	r3, #76	@ 0x4c
 800a88a:	4a09      	ldr	r2, [pc, #36]	@ (800a8b0 <vTaskSwitchContext+0xc4>)
 800a88c:	6013      	str	r3, [r2, #0]
}
 800a88e:	bf00      	nop
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	200014e0 	.word	0x200014e0
 800a8a0:	200014cc 	.word	0x200014cc
 800a8a4:	200014c0 	.word	0x200014c0
 800a8a8:	200013bc 	.word	0x200013bc
 800a8ac:	200013b8 	.word	0x200013b8
 800a8b0:	20000198 	.word	0x20000198

0800a8b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10b      	bne.n	800a8dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	60fb      	str	r3, [r7, #12]
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	e7fd      	b.n	800a8d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8dc:	4b07      	ldr	r3, [pc, #28]	@ (800a8fc <vTaskPlaceOnEventList+0x48>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3318      	adds	r3, #24
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7fe fe12 	bl	800950e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	6838      	ldr	r0, [r7, #0]
 800a8ee:	f000 fa73 	bl	800add8 <prvAddCurrentTaskToDelayedList>
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200013b8 	.word	0x200013b8

0800a900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10b      	bne.n	800a92e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	60fb      	str	r3, [r7, #12]
}
 800a928:	bf00      	nop
 800a92a:	bf00      	nop
 800a92c:	e7fd      	b.n	800a92a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	3318      	adds	r3, #24
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fe24 	bl	8009580 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a938:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b0 <xTaskRemoveFromEventList+0xb0>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d11c      	bne.n	800a97a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	3304      	adds	r3, #4
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe fe1b 	bl	8009580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a94e:	2201      	movs	r2, #1
 800a950:	409a      	lsls	r2, r3
 800a952:	4b18      	ldr	r3, [pc, #96]	@ (800a9b4 <xTaskRemoveFromEventList+0xb4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4313      	orrs	r3, r2
 800a958:	4a16      	ldr	r2, [pc, #88]	@ (800a9b4 <xTaskRemoveFromEventList+0xb4>)
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4a13      	ldr	r2, [pc, #76]	@ (800a9b8 <xTaskRemoveFromEventList+0xb8>)
 800a96a:	441a      	add	r2, r3
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	3304      	adds	r3, #4
 800a970:	4619      	mov	r1, r3
 800a972:	4610      	mov	r0, r2
 800a974:	f7fe fda7 	bl	80094c6 <vListInsertEnd>
 800a978:	e005      	b.n	800a986 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	3318      	adds	r3, #24
 800a97e:	4619      	mov	r1, r3
 800a980:	480e      	ldr	r0, [pc, #56]	@ (800a9bc <xTaskRemoveFromEventList+0xbc>)
 800a982:	f7fe fda0 	bl	80094c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a98a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c0 <xTaskRemoveFromEventList+0xc0>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a990:	429a      	cmp	r2, r3
 800a992:	d905      	bls.n	800a9a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a994:	2301      	movs	r3, #1
 800a996:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a998:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c4 <xTaskRemoveFromEventList+0xc4>)
 800a99a:	2201      	movs	r2, #1
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	e001      	b.n	800a9a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a9a4:	697b      	ldr	r3, [r7, #20]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	200014e0 	.word	0x200014e0
 800a9b4:	200014c0 	.word	0x200014c0
 800a9b8:	200013bc 	.word	0x200013bc
 800a9bc:	20001478 	.word	0x20001478
 800a9c0:	200013b8 	.word	0x200013b8
 800a9c4:	200014cc 	.word	0x200014cc

0800a9c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	@ (800a9ec <vTaskInternalSetTimeOutState+0x24>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9d8:	4b05      	ldr	r3, [pc, #20]	@ (800a9f0 <vTaskInternalSetTimeOutState+0x28>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	605a      	str	r2, [r3, #4]
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	200014d0 	.word	0x200014d0
 800a9f0:	200014bc 	.word	0x200014bc

0800a9f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10b      	bne.n	800aa1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	613b      	str	r3, [r7, #16]
}
 800aa16:	bf00      	nop
 800aa18:	bf00      	nop
 800aa1a:	e7fd      	b.n	800aa18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10b      	bne.n	800aa3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800aa22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	60fb      	str	r3, [r7, #12]
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop
 800aa38:	e7fd      	b.n	800aa36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800aa3a:	f000 fb65 	bl	800b108 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa3e:	4b1d      	ldr	r3, [pc, #116]	@ (800aab4 <xTaskCheckForTimeOut+0xc0>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa56:	d102      	bne.n	800aa5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	61fb      	str	r3, [r7, #28]
 800aa5c:	e023      	b.n	800aaa6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	4b15      	ldr	r3, [pc, #84]	@ (800aab8 <xTaskCheckForTimeOut+0xc4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d007      	beq.n	800aa7a <xTaskCheckForTimeOut+0x86>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	69ba      	ldr	r2, [r7, #24]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d302      	bcc.n	800aa7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa74:	2301      	movs	r3, #1
 800aa76:	61fb      	str	r3, [r7, #28]
 800aa78:	e015      	b.n	800aaa6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d20b      	bcs.n	800aa9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	1ad2      	subs	r2, r2, r3
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff ff99 	bl	800a9c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa96:	2300      	movs	r3, #0
 800aa98:	61fb      	str	r3, [r7, #28]
 800aa9a:	e004      	b.n	800aaa6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aaa6:	f000 fb61 	bl	800b16c <vPortExitCritical>

	return xReturn;
 800aaaa:	69fb      	ldr	r3, [r7, #28]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3720      	adds	r7, #32
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	200014bc 	.word	0x200014bc
 800aab8:	200014d0 	.word	0x200014d0

0800aabc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aac0:	4b03      	ldr	r3, [pc, #12]	@ (800aad0 <vTaskMissedYield+0x14>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	601a      	str	r2, [r3, #0]
}
 800aac6:	bf00      	nop
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	200014cc 	.word	0x200014cc

0800aad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aadc:	f000 f852 	bl	800ab84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aae0:	4b06      	ldr	r3, [pc, #24]	@ (800aafc <prvIdleTask+0x28>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d9f9      	bls.n	800aadc <prvIdleTask+0x8>
			{
				taskYIELD();
 800aae8:	4b05      	ldr	r3, [pc, #20]	@ (800ab00 <prvIdleTask+0x2c>)
 800aaea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aaf8:	e7f0      	b.n	800aadc <prvIdleTask+0x8>
 800aafa:	bf00      	nop
 800aafc:	200013bc 	.word	0x200013bc
 800ab00:	e000ed04 	.word	0xe000ed04

0800ab04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	607b      	str	r3, [r7, #4]
 800ab0e:	e00c      	b.n	800ab2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	4a12      	ldr	r2, [pc, #72]	@ (800ab64 <prvInitialiseTaskLists+0x60>)
 800ab1c:	4413      	add	r3, r2
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fca4 	bl	800946c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3301      	adds	r3, #1
 800ab28:	607b      	str	r3, [r7, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b06      	cmp	r3, #6
 800ab2e:	d9ef      	bls.n	800ab10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ab30:	480d      	ldr	r0, [pc, #52]	@ (800ab68 <prvInitialiseTaskLists+0x64>)
 800ab32:	f7fe fc9b 	bl	800946c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab36:	480d      	ldr	r0, [pc, #52]	@ (800ab6c <prvInitialiseTaskLists+0x68>)
 800ab38:	f7fe fc98 	bl	800946c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab3c:	480c      	ldr	r0, [pc, #48]	@ (800ab70 <prvInitialiseTaskLists+0x6c>)
 800ab3e:	f7fe fc95 	bl	800946c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab42:	480c      	ldr	r0, [pc, #48]	@ (800ab74 <prvInitialiseTaskLists+0x70>)
 800ab44:	f7fe fc92 	bl	800946c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab48:	480b      	ldr	r0, [pc, #44]	@ (800ab78 <prvInitialiseTaskLists+0x74>)
 800ab4a:	f7fe fc8f 	bl	800946c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab7c <prvInitialiseTaskLists+0x78>)
 800ab50:	4a05      	ldr	r2, [pc, #20]	@ (800ab68 <prvInitialiseTaskLists+0x64>)
 800ab52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab54:	4b0a      	ldr	r3, [pc, #40]	@ (800ab80 <prvInitialiseTaskLists+0x7c>)
 800ab56:	4a05      	ldr	r2, [pc, #20]	@ (800ab6c <prvInitialiseTaskLists+0x68>)
 800ab58:	601a      	str	r2, [r3, #0]
}
 800ab5a:	bf00      	nop
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	200013bc 	.word	0x200013bc
 800ab68:	20001448 	.word	0x20001448
 800ab6c:	2000145c 	.word	0x2000145c
 800ab70:	20001478 	.word	0x20001478
 800ab74:	2000148c 	.word	0x2000148c
 800ab78:	200014a4 	.word	0x200014a4
 800ab7c:	20001470 	.word	0x20001470
 800ab80:	20001474 	.word	0x20001474

0800ab84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab8a:	e019      	b.n	800abc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab8c:	f000 fabc 	bl	800b108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab90:	4b10      	ldr	r3, [pc, #64]	@ (800abd4 <prvCheckTasksWaitingTermination+0x50>)
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fe fcef 	bl	8009580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aba2:	4b0d      	ldr	r3, [pc, #52]	@ (800abd8 <prvCheckTasksWaitingTermination+0x54>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	4a0b      	ldr	r2, [pc, #44]	@ (800abd8 <prvCheckTasksWaitingTermination+0x54>)
 800abaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800abac:	4b0b      	ldr	r3, [pc, #44]	@ (800abdc <prvCheckTasksWaitingTermination+0x58>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	4a0a      	ldr	r2, [pc, #40]	@ (800abdc <prvCheckTasksWaitingTermination+0x58>)
 800abb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800abb6:	f000 fad9 	bl	800b16c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f810 	bl	800abe0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abc0:	4b06      	ldr	r3, [pc, #24]	@ (800abdc <prvCheckTasksWaitingTermination+0x58>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e1      	bne.n	800ab8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	2000148c 	.word	0x2000148c
 800abd8:	200014b8 	.word	0x200014b8
 800abdc:	200014a0 	.word	0x200014a0

0800abe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	334c      	adds	r3, #76	@ 0x4c
 800abec:	4618      	mov	r0, r3
 800abee:	f001 fe53 	bl	800c898 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d108      	bne.n	800ac0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fc71 	bl	800b4e8 <vPortFree>
				vPortFree( pxTCB );
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fc6e 	bl	800b4e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac0c:	e019      	b.n	800ac42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d103      	bne.n	800ac20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fc65 	bl	800b4e8 <vPortFree>
	}
 800ac1e:	e010      	b.n	800ac42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d00b      	beq.n	800ac42 <prvDeleteTCB+0x62>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	60fb      	str	r3, [r7, #12]
}
 800ac3c:	bf00      	nop
 800ac3e:	bf00      	nop
 800ac40:	e7fd      	b.n	800ac3e <prvDeleteTCB+0x5e>
	}
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac52:	4b0c      	ldr	r3, [pc, #48]	@ (800ac84 <prvResetNextTaskUnblockTime+0x38>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d104      	bne.n	800ac66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac88 <prvResetNextTaskUnblockTime+0x3c>)
 800ac5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac64:	e008      	b.n	800ac78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac66:	4b07      	ldr	r3, [pc, #28]	@ (800ac84 <prvResetNextTaskUnblockTime+0x38>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4a04      	ldr	r2, [pc, #16]	@ (800ac88 <prvResetNextTaskUnblockTime+0x3c>)
 800ac76:	6013      	str	r3, [r2, #0]
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	20001470 	.word	0x20001470
 800ac88:	200014d8 	.word	0x200014d8

0800ac8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac92:	4b0b      	ldr	r3, [pc, #44]	@ (800acc0 <xTaskGetSchedulerState+0x34>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	e008      	b.n	800acb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca0:	4b08      	ldr	r3, [pc, #32]	@ (800acc4 <xTaskGetSchedulerState+0x38>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aca8:	2302      	movs	r3, #2
 800acaa:	607b      	str	r3, [r7, #4]
 800acac:	e001      	b.n	800acb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800acae:	2300      	movs	r3, #0
 800acb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800acb2:	687b      	ldr	r3, [r7, #4]
	}
 800acb4:	4618      	mov	r0, r3
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	200014c4 	.word	0x200014c4
 800acc4:	200014e0 	.word	0x200014e0

0800acc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800acd4:	2300      	movs	r3, #0
 800acd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d070      	beq.n	800adc0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800acde:	4b3b      	ldr	r3, [pc, #236]	@ (800adcc <xTaskPriorityDisinherit+0x104>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d00b      	beq.n	800ad00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	60fb      	str	r3, [r7, #12]
}
 800acfa:	bf00      	nop
 800acfc:	bf00      	nop
 800acfe:	e7fd      	b.n	800acfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10b      	bne.n	800ad20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ad08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0c:	f383 8811 	msr	BASEPRI, r3
 800ad10:	f3bf 8f6f 	isb	sy
 800ad14:	f3bf 8f4f 	dsb	sy
 800ad18:	60bb      	str	r3, [r7, #8]
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	e7fd      	b.n	800ad1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad24:	1e5a      	subs	r2, r3, #1
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d044      	beq.n	800adc0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d140      	bne.n	800adc0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	3304      	adds	r3, #4
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fc1c 	bl	8009580 <uxListRemove>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d115      	bne.n	800ad7a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad52:	491f      	ldr	r1, [pc, #124]	@ (800add0 <xTaskPriorityDisinherit+0x108>)
 800ad54:	4613      	mov	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	440b      	add	r3, r1
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <xTaskPriorityDisinherit+0xb2>
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad68:	2201      	movs	r2, #1
 800ad6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad6e:	43da      	mvns	r2, r3
 800ad70:	4b18      	ldr	r3, [pc, #96]	@ (800add4 <xTaskPriorityDisinherit+0x10c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4013      	ands	r3, r2
 800ad76:	4a17      	ldr	r2, [pc, #92]	@ (800add4 <xTaskPriorityDisinherit+0x10c>)
 800ad78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad86:	f1c3 0207 	rsb	r2, r3, #7
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad92:	2201      	movs	r2, #1
 800ad94:	409a      	lsls	r2, r3
 800ad96:	4b0f      	ldr	r3, [pc, #60]	@ (800add4 <xTaskPriorityDisinherit+0x10c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	4a0d      	ldr	r2, [pc, #52]	@ (800add4 <xTaskPriorityDisinherit+0x10c>)
 800ad9e:	6013      	str	r3, [r2, #0]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ada4:	4613      	mov	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4a08      	ldr	r2, [pc, #32]	@ (800add0 <xTaskPriorityDisinherit+0x108>)
 800adae:	441a      	add	r2, r3
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	3304      	adds	r3, #4
 800adb4:	4619      	mov	r1, r3
 800adb6:	4610      	mov	r0, r2
 800adb8:	f7fe fb85 	bl	80094c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800adbc:	2301      	movs	r3, #1
 800adbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800adc0:	697b      	ldr	r3, [r7, #20]
	}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	200013b8 	.word	0x200013b8
 800add0:	200013bc 	.word	0x200013bc
 800add4:	200014c0 	.word	0x200014c0

0800add8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ade2:	4b29      	ldr	r3, [pc, #164]	@ (800ae88 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ade8:	4b28      	ldr	r3, [pc, #160]	@ (800ae8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3304      	adds	r3, #4
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe fbc6 	bl	8009580 <uxListRemove>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10b      	bne.n	800ae12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800adfa:	4b24      	ldr	r3, [pc, #144]	@ (800ae8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae00:	2201      	movs	r2, #1
 800ae02:	fa02 f303 	lsl.w	r3, r2, r3
 800ae06:	43da      	mvns	r2, r3
 800ae08:	4b21      	ldr	r3, [pc, #132]	@ (800ae90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	4a20      	ldr	r2, [pc, #128]	@ (800ae90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d10a      	bne.n	800ae30 <prvAddCurrentTaskToDelayedList+0x58>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d007      	beq.n	800ae30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae20:	4b1a      	ldr	r3, [pc, #104]	@ (800ae8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3304      	adds	r3, #4
 800ae26:	4619      	mov	r1, r3
 800ae28:	481a      	ldr	r0, [pc, #104]	@ (800ae94 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae2a:	f7fe fb4c 	bl	80094c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae2e:	e026      	b.n	800ae7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4413      	add	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae38:	4b14      	ldr	r3, [pc, #80]	@ (800ae8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d209      	bcs.n	800ae5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae48:	4b13      	ldr	r3, [pc, #76]	@ (800ae98 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3304      	adds	r3, #4
 800ae52:	4619      	mov	r1, r3
 800ae54:	4610      	mov	r0, r2
 800ae56:	f7fe fb5a 	bl	800950e <vListInsert>
}
 800ae5a:	e010      	b.n	800ae7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae5c:	4b0f      	ldr	r3, [pc, #60]	@ (800ae9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	4b0a      	ldr	r3, [pc, #40]	@ (800ae8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f7fe fb50 	bl	800950e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d202      	bcs.n	800ae7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae78:	4a09      	ldr	r2, [pc, #36]	@ (800aea0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	6013      	str	r3, [r2, #0]
}
 800ae7e:	bf00      	nop
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	200014bc 	.word	0x200014bc
 800ae8c:	200013b8 	.word	0x200013b8
 800ae90:	200014c0 	.word	0x200014c0
 800ae94:	200014a4 	.word	0x200014a4
 800ae98:	20001474 	.word	0x20001474
 800ae9c:	20001470 	.word	0x20001470
 800aea0:	200014d8 	.word	0x200014d8

0800aea4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3b04      	subs	r3, #4
 800aeb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aebc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3b04      	subs	r3, #4
 800aec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f023 0201 	bic.w	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3b04      	subs	r3, #4
 800aed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aed4:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <pxPortInitialiseStack+0x64>)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	3b14      	subs	r3, #20
 800aede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3b04      	subs	r3, #4
 800aeea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f06f 0202 	mvn.w	r2, #2
 800aef2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3b20      	subs	r3, #32
 800aef8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aefa:	68fb      	ldr	r3, [r7, #12]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	0800af0d 	.word	0x0800af0d

0800af0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800af16:	4b13      	ldr	r3, [pc, #76]	@ (800af64 <prvTaskExitError+0x58>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1e:	d00b      	beq.n	800af38 <prvTaskExitError+0x2c>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60fb      	str	r3, [r7, #12]
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	e7fd      	b.n	800af34 <prvTaskExitError+0x28>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	60bb      	str	r3, [r7, #8]
}
 800af4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af4c:	bf00      	nop
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d0fc      	beq.n	800af4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	2000001c 	.word	0x2000001c
	...

0800af70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af70:	4b07      	ldr	r3, [pc, #28]	@ (800af90 <pxCurrentTCBConst2>)
 800af72:	6819      	ldr	r1, [r3, #0]
 800af74:	6808      	ldr	r0, [r1, #0]
 800af76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7a:	f380 8809 	msr	PSP, r0
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8811 	msr	BASEPRI, r0
 800af8a:	4770      	bx	lr
 800af8c:	f3af 8000 	nop.w

0800af90 <pxCurrentTCBConst2>:
 800af90:	200013b8 	.word	0x200013b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af94:	bf00      	nop
 800af96:	bf00      	nop

0800af98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af98:	4808      	ldr	r0, [pc, #32]	@ (800afbc <prvPortStartFirstTask+0x24>)
 800af9a:	6800      	ldr	r0, [r0, #0]
 800af9c:	6800      	ldr	r0, [r0, #0]
 800af9e:	f380 8808 	msr	MSP, r0
 800afa2:	f04f 0000 	mov.w	r0, #0
 800afa6:	f380 8814 	msr	CONTROL, r0
 800afaa:	b662      	cpsie	i
 800afac:	b661      	cpsie	f
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	df00      	svc	0
 800afb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800afba:	bf00      	nop
 800afbc:	e000ed08 	.word	0xe000ed08

0800afc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afc6:	4b47      	ldr	r3, [pc, #284]	@ (800b0e4 <xPortStartScheduler+0x124>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a47      	ldr	r2, [pc, #284]	@ (800b0e8 <xPortStartScheduler+0x128>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d10b      	bne.n	800afe8 <xPortStartScheduler+0x28>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	613b      	str	r3, [r7, #16]
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afe8:	4b3e      	ldr	r3, [pc, #248]	@ (800b0e4 <xPortStartScheduler+0x124>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a3f      	ldr	r2, [pc, #252]	@ (800b0ec <xPortStartScheduler+0x12c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d10b      	bne.n	800b00a <xPortStartScheduler+0x4a>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	60fb      	str	r3, [r7, #12]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b00a:	4b39      	ldr	r3, [pc, #228]	@ (800b0f0 <xPortStartScheduler+0x130>)
 800b00c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	22ff      	movs	r2, #255	@ 0xff
 800b01a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b2db      	uxtb	r3, r3
 800b022:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	4b31      	ldr	r3, [pc, #196]	@ (800b0f4 <xPortStartScheduler+0x134>)
 800b030:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b032:	4b31      	ldr	r3, [pc, #196]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b034:	2207      	movs	r2, #7
 800b036:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b038:	e009      	b.n	800b04e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b03a:	4b2f      	ldr	r3, [pc, #188]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3b01      	subs	r3, #1
 800b040:	4a2d      	ldr	r2, [pc, #180]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b042:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	b2db      	uxtb	r3, r3
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b04e:	78fb      	ldrb	r3, [r7, #3]
 800b050:	b2db      	uxtb	r3, r3
 800b052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b056:	2b80      	cmp	r3, #128	@ 0x80
 800b058:	d0ef      	beq.n	800b03a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b05a:	4b27      	ldr	r3, [pc, #156]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f1c3 0307 	rsb	r3, r3, #7
 800b062:	2b04      	cmp	r3, #4
 800b064:	d00b      	beq.n	800b07e <xPortStartScheduler+0xbe>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60bb      	str	r3, [r7, #8]
}
 800b078:	bf00      	nop
 800b07a:	bf00      	nop
 800b07c:	e7fd      	b.n	800b07a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b07e:	4b1e      	ldr	r3, [pc, #120]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	021b      	lsls	r3, r3, #8
 800b084:	4a1c      	ldr	r2, [pc, #112]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b086:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b088:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b090:	4a19      	ldr	r2, [pc, #100]	@ (800b0f8 <xPortStartScheduler+0x138>)
 800b092:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	b2da      	uxtb	r2, r3
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b09c:	4b17      	ldr	r3, [pc, #92]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a16      	ldr	r2, [pc, #88]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b0a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b0a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b0a8:	4b14      	ldr	r3, [pc, #80]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a13      	ldr	r2, [pc, #76]	@ (800b0fc <xPortStartScheduler+0x13c>)
 800b0ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b0b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b0b4:	f000 f8da 	bl	800b26c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b0b8:	4b11      	ldr	r3, [pc, #68]	@ (800b100 <xPortStartScheduler+0x140>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b0be:	f000 f8f9 	bl	800b2b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b0c2:	4b10      	ldr	r3, [pc, #64]	@ (800b104 <xPortStartScheduler+0x144>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b104 <xPortStartScheduler+0x144>)
 800b0c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b0cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0ce:	f7ff ff63 	bl	800af98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0d2:	f7ff fb8b 	bl	800a7ec <vTaskSwitchContext>
	prvTaskExitError();
 800b0d6:	f7ff ff19 	bl	800af0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	e000ed00 	.word	0xe000ed00
 800b0e8:	410fc271 	.word	0x410fc271
 800b0ec:	410fc270 	.word	0x410fc270
 800b0f0:	e000e400 	.word	0xe000e400
 800b0f4:	200014e4 	.word	0x200014e4
 800b0f8:	200014e8 	.word	0x200014e8
 800b0fc:	e000ed20 	.word	0xe000ed20
 800b100:	2000001c 	.word	0x2000001c
 800b104:	e000ef34 	.word	0xe000ef34

0800b108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	607b      	str	r3, [r7, #4]
}
 800b120:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b122:	4b10      	ldr	r3, [pc, #64]	@ (800b164 <vPortEnterCritical+0x5c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3301      	adds	r3, #1
 800b128:	4a0e      	ldr	r2, [pc, #56]	@ (800b164 <vPortEnterCritical+0x5c>)
 800b12a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b12c:	4b0d      	ldr	r3, [pc, #52]	@ (800b164 <vPortEnterCritical+0x5c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d110      	bne.n	800b156 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b134:	4b0c      	ldr	r3, [pc, #48]	@ (800b168 <vPortEnterCritical+0x60>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00b      	beq.n	800b156 <vPortEnterCritical+0x4e>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	603b      	str	r3, [r7, #0]
}
 800b150:	bf00      	nop
 800b152:	bf00      	nop
 800b154:	e7fd      	b.n	800b152 <vPortEnterCritical+0x4a>
	}
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	2000001c 	.word	0x2000001c
 800b168:	e000ed04 	.word	0xe000ed04

0800b16c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b172:	4b12      	ldr	r3, [pc, #72]	@ (800b1bc <vPortExitCritical+0x50>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10b      	bne.n	800b192 <vPortExitCritical+0x26>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	607b      	str	r3, [r7, #4]
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	e7fd      	b.n	800b18e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b192:	4b0a      	ldr	r3, [pc, #40]	@ (800b1bc <vPortExitCritical+0x50>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3b01      	subs	r3, #1
 800b198:	4a08      	ldr	r2, [pc, #32]	@ (800b1bc <vPortExitCritical+0x50>)
 800b19a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b19c:	4b07      	ldr	r3, [pc, #28]	@ (800b1bc <vPortExitCritical+0x50>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d105      	bne.n	800b1b0 <vPortExitCritical+0x44>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	f383 8811 	msr	BASEPRI, r3
}
 800b1ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	2000001c 	.word	0x2000001c

0800b1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1c0:	f3ef 8009 	mrs	r0, PSP
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	4b15      	ldr	r3, [pc, #84]	@ (800b220 <pxCurrentTCBConst>)
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	f01e 0f10 	tst.w	lr, #16
 800b1d0:	bf08      	it	eq
 800b1d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1da:	6010      	str	r0, [r2, #0]
 800b1dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b1e4:	f380 8811 	msr	BASEPRI, r0
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f7ff fafc 	bl	800a7ec <vTaskSwitchContext>
 800b1f4:	f04f 0000 	mov.w	r0, #0
 800b1f8:	f380 8811 	msr	BASEPRI, r0
 800b1fc:	bc09      	pop	{r0, r3}
 800b1fe:	6819      	ldr	r1, [r3, #0]
 800b200:	6808      	ldr	r0, [r1, #0]
 800b202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b206:	f01e 0f10 	tst.w	lr, #16
 800b20a:	bf08      	it	eq
 800b20c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b210:	f380 8809 	msr	PSP, r0
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	f3af 8000 	nop.w

0800b220 <pxCurrentTCBConst>:
 800b220:	200013b8 	.word	0x200013b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop

0800b228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	607b      	str	r3, [r7, #4]
}
 800b240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b242:	f7ff fa19 	bl	800a678 <xTaskIncrementTick>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b24c:	4b06      	ldr	r3, [pc, #24]	@ (800b268 <SysTick_Handler+0x40>)
 800b24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	2300      	movs	r3, #0
 800b256:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	f383 8811 	msr	BASEPRI, r3
}
 800b25e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b260:	bf00      	nop
 800b262:	3708      	adds	r7, #8
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	e000ed04 	.word	0xe000ed04

0800b26c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b26c:	b480      	push	{r7}
 800b26e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b270:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a0 <vPortSetupTimerInterrupt+0x34>)
 800b272:	2200      	movs	r2, #0
 800b274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b276:	4b0b      	ldr	r3, [pc, #44]	@ (800b2a4 <vPortSetupTimerInterrupt+0x38>)
 800b278:	2200      	movs	r2, #0
 800b27a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b27c:	4b0a      	ldr	r3, [pc, #40]	@ (800b2a8 <vPortSetupTimerInterrupt+0x3c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a0a      	ldr	r2, [pc, #40]	@ (800b2ac <vPortSetupTimerInterrupt+0x40>)
 800b282:	fba2 2303 	umull	r2, r3, r2, r3
 800b286:	099b      	lsrs	r3, r3, #6
 800b288:	4a09      	ldr	r2, [pc, #36]	@ (800b2b0 <vPortSetupTimerInterrupt+0x44>)
 800b28a:	3b01      	subs	r3, #1
 800b28c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b28e:	4b04      	ldr	r3, [pc, #16]	@ (800b2a0 <vPortSetupTimerInterrupt+0x34>)
 800b290:	2207      	movs	r2, #7
 800b292:	601a      	str	r2, [r3, #0]
}
 800b294:	bf00      	nop
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	e000e010 	.word	0xe000e010
 800b2a4:	e000e018 	.word	0xe000e018
 800b2a8:	20000010 	.word	0x20000010
 800b2ac:	10624dd3 	.word	0x10624dd3
 800b2b0:	e000e014 	.word	0xe000e014

0800b2b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b2b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b2c4 <vPortEnableVFP+0x10>
 800b2b8:	6801      	ldr	r1, [r0, #0]
 800b2ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b2be:	6001      	str	r1, [r0, #0]
 800b2c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2c2:	bf00      	nop
 800b2c4:	e000ed88 	.word	0xe000ed88

0800b2c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ce:	f3ef 8305 	mrs	r3, IPSR
 800b2d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b0f      	cmp	r3, #15
 800b2d8:	d915      	bls.n	800b306 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2da:	4a18      	ldr	r2, [pc, #96]	@ (800b33c <vPortValidateInterruptPriority+0x74>)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4413      	add	r3, r2
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2e4:	4b16      	ldr	r3, [pc, #88]	@ (800b340 <vPortValidateInterruptPriority+0x78>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	7afa      	ldrb	r2, [r7, #11]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d20b      	bcs.n	800b306 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	607b      	str	r3, [r7, #4]
}
 800b300:	bf00      	nop
 800b302:	bf00      	nop
 800b304:	e7fd      	b.n	800b302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b306:	4b0f      	ldr	r3, [pc, #60]	@ (800b344 <vPortValidateInterruptPriority+0x7c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b30e:	4b0e      	ldr	r3, [pc, #56]	@ (800b348 <vPortValidateInterruptPriority+0x80>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d90b      	bls.n	800b32e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	603b      	str	r3, [r7, #0]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <vPortValidateInterruptPriority+0x62>
	}
 800b32e:	bf00      	nop
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	e000e3f0 	.word	0xe000e3f0
 800b340:	200014e4 	.word	0x200014e4
 800b344:	e000ed0c 	.word	0xe000ed0c
 800b348:	200014e8 	.word	0x200014e8

0800b34c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08a      	sub	sp, #40	@ 0x28
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b354:	2300      	movs	r3, #0
 800b356:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b358:	f7ff f8e2 	bl	800a520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b35c:	4b5c      	ldr	r3, [pc, #368]	@ (800b4d0 <pvPortMalloc+0x184>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d101      	bne.n	800b368 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b364:	f000 f924 	bl	800b5b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b368:	4b5a      	ldr	r3, [pc, #360]	@ (800b4d4 <pvPortMalloc+0x188>)
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4013      	ands	r3, r2
 800b370:	2b00      	cmp	r3, #0
 800b372:	f040 8095 	bne.w	800b4a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01e      	beq.n	800b3ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b37c:	2208      	movs	r2, #8
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4413      	add	r3, r2
 800b382:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f003 0307 	and.w	r3, r3, #7
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d015      	beq.n	800b3ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f023 0307 	bic.w	r3, r3, #7
 800b394:	3308      	adds	r3, #8
 800b396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f003 0307 	and.w	r3, r3, #7
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00b      	beq.n	800b3ba <pvPortMalloc+0x6e>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	617b      	str	r3, [r7, #20]
}
 800b3b4:	bf00      	nop
 800b3b6:	bf00      	nop
 800b3b8:	e7fd      	b.n	800b3b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d06f      	beq.n	800b4a0 <pvPortMalloc+0x154>
 800b3c0:	4b45      	ldr	r3, [pc, #276]	@ (800b4d8 <pvPortMalloc+0x18c>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d86a      	bhi.n	800b4a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3ca:	4b44      	ldr	r3, [pc, #272]	@ (800b4dc <pvPortMalloc+0x190>)
 800b3cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3ce:	4b43      	ldr	r3, [pc, #268]	@ (800b4dc <pvPortMalloc+0x190>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3d4:	e004      	b.n	800b3e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d903      	bls.n	800b3f2 <pvPortMalloc+0xa6>
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1f1      	bne.n	800b3d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3f2:	4b37      	ldr	r3, [pc, #220]	@ (800b4d0 <pvPortMalloc+0x184>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d051      	beq.n	800b4a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2208      	movs	r2, #8
 800b402:	4413      	add	r3, r2
 800b404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	6a3b      	ldr	r3, [r7, #32]
 800b40c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	1ad2      	subs	r2, r2, r3
 800b416:	2308      	movs	r3, #8
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d920      	bls.n	800b460 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b41e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4413      	add	r3, r2
 800b424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	f003 0307 	and.w	r3, r3, #7
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00b      	beq.n	800b448 <pvPortMalloc+0xfc>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	613b      	str	r3, [r7, #16]
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	1ad2      	subs	r2, r2, r3
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b45a:	69b8      	ldr	r0, [r7, #24]
 800b45c:	f000 f90a 	bl	800b674 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b460:	4b1d      	ldr	r3, [pc, #116]	@ (800b4d8 <pvPortMalloc+0x18c>)
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4d8 <pvPortMalloc+0x18c>)
 800b46c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b46e:	4b1a      	ldr	r3, [pc, #104]	@ (800b4d8 <pvPortMalloc+0x18c>)
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	4b1b      	ldr	r3, [pc, #108]	@ (800b4e0 <pvPortMalloc+0x194>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d203      	bcs.n	800b482 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b47a:	4b17      	ldr	r3, [pc, #92]	@ (800b4d8 <pvPortMalloc+0x18c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a18      	ldr	r2, [pc, #96]	@ (800b4e0 <pvPortMalloc+0x194>)
 800b480:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	685a      	ldr	r2, [r3, #4]
 800b486:	4b13      	ldr	r3, [pc, #76]	@ (800b4d4 <pvPortMalloc+0x188>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	431a      	orrs	r2, r3
 800b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b496:	4b13      	ldr	r3, [pc, #76]	@ (800b4e4 <pvPortMalloc+0x198>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3301      	adds	r3, #1
 800b49c:	4a11      	ldr	r2, [pc, #68]	@ (800b4e4 <pvPortMalloc+0x198>)
 800b49e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b4a0:	f7ff f84c 	bl	800a53c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00b      	beq.n	800b4c6 <pvPortMalloc+0x17a>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	60fb      	str	r3, [r7, #12]
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	e7fd      	b.n	800b4c2 <pvPortMalloc+0x176>
	return pvReturn;
 800b4c6:	69fb      	ldr	r3, [r7, #28]
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3728      	adds	r7, #40	@ 0x28
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	200050f4 	.word	0x200050f4
 800b4d4:	20005108 	.word	0x20005108
 800b4d8:	200050f8 	.word	0x200050f8
 800b4dc:	200050ec 	.word	0x200050ec
 800b4e0:	200050fc 	.word	0x200050fc
 800b4e4:	20005100 	.word	0x20005100

0800b4e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d04f      	beq.n	800b59a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4fa:	2308      	movs	r3, #8
 800b4fc:	425b      	negs	r3, r3
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	4413      	add	r3, r2
 800b502:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	685a      	ldr	r2, [r3, #4]
 800b50c:	4b25      	ldr	r3, [pc, #148]	@ (800b5a4 <vPortFree+0xbc>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4013      	ands	r3, r2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10b      	bne.n	800b52e <vPortFree+0x46>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	60fb      	str	r3, [r7, #12]
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	e7fd      	b.n	800b52a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00b      	beq.n	800b54e <vPortFree+0x66>
	__asm volatile
 800b536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	60bb      	str	r3, [r7, #8]
}
 800b548:	bf00      	nop
 800b54a:	bf00      	nop
 800b54c:	e7fd      	b.n	800b54a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	4b14      	ldr	r3, [pc, #80]	@ (800b5a4 <vPortFree+0xbc>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4013      	ands	r3, r2
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d01e      	beq.n	800b59a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d11a      	bne.n	800b59a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	4b0e      	ldr	r3, [pc, #56]	@ (800b5a4 <vPortFree+0xbc>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	43db      	mvns	r3, r3
 800b56e:	401a      	ands	r2, r3
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b574:	f7fe ffd4 	bl	800a520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	685a      	ldr	r2, [r3, #4]
 800b57c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <vPortFree+0xc0>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4413      	add	r3, r2
 800b582:	4a09      	ldr	r2, [pc, #36]	@ (800b5a8 <vPortFree+0xc0>)
 800b584:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b586:	6938      	ldr	r0, [r7, #16]
 800b588:	f000 f874 	bl	800b674 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b58c:	4b07      	ldr	r3, [pc, #28]	@ (800b5ac <vPortFree+0xc4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3301      	adds	r3, #1
 800b592:	4a06      	ldr	r2, [pc, #24]	@ (800b5ac <vPortFree+0xc4>)
 800b594:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b596:	f7fe ffd1 	bl	800a53c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b59a:	bf00      	nop
 800b59c:	3718      	adds	r7, #24
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20005108 	.word	0x20005108
 800b5a8:	200050f8 	.word	0x200050f8
 800b5ac:	20005104 	.word	0x20005104

0800b5b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b5b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b5ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b5bc:	4b27      	ldr	r3, [pc, #156]	@ (800b65c <prvHeapInit+0xac>)
 800b5be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f003 0307 	and.w	r3, r3, #7
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00c      	beq.n	800b5e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3307      	adds	r3, #7
 800b5ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f023 0307 	bic.w	r3, r3, #7
 800b5d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	4a1f      	ldr	r2, [pc, #124]	@ (800b65c <prvHeapInit+0xac>)
 800b5e0:	4413      	add	r3, r2
 800b5e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b660 <prvHeapInit+0xb0>)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b660 <prvHeapInit+0xb0>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68ba      	ldr	r2, [r7, #8]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5fc:	2208      	movs	r2, #8
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	1a9b      	subs	r3, r3, r2
 800b602:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f023 0307 	bic.w	r3, r3, #7
 800b60a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4a15      	ldr	r2, [pc, #84]	@ (800b664 <prvHeapInit+0xb4>)
 800b610:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b612:	4b14      	ldr	r3, [pc, #80]	@ (800b664 <prvHeapInit+0xb4>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2200      	movs	r2, #0
 800b618:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b61a:	4b12      	ldr	r3, [pc, #72]	@ (800b664 <prvHeapInit+0xb4>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b630:	4b0c      	ldr	r3, [pc, #48]	@ (800b664 <prvHeapInit+0xb4>)
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	4a0a      	ldr	r2, [pc, #40]	@ (800b668 <prvHeapInit+0xb8>)
 800b63e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	4a09      	ldr	r2, [pc, #36]	@ (800b66c <prvHeapInit+0xbc>)
 800b646:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b648:	4b09      	ldr	r3, [pc, #36]	@ (800b670 <prvHeapInit+0xc0>)
 800b64a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b64e:	601a      	str	r2, [r3, #0]
}
 800b650:	bf00      	nop
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	200014ec 	.word	0x200014ec
 800b660:	200050ec 	.word	0x200050ec
 800b664:	200050f4 	.word	0x200050f4
 800b668:	200050fc 	.word	0x200050fc
 800b66c:	200050f8 	.word	0x200050f8
 800b670:	20005108 	.word	0x20005108

0800b674 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b67c:	4b28      	ldr	r3, [pc, #160]	@ (800b720 <prvInsertBlockIntoFreeList+0xac>)
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	e002      	b.n	800b688 <prvInsertBlockIntoFreeList+0x14>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d8f7      	bhi.n	800b682 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	4413      	add	r3, r2
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d108      	bne.n	800b6b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	685a      	ldr	r2, [r3, #4]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	441a      	add	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d118      	bne.n	800b6fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	4b15      	ldr	r3, [pc, #84]	@ (800b724 <prvInsertBlockIntoFreeList+0xb0>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d00d      	beq.n	800b6f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	441a      	add	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	e008      	b.n	800b704 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b724 <prvInsertBlockIntoFreeList+0xb0>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	e003      	b.n	800b704 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d002      	beq.n	800b712 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b712:	bf00      	nop
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	200050ec 	.word	0x200050ec
 800b724:	200050f4 	.word	0x200050f4

0800b728 <malloc>:
 800b728:	4b02      	ldr	r3, [pc, #8]	@ (800b734 <malloc+0xc>)
 800b72a:	4601      	mov	r1, r0
 800b72c:	6818      	ldr	r0, [r3, #0]
 800b72e:	f000 b82d 	b.w	800b78c <_malloc_r>
 800b732:	bf00      	nop
 800b734:	20000198 	.word	0x20000198

0800b738 <free>:
 800b738:	4b02      	ldr	r3, [pc, #8]	@ (800b744 <free+0xc>)
 800b73a:	4601      	mov	r1, r0
 800b73c:	6818      	ldr	r0, [r3, #0]
 800b73e:	f001 b98b 	b.w	800ca58 <_free_r>
 800b742:	bf00      	nop
 800b744:	20000198 	.word	0x20000198

0800b748 <sbrk_aligned>:
 800b748:	b570      	push	{r4, r5, r6, lr}
 800b74a:	4e0f      	ldr	r6, [pc, #60]	@ (800b788 <sbrk_aligned+0x40>)
 800b74c:	460c      	mov	r4, r1
 800b74e:	6831      	ldr	r1, [r6, #0]
 800b750:	4605      	mov	r5, r0
 800b752:	b911      	cbnz	r1, 800b75a <sbrk_aligned+0x12>
 800b754:	f001 f91a 	bl	800c98c <_sbrk_r>
 800b758:	6030      	str	r0, [r6, #0]
 800b75a:	4621      	mov	r1, r4
 800b75c:	4628      	mov	r0, r5
 800b75e:	f001 f915 	bl	800c98c <_sbrk_r>
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	d103      	bne.n	800b76e <sbrk_aligned+0x26>
 800b766:	f04f 34ff 	mov.w	r4, #4294967295
 800b76a:	4620      	mov	r0, r4
 800b76c:	bd70      	pop	{r4, r5, r6, pc}
 800b76e:	1cc4      	adds	r4, r0, #3
 800b770:	f024 0403 	bic.w	r4, r4, #3
 800b774:	42a0      	cmp	r0, r4
 800b776:	d0f8      	beq.n	800b76a <sbrk_aligned+0x22>
 800b778:	1a21      	subs	r1, r4, r0
 800b77a:	4628      	mov	r0, r5
 800b77c:	f001 f906 	bl	800c98c <_sbrk_r>
 800b780:	3001      	adds	r0, #1
 800b782:	d1f2      	bne.n	800b76a <sbrk_aligned+0x22>
 800b784:	e7ef      	b.n	800b766 <sbrk_aligned+0x1e>
 800b786:	bf00      	nop
 800b788:	2000510c 	.word	0x2000510c

0800b78c <_malloc_r>:
 800b78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b790:	1ccd      	adds	r5, r1, #3
 800b792:	f025 0503 	bic.w	r5, r5, #3
 800b796:	3508      	adds	r5, #8
 800b798:	2d0c      	cmp	r5, #12
 800b79a:	bf38      	it	cc
 800b79c:	250c      	movcc	r5, #12
 800b79e:	2d00      	cmp	r5, #0
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	db01      	blt.n	800b7a8 <_malloc_r+0x1c>
 800b7a4:	42a9      	cmp	r1, r5
 800b7a6:	d904      	bls.n	800b7b2 <_malloc_r+0x26>
 800b7a8:	230c      	movs	r3, #12
 800b7aa:	6033      	str	r3, [r6, #0]
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b888 <_malloc_r+0xfc>
 800b7b6:	f000 f869 	bl	800b88c <__malloc_lock>
 800b7ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b7be:	461c      	mov	r4, r3
 800b7c0:	bb44      	cbnz	r4, 800b814 <_malloc_r+0x88>
 800b7c2:	4629      	mov	r1, r5
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f7ff ffbf 	bl	800b748 <sbrk_aligned>
 800b7ca:	1c43      	adds	r3, r0, #1
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	d158      	bne.n	800b882 <_malloc_r+0xf6>
 800b7d0:	f8d8 4000 	ldr.w	r4, [r8]
 800b7d4:	4627      	mov	r7, r4
 800b7d6:	2f00      	cmp	r7, #0
 800b7d8:	d143      	bne.n	800b862 <_malloc_r+0xd6>
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	d04b      	beq.n	800b876 <_malloc_r+0xea>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	4639      	mov	r1, r7
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	eb04 0903 	add.w	r9, r4, r3
 800b7e8:	f001 f8d0 	bl	800c98c <_sbrk_r>
 800b7ec:	4581      	cmp	r9, r0
 800b7ee:	d142      	bne.n	800b876 <_malloc_r+0xea>
 800b7f0:	6821      	ldr	r1, [r4, #0]
 800b7f2:	1a6d      	subs	r5, r5, r1
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f7ff ffa6 	bl	800b748 <sbrk_aligned>
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d03a      	beq.n	800b876 <_malloc_r+0xea>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	442b      	add	r3, r5
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	f8d8 3000 	ldr.w	r3, [r8]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	bb62      	cbnz	r2, 800b868 <_malloc_r+0xdc>
 800b80e:	f8c8 7000 	str.w	r7, [r8]
 800b812:	e00f      	b.n	800b834 <_malloc_r+0xa8>
 800b814:	6822      	ldr	r2, [r4, #0]
 800b816:	1b52      	subs	r2, r2, r5
 800b818:	d420      	bmi.n	800b85c <_malloc_r+0xd0>
 800b81a:	2a0b      	cmp	r2, #11
 800b81c:	d917      	bls.n	800b84e <_malloc_r+0xc2>
 800b81e:	1961      	adds	r1, r4, r5
 800b820:	42a3      	cmp	r3, r4
 800b822:	6025      	str	r5, [r4, #0]
 800b824:	bf18      	it	ne
 800b826:	6059      	strne	r1, [r3, #4]
 800b828:	6863      	ldr	r3, [r4, #4]
 800b82a:	bf08      	it	eq
 800b82c:	f8c8 1000 	streq.w	r1, [r8]
 800b830:	5162      	str	r2, [r4, r5]
 800b832:	604b      	str	r3, [r1, #4]
 800b834:	4630      	mov	r0, r6
 800b836:	f000 f82f 	bl	800b898 <__malloc_unlock>
 800b83a:	f104 000b 	add.w	r0, r4, #11
 800b83e:	1d23      	adds	r3, r4, #4
 800b840:	f020 0007 	bic.w	r0, r0, #7
 800b844:	1ac2      	subs	r2, r0, r3
 800b846:	bf1c      	itt	ne
 800b848:	1a1b      	subne	r3, r3, r0
 800b84a:	50a3      	strne	r3, [r4, r2]
 800b84c:	e7af      	b.n	800b7ae <_malloc_r+0x22>
 800b84e:	6862      	ldr	r2, [r4, #4]
 800b850:	42a3      	cmp	r3, r4
 800b852:	bf0c      	ite	eq
 800b854:	f8c8 2000 	streq.w	r2, [r8]
 800b858:	605a      	strne	r2, [r3, #4]
 800b85a:	e7eb      	b.n	800b834 <_malloc_r+0xa8>
 800b85c:	4623      	mov	r3, r4
 800b85e:	6864      	ldr	r4, [r4, #4]
 800b860:	e7ae      	b.n	800b7c0 <_malloc_r+0x34>
 800b862:	463c      	mov	r4, r7
 800b864:	687f      	ldr	r7, [r7, #4]
 800b866:	e7b6      	b.n	800b7d6 <_malloc_r+0x4a>
 800b868:	461a      	mov	r2, r3
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	d1fb      	bne.n	800b868 <_malloc_r+0xdc>
 800b870:	2300      	movs	r3, #0
 800b872:	6053      	str	r3, [r2, #4]
 800b874:	e7de      	b.n	800b834 <_malloc_r+0xa8>
 800b876:	230c      	movs	r3, #12
 800b878:	6033      	str	r3, [r6, #0]
 800b87a:	4630      	mov	r0, r6
 800b87c:	f000 f80c 	bl	800b898 <__malloc_unlock>
 800b880:	e794      	b.n	800b7ac <_malloc_r+0x20>
 800b882:	6005      	str	r5, [r0, #0]
 800b884:	e7d6      	b.n	800b834 <_malloc_r+0xa8>
 800b886:	bf00      	nop
 800b888:	20005110 	.word	0x20005110

0800b88c <__malloc_lock>:
 800b88c:	4801      	ldr	r0, [pc, #4]	@ (800b894 <__malloc_lock+0x8>)
 800b88e:	f001 b8ca 	b.w	800ca26 <__retarget_lock_acquire_recursive>
 800b892:	bf00      	nop
 800b894:	20005254 	.word	0x20005254

0800b898 <__malloc_unlock>:
 800b898:	4801      	ldr	r0, [pc, #4]	@ (800b8a0 <__malloc_unlock+0x8>)
 800b89a:	f001 b8c5 	b.w	800ca28 <__retarget_lock_release_recursive>
 800b89e:	bf00      	nop
 800b8a0:	20005254 	.word	0x20005254

0800b8a4 <realloc>:
 800b8a4:	4b02      	ldr	r3, [pc, #8]	@ (800b8b0 <realloc+0xc>)
 800b8a6:	460a      	mov	r2, r1
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	f000 b802 	b.w	800b8b4 <_realloc_r>
 800b8b0:	20000198 	.word	0x20000198

0800b8b4 <_realloc_r>:
 800b8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	4615      	mov	r5, r2
 800b8bc:	460c      	mov	r4, r1
 800b8be:	b921      	cbnz	r1, 800b8ca <_realloc_r+0x16>
 800b8c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	f7ff bf61 	b.w	800b78c <_malloc_r>
 800b8ca:	b92a      	cbnz	r2, 800b8d8 <_realloc_r+0x24>
 800b8cc:	f001 f8c4 	bl	800ca58 <_free_r>
 800b8d0:	2400      	movs	r4, #0
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d8:	f002 f906 	bl	800dae8 <_malloc_usable_size_r>
 800b8dc:	4285      	cmp	r5, r0
 800b8de:	4606      	mov	r6, r0
 800b8e0:	d802      	bhi.n	800b8e8 <_realloc_r+0x34>
 800b8e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8e6:	d8f4      	bhi.n	800b8d2 <_realloc_r+0x1e>
 800b8e8:	4629      	mov	r1, r5
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	f7ff ff4e 	bl	800b78c <_malloc_r>
 800b8f0:	4607      	mov	r7, r0
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d0ec      	beq.n	800b8d0 <_realloc_r+0x1c>
 800b8f6:	42b5      	cmp	r5, r6
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	4621      	mov	r1, r4
 800b8fc:	bf28      	it	cs
 800b8fe:	4632      	movcs	r2, r6
 800b900:	f001 f893 	bl	800ca2a <memcpy>
 800b904:	4621      	mov	r1, r4
 800b906:	4640      	mov	r0, r8
 800b908:	f001 f8a6 	bl	800ca58 <_free_r>
 800b90c:	463c      	mov	r4, r7
 800b90e:	e7e0      	b.n	800b8d2 <_realloc_r+0x1e>

0800b910 <sulp>:
 800b910:	b570      	push	{r4, r5, r6, lr}
 800b912:	4604      	mov	r4, r0
 800b914:	460d      	mov	r5, r1
 800b916:	ec45 4b10 	vmov	d0, r4, r5
 800b91a:	4616      	mov	r6, r2
 800b91c:	f001 ffa6 	bl	800d86c <__ulp>
 800b920:	ec51 0b10 	vmov	r0, r1, d0
 800b924:	b17e      	cbz	r6, 800b946 <sulp+0x36>
 800b926:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b92a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b92e:	2b00      	cmp	r3, #0
 800b930:	dd09      	ble.n	800b946 <sulp+0x36>
 800b932:	051b      	lsls	r3, r3, #20
 800b934:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b938:	2400      	movs	r4, #0
 800b93a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b93e:	4622      	mov	r2, r4
 800b940:	462b      	mov	r3, r5
 800b942:	f7f4 fe69 	bl	8000618 <__aeabi_dmul>
 800b946:	ec41 0b10 	vmov	d0, r0, r1
 800b94a:	bd70      	pop	{r4, r5, r6, pc}
 800b94c:	0000      	movs	r0, r0
	...

0800b950 <_strtod_l>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	b09f      	sub	sp, #124	@ 0x7c
 800b956:	460c      	mov	r4, r1
 800b958:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b95a:	2200      	movs	r2, #0
 800b95c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b95e:	9005      	str	r0, [sp, #20]
 800b960:	f04f 0a00 	mov.w	sl, #0
 800b964:	f04f 0b00 	mov.w	fp, #0
 800b968:	460a      	mov	r2, r1
 800b96a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b96c:	7811      	ldrb	r1, [r2, #0]
 800b96e:	292b      	cmp	r1, #43	@ 0x2b
 800b970:	d04a      	beq.n	800ba08 <_strtod_l+0xb8>
 800b972:	d838      	bhi.n	800b9e6 <_strtod_l+0x96>
 800b974:	290d      	cmp	r1, #13
 800b976:	d832      	bhi.n	800b9de <_strtod_l+0x8e>
 800b978:	2908      	cmp	r1, #8
 800b97a:	d832      	bhi.n	800b9e2 <_strtod_l+0x92>
 800b97c:	2900      	cmp	r1, #0
 800b97e:	d03b      	beq.n	800b9f8 <_strtod_l+0xa8>
 800b980:	2200      	movs	r2, #0
 800b982:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b984:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b986:	782a      	ldrb	r2, [r5, #0]
 800b988:	2a30      	cmp	r2, #48	@ 0x30
 800b98a:	f040 80b3 	bne.w	800baf4 <_strtod_l+0x1a4>
 800b98e:	786a      	ldrb	r2, [r5, #1]
 800b990:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b994:	2a58      	cmp	r2, #88	@ 0x58
 800b996:	d16e      	bne.n	800ba76 <_strtod_l+0x126>
 800b998:	9302      	str	r3, [sp, #8]
 800b99a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	4a8e      	ldr	r2, [pc, #568]	@ (800bbdc <_strtod_l+0x28c>)
 800b9a4:	9805      	ldr	r0, [sp, #20]
 800b9a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b9a8:	a919      	add	r1, sp, #100	@ 0x64
 800b9aa:	f001 f907 	bl	800cbbc <__gethex>
 800b9ae:	f010 060f 	ands.w	r6, r0, #15
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	d005      	beq.n	800b9c2 <_strtod_l+0x72>
 800b9b6:	2e06      	cmp	r6, #6
 800b9b8:	d128      	bne.n	800ba0c <_strtod_l+0xbc>
 800b9ba:	3501      	adds	r5, #1
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9519      	str	r5, [sp, #100]	@ 0x64
 800b9c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f040 858e 	bne.w	800c4e6 <_strtod_l+0xb96>
 800b9ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9cc:	b1cb      	cbz	r3, 800ba02 <_strtod_l+0xb2>
 800b9ce:	4652      	mov	r2, sl
 800b9d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b9d4:	ec43 2b10 	vmov	d0, r2, r3
 800b9d8:	b01f      	add	sp, #124	@ 0x7c
 800b9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9de:	2920      	cmp	r1, #32
 800b9e0:	d1ce      	bne.n	800b980 <_strtod_l+0x30>
 800b9e2:	3201      	adds	r2, #1
 800b9e4:	e7c1      	b.n	800b96a <_strtod_l+0x1a>
 800b9e6:	292d      	cmp	r1, #45	@ 0x2d
 800b9e8:	d1ca      	bne.n	800b980 <_strtod_l+0x30>
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b9ee:	1c51      	adds	r1, r2, #1
 800b9f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9f2:	7852      	ldrb	r2, [r2, #1]
 800b9f4:	2a00      	cmp	r2, #0
 800b9f6:	d1c5      	bne.n	800b984 <_strtod_l+0x34>
 800b9f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f040 8570 	bne.w	800c4e2 <_strtod_l+0xb92>
 800ba02:	4652      	mov	r2, sl
 800ba04:	465b      	mov	r3, fp
 800ba06:	e7e5      	b.n	800b9d4 <_strtod_l+0x84>
 800ba08:	2100      	movs	r1, #0
 800ba0a:	e7ef      	b.n	800b9ec <_strtod_l+0x9c>
 800ba0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba0e:	b13a      	cbz	r2, 800ba20 <_strtod_l+0xd0>
 800ba10:	2135      	movs	r1, #53	@ 0x35
 800ba12:	a81c      	add	r0, sp, #112	@ 0x70
 800ba14:	f002 f824 	bl	800da60 <__copybits>
 800ba18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba1a:	9805      	ldr	r0, [sp, #20]
 800ba1c:	f001 fbf2 	bl	800d204 <_Bfree>
 800ba20:	3e01      	subs	r6, #1
 800ba22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ba24:	2e04      	cmp	r6, #4
 800ba26:	d806      	bhi.n	800ba36 <_strtod_l+0xe6>
 800ba28:	e8df f006 	tbb	[pc, r6]
 800ba2c:	201d0314 	.word	0x201d0314
 800ba30:	14          	.byte	0x14
 800ba31:	00          	.byte	0x00
 800ba32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ba36:	05e1      	lsls	r1, r4, #23
 800ba38:	bf48      	it	mi
 800ba3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ba3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ba42:	0d1b      	lsrs	r3, r3, #20
 800ba44:	051b      	lsls	r3, r3, #20
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1bb      	bne.n	800b9c2 <_strtod_l+0x72>
 800ba4a:	f000 ffc1 	bl	800c9d0 <__errno>
 800ba4e:	2322      	movs	r3, #34	@ 0x22
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	e7b6      	b.n	800b9c2 <_strtod_l+0x72>
 800ba54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ba58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ba5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba64:	e7e7      	b.n	800ba36 <_strtod_l+0xe6>
 800ba66:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bbe4 <_strtod_l+0x294>
 800ba6a:	e7e4      	b.n	800ba36 <_strtod_l+0xe6>
 800ba6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ba70:	f04f 3aff 	mov.w	sl, #4294967295
 800ba74:	e7df      	b.n	800ba36 <_strtod_l+0xe6>
 800ba76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba78:	1c5a      	adds	r2, r3, #1
 800ba7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba7c:	785b      	ldrb	r3, [r3, #1]
 800ba7e:	2b30      	cmp	r3, #48	@ 0x30
 800ba80:	d0f9      	beq.n	800ba76 <_strtod_l+0x126>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d09d      	beq.n	800b9c2 <_strtod_l+0x72>
 800ba86:	2301      	movs	r3, #1
 800ba88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba8c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba8e:	2300      	movs	r3, #0
 800ba90:	9308      	str	r3, [sp, #32]
 800ba92:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba94:	461f      	mov	r7, r3
 800ba96:	220a      	movs	r2, #10
 800ba98:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ba9a:	7805      	ldrb	r5, [r0, #0]
 800ba9c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800baa0:	b2d9      	uxtb	r1, r3
 800baa2:	2909      	cmp	r1, #9
 800baa4:	d928      	bls.n	800baf8 <_strtod_l+0x1a8>
 800baa6:	494e      	ldr	r1, [pc, #312]	@ (800bbe0 <_strtod_l+0x290>)
 800baa8:	2201      	movs	r2, #1
 800baaa:	f000 fed3 	bl	800c854 <strncmp>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d032      	beq.n	800bb18 <_strtod_l+0x1c8>
 800bab2:	2000      	movs	r0, #0
 800bab4:	462a      	mov	r2, r5
 800bab6:	4681      	mov	r9, r0
 800bab8:	463d      	mov	r5, r7
 800baba:	4603      	mov	r3, r0
 800babc:	2a65      	cmp	r2, #101	@ 0x65
 800babe:	d001      	beq.n	800bac4 <_strtod_l+0x174>
 800bac0:	2a45      	cmp	r2, #69	@ 0x45
 800bac2:	d114      	bne.n	800baee <_strtod_l+0x19e>
 800bac4:	b91d      	cbnz	r5, 800bace <_strtod_l+0x17e>
 800bac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bac8:	4302      	orrs	r2, r0
 800baca:	d095      	beq.n	800b9f8 <_strtod_l+0xa8>
 800bacc:	2500      	movs	r5, #0
 800bace:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bad0:	1c62      	adds	r2, r4, #1
 800bad2:	9219      	str	r2, [sp, #100]	@ 0x64
 800bad4:	7862      	ldrb	r2, [r4, #1]
 800bad6:	2a2b      	cmp	r2, #43	@ 0x2b
 800bad8:	d077      	beq.n	800bbca <_strtod_l+0x27a>
 800bada:	2a2d      	cmp	r2, #45	@ 0x2d
 800badc:	d07b      	beq.n	800bbd6 <_strtod_l+0x286>
 800bade:	f04f 0c00 	mov.w	ip, #0
 800bae2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bae6:	2909      	cmp	r1, #9
 800bae8:	f240 8082 	bls.w	800bbf0 <_strtod_l+0x2a0>
 800baec:	9419      	str	r4, [sp, #100]	@ 0x64
 800baee:	f04f 0800 	mov.w	r8, #0
 800baf2:	e0a2      	b.n	800bc3a <_strtod_l+0x2ea>
 800baf4:	2300      	movs	r3, #0
 800baf6:	e7c7      	b.n	800ba88 <_strtod_l+0x138>
 800baf8:	2f08      	cmp	r7, #8
 800bafa:	bfd5      	itete	le
 800bafc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bafe:	9908      	ldrgt	r1, [sp, #32]
 800bb00:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb04:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bb08:	f100 0001 	add.w	r0, r0, #1
 800bb0c:	bfd4      	ite	le
 800bb0e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bb10:	9308      	strgt	r3, [sp, #32]
 800bb12:	3701      	adds	r7, #1
 800bb14:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb16:	e7bf      	b.n	800ba98 <_strtod_l+0x148>
 800bb18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb1e:	785a      	ldrb	r2, [r3, #1]
 800bb20:	b37f      	cbz	r7, 800bb82 <_strtod_l+0x232>
 800bb22:	4681      	mov	r9, r0
 800bb24:	463d      	mov	r5, r7
 800bb26:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bb2a:	2b09      	cmp	r3, #9
 800bb2c:	d912      	bls.n	800bb54 <_strtod_l+0x204>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e7c4      	b.n	800babc <_strtod_l+0x16c>
 800bb32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb38:	785a      	ldrb	r2, [r3, #1]
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	2a30      	cmp	r2, #48	@ 0x30
 800bb3e:	d0f8      	beq.n	800bb32 <_strtod_l+0x1e2>
 800bb40:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bb44:	2b08      	cmp	r3, #8
 800bb46:	f200 84d3 	bhi.w	800c4f0 <_strtod_l+0xba0>
 800bb4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bb4c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb4e:	4681      	mov	r9, r0
 800bb50:	2000      	movs	r0, #0
 800bb52:	4605      	mov	r5, r0
 800bb54:	3a30      	subs	r2, #48	@ 0x30
 800bb56:	f100 0301 	add.w	r3, r0, #1
 800bb5a:	d02a      	beq.n	800bbb2 <_strtod_l+0x262>
 800bb5c:	4499      	add	r9, r3
 800bb5e:	eb00 0c05 	add.w	ip, r0, r5
 800bb62:	462b      	mov	r3, r5
 800bb64:	210a      	movs	r1, #10
 800bb66:	4563      	cmp	r3, ip
 800bb68:	d10d      	bne.n	800bb86 <_strtod_l+0x236>
 800bb6a:	1c69      	adds	r1, r5, #1
 800bb6c:	4401      	add	r1, r0
 800bb6e:	4428      	add	r0, r5
 800bb70:	2808      	cmp	r0, #8
 800bb72:	dc16      	bgt.n	800bba2 <_strtod_l+0x252>
 800bb74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb76:	230a      	movs	r3, #10
 800bb78:	fb03 2300 	mla	r3, r3, r0, r2
 800bb7c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e018      	b.n	800bbb4 <_strtod_l+0x264>
 800bb82:	4638      	mov	r0, r7
 800bb84:	e7da      	b.n	800bb3c <_strtod_l+0x1ec>
 800bb86:	2b08      	cmp	r3, #8
 800bb88:	f103 0301 	add.w	r3, r3, #1
 800bb8c:	dc03      	bgt.n	800bb96 <_strtod_l+0x246>
 800bb8e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bb90:	434e      	muls	r6, r1
 800bb92:	960a      	str	r6, [sp, #40]	@ 0x28
 800bb94:	e7e7      	b.n	800bb66 <_strtod_l+0x216>
 800bb96:	2b10      	cmp	r3, #16
 800bb98:	bfde      	ittt	le
 800bb9a:	9e08      	ldrle	r6, [sp, #32]
 800bb9c:	434e      	mulle	r6, r1
 800bb9e:	9608      	strle	r6, [sp, #32]
 800bba0:	e7e1      	b.n	800bb66 <_strtod_l+0x216>
 800bba2:	280f      	cmp	r0, #15
 800bba4:	dceb      	bgt.n	800bb7e <_strtod_l+0x22e>
 800bba6:	9808      	ldr	r0, [sp, #32]
 800bba8:	230a      	movs	r3, #10
 800bbaa:	fb03 2300 	mla	r3, r3, r0, r2
 800bbae:	9308      	str	r3, [sp, #32]
 800bbb0:	e7e5      	b.n	800bb7e <_strtod_l+0x22e>
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbb6:	1c50      	adds	r0, r2, #1
 800bbb8:	9019      	str	r0, [sp, #100]	@ 0x64
 800bbba:	7852      	ldrb	r2, [r2, #1]
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	460d      	mov	r5, r1
 800bbc0:	e7b1      	b.n	800bb26 <_strtod_l+0x1d6>
 800bbc2:	f04f 0900 	mov.w	r9, #0
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e77d      	b.n	800bac6 <_strtod_l+0x176>
 800bbca:	f04f 0c00 	mov.w	ip, #0
 800bbce:	1ca2      	adds	r2, r4, #2
 800bbd0:	9219      	str	r2, [sp, #100]	@ 0x64
 800bbd2:	78a2      	ldrb	r2, [r4, #2]
 800bbd4:	e785      	b.n	800bae2 <_strtod_l+0x192>
 800bbd6:	f04f 0c01 	mov.w	ip, #1
 800bbda:	e7f8      	b.n	800bbce <_strtod_l+0x27e>
 800bbdc:	0800f390 	.word	0x0800f390
 800bbe0:	0800f36c 	.word	0x0800f36c
 800bbe4:	7ff00000 	.word	0x7ff00000
 800bbe8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbea:	1c51      	adds	r1, r2, #1
 800bbec:	9119      	str	r1, [sp, #100]	@ 0x64
 800bbee:	7852      	ldrb	r2, [r2, #1]
 800bbf0:	2a30      	cmp	r2, #48	@ 0x30
 800bbf2:	d0f9      	beq.n	800bbe8 <_strtod_l+0x298>
 800bbf4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bbf8:	2908      	cmp	r1, #8
 800bbfa:	f63f af78 	bhi.w	800baee <_strtod_l+0x19e>
 800bbfe:	3a30      	subs	r2, #48	@ 0x30
 800bc00:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bc04:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bc06:	f04f 080a 	mov.w	r8, #10
 800bc0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bc0c:	1c56      	adds	r6, r2, #1
 800bc0e:	9619      	str	r6, [sp, #100]	@ 0x64
 800bc10:	7852      	ldrb	r2, [r2, #1]
 800bc12:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bc16:	f1be 0f09 	cmp.w	lr, #9
 800bc1a:	d939      	bls.n	800bc90 <_strtod_l+0x340>
 800bc1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bc1e:	1a76      	subs	r6, r6, r1
 800bc20:	2e08      	cmp	r6, #8
 800bc22:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bc26:	dc03      	bgt.n	800bc30 <_strtod_l+0x2e0>
 800bc28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc2a:	4588      	cmp	r8, r1
 800bc2c:	bfa8      	it	ge
 800bc2e:	4688      	movge	r8, r1
 800bc30:	f1bc 0f00 	cmp.w	ip, #0
 800bc34:	d001      	beq.n	800bc3a <_strtod_l+0x2ea>
 800bc36:	f1c8 0800 	rsb	r8, r8, #0
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	d14e      	bne.n	800bcdc <_strtod_l+0x38c>
 800bc3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc40:	4308      	orrs	r0, r1
 800bc42:	f47f aebe 	bne.w	800b9c2 <_strtod_l+0x72>
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f47f aed6 	bne.w	800b9f8 <_strtod_l+0xa8>
 800bc4c:	2a69      	cmp	r2, #105	@ 0x69
 800bc4e:	d028      	beq.n	800bca2 <_strtod_l+0x352>
 800bc50:	dc25      	bgt.n	800bc9e <_strtod_l+0x34e>
 800bc52:	2a49      	cmp	r2, #73	@ 0x49
 800bc54:	d025      	beq.n	800bca2 <_strtod_l+0x352>
 800bc56:	2a4e      	cmp	r2, #78	@ 0x4e
 800bc58:	f47f aece 	bne.w	800b9f8 <_strtod_l+0xa8>
 800bc5c:	499b      	ldr	r1, [pc, #620]	@ (800becc <_strtod_l+0x57c>)
 800bc5e:	a819      	add	r0, sp, #100	@ 0x64
 800bc60:	f001 f9ce 	bl	800d000 <__match>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	f43f aec7 	beq.w	800b9f8 <_strtod_l+0xa8>
 800bc6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b28      	cmp	r3, #40	@ 0x28
 800bc70:	d12e      	bne.n	800bcd0 <_strtod_l+0x380>
 800bc72:	4997      	ldr	r1, [pc, #604]	@ (800bed0 <_strtod_l+0x580>)
 800bc74:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc76:	a819      	add	r0, sp, #100	@ 0x64
 800bc78:	f001 f9d6 	bl	800d028 <__hexnan>
 800bc7c:	2805      	cmp	r0, #5
 800bc7e:	d127      	bne.n	800bcd0 <_strtod_l+0x380>
 800bc80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc82:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bc86:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bc8a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bc8e:	e698      	b.n	800b9c2 <_strtod_l+0x72>
 800bc90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc92:	fb08 2101 	mla	r1, r8, r1, r2
 800bc96:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bc9a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc9c:	e7b5      	b.n	800bc0a <_strtod_l+0x2ba>
 800bc9e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bca0:	e7da      	b.n	800bc58 <_strtod_l+0x308>
 800bca2:	498c      	ldr	r1, [pc, #560]	@ (800bed4 <_strtod_l+0x584>)
 800bca4:	a819      	add	r0, sp, #100	@ 0x64
 800bca6:	f001 f9ab 	bl	800d000 <__match>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	f43f aea4 	beq.w	800b9f8 <_strtod_l+0xa8>
 800bcb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcb2:	4989      	ldr	r1, [pc, #548]	@ (800bed8 <_strtod_l+0x588>)
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	a819      	add	r0, sp, #100	@ 0x64
 800bcb8:	9319      	str	r3, [sp, #100]	@ 0x64
 800bcba:	f001 f9a1 	bl	800d000 <__match>
 800bcbe:	b910      	cbnz	r0, 800bcc6 <_strtod_l+0x376>
 800bcc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800bcc6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800bee8 <_strtod_l+0x598>
 800bcca:	f04f 0a00 	mov.w	sl, #0
 800bcce:	e678      	b.n	800b9c2 <_strtod_l+0x72>
 800bcd0:	4882      	ldr	r0, [pc, #520]	@ (800bedc <_strtod_l+0x58c>)
 800bcd2:	f000 feb9 	bl	800ca48 <nan>
 800bcd6:	ec5b ab10 	vmov	sl, fp, d0
 800bcda:	e672      	b.n	800b9c2 <_strtod_l+0x72>
 800bcdc:	eba8 0309 	sub.w	r3, r8, r9
 800bce0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bce2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bce4:	2f00      	cmp	r7, #0
 800bce6:	bf08      	it	eq
 800bce8:	462f      	moveq	r7, r5
 800bcea:	2d10      	cmp	r5, #16
 800bcec:	462c      	mov	r4, r5
 800bcee:	bfa8      	it	ge
 800bcf0:	2410      	movge	r4, #16
 800bcf2:	f7f4 fc17 	bl	8000524 <__aeabi_ui2d>
 800bcf6:	2d09      	cmp	r5, #9
 800bcf8:	4682      	mov	sl, r0
 800bcfa:	468b      	mov	fp, r1
 800bcfc:	dc13      	bgt.n	800bd26 <_strtod_l+0x3d6>
 800bcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f43f ae5e 	beq.w	800b9c2 <_strtod_l+0x72>
 800bd06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd08:	dd78      	ble.n	800bdfc <_strtod_l+0x4ac>
 800bd0a:	2b16      	cmp	r3, #22
 800bd0c:	dc5f      	bgt.n	800bdce <_strtod_l+0x47e>
 800bd0e:	4974      	ldr	r1, [pc, #464]	@ (800bee0 <_strtod_l+0x590>)
 800bd10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd18:	4652      	mov	r2, sl
 800bd1a:	465b      	mov	r3, fp
 800bd1c:	f7f4 fc7c 	bl	8000618 <__aeabi_dmul>
 800bd20:	4682      	mov	sl, r0
 800bd22:	468b      	mov	fp, r1
 800bd24:	e64d      	b.n	800b9c2 <_strtod_l+0x72>
 800bd26:	4b6e      	ldr	r3, [pc, #440]	@ (800bee0 <_strtod_l+0x590>)
 800bd28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bd30:	f7f4 fc72 	bl	8000618 <__aeabi_dmul>
 800bd34:	4682      	mov	sl, r0
 800bd36:	9808      	ldr	r0, [sp, #32]
 800bd38:	468b      	mov	fp, r1
 800bd3a:	f7f4 fbf3 	bl	8000524 <__aeabi_ui2d>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4650      	mov	r0, sl
 800bd44:	4659      	mov	r1, fp
 800bd46:	f7f4 fab1 	bl	80002ac <__adddf3>
 800bd4a:	2d0f      	cmp	r5, #15
 800bd4c:	4682      	mov	sl, r0
 800bd4e:	468b      	mov	fp, r1
 800bd50:	ddd5      	ble.n	800bcfe <_strtod_l+0x3ae>
 800bd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd54:	1b2c      	subs	r4, r5, r4
 800bd56:	441c      	add	r4, r3
 800bd58:	2c00      	cmp	r4, #0
 800bd5a:	f340 8096 	ble.w	800be8a <_strtod_l+0x53a>
 800bd5e:	f014 030f 	ands.w	r3, r4, #15
 800bd62:	d00a      	beq.n	800bd7a <_strtod_l+0x42a>
 800bd64:	495e      	ldr	r1, [pc, #376]	@ (800bee0 <_strtod_l+0x590>)
 800bd66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd6a:	4652      	mov	r2, sl
 800bd6c:	465b      	mov	r3, fp
 800bd6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd72:	f7f4 fc51 	bl	8000618 <__aeabi_dmul>
 800bd76:	4682      	mov	sl, r0
 800bd78:	468b      	mov	fp, r1
 800bd7a:	f034 040f 	bics.w	r4, r4, #15
 800bd7e:	d073      	beq.n	800be68 <_strtod_l+0x518>
 800bd80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bd84:	dd48      	ble.n	800be18 <_strtod_l+0x4c8>
 800bd86:	2400      	movs	r4, #0
 800bd88:	46a0      	mov	r8, r4
 800bd8a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd8c:	46a1      	mov	r9, r4
 800bd8e:	9a05      	ldr	r2, [sp, #20]
 800bd90:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800bee8 <_strtod_l+0x598>
 800bd94:	2322      	movs	r3, #34	@ 0x22
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	f04f 0a00 	mov.w	sl, #0
 800bd9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f43f ae0f 	beq.w	800b9c2 <_strtod_l+0x72>
 800bda4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bda6:	9805      	ldr	r0, [sp, #20]
 800bda8:	f001 fa2c 	bl	800d204 <_Bfree>
 800bdac:	9805      	ldr	r0, [sp, #20]
 800bdae:	4649      	mov	r1, r9
 800bdb0:	f001 fa28 	bl	800d204 <_Bfree>
 800bdb4:	9805      	ldr	r0, [sp, #20]
 800bdb6:	4641      	mov	r1, r8
 800bdb8:	f001 fa24 	bl	800d204 <_Bfree>
 800bdbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdbe:	9805      	ldr	r0, [sp, #20]
 800bdc0:	f001 fa20 	bl	800d204 <_Bfree>
 800bdc4:	9805      	ldr	r0, [sp, #20]
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	f001 fa1c 	bl	800d204 <_Bfree>
 800bdcc:	e5f9      	b.n	800b9c2 <_strtod_l+0x72>
 800bdce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdd0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	dbbc      	blt.n	800bd52 <_strtod_l+0x402>
 800bdd8:	4c41      	ldr	r4, [pc, #260]	@ (800bee0 <_strtod_l+0x590>)
 800bdda:	f1c5 050f 	rsb	r5, r5, #15
 800bdde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bde2:	4652      	mov	r2, sl
 800bde4:	465b      	mov	r3, fp
 800bde6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdea:	f7f4 fc15 	bl	8000618 <__aeabi_dmul>
 800bdee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdf0:	1b5d      	subs	r5, r3, r5
 800bdf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bdf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bdfa:	e78f      	b.n	800bd1c <_strtod_l+0x3cc>
 800bdfc:	3316      	adds	r3, #22
 800bdfe:	dba8      	blt.n	800bd52 <_strtod_l+0x402>
 800be00:	4b37      	ldr	r3, [pc, #220]	@ (800bee0 <_strtod_l+0x590>)
 800be02:	eba9 0808 	sub.w	r8, r9, r8
 800be06:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800be0a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800be0e:	4650      	mov	r0, sl
 800be10:	4659      	mov	r1, fp
 800be12:	f7f4 fd2b 	bl	800086c <__aeabi_ddiv>
 800be16:	e783      	b.n	800bd20 <_strtod_l+0x3d0>
 800be18:	4b32      	ldr	r3, [pc, #200]	@ (800bee4 <_strtod_l+0x594>)
 800be1a:	9308      	str	r3, [sp, #32]
 800be1c:	2300      	movs	r3, #0
 800be1e:	1124      	asrs	r4, r4, #4
 800be20:	4650      	mov	r0, sl
 800be22:	4659      	mov	r1, fp
 800be24:	461e      	mov	r6, r3
 800be26:	2c01      	cmp	r4, #1
 800be28:	dc21      	bgt.n	800be6e <_strtod_l+0x51e>
 800be2a:	b10b      	cbz	r3, 800be30 <_strtod_l+0x4e0>
 800be2c:	4682      	mov	sl, r0
 800be2e:	468b      	mov	fp, r1
 800be30:	492c      	ldr	r1, [pc, #176]	@ (800bee4 <_strtod_l+0x594>)
 800be32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800be36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800be3a:	4652      	mov	r2, sl
 800be3c:	465b      	mov	r3, fp
 800be3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be42:	f7f4 fbe9 	bl	8000618 <__aeabi_dmul>
 800be46:	4b28      	ldr	r3, [pc, #160]	@ (800bee8 <_strtod_l+0x598>)
 800be48:	460a      	mov	r2, r1
 800be4a:	400b      	ands	r3, r1
 800be4c:	4927      	ldr	r1, [pc, #156]	@ (800beec <_strtod_l+0x59c>)
 800be4e:	428b      	cmp	r3, r1
 800be50:	4682      	mov	sl, r0
 800be52:	d898      	bhi.n	800bd86 <_strtod_l+0x436>
 800be54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800be58:	428b      	cmp	r3, r1
 800be5a:	bf86      	itte	hi
 800be5c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bef0 <_strtod_l+0x5a0>
 800be60:	f04f 3aff 	movhi.w	sl, #4294967295
 800be64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800be68:	2300      	movs	r3, #0
 800be6a:	9308      	str	r3, [sp, #32]
 800be6c:	e07a      	b.n	800bf64 <_strtod_l+0x614>
 800be6e:	07e2      	lsls	r2, r4, #31
 800be70:	d505      	bpl.n	800be7e <_strtod_l+0x52e>
 800be72:	9b08      	ldr	r3, [sp, #32]
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fbce 	bl	8000618 <__aeabi_dmul>
 800be7c:	2301      	movs	r3, #1
 800be7e:	9a08      	ldr	r2, [sp, #32]
 800be80:	3208      	adds	r2, #8
 800be82:	3601      	adds	r6, #1
 800be84:	1064      	asrs	r4, r4, #1
 800be86:	9208      	str	r2, [sp, #32]
 800be88:	e7cd      	b.n	800be26 <_strtod_l+0x4d6>
 800be8a:	d0ed      	beq.n	800be68 <_strtod_l+0x518>
 800be8c:	4264      	negs	r4, r4
 800be8e:	f014 020f 	ands.w	r2, r4, #15
 800be92:	d00a      	beq.n	800beaa <_strtod_l+0x55a>
 800be94:	4b12      	ldr	r3, [pc, #72]	@ (800bee0 <_strtod_l+0x590>)
 800be96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be9a:	4650      	mov	r0, sl
 800be9c:	4659      	mov	r1, fp
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	f7f4 fce3 	bl	800086c <__aeabi_ddiv>
 800bea6:	4682      	mov	sl, r0
 800bea8:	468b      	mov	fp, r1
 800beaa:	1124      	asrs	r4, r4, #4
 800beac:	d0dc      	beq.n	800be68 <_strtod_l+0x518>
 800beae:	2c1f      	cmp	r4, #31
 800beb0:	dd20      	ble.n	800bef4 <_strtod_l+0x5a4>
 800beb2:	2400      	movs	r4, #0
 800beb4:	46a0      	mov	r8, r4
 800beb6:	940a      	str	r4, [sp, #40]	@ 0x28
 800beb8:	46a1      	mov	r9, r4
 800beba:	9a05      	ldr	r2, [sp, #20]
 800bebc:	2322      	movs	r3, #34	@ 0x22
 800bebe:	f04f 0a00 	mov.w	sl, #0
 800bec2:	f04f 0b00 	mov.w	fp, #0
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	e768      	b.n	800bd9c <_strtod_l+0x44c>
 800beca:	bf00      	nop
 800becc:	0800f377 	.word	0x0800f377
 800bed0:	0800f37c 	.word	0x0800f37c
 800bed4:	0800f36e 	.word	0x0800f36e
 800bed8:	0800f371 	.word	0x0800f371
 800bedc:	0800f741 	.word	0x0800f741
 800bee0:	0800f5f0 	.word	0x0800f5f0
 800bee4:	0800f5c8 	.word	0x0800f5c8
 800bee8:	7ff00000 	.word	0x7ff00000
 800beec:	7ca00000 	.word	0x7ca00000
 800bef0:	7fefffff 	.word	0x7fefffff
 800bef4:	f014 0310 	ands.w	r3, r4, #16
 800bef8:	bf18      	it	ne
 800befa:	236a      	movne	r3, #106	@ 0x6a
 800befc:	4ea9      	ldr	r6, [pc, #676]	@ (800c1a4 <_strtod_l+0x854>)
 800befe:	9308      	str	r3, [sp, #32]
 800bf00:	4650      	mov	r0, sl
 800bf02:	4659      	mov	r1, fp
 800bf04:	2300      	movs	r3, #0
 800bf06:	07e2      	lsls	r2, r4, #31
 800bf08:	d504      	bpl.n	800bf14 <_strtod_l+0x5c4>
 800bf0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf0e:	f7f4 fb83 	bl	8000618 <__aeabi_dmul>
 800bf12:	2301      	movs	r3, #1
 800bf14:	1064      	asrs	r4, r4, #1
 800bf16:	f106 0608 	add.w	r6, r6, #8
 800bf1a:	d1f4      	bne.n	800bf06 <_strtod_l+0x5b6>
 800bf1c:	b10b      	cbz	r3, 800bf22 <_strtod_l+0x5d2>
 800bf1e:	4682      	mov	sl, r0
 800bf20:	468b      	mov	fp, r1
 800bf22:	9b08      	ldr	r3, [sp, #32]
 800bf24:	b1b3      	cbz	r3, 800bf54 <_strtod_l+0x604>
 800bf26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bf2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	4659      	mov	r1, fp
 800bf32:	dd0f      	ble.n	800bf54 <_strtod_l+0x604>
 800bf34:	2b1f      	cmp	r3, #31
 800bf36:	dd55      	ble.n	800bfe4 <_strtod_l+0x694>
 800bf38:	2b34      	cmp	r3, #52	@ 0x34
 800bf3a:	bfde      	ittt	le
 800bf3c:	f04f 33ff 	movle.w	r3, #4294967295
 800bf40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bf44:	4093      	lslle	r3, r2
 800bf46:	f04f 0a00 	mov.w	sl, #0
 800bf4a:	bfcc      	ite	gt
 800bf4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bf50:	ea03 0b01 	andle.w	fp, r3, r1
 800bf54:	2200      	movs	r2, #0
 800bf56:	2300      	movs	r3, #0
 800bf58:	4650      	mov	r0, sl
 800bf5a:	4659      	mov	r1, fp
 800bf5c:	f7f4 fdc4 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d1a6      	bne.n	800beb2 <_strtod_l+0x562>
 800bf64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf6a:	9805      	ldr	r0, [sp, #20]
 800bf6c:	462b      	mov	r3, r5
 800bf6e:	463a      	mov	r2, r7
 800bf70:	f001 f9b0 	bl	800d2d4 <__s2b>
 800bf74:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f43f af05 	beq.w	800bd86 <_strtod_l+0x436>
 800bf7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf7e:	2a00      	cmp	r2, #0
 800bf80:	eba9 0308 	sub.w	r3, r9, r8
 800bf84:	bfa8      	it	ge
 800bf86:	2300      	movge	r3, #0
 800bf88:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf8a:	2400      	movs	r4, #0
 800bf8c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf90:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf92:	46a0      	mov	r8, r4
 800bf94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf96:	9805      	ldr	r0, [sp, #20]
 800bf98:	6859      	ldr	r1, [r3, #4]
 800bf9a:	f001 f8f3 	bl	800d184 <_Balloc>
 800bf9e:	4681      	mov	r9, r0
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	f43f aef4 	beq.w	800bd8e <_strtod_l+0x43e>
 800bfa6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfa8:	691a      	ldr	r2, [r3, #16]
 800bfaa:	3202      	adds	r2, #2
 800bfac:	f103 010c 	add.w	r1, r3, #12
 800bfb0:	0092      	lsls	r2, r2, #2
 800bfb2:	300c      	adds	r0, #12
 800bfb4:	f000 fd39 	bl	800ca2a <memcpy>
 800bfb8:	ec4b ab10 	vmov	d0, sl, fp
 800bfbc:	9805      	ldr	r0, [sp, #20]
 800bfbe:	aa1c      	add	r2, sp, #112	@ 0x70
 800bfc0:	a91b      	add	r1, sp, #108	@ 0x6c
 800bfc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bfc6:	f001 fcc1 	bl	800d94c <__d2b>
 800bfca:	901a      	str	r0, [sp, #104]	@ 0x68
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	f43f aede 	beq.w	800bd8e <_strtod_l+0x43e>
 800bfd2:	9805      	ldr	r0, [sp, #20]
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	f001 fa13 	bl	800d400 <__i2b>
 800bfda:	4680      	mov	r8, r0
 800bfdc:	b948      	cbnz	r0, 800bff2 <_strtod_l+0x6a2>
 800bfde:	f04f 0800 	mov.w	r8, #0
 800bfe2:	e6d4      	b.n	800bd8e <_strtod_l+0x43e>
 800bfe4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfec:	ea03 0a0a 	and.w	sl, r3, sl
 800bff0:	e7b0      	b.n	800bf54 <_strtod_l+0x604>
 800bff2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bff4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	bfab      	itete	ge
 800bffa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bffc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bffe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c000:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c002:	bfac      	ite	ge
 800c004:	18ef      	addge	r7, r5, r3
 800c006:	1b5e      	sublt	r6, r3, r5
 800c008:	9b08      	ldr	r3, [sp, #32]
 800c00a:	1aed      	subs	r5, r5, r3
 800c00c:	4415      	add	r5, r2
 800c00e:	4b66      	ldr	r3, [pc, #408]	@ (800c1a8 <_strtod_l+0x858>)
 800c010:	3d01      	subs	r5, #1
 800c012:	429d      	cmp	r5, r3
 800c014:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c018:	da50      	bge.n	800c0bc <_strtod_l+0x76c>
 800c01a:	1b5b      	subs	r3, r3, r5
 800c01c:	2b1f      	cmp	r3, #31
 800c01e:	eba2 0203 	sub.w	r2, r2, r3
 800c022:	f04f 0101 	mov.w	r1, #1
 800c026:	dc3d      	bgt.n	800c0a4 <_strtod_l+0x754>
 800c028:	fa01 f303 	lsl.w	r3, r1, r3
 800c02c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c02e:	2300      	movs	r3, #0
 800c030:	9310      	str	r3, [sp, #64]	@ 0x40
 800c032:	18bd      	adds	r5, r7, r2
 800c034:	9b08      	ldr	r3, [sp, #32]
 800c036:	42af      	cmp	r7, r5
 800c038:	4416      	add	r6, r2
 800c03a:	441e      	add	r6, r3
 800c03c:	463b      	mov	r3, r7
 800c03e:	bfa8      	it	ge
 800c040:	462b      	movge	r3, r5
 800c042:	42b3      	cmp	r3, r6
 800c044:	bfa8      	it	ge
 800c046:	4633      	movge	r3, r6
 800c048:	2b00      	cmp	r3, #0
 800c04a:	bfc2      	ittt	gt
 800c04c:	1aed      	subgt	r5, r5, r3
 800c04e:	1af6      	subgt	r6, r6, r3
 800c050:	1aff      	subgt	r7, r7, r3
 800c052:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c054:	2b00      	cmp	r3, #0
 800c056:	dd16      	ble.n	800c086 <_strtod_l+0x736>
 800c058:	4641      	mov	r1, r8
 800c05a:	9805      	ldr	r0, [sp, #20]
 800c05c:	461a      	mov	r2, r3
 800c05e:	f001 fa8f 	bl	800d580 <__pow5mult>
 800c062:	4680      	mov	r8, r0
 800c064:	2800      	cmp	r0, #0
 800c066:	d0ba      	beq.n	800bfde <_strtod_l+0x68e>
 800c068:	4601      	mov	r1, r0
 800c06a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c06c:	9805      	ldr	r0, [sp, #20]
 800c06e:	f001 f9dd 	bl	800d42c <__multiply>
 800c072:	900e      	str	r0, [sp, #56]	@ 0x38
 800c074:	2800      	cmp	r0, #0
 800c076:	f43f ae8a 	beq.w	800bd8e <_strtod_l+0x43e>
 800c07a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c07c:	9805      	ldr	r0, [sp, #20]
 800c07e:	f001 f8c1 	bl	800d204 <_Bfree>
 800c082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c084:	931a      	str	r3, [sp, #104]	@ 0x68
 800c086:	2d00      	cmp	r5, #0
 800c088:	dc1d      	bgt.n	800c0c6 <_strtod_l+0x776>
 800c08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dd23      	ble.n	800c0d8 <_strtod_l+0x788>
 800c090:	4649      	mov	r1, r9
 800c092:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c094:	9805      	ldr	r0, [sp, #20]
 800c096:	f001 fa73 	bl	800d580 <__pow5mult>
 800c09a:	4681      	mov	r9, r0
 800c09c:	b9e0      	cbnz	r0, 800c0d8 <_strtod_l+0x788>
 800c09e:	f04f 0900 	mov.w	r9, #0
 800c0a2:	e674      	b.n	800bd8e <_strtod_l+0x43e>
 800c0a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c0a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c0ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c0b0:	35e2      	adds	r5, #226	@ 0xe2
 800c0b2:	fa01 f305 	lsl.w	r3, r1, r5
 800c0b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c0ba:	e7ba      	b.n	800c032 <_strtod_l+0x6e2>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9310      	str	r3, [sp, #64]	@ 0x40
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c0c4:	e7b5      	b.n	800c032 <_strtod_l+0x6e2>
 800c0c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0c8:	9805      	ldr	r0, [sp, #20]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	f001 fab2 	bl	800d634 <__lshift>
 800c0d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d1d9      	bne.n	800c08a <_strtod_l+0x73a>
 800c0d6:	e65a      	b.n	800bd8e <_strtod_l+0x43e>
 800c0d8:	2e00      	cmp	r6, #0
 800c0da:	dd07      	ble.n	800c0ec <_strtod_l+0x79c>
 800c0dc:	4649      	mov	r1, r9
 800c0de:	9805      	ldr	r0, [sp, #20]
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	f001 faa7 	bl	800d634 <__lshift>
 800c0e6:	4681      	mov	r9, r0
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d0d8      	beq.n	800c09e <_strtod_l+0x74e>
 800c0ec:	2f00      	cmp	r7, #0
 800c0ee:	dd08      	ble.n	800c102 <_strtod_l+0x7b2>
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	9805      	ldr	r0, [sp, #20]
 800c0f4:	463a      	mov	r2, r7
 800c0f6:	f001 fa9d 	bl	800d634 <__lshift>
 800c0fa:	4680      	mov	r8, r0
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	f43f ae46 	beq.w	800bd8e <_strtod_l+0x43e>
 800c102:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c104:	9805      	ldr	r0, [sp, #20]
 800c106:	464a      	mov	r2, r9
 800c108:	f001 fb1c 	bl	800d744 <__mdiff>
 800c10c:	4604      	mov	r4, r0
 800c10e:	2800      	cmp	r0, #0
 800c110:	f43f ae3d 	beq.w	800bd8e <_strtod_l+0x43e>
 800c114:	68c3      	ldr	r3, [r0, #12]
 800c116:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c118:	2300      	movs	r3, #0
 800c11a:	60c3      	str	r3, [r0, #12]
 800c11c:	4641      	mov	r1, r8
 800c11e:	f001 faf5 	bl	800d70c <__mcmp>
 800c122:	2800      	cmp	r0, #0
 800c124:	da46      	bge.n	800c1b4 <_strtod_l+0x864>
 800c126:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c128:	ea53 030a 	orrs.w	r3, r3, sl
 800c12c:	d16c      	bne.n	800c208 <_strtod_l+0x8b8>
 800c12e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c132:	2b00      	cmp	r3, #0
 800c134:	d168      	bne.n	800c208 <_strtod_l+0x8b8>
 800c136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c13a:	0d1b      	lsrs	r3, r3, #20
 800c13c:	051b      	lsls	r3, r3, #20
 800c13e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c142:	d961      	bls.n	800c208 <_strtod_l+0x8b8>
 800c144:	6963      	ldr	r3, [r4, #20]
 800c146:	b913      	cbnz	r3, 800c14e <_strtod_l+0x7fe>
 800c148:	6923      	ldr	r3, [r4, #16]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	dd5c      	ble.n	800c208 <_strtod_l+0x8b8>
 800c14e:	4621      	mov	r1, r4
 800c150:	2201      	movs	r2, #1
 800c152:	9805      	ldr	r0, [sp, #20]
 800c154:	f001 fa6e 	bl	800d634 <__lshift>
 800c158:	4641      	mov	r1, r8
 800c15a:	4604      	mov	r4, r0
 800c15c:	f001 fad6 	bl	800d70c <__mcmp>
 800c160:	2800      	cmp	r0, #0
 800c162:	dd51      	ble.n	800c208 <_strtod_l+0x8b8>
 800c164:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c168:	9a08      	ldr	r2, [sp, #32]
 800c16a:	0d1b      	lsrs	r3, r3, #20
 800c16c:	051b      	lsls	r3, r3, #20
 800c16e:	2a00      	cmp	r2, #0
 800c170:	d06b      	beq.n	800c24a <_strtod_l+0x8fa>
 800c172:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c176:	d868      	bhi.n	800c24a <_strtod_l+0x8fa>
 800c178:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c17c:	f67f ae9d 	bls.w	800beba <_strtod_l+0x56a>
 800c180:	4b0a      	ldr	r3, [pc, #40]	@ (800c1ac <_strtod_l+0x85c>)
 800c182:	4650      	mov	r0, sl
 800c184:	4659      	mov	r1, fp
 800c186:	2200      	movs	r2, #0
 800c188:	f7f4 fa46 	bl	8000618 <__aeabi_dmul>
 800c18c:	4b08      	ldr	r3, [pc, #32]	@ (800c1b0 <_strtod_l+0x860>)
 800c18e:	400b      	ands	r3, r1
 800c190:	4682      	mov	sl, r0
 800c192:	468b      	mov	fp, r1
 800c194:	2b00      	cmp	r3, #0
 800c196:	f47f ae05 	bne.w	800bda4 <_strtod_l+0x454>
 800c19a:	9a05      	ldr	r2, [sp, #20]
 800c19c:	2322      	movs	r3, #34	@ 0x22
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	e600      	b.n	800bda4 <_strtod_l+0x454>
 800c1a2:	bf00      	nop
 800c1a4:	0800f3a8 	.word	0x0800f3a8
 800c1a8:	fffffc02 	.word	0xfffffc02
 800c1ac:	39500000 	.word	0x39500000
 800c1b0:	7ff00000 	.word	0x7ff00000
 800c1b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c1b8:	d165      	bne.n	800c286 <_strtod_l+0x936>
 800c1ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c1bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1c0:	b35a      	cbz	r2, 800c21a <_strtod_l+0x8ca>
 800c1c2:	4a9f      	ldr	r2, [pc, #636]	@ (800c440 <_strtod_l+0xaf0>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d12b      	bne.n	800c220 <_strtod_l+0x8d0>
 800c1c8:	9b08      	ldr	r3, [sp, #32]
 800c1ca:	4651      	mov	r1, sl
 800c1cc:	b303      	cbz	r3, 800c210 <_strtod_l+0x8c0>
 800c1ce:	4b9d      	ldr	r3, [pc, #628]	@ (800c444 <_strtod_l+0xaf4>)
 800c1d0:	465a      	mov	r2, fp
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1dc:	d81b      	bhi.n	800c216 <_strtod_l+0x8c6>
 800c1de:	0d1b      	lsrs	r3, r3, #20
 800c1e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e8:	4299      	cmp	r1, r3
 800c1ea:	d119      	bne.n	800c220 <_strtod_l+0x8d0>
 800c1ec:	4b96      	ldr	r3, [pc, #600]	@ (800c448 <_strtod_l+0xaf8>)
 800c1ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d102      	bne.n	800c1fa <_strtod_l+0x8aa>
 800c1f4:	3101      	adds	r1, #1
 800c1f6:	f43f adca 	beq.w	800bd8e <_strtod_l+0x43e>
 800c1fa:	4b92      	ldr	r3, [pc, #584]	@ (800c444 <_strtod_l+0xaf4>)
 800c1fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1fe:	401a      	ands	r2, r3
 800c200:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c204:	f04f 0a00 	mov.w	sl, #0
 800c208:	9b08      	ldr	r3, [sp, #32]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1b8      	bne.n	800c180 <_strtod_l+0x830>
 800c20e:	e5c9      	b.n	800bda4 <_strtod_l+0x454>
 800c210:	f04f 33ff 	mov.w	r3, #4294967295
 800c214:	e7e8      	b.n	800c1e8 <_strtod_l+0x898>
 800c216:	4613      	mov	r3, r2
 800c218:	e7e6      	b.n	800c1e8 <_strtod_l+0x898>
 800c21a:	ea53 030a 	orrs.w	r3, r3, sl
 800c21e:	d0a1      	beq.n	800c164 <_strtod_l+0x814>
 800c220:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c222:	b1db      	cbz	r3, 800c25c <_strtod_l+0x90c>
 800c224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c226:	4213      	tst	r3, r2
 800c228:	d0ee      	beq.n	800c208 <_strtod_l+0x8b8>
 800c22a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c22c:	9a08      	ldr	r2, [sp, #32]
 800c22e:	4650      	mov	r0, sl
 800c230:	4659      	mov	r1, fp
 800c232:	b1bb      	cbz	r3, 800c264 <_strtod_l+0x914>
 800c234:	f7ff fb6c 	bl	800b910 <sulp>
 800c238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c23c:	ec53 2b10 	vmov	r2, r3, d0
 800c240:	f7f4 f834 	bl	80002ac <__adddf3>
 800c244:	4682      	mov	sl, r0
 800c246:	468b      	mov	fp, r1
 800c248:	e7de      	b.n	800c208 <_strtod_l+0x8b8>
 800c24a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c24e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c252:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c256:	f04f 3aff 	mov.w	sl, #4294967295
 800c25a:	e7d5      	b.n	800c208 <_strtod_l+0x8b8>
 800c25c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c25e:	ea13 0f0a 	tst.w	r3, sl
 800c262:	e7e1      	b.n	800c228 <_strtod_l+0x8d8>
 800c264:	f7ff fb54 	bl	800b910 <sulp>
 800c268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c26c:	ec53 2b10 	vmov	r2, r3, d0
 800c270:	f7f4 f81a 	bl	80002a8 <__aeabi_dsub>
 800c274:	2200      	movs	r2, #0
 800c276:	2300      	movs	r3, #0
 800c278:	4682      	mov	sl, r0
 800c27a:	468b      	mov	fp, r1
 800c27c:	f7f4 fc34 	bl	8000ae8 <__aeabi_dcmpeq>
 800c280:	2800      	cmp	r0, #0
 800c282:	d0c1      	beq.n	800c208 <_strtod_l+0x8b8>
 800c284:	e619      	b.n	800beba <_strtod_l+0x56a>
 800c286:	4641      	mov	r1, r8
 800c288:	4620      	mov	r0, r4
 800c28a:	f001 fbb7 	bl	800d9fc <__ratio>
 800c28e:	ec57 6b10 	vmov	r6, r7, d0
 800c292:	2200      	movs	r2, #0
 800c294:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f4 fc38 	bl	8000b10 <__aeabi_dcmple>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d06f      	beq.n	800c384 <_strtod_l+0xa34>
 800c2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d17a      	bne.n	800c3a0 <_strtod_l+0xa50>
 800c2aa:	f1ba 0f00 	cmp.w	sl, #0
 800c2ae:	d158      	bne.n	800c362 <_strtod_l+0xa12>
 800c2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d15a      	bne.n	800c370 <_strtod_l+0xa20>
 800c2ba:	4b64      	ldr	r3, [pc, #400]	@ (800c44c <_strtod_l+0xafc>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	4630      	mov	r0, r6
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	f7f4 fc1b 	bl	8000afc <__aeabi_dcmplt>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d159      	bne.n	800c37e <_strtod_l+0xa2e>
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	4b60      	ldr	r3, [pc, #384]	@ (800c450 <_strtod_l+0xb00>)
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f7f4 f9a1 	bl	8000618 <__aeabi_dmul>
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	460f      	mov	r7, r1
 800c2da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c2de:	9606      	str	r6, [sp, #24]
 800c2e0:	9307      	str	r3, [sp, #28]
 800c2e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2e6:	4d57      	ldr	r5, [pc, #348]	@ (800c444 <_strtod_l+0xaf4>)
 800c2e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2ee:	401d      	ands	r5, r3
 800c2f0:	4b58      	ldr	r3, [pc, #352]	@ (800c454 <_strtod_l+0xb04>)
 800c2f2:	429d      	cmp	r5, r3
 800c2f4:	f040 80b2 	bne.w	800c45c <_strtod_l+0xb0c>
 800c2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c2fe:	ec4b ab10 	vmov	d0, sl, fp
 800c302:	f001 fab3 	bl	800d86c <__ulp>
 800c306:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c30a:	ec51 0b10 	vmov	r0, r1, d0
 800c30e:	f7f4 f983 	bl	8000618 <__aeabi_dmul>
 800c312:	4652      	mov	r2, sl
 800c314:	465b      	mov	r3, fp
 800c316:	f7f3 ffc9 	bl	80002ac <__adddf3>
 800c31a:	460b      	mov	r3, r1
 800c31c:	4949      	ldr	r1, [pc, #292]	@ (800c444 <_strtod_l+0xaf4>)
 800c31e:	4a4e      	ldr	r2, [pc, #312]	@ (800c458 <_strtod_l+0xb08>)
 800c320:	4019      	ands	r1, r3
 800c322:	4291      	cmp	r1, r2
 800c324:	4682      	mov	sl, r0
 800c326:	d942      	bls.n	800c3ae <_strtod_l+0xa5e>
 800c328:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c32a:	4b47      	ldr	r3, [pc, #284]	@ (800c448 <_strtod_l+0xaf8>)
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d103      	bne.n	800c338 <_strtod_l+0x9e8>
 800c330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c332:	3301      	adds	r3, #1
 800c334:	f43f ad2b 	beq.w	800bd8e <_strtod_l+0x43e>
 800c338:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c448 <_strtod_l+0xaf8>
 800c33c:	f04f 3aff 	mov.w	sl, #4294967295
 800c340:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c342:	9805      	ldr	r0, [sp, #20]
 800c344:	f000 ff5e 	bl	800d204 <_Bfree>
 800c348:	9805      	ldr	r0, [sp, #20]
 800c34a:	4649      	mov	r1, r9
 800c34c:	f000 ff5a 	bl	800d204 <_Bfree>
 800c350:	9805      	ldr	r0, [sp, #20]
 800c352:	4641      	mov	r1, r8
 800c354:	f000 ff56 	bl	800d204 <_Bfree>
 800c358:	9805      	ldr	r0, [sp, #20]
 800c35a:	4621      	mov	r1, r4
 800c35c:	f000 ff52 	bl	800d204 <_Bfree>
 800c360:	e618      	b.n	800bf94 <_strtod_l+0x644>
 800c362:	f1ba 0f01 	cmp.w	sl, #1
 800c366:	d103      	bne.n	800c370 <_strtod_l+0xa20>
 800c368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f43f ada5 	beq.w	800beba <_strtod_l+0x56a>
 800c370:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c420 <_strtod_l+0xad0>
 800c374:	4f35      	ldr	r7, [pc, #212]	@ (800c44c <_strtod_l+0xafc>)
 800c376:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c37a:	2600      	movs	r6, #0
 800c37c:	e7b1      	b.n	800c2e2 <_strtod_l+0x992>
 800c37e:	4f34      	ldr	r7, [pc, #208]	@ (800c450 <_strtod_l+0xb00>)
 800c380:	2600      	movs	r6, #0
 800c382:	e7aa      	b.n	800c2da <_strtod_l+0x98a>
 800c384:	4b32      	ldr	r3, [pc, #200]	@ (800c450 <_strtod_l+0xb00>)
 800c386:	4630      	mov	r0, r6
 800c388:	4639      	mov	r1, r7
 800c38a:	2200      	movs	r2, #0
 800c38c:	f7f4 f944 	bl	8000618 <__aeabi_dmul>
 800c390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c392:	4606      	mov	r6, r0
 800c394:	460f      	mov	r7, r1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d09f      	beq.n	800c2da <_strtod_l+0x98a>
 800c39a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c39e:	e7a0      	b.n	800c2e2 <_strtod_l+0x992>
 800c3a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c428 <_strtod_l+0xad8>
 800c3a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c3a8:	ec57 6b17 	vmov	r6, r7, d7
 800c3ac:	e799      	b.n	800c2e2 <_strtod_l+0x992>
 800c3ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c3b2:	9b08      	ldr	r3, [sp, #32]
 800c3b4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1c1      	bne.n	800c340 <_strtod_l+0x9f0>
 800c3bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c3c0:	0d1b      	lsrs	r3, r3, #20
 800c3c2:	051b      	lsls	r3, r3, #20
 800c3c4:	429d      	cmp	r5, r3
 800c3c6:	d1bb      	bne.n	800c340 <_strtod_l+0x9f0>
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	f7f4 fc84 	bl	8000cd8 <__aeabi_d2lz>
 800c3d0:	f7f4 f8f4 	bl	80005bc <__aeabi_l2d>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4630      	mov	r0, r6
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f7f3 ff64 	bl	80002a8 <__aeabi_dsub>
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c3e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ee:	ea46 060a 	orr.w	r6, r6, sl
 800c3f2:	431e      	orrs	r6, r3
 800c3f4:	d06f      	beq.n	800c4d6 <_strtod_l+0xb86>
 800c3f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c430 <_strtod_l+0xae0>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	f7f4 fb7e 	bl	8000afc <__aeabi_dcmplt>
 800c400:	2800      	cmp	r0, #0
 800c402:	f47f accf 	bne.w	800bda4 <_strtod_l+0x454>
 800c406:	a30c      	add	r3, pc, #48	@ (adr r3, 800c438 <_strtod_l+0xae8>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c410:	f7f4 fb92 	bl	8000b38 <__aeabi_dcmpgt>
 800c414:	2800      	cmp	r0, #0
 800c416:	d093      	beq.n	800c340 <_strtod_l+0x9f0>
 800c418:	e4c4      	b.n	800bda4 <_strtod_l+0x454>
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w
 800c420:	00000000 	.word	0x00000000
 800c424:	bff00000 	.word	0xbff00000
 800c428:	00000000 	.word	0x00000000
 800c42c:	3ff00000 	.word	0x3ff00000
 800c430:	94a03595 	.word	0x94a03595
 800c434:	3fdfffff 	.word	0x3fdfffff
 800c438:	35afe535 	.word	0x35afe535
 800c43c:	3fe00000 	.word	0x3fe00000
 800c440:	000fffff 	.word	0x000fffff
 800c444:	7ff00000 	.word	0x7ff00000
 800c448:	7fefffff 	.word	0x7fefffff
 800c44c:	3ff00000 	.word	0x3ff00000
 800c450:	3fe00000 	.word	0x3fe00000
 800c454:	7fe00000 	.word	0x7fe00000
 800c458:	7c9fffff 	.word	0x7c9fffff
 800c45c:	9b08      	ldr	r3, [sp, #32]
 800c45e:	b323      	cbz	r3, 800c4aa <_strtod_l+0xb5a>
 800c460:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c464:	d821      	bhi.n	800c4aa <_strtod_l+0xb5a>
 800c466:	a328      	add	r3, pc, #160	@ (adr r3, 800c508 <_strtod_l+0xbb8>)
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	4630      	mov	r0, r6
 800c46e:	4639      	mov	r1, r7
 800c470:	f7f4 fb4e 	bl	8000b10 <__aeabi_dcmple>
 800c474:	b1a0      	cbz	r0, 800c4a0 <_strtod_l+0xb50>
 800c476:	4639      	mov	r1, r7
 800c478:	4630      	mov	r0, r6
 800c47a:	f7f4 fba5 	bl	8000bc8 <__aeabi_d2uiz>
 800c47e:	2801      	cmp	r0, #1
 800c480:	bf38      	it	cc
 800c482:	2001      	movcc	r0, #1
 800c484:	f7f4 f84e 	bl	8000524 <__aeabi_ui2d>
 800c488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c48a:	4606      	mov	r6, r0
 800c48c:	460f      	mov	r7, r1
 800c48e:	b9fb      	cbnz	r3, 800c4d0 <_strtod_l+0xb80>
 800c490:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c494:	9014      	str	r0, [sp, #80]	@ 0x50
 800c496:	9315      	str	r3, [sp, #84]	@ 0x54
 800c498:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c49c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c4a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c4a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c4a6:	1b5b      	subs	r3, r3, r5
 800c4a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c4ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c4b2:	f001 f9db 	bl	800d86c <__ulp>
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	ec53 2b10 	vmov	r2, r3, d0
 800c4bc:	4659      	mov	r1, fp
 800c4be:	f7f4 f8ab 	bl	8000618 <__aeabi_dmul>
 800c4c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c4c6:	f7f3 fef1 	bl	80002ac <__adddf3>
 800c4ca:	4682      	mov	sl, r0
 800c4cc:	468b      	mov	fp, r1
 800c4ce:	e770      	b.n	800c3b2 <_strtod_l+0xa62>
 800c4d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c4d4:	e7e0      	b.n	800c498 <_strtod_l+0xb48>
 800c4d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c510 <_strtod_l+0xbc0>)
 800c4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4dc:	f7f4 fb0e 	bl	8000afc <__aeabi_dcmplt>
 800c4e0:	e798      	b.n	800c414 <_strtod_l+0xac4>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c4e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c4ea:	6013      	str	r3, [r2, #0]
 800c4ec:	f7ff ba6d 	b.w	800b9ca <_strtod_l+0x7a>
 800c4f0:	2a65      	cmp	r2, #101	@ 0x65
 800c4f2:	f43f ab66 	beq.w	800bbc2 <_strtod_l+0x272>
 800c4f6:	2a45      	cmp	r2, #69	@ 0x45
 800c4f8:	f43f ab63 	beq.w	800bbc2 <_strtod_l+0x272>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	f7ff bb9e 	b.w	800bc3e <_strtod_l+0x2ee>
 800c502:	bf00      	nop
 800c504:	f3af 8000 	nop.w
 800c508:	ffc00000 	.word	0xffc00000
 800c50c:	41dfffff 	.word	0x41dfffff
 800c510:	94a03595 	.word	0x94a03595
 800c514:	3fcfffff 	.word	0x3fcfffff

0800c518 <strtod>:
 800c518:	460a      	mov	r2, r1
 800c51a:	4601      	mov	r1, r0
 800c51c:	4802      	ldr	r0, [pc, #8]	@ (800c528 <strtod+0x10>)
 800c51e:	4b03      	ldr	r3, [pc, #12]	@ (800c52c <strtod+0x14>)
 800c520:	6800      	ldr	r0, [r0, #0]
 800c522:	f7ff ba15 	b.w	800b950 <_strtod_l>
 800c526:	bf00      	nop
 800c528:	20000198 	.word	0x20000198
 800c52c:	2000002c 	.word	0x2000002c

0800c530 <std>:
 800c530:	2300      	movs	r3, #0
 800c532:	b510      	push	{r4, lr}
 800c534:	4604      	mov	r4, r0
 800c536:	e9c0 3300 	strd	r3, r3, [r0]
 800c53a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c53e:	6083      	str	r3, [r0, #8]
 800c540:	8181      	strh	r1, [r0, #12]
 800c542:	6643      	str	r3, [r0, #100]	@ 0x64
 800c544:	81c2      	strh	r2, [r0, #14]
 800c546:	6183      	str	r3, [r0, #24]
 800c548:	4619      	mov	r1, r3
 800c54a:	2208      	movs	r2, #8
 800c54c:	305c      	adds	r0, #92	@ 0x5c
 800c54e:	f000 f979 	bl	800c844 <memset>
 800c552:	4b0d      	ldr	r3, [pc, #52]	@ (800c588 <std+0x58>)
 800c554:	6263      	str	r3, [r4, #36]	@ 0x24
 800c556:	4b0d      	ldr	r3, [pc, #52]	@ (800c58c <std+0x5c>)
 800c558:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c55a:	4b0d      	ldr	r3, [pc, #52]	@ (800c590 <std+0x60>)
 800c55c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c55e:	4b0d      	ldr	r3, [pc, #52]	@ (800c594 <std+0x64>)
 800c560:	6323      	str	r3, [r4, #48]	@ 0x30
 800c562:	4b0d      	ldr	r3, [pc, #52]	@ (800c598 <std+0x68>)
 800c564:	6224      	str	r4, [r4, #32]
 800c566:	429c      	cmp	r4, r3
 800c568:	d006      	beq.n	800c578 <std+0x48>
 800c56a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c56e:	4294      	cmp	r4, r2
 800c570:	d002      	beq.n	800c578 <std+0x48>
 800c572:	33d0      	adds	r3, #208	@ 0xd0
 800c574:	429c      	cmp	r4, r3
 800c576:	d105      	bne.n	800c584 <std+0x54>
 800c578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c580:	f000 ba50 	b.w	800ca24 <__retarget_lock_init_recursive>
 800c584:	bd10      	pop	{r4, pc}
 800c586:	bf00      	nop
 800c588:	0800c749 	.word	0x0800c749
 800c58c:	0800c76f 	.word	0x0800c76f
 800c590:	0800c7a7 	.word	0x0800c7a7
 800c594:	0800c7cb 	.word	0x0800c7cb
 800c598:	20005114 	.word	0x20005114

0800c59c <stdio_exit_handler>:
 800c59c:	4a02      	ldr	r2, [pc, #8]	@ (800c5a8 <stdio_exit_handler+0xc>)
 800c59e:	4903      	ldr	r1, [pc, #12]	@ (800c5ac <stdio_exit_handler+0x10>)
 800c5a0:	4803      	ldr	r0, [pc, #12]	@ (800c5b0 <stdio_exit_handler+0x14>)
 800c5a2:	f000 b869 	b.w	800c678 <_fwalk_sglue>
 800c5a6:	bf00      	nop
 800c5a8:	20000020 	.word	0x20000020
 800c5ac:	0800e819 	.word	0x0800e819
 800c5b0:	2000019c 	.word	0x2000019c

0800c5b4 <cleanup_stdio>:
 800c5b4:	6841      	ldr	r1, [r0, #4]
 800c5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e8 <cleanup_stdio+0x34>)
 800c5b8:	4299      	cmp	r1, r3
 800c5ba:	b510      	push	{r4, lr}
 800c5bc:	4604      	mov	r4, r0
 800c5be:	d001      	beq.n	800c5c4 <cleanup_stdio+0x10>
 800c5c0:	f002 f92a 	bl	800e818 <_fflush_r>
 800c5c4:	68a1      	ldr	r1, [r4, #8]
 800c5c6:	4b09      	ldr	r3, [pc, #36]	@ (800c5ec <cleanup_stdio+0x38>)
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	d002      	beq.n	800c5d2 <cleanup_stdio+0x1e>
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f002 f923 	bl	800e818 <_fflush_r>
 800c5d2:	68e1      	ldr	r1, [r4, #12]
 800c5d4:	4b06      	ldr	r3, [pc, #24]	@ (800c5f0 <cleanup_stdio+0x3c>)
 800c5d6:	4299      	cmp	r1, r3
 800c5d8:	d004      	beq.n	800c5e4 <cleanup_stdio+0x30>
 800c5da:	4620      	mov	r0, r4
 800c5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e0:	f002 b91a 	b.w	800e818 <_fflush_r>
 800c5e4:	bd10      	pop	{r4, pc}
 800c5e6:	bf00      	nop
 800c5e8:	20005114 	.word	0x20005114
 800c5ec:	2000517c 	.word	0x2000517c
 800c5f0:	200051e4 	.word	0x200051e4

0800c5f4 <global_stdio_init.part.0>:
 800c5f4:	b510      	push	{r4, lr}
 800c5f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c624 <global_stdio_init.part.0+0x30>)
 800c5f8:	4c0b      	ldr	r4, [pc, #44]	@ (800c628 <global_stdio_init.part.0+0x34>)
 800c5fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c62c <global_stdio_init.part.0+0x38>)
 800c5fc:	601a      	str	r2, [r3, #0]
 800c5fe:	4620      	mov	r0, r4
 800c600:	2200      	movs	r2, #0
 800c602:	2104      	movs	r1, #4
 800c604:	f7ff ff94 	bl	800c530 <std>
 800c608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c60c:	2201      	movs	r2, #1
 800c60e:	2109      	movs	r1, #9
 800c610:	f7ff ff8e 	bl	800c530 <std>
 800c614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c618:	2202      	movs	r2, #2
 800c61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c61e:	2112      	movs	r1, #18
 800c620:	f7ff bf86 	b.w	800c530 <std>
 800c624:	2000524c 	.word	0x2000524c
 800c628:	20005114 	.word	0x20005114
 800c62c:	0800c59d 	.word	0x0800c59d

0800c630 <__sfp_lock_acquire>:
 800c630:	4801      	ldr	r0, [pc, #4]	@ (800c638 <__sfp_lock_acquire+0x8>)
 800c632:	f000 b9f8 	b.w	800ca26 <__retarget_lock_acquire_recursive>
 800c636:	bf00      	nop
 800c638:	20005255 	.word	0x20005255

0800c63c <__sfp_lock_release>:
 800c63c:	4801      	ldr	r0, [pc, #4]	@ (800c644 <__sfp_lock_release+0x8>)
 800c63e:	f000 b9f3 	b.w	800ca28 <__retarget_lock_release_recursive>
 800c642:	bf00      	nop
 800c644:	20005255 	.word	0x20005255

0800c648 <__sinit>:
 800c648:	b510      	push	{r4, lr}
 800c64a:	4604      	mov	r4, r0
 800c64c:	f7ff fff0 	bl	800c630 <__sfp_lock_acquire>
 800c650:	6a23      	ldr	r3, [r4, #32]
 800c652:	b11b      	cbz	r3, 800c65c <__sinit+0x14>
 800c654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c658:	f7ff bff0 	b.w	800c63c <__sfp_lock_release>
 800c65c:	4b04      	ldr	r3, [pc, #16]	@ (800c670 <__sinit+0x28>)
 800c65e:	6223      	str	r3, [r4, #32]
 800c660:	4b04      	ldr	r3, [pc, #16]	@ (800c674 <__sinit+0x2c>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1f5      	bne.n	800c654 <__sinit+0xc>
 800c668:	f7ff ffc4 	bl	800c5f4 <global_stdio_init.part.0>
 800c66c:	e7f2      	b.n	800c654 <__sinit+0xc>
 800c66e:	bf00      	nop
 800c670:	0800c5b5 	.word	0x0800c5b5
 800c674:	2000524c 	.word	0x2000524c

0800c678 <_fwalk_sglue>:
 800c678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c67c:	4607      	mov	r7, r0
 800c67e:	4688      	mov	r8, r1
 800c680:	4614      	mov	r4, r2
 800c682:	2600      	movs	r6, #0
 800c684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c688:	f1b9 0901 	subs.w	r9, r9, #1
 800c68c:	d505      	bpl.n	800c69a <_fwalk_sglue+0x22>
 800c68e:	6824      	ldr	r4, [r4, #0]
 800c690:	2c00      	cmp	r4, #0
 800c692:	d1f7      	bne.n	800c684 <_fwalk_sglue+0xc>
 800c694:	4630      	mov	r0, r6
 800c696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69a:	89ab      	ldrh	r3, [r5, #12]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d907      	bls.n	800c6b0 <_fwalk_sglue+0x38>
 800c6a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	d003      	beq.n	800c6b0 <_fwalk_sglue+0x38>
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	47c0      	blx	r8
 800c6ae:	4306      	orrs	r6, r0
 800c6b0:	3568      	adds	r5, #104	@ 0x68
 800c6b2:	e7e9      	b.n	800c688 <_fwalk_sglue+0x10>

0800c6b4 <siprintf>:
 800c6b4:	b40e      	push	{r1, r2, r3}
 800c6b6:	b500      	push	{lr}
 800c6b8:	b09c      	sub	sp, #112	@ 0x70
 800c6ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800c6bc:	9002      	str	r0, [sp, #8]
 800c6be:	9006      	str	r0, [sp, #24]
 800c6c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c6c4:	4809      	ldr	r0, [pc, #36]	@ (800c6ec <siprintf+0x38>)
 800c6c6:	9107      	str	r1, [sp, #28]
 800c6c8:	9104      	str	r1, [sp, #16]
 800c6ca:	4909      	ldr	r1, [pc, #36]	@ (800c6f0 <siprintf+0x3c>)
 800c6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6d0:	9105      	str	r1, [sp, #20]
 800c6d2:	6800      	ldr	r0, [r0, #0]
 800c6d4:	9301      	str	r3, [sp, #4]
 800c6d6:	a902      	add	r1, sp, #8
 800c6d8:	f001 fa76 	bl	800dbc8 <_svfiprintf_r>
 800c6dc:	9b02      	ldr	r3, [sp, #8]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	701a      	strb	r2, [r3, #0]
 800c6e2:	b01c      	add	sp, #112	@ 0x70
 800c6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6e8:	b003      	add	sp, #12
 800c6ea:	4770      	bx	lr
 800c6ec:	20000198 	.word	0x20000198
 800c6f0:	ffff0208 	.word	0xffff0208

0800c6f4 <siscanf>:
 800c6f4:	b40e      	push	{r1, r2, r3}
 800c6f6:	b530      	push	{r4, r5, lr}
 800c6f8:	b09c      	sub	sp, #112	@ 0x70
 800c6fa:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c6fc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c700:	f854 5b04 	ldr.w	r5, [r4], #4
 800c704:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c708:	9002      	str	r0, [sp, #8]
 800c70a:	9006      	str	r0, [sp, #24]
 800c70c:	f7f3 fd6a 	bl	80001e4 <strlen>
 800c710:	4b0b      	ldr	r3, [pc, #44]	@ (800c740 <siscanf+0x4c>)
 800c712:	9003      	str	r0, [sp, #12]
 800c714:	9007      	str	r0, [sp, #28]
 800c716:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c718:	480a      	ldr	r0, [pc, #40]	@ (800c744 <siscanf+0x50>)
 800c71a:	9401      	str	r4, [sp, #4]
 800c71c:	2300      	movs	r3, #0
 800c71e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c720:	9314      	str	r3, [sp, #80]	@ 0x50
 800c722:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c726:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c72a:	462a      	mov	r2, r5
 800c72c:	4623      	mov	r3, r4
 800c72e:	a902      	add	r1, sp, #8
 800c730:	6800      	ldr	r0, [r0, #0]
 800c732:	f001 fb9d 	bl	800de70 <__ssvfiscanf_r>
 800c736:	b01c      	add	sp, #112	@ 0x70
 800c738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c73c:	b003      	add	sp, #12
 800c73e:	4770      	bx	lr
 800c740:	0800c76b 	.word	0x0800c76b
 800c744:	20000198 	.word	0x20000198

0800c748 <__sread>:
 800c748:	b510      	push	{r4, lr}
 800c74a:	460c      	mov	r4, r1
 800c74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c750:	f000 f90a 	bl	800c968 <_read_r>
 800c754:	2800      	cmp	r0, #0
 800c756:	bfab      	itete	ge
 800c758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c75a:	89a3      	ldrhlt	r3, [r4, #12]
 800c75c:	181b      	addge	r3, r3, r0
 800c75e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c762:	bfac      	ite	ge
 800c764:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c766:	81a3      	strhlt	r3, [r4, #12]
 800c768:	bd10      	pop	{r4, pc}

0800c76a <__seofread>:
 800c76a:	2000      	movs	r0, #0
 800c76c:	4770      	bx	lr

0800c76e <__swrite>:
 800c76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c772:	461f      	mov	r7, r3
 800c774:	898b      	ldrh	r3, [r1, #12]
 800c776:	05db      	lsls	r3, r3, #23
 800c778:	4605      	mov	r5, r0
 800c77a:	460c      	mov	r4, r1
 800c77c:	4616      	mov	r6, r2
 800c77e:	d505      	bpl.n	800c78c <__swrite+0x1e>
 800c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c784:	2302      	movs	r3, #2
 800c786:	2200      	movs	r2, #0
 800c788:	f000 f8dc 	bl	800c944 <_lseek_r>
 800c78c:	89a3      	ldrh	r3, [r4, #12]
 800c78e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c796:	81a3      	strh	r3, [r4, #12]
 800c798:	4632      	mov	r2, r6
 800c79a:	463b      	mov	r3, r7
 800c79c:	4628      	mov	r0, r5
 800c79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	f000 b903 	b.w	800c9ac <_write_r>

0800c7a6 <__sseek>:
 800c7a6:	b510      	push	{r4, lr}
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ae:	f000 f8c9 	bl	800c944 <_lseek_r>
 800c7b2:	1c43      	adds	r3, r0, #1
 800c7b4:	89a3      	ldrh	r3, [r4, #12]
 800c7b6:	bf15      	itete	ne
 800c7b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7c2:	81a3      	strheq	r3, [r4, #12]
 800c7c4:	bf18      	it	ne
 800c7c6:	81a3      	strhne	r3, [r4, #12]
 800c7c8:	bd10      	pop	{r4, pc}

0800c7ca <__sclose>:
 800c7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ce:	f000 b853 	b.w	800c878 <_close_r>

0800c7d2 <_vsniprintf_r>:
 800c7d2:	b530      	push	{r4, r5, lr}
 800c7d4:	4614      	mov	r4, r2
 800c7d6:	2c00      	cmp	r4, #0
 800c7d8:	b09b      	sub	sp, #108	@ 0x6c
 800c7da:	4605      	mov	r5, r0
 800c7dc:	461a      	mov	r2, r3
 800c7de:	da05      	bge.n	800c7ec <_vsniprintf_r+0x1a>
 800c7e0:	238b      	movs	r3, #139	@ 0x8b
 800c7e2:	6003      	str	r3, [r0, #0]
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e8:	b01b      	add	sp, #108	@ 0x6c
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c7f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c7f4:	bf14      	ite	ne
 800c7f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c7fa:	4623      	moveq	r3, r4
 800c7fc:	9302      	str	r3, [sp, #8]
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c804:	9100      	str	r1, [sp, #0]
 800c806:	9104      	str	r1, [sp, #16]
 800c808:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c80c:	4669      	mov	r1, sp
 800c80e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c810:	f001 f9da 	bl	800dbc8 <_svfiprintf_r>
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	bfbc      	itt	lt
 800c818:	238b      	movlt	r3, #139	@ 0x8b
 800c81a:	602b      	strlt	r3, [r5, #0]
 800c81c:	2c00      	cmp	r4, #0
 800c81e:	d0e3      	beq.n	800c7e8 <_vsniprintf_r+0x16>
 800c820:	9b00      	ldr	r3, [sp, #0]
 800c822:	2200      	movs	r2, #0
 800c824:	701a      	strb	r2, [r3, #0]
 800c826:	e7df      	b.n	800c7e8 <_vsniprintf_r+0x16>

0800c828 <vsniprintf>:
 800c828:	b507      	push	{r0, r1, r2, lr}
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	4613      	mov	r3, r2
 800c82e:	460a      	mov	r2, r1
 800c830:	4601      	mov	r1, r0
 800c832:	4803      	ldr	r0, [pc, #12]	@ (800c840 <vsniprintf+0x18>)
 800c834:	6800      	ldr	r0, [r0, #0]
 800c836:	f7ff ffcc 	bl	800c7d2 <_vsniprintf_r>
 800c83a:	b003      	add	sp, #12
 800c83c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c840:	20000198 	.word	0x20000198

0800c844 <memset>:
 800c844:	4402      	add	r2, r0
 800c846:	4603      	mov	r3, r0
 800c848:	4293      	cmp	r3, r2
 800c84a:	d100      	bne.n	800c84e <memset+0xa>
 800c84c:	4770      	bx	lr
 800c84e:	f803 1b01 	strb.w	r1, [r3], #1
 800c852:	e7f9      	b.n	800c848 <memset+0x4>

0800c854 <strncmp>:
 800c854:	b510      	push	{r4, lr}
 800c856:	b16a      	cbz	r2, 800c874 <strncmp+0x20>
 800c858:	3901      	subs	r1, #1
 800c85a:	1884      	adds	r4, r0, r2
 800c85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c860:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c864:	429a      	cmp	r2, r3
 800c866:	d103      	bne.n	800c870 <strncmp+0x1c>
 800c868:	42a0      	cmp	r0, r4
 800c86a:	d001      	beq.n	800c870 <strncmp+0x1c>
 800c86c:	2a00      	cmp	r2, #0
 800c86e:	d1f5      	bne.n	800c85c <strncmp+0x8>
 800c870:	1ad0      	subs	r0, r2, r3
 800c872:	bd10      	pop	{r4, pc}
 800c874:	4610      	mov	r0, r2
 800c876:	e7fc      	b.n	800c872 <strncmp+0x1e>

0800c878 <_close_r>:
 800c878:	b538      	push	{r3, r4, r5, lr}
 800c87a:	4d06      	ldr	r5, [pc, #24]	@ (800c894 <_close_r+0x1c>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	4604      	mov	r4, r0
 800c880:	4608      	mov	r0, r1
 800c882:	602b      	str	r3, [r5, #0]
 800c884:	f7f8 f96a 	bl	8004b5c <_close>
 800c888:	1c43      	adds	r3, r0, #1
 800c88a:	d102      	bne.n	800c892 <_close_r+0x1a>
 800c88c:	682b      	ldr	r3, [r5, #0]
 800c88e:	b103      	cbz	r3, 800c892 <_close_r+0x1a>
 800c890:	6023      	str	r3, [r4, #0]
 800c892:	bd38      	pop	{r3, r4, r5, pc}
 800c894:	20005250 	.word	0x20005250

0800c898 <_reclaim_reent>:
 800c898:	4b29      	ldr	r3, [pc, #164]	@ (800c940 <_reclaim_reent+0xa8>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4283      	cmp	r3, r0
 800c89e:	b570      	push	{r4, r5, r6, lr}
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	d04b      	beq.n	800c93c <_reclaim_reent+0xa4>
 800c8a4:	69c3      	ldr	r3, [r0, #28]
 800c8a6:	b1ab      	cbz	r3, 800c8d4 <_reclaim_reent+0x3c>
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	b16b      	cbz	r3, 800c8c8 <_reclaim_reent+0x30>
 800c8ac:	2500      	movs	r5, #0
 800c8ae:	69e3      	ldr	r3, [r4, #28]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	5959      	ldr	r1, [r3, r5]
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d13b      	bne.n	800c930 <_reclaim_reent+0x98>
 800c8b8:	3504      	adds	r5, #4
 800c8ba:	2d80      	cmp	r5, #128	@ 0x80
 800c8bc:	d1f7      	bne.n	800c8ae <_reclaim_reent+0x16>
 800c8be:	69e3      	ldr	r3, [r4, #28]
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	68d9      	ldr	r1, [r3, #12]
 800c8c4:	f000 f8c8 	bl	800ca58 <_free_r>
 800c8c8:	69e3      	ldr	r3, [r4, #28]
 800c8ca:	6819      	ldr	r1, [r3, #0]
 800c8cc:	b111      	cbz	r1, 800c8d4 <_reclaim_reent+0x3c>
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 f8c2 	bl	800ca58 <_free_r>
 800c8d4:	6961      	ldr	r1, [r4, #20]
 800c8d6:	b111      	cbz	r1, 800c8de <_reclaim_reent+0x46>
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 f8bd 	bl	800ca58 <_free_r>
 800c8de:	69e1      	ldr	r1, [r4, #28]
 800c8e0:	b111      	cbz	r1, 800c8e8 <_reclaim_reent+0x50>
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f000 f8b8 	bl	800ca58 <_free_r>
 800c8e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c8ea:	b111      	cbz	r1, 800c8f2 <_reclaim_reent+0x5a>
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f000 f8b3 	bl	800ca58 <_free_r>
 800c8f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8f4:	b111      	cbz	r1, 800c8fc <_reclaim_reent+0x64>
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 f8ae 	bl	800ca58 <_free_r>
 800c8fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c8fe:	b111      	cbz	r1, 800c906 <_reclaim_reent+0x6e>
 800c900:	4620      	mov	r0, r4
 800c902:	f000 f8a9 	bl	800ca58 <_free_r>
 800c906:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c908:	b111      	cbz	r1, 800c910 <_reclaim_reent+0x78>
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 f8a4 	bl	800ca58 <_free_r>
 800c910:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c912:	b111      	cbz	r1, 800c91a <_reclaim_reent+0x82>
 800c914:	4620      	mov	r0, r4
 800c916:	f000 f89f 	bl	800ca58 <_free_r>
 800c91a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c91c:	b111      	cbz	r1, 800c924 <_reclaim_reent+0x8c>
 800c91e:	4620      	mov	r0, r4
 800c920:	f000 f89a 	bl	800ca58 <_free_r>
 800c924:	6a23      	ldr	r3, [r4, #32]
 800c926:	b14b      	cbz	r3, 800c93c <_reclaim_reent+0xa4>
 800c928:	4620      	mov	r0, r4
 800c92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c92e:	4718      	bx	r3
 800c930:	680e      	ldr	r6, [r1, #0]
 800c932:	4620      	mov	r0, r4
 800c934:	f000 f890 	bl	800ca58 <_free_r>
 800c938:	4631      	mov	r1, r6
 800c93a:	e7bb      	b.n	800c8b4 <_reclaim_reent+0x1c>
 800c93c:	bd70      	pop	{r4, r5, r6, pc}
 800c93e:	bf00      	nop
 800c940:	20000198 	.word	0x20000198

0800c944 <_lseek_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4d07      	ldr	r5, [pc, #28]	@ (800c964 <_lseek_r+0x20>)
 800c948:	4604      	mov	r4, r0
 800c94a:	4608      	mov	r0, r1
 800c94c:	4611      	mov	r1, r2
 800c94e:	2200      	movs	r2, #0
 800c950:	602a      	str	r2, [r5, #0]
 800c952:	461a      	mov	r2, r3
 800c954:	f7f8 f929 	bl	8004baa <_lseek>
 800c958:	1c43      	adds	r3, r0, #1
 800c95a:	d102      	bne.n	800c962 <_lseek_r+0x1e>
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	b103      	cbz	r3, 800c962 <_lseek_r+0x1e>
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	bd38      	pop	{r3, r4, r5, pc}
 800c964:	20005250 	.word	0x20005250

0800c968 <_read_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4d07      	ldr	r5, [pc, #28]	@ (800c988 <_read_r+0x20>)
 800c96c:	4604      	mov	r4, r0
 800c96e:	4608      	mov	r0, r1
 800c970:	4611      	mov	r1, r2
 800c972:	2200      	movs	r2, #0
 800c974:	602a      	str	r2, [r5, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	f7f8 f8b7 	bl	8004aea <_read>
 800c97c:	1c43      	adds	r3, r0, #1
 800c97e:	d102      	bne.n	800c986 <_read_r+0x1e>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	b103      	cbz	r3, 800c986 <_read_r+0x1e>
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	bd38      	pop	{r3, r4, r5, pc}
 800c988:	20005250 	.word	0x20005250

0800c98c <_sbrk_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4d06      	ldr	r5, [pc, #24]	@ (800c9a8 <_sbrk_r+0x1c>)
 800c990:	2300      	movs	r3, #0
 800c992:	4604      	mov	r4, r0
 800c994:	4608      	mov	r0, r1
 800c996:	602b      	str	r3, [r5, #0]
 800c998:	f7f8 f914 	bl	8004bc4 <_sbrk>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d102      	bne.n	800c9a6 <_sbrk_r+0x1a>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	b103      	cbz	r3, 800c9a6 <_sbrk_r+0x1a>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	20005250 	.word	0x20005250

0800c9ac <_write_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4d07      	ldr	r5, [pc, #28]	@ (800c9cc <_write_r+0x20>)
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	4608      	mov	r0, r1
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	602a      	str	r2, [r5, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	f7f8 f8b2 	bl	8004b24 <_write>
 800c9c0:	1c43      	adds	r3, r0, #1
 800c9c2:	d102      	bne.n	800c9ca <_write_r+0x1e>
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	b103      	cbz	r3, 800c9ca <_write_r+0x1e>
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	20005250 	.word	0x20005250

0800c9d0 <__errno>:
 800c9d0:	4b01      	ldr	r3, [pc, #4]	@ (800c9d8 <__errno+0x8>)
 800c9d2:	6818      	ldr	r0, [r3, #0]
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	20000198 	.word	0x20000198

0800c9dc <__libc_init_array>:
 800c9dc:	b570      	push	{r4, r5, r6, lr}
 800c9de:	4d0d      	ldr	r5, [pc, #52]	@ (800ca14 <__libc_init_array+0x38>)
 800c9e0:	4c0d      	ldr	r4, [pc, #52]	@ (800ca18 <__libc_init_array+0x3c>)
 800c9e2:	1b64      	subs	r4, r4, r5
 800c9e4:	10a4      	asrs	r4, r4, #2
 800c9e6:	2600      	movs	r6, #0
 800c9e8:	42a6      	cmp	r6, r4
 800c9ea:	d109      	bne.n	800ca00 <__libc_init_array+0x24>
 800c9ec:	4d0b      	ldr	r5, [pc, #44]	@ (800ca1c <__libc_init_array+0x40>)
 800c9ee:	4c0c      	ldr	r4, [pc, #48]	@ (800ca20 <__libc_init_array+0x44>)
 800c9f0:	f002 fb9c 	bl	800f12c <_init>
 800c9f4:	1b64      	subs	r4, r4, r5
 800c9f6:	10a4      	asrs	r4, r4, #2
 800c9f8:	2600      	movs	r6, #0
 800c9fa:	42a6      	cmp	r6, r4
 800c9fc:	d105      	bne.n	800ca0a <__libc_init_array+0x2e>
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca04:	4798      	blx	r3
 800ca06:	3601      	adds	r6, #1
 800ca08:	e7ee      	b.n	800c9e8 <__libc_init_array+0xc>
 800ca0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca0e:	4798      	blx	r3
 800ca10:	3601      	adds	r6, #1
 800ca12:	e7f2      	b.n	800c9fa <__libc_init_array+0x1e>
 800ca14:	0800f74c 	.word	0x0800f74c
 800ca18:	0800f74c 	.word	0x0800f74c
 800ca1c:	0800f74c 	.word	0x0800f74c
 800ca20:	0800f750 	.word	0x0800f750

0800ca24 <__retarget_lock_init_recursive>:
 800ca24:	4770      	bx	lr

0800ca26 <__retarget_lock_acquire_recursive>:
 800ca26:	4770      	bx	lr

0800ca28 <__retarget_lock_release_recursive>:
 800ca28:	4770      	bx	lr

0800ca2a <memcpy>:
 800ca2a:	440a      	add	r2, r1
 800ca2c:	4291      	cmp	r1, r2
 800ca2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca32:	d100      	bne.n	800ca36 <memcpy+0xc>
 800ca34:	4770      	bx	lr
 800ca36:	b510      	push	{r4, lr}
 800ca38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca40:	4291      	cmp	r1, r2
 800ca42:	d1f9      	bne.n	800ca38 <memcpy+0xe>
 800ca44:	bd10      	pop	{r4, pc}
	...

0800ca48 <nan>:
 800ca48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca50 <nan+0x8>
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	00000000 	.word	0x00000000
 800ca54:	7ff80000 	.word	0x7ff80000

0800ca58 <_free_r>:
 800ca58:	b538      	push	{r3, r4, r5, lr}
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	d041      	beq.n	800cae4 <_free_r+0x8c>
 800ca60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca64:	1f0c      	subs	r4, r1, #4
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	bfb8      	it	lt
 800ca6a:	18e4      	addlt	r4, r4, r3
 800ca6c:	f7fe ff0e 	bl	800b88c <__malloc_lock>
 800ca70:	4a1d      	ldr	r2, [pc, #116]	@ (800cae8 <_free_r+0x90>)
 800ca72:	6813      	ldr	r3, [r2, #0]
 800ca74:	b933      	cbnz	r3, 800ca84 <_free_r+0x2c>
 800ca76:	6063      	str	r3, [r4, #4]
 800ca78:	6014      	str	r4, [r2, #0]
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca80:	f7fe bf0a 	b.w	800b898 <__malloc_unlock>
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	d908      	bls.n	800ca9a <_free_r+0x42>
 800ca88:	6820      	ldr	r0, [r4, #0]
 800ca8a:	1821      	adds	r1, r4, r0
 800ca8c:	428b      	cmp	r3, r1
 800ca8e:	bf01      	itttt	eq
 800ca90:	6819      	ldreq	r1, [r3, #0]
 800ca92:	685b      	ldreq	r3, [r3, #4]
 800ca94:	1809      	addeq	r1, r1, r0
 800ca96:	6021      	streq	r1, [r4, #0]
 800ca98:	e7ed      	b.n	800ca76 <_free_r+0x1e>
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	b10b      	cbz	r3, 800caa4 <_free_r+0x4c>
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d9fa      	bls.n	800ca9a <_free_r+0x42>
 800caa4:	6811      	ldr	r1, [r2, #0]
 800caa6:	1850      	adds	r0, r2, r1
 800caa8:	42a0      	cmp	r0, r4
 800caaa:	d10b      	bne.n	800cac4 <_free_r+0x6c>
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	4401      	add	r1, r0
 800cab0:	1850      	adds	r0, r2, r1
 800cab2:	4283      	cmp	r3, r0
 800cab4:	6011      	str	r1, [r2, #0]
 800cab6:	d1e0      	bne.n	800ca7a <_free_r+0x22>
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	6053      	str	r3, [r2, #4]
 800cabe:	4408      	add	r0, r1
 800cac0:	6010      	str	r0, [r2, #0]
 800cac2:	e7da      	b.n	800ca7a <_free_r+0x22>
 800cac4:	d902      	bls.n	800cacc <_free_r+0x74>
 800cac6:	230c      	movs	r3, #12
 800cac8:	602b      	str	r3, [r5, #0]
 800caca:	e7d6      	b.n	800ca7a <_free_r+0x22>
 800cacc:	6820      	ldr	r0, [r4, #0]
 800cace:	1821      	adds	r1, r4, r0
 800cad0:	428b      	cmp	r3, r1
 800cad2:	bf04      	itt	eq
 800cad4:	6819      	ldreq	r1, [r3, #0]
 800cad6:	685b      	ldreq	r3, [r3, #4]
 800cad8:	6063      	str	r3, [r4, #4]
 800cada:	bf04      	itt	eq
 800cadc:	1809      	addeq	r1, r1, r0
 800cade:	6021      	streq	r1, [r4, #0]
 800cae0:	6054      	str	r4, [r2, #4]
 800cae2:	e7ca      	b.n	800ca7a <_free_r+0x22>
 800cae4:	bd38      	pop	{r3, r4, r5, pc}
 800cae6:	bf00      	nop
 800cae8:	20005110 	.word	0x20005110

0800caec <rshift>:
 800caec:	6903      	ldr	r3, [r0, #16]
 800caee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800caf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800caf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cafa:	f100 0414 	add.w	r4, r0, #20
 800cafe:	dd45      	ble.n	800cb8c <rshift+0xa0>
 800cb00:	f011 011f 	ands.w	r1, r1, #31
 800cb04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb0c:	d10c      	bne.n	800cb28 <rshift+0x3c>
 800cb0e:	f100 0710 	add.w	r7, r0, #16
 800cb12:	4629      	mov	r1, r5
 800cb14:	42b1      	cmp	r1, r6
 800cb16:	d334      	bcc.n	800cb82 <rshift+0x96>
 800cb18:	1a9b      	subs	r3, r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	1eea      	subs	r2, r5, #3
 800cb1e:	4296      	cmp	r6, r2
 800cb20:	bf38      	it	cc
 800cb22:	2300      	movcc	r3, #0
 800cb24:	4423      	add	r3, r4
 800cb26:	e015      	b.n	800cb54 <rshift+0x68>
 800cb28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb2c:	f1c1 0820 	rsb	r8, r1, #32
 800cb30:	40cf      	lsrs	r7, r1
 800cb32:	f105 0e04 	add.w	lr, r5, #4
 800cb36:	46a1      	mov	r9, r4
 800cb38:	4576      	cmp	r6, lr
 800cb3a:	46f4      	mov	ip, lr
 800cb3c:	d815      	bhi.n	800cb6a <rshift+0x7e>
 800cb3e:	1a9a      	subs	r2, r3, r2
 800cb40:	0092      	lsls	r2, r2, #2
 800cb42:	3a04      	subs	r2, #4
 800cb44:	3501      	adds	r5, #1
 800cb46:	42ae      	cmp	r6, r5
 800cb48:	bf38      	it	cc
 800cb4a:	2200      	movcc	r2, #0
 800cb4c:	18a3      	adds	r3, r4, r2
 800cb4e:	50a7      	str	r7, [r4, r2]
 800cb50:	b107      	cbz	r7, 800cb54 <rshift+0x68>
 800cb52:	3304      	adds	r3, #4
 800cb54:	1b1a      	subs	r2, r3, r4
 800cb56:	42a3      	cmp	r3, r4
 800cb58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb5c:	bf08      	it	eq
 800cb5e:	2300      	moveq	r3, #0
 800cb60:	6102      	str	r2, [r0, #16]
 800cb62:	bf08      	it	eq
 800cb64:	6143      	streq	r3, [r0, #20]
 800cb66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb6a:	f8dc c000 	ldr.w	ip, [ip]
 800cb6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb72:	ea4c 0707 	orr.w	r7, ip, r7
 800cb76:	f849 7b04 	str.w	r7, [r9], #4
 800cb7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb7e:	40cf      	lsrs	r7, r1
 800cb80:	e7da      	b.n	800cb38 <rshift+0x4c>
 800cb82:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb86:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb8a:	e7c3      	b.n	800cb14 <rshift+0x28>
 800cb8c:	4623      	mov	r3, r4
 800cb8e:	e7e1      	b.n	800cb54 <rshift+0x68>

0800cb90 <__hexdig_fun>:
 800cb90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cb94:	2b09      	cmp	r3, #9
 800cb96:	d802      	bhi.n	800cb9e <__hexdig_fun+0xe>
 800cb98:	3820      	subs	r0, #32
 800cb9a:	b2c0      	uxtb	r0, r0
 800cb9c:	4770      	bx	lr
 800cb9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cba2:	2b05      	cmp	r3, #5
 800cba4:	d801      	bhi.n	800cbaa <__hexdig_fun+0x1a>
 800cba6:	3847      	subs	r0, #71	@ 0x47
 800cba8:	e7f7      	b.n	800cb9a <__hexdig_fun+0xa>
 800cbaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cbae:	2b05      	cmp	r3, #5
 800cbb0:	d801      	bhi.n	800cbb6 <__hexdig_fun+0x26>
 800cbb2:	3827      	subs	r0, #39	@ 0x27
 800cbb4:	e7f1      	b.n	800cb9a <__hexdig_fun+0xa>
 800cbb6:	2000      	movs	r0, #0
 800cbb8:	4770      	bx	lr
	...

0800cbbc <__gethex>:
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	b085      	sub	sp, #20
 800cbc2:	468a      	mov	sl, r1
 800cbc4:	9302      	str	r3, [sp, #8]
 800cbc6:	680b      	ldr	r3, [r1, #0]
 800cbc8:	9001      	str	r0, [sp, #4]
 800cbca:	4690      	mov	r8, r2
 800cbcc:	1c9c      	adds	r4, r3, #2
 800cbce:	46a1      	mov	r9, r4
 800cbd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cbd4:	2830      	cmp	r0, #48	@ 0x30
 800cbd6:	d0fa      	beq.n	800cbce <__gethex+0x12>
 800cbd8:	eba9 0303 	sub.w	r3, r9, r3
 800cbdc:	f1a3 0b02 	sub.w	fp, r3, #2
 800cbe0:	f7ff ffd6 	bl	800cb90 <__hexdig_fun>
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d168      	bne.n	800ccbc <__gethex+0x100>
 800cbea:	49a0      	ldr	r1, [pc, #640]	@ (800ce6c <__gethex+0x2b0>)
 800cbec:	2201      	movs	r2, #1
 800cbee:	4648      	mov	r0, r9
 800cbf0:	f7ff fe30 	bl	800c854 <strncmp>
 800cbf4:	4607      	mov	r7, r0
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d167      	bne.n	800ccca <__gethex+0x10e>
 800cbfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cbfe:	4626      	mov	r6, r4
 800cc00:	f7ff ffc6 	bl	800cb90 <__hexdig_fun>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d062      	beq.n	800ccce <__gethex+0x112>
 800cc08:	4623      	mov	r3, r4
 800cc0a:	7818      	ldrb	r0, [r3, #0]
 800cc0c:	2830      	cmp	r0, #48	@ 0x30
 800cc0e:	4699      	mov	r9, r3
 800cc10:	f103 0301 	add.w	r3, r3, #1
 800cc14:	d0f9      	beq.n	800cc0a <__gethex+0x4e>
 800cc16:	f7ff ffbb 	bl	800cb90 <__hexdig_fun>
 800cc1a:	fab0 f580 	clz	r5, r0
 800cc1e:	096d      	lsrs	r5, r5, #5
 800cc20:	f04f 0b01 	mov.w	fp, #1
 800cc24:	464a      	mov	r2, r9
 800cc26:	4616      	mov	r6, r2
 800cc28:	3201      	adds	r2, #1
 800cc2a:	7830      	ldrb	r0, [r6, #0]
 800cc2c:	f7ff ffb0 	bl	800cb90 <__hexdig_fun>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d1f8      	bne.n	800cc26 <__gethex+0x6a>
 800cc34:	498d      	ldr	r1, [pc, #564]	@ (800ce6c <__gethex+0x2b0>)
 800cc36:	2201      	movs	r2, #1
 800cc38:	4630      	mov	r0, r6
 800cc3a:	f7ff fe0b 	bl	800c854 <strncmp>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d13f      	bne.n	800ccc2 <__gethex+0x106>
 800cc42:	b944      	cbnz	r4, 800cc56 <__gethex+0x9a>
 800cc44:	1c74      	adds	r4, r6, #1
 800cc46:	4622      	mov	r2, r4
 800cc48:	4616      	mov	r6, r2
 800cc4a:	3201      	adds	r2, #1
 800cc4c:	7830      	ldrb	r0, [r6, #0]
 800cc4e:	f7ff ff9f 	bl	800cb90 <__hexdig_fun>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d1f8      	bne.n	800cc48 <__gethex+0x8c>
 800cc56:	1ba4      	subs	r4, r4, r6
 800cc58:	00a7      	lsls	r7, r4, #2
 800cc5a:	7833      	ldrb	r3, [r6, #0]
 800cc5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cc60:	2b50      	cmp	r3, #80	@ 0x50
 800cc62:	d13e      	bne.n	800cce2 <__gethex+0x126>
 800cc64:	7873      	ldrb	r3, [r6, #1]
 800cc66:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc68:	d033      	beq.n	800ccd2 <__gethex+0x116>
 800cc6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cc6c:	d034      	beq.n	800ccd8 <__gethex+0x11c>
 800cc6e:	1c71      	adds	r1, r6, #1
 800cc70:	2400      	movs	r4, #0
 800cc72:	7808      	ldrb	r0, [r1, #0]
 800cc74:	f7ff ff8c 	bl	800cb90 <__hexdig_fun>
 800cc78:	1e43      	subs	r3, r0, #1
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	2b18      	cmp	r3, #24
 800cc7e:	d830      	bhi.n	800cce2 <__gethex+0x126>
 800cc80:	f1a0 0210 	sub.w	r2, r0, #16
 800cc84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc88:	f7ff ff82 	bl	800cb90 <__hexdig_fun>
 800cc8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cc90:	fa5f fc8c 	uxtb.w	ip, ip
 800cc94:	f1bc 0f18 	cmp.w	ip, #24
 800cc98:	f04f 030a 	mov.w	r3, #10
 800cc9c:	d91e      	bls.n	800ccdc <__gethex+0x120>
 800cc9e:	b104      	cbz	r4, 800cca2 <__gethex+0xe6>
 800cca0:	4252      	negs	r2, r2
 800cca2:	4417      	add	r7, r2
 800cca4:	f8ca 1000 	str.w	r1, [sl]
 800cca8:	b1ed      	cbz	r5, 800cce6 <__gethex+0x12a>
 800ccaa:	f1bb 0f00 	cmp.w	fp, #0
 800ccae:	bf0c      	ite	eq
 800ccb0:	2506      	moveq	r5, #6
 800ccb2:	2500      	movne	r5, #0
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	b005      	add	sp, #20
 800ccb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccbc:	2500      	movs	r5, #0
 800ccbe:	462c      	mov	r4, r5
 800ccc0:	e7b0      	b.n	800cc24 <__gethex+0x68>
 800ccc2:	2c00      	cmp	r4, #0
 800ccc4:	d1c7      	bne.n	800cc56 <__gethex+0x9a>
 800ccc6:	4627      	mov	r7, r4
 800ccc8:	e7c7      	b.n	800cc5a <__gethex+0x9e>
 800ccca:	464e      	mov	r6, r9
 800cccc:	462f      	mov	r7, r5
 800ccce:	2501      	movs	r5, #1
 800ccd0:	e7c3      	b.n	800cc5a <__gethex+0x9e>
 800ccd2:	2400      	movs	r4, #0
 800ccd4:	1cb1      	adds	r1, r6, #2
 800ccd6:	e7cc      	b.n	800cc72 <__gethex+0xb6>
 800ccd8:	2401      	movs	r4, #1
 800ccda:	e7fb      	b.n	800ccd4 <__gethex+0x118>
 800ccdc:	fb03 0002 	mla	r0, r3, r2, r0
 800cce0:	e7ce      	b.n	800cc80 <__gethex+0xc4>
 800cce2:	4631      	mov	r1, r6
 800cce4:	e7de      	b.n	800cca4 <__gethex+0xe8>
 800cce6:	eba6 0309 	sub.w	r3, r6, r9
 800ccea:	3b01      	subs	r3, #1
 800ccec:	4629      	mov	r1, r5
 800ccee:	2b07      	cmp	r3, #7
 800ccf0:	dc0a      	bgt.n	800cd08 <__gethex+0x14c>
 800ccf2:	9801      	ldr	r0, [sp, #4]
 800ccf4:	f000 fa46 	bl	800d184 <_Balloc>
 800ccf8:	4604      	mov	r4, r0
 800ccfa:	b940      	cbnz	r0, 800cd0e <__gethex+0x152>
 800ccfc:	4b5c      	ldr	r3, [pc, #368]	@ (800ce70 <__gethex+0x2b4>)
 800ccfe:	4602      	mov	r2, r0
 800cd00:	21e4      	movs	r1, #228	@ 0xe4
 800cd02:	485c      	ldr	r0, [pc, #368]	@ (800ce74 <__gethex+0x2b8>)
 800cd04:	f001 fe3e 	bl	800e984 <__assert_func>
 800cd08:	3101      	adds	r1, #1
 800cd0a:	105b      	asrs	r3, r3, #1
 800cd0c:	e7ef      	b.n	800ccee <__gethex+0x132>
 800cd0e:	f100 0a14 	add.w	sl, r0, #20
 800cd12:	2300      	movs	r3, #0
 800cd14:	4655      	mov	r5, sl
 800cd16:	469b      	mov	fp, r3
 800cd18:	45b1      	cmp	r9, r6
 800cd1a:	d337      	bcc.n	800cd8c <__gethex+0x1d0>
 800cd1c:	f845 bb04 	str.w	fp, [r5], #4
 800cd20:	eba5 050a 	sub.w	r5, r5, sl
 800cd24:	10ad      	asrs	r5, r5, #2
 800cd26:	6125      	str	r5, [r4, #16]
 800cd28:	4658      	mov	r0, fp
 800cd2a:	f000 fb1d 	bl	800d368 <__hi0bits>
 800cd2e:	016d      	lsls	r5, r5, #5
 800cd30:	f8d8 6000 	ldr.w	r6, [r8]
 800cd34:	1a2d      	subs	r5, r5, r0
 800cd36:	42b5      	cmp	r5, r6
 800cd38:	dd54      	ble.n	800cde4 <__gethex+0x228>
 800cd3a:	1bad      	subs	r5, r5, r6
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f000 feb1 	bl	800daa6 <__any_on>
 800cd44:	4681      	mov	r9, r0
 800cd46:	b178      	cbz	r0, 800cd68 <__gethex+0x1ac>
 800cd48:	1e6b      	subs	r3, r5, #1
 800cd4a:	1159      	asrs	r1, r3, #5
 800cd4c:	f003 021f 	and.w	r2, r3, #31
 800cd50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cd54:	f04f 0901 	mov.w	r9, #1
 800cd58:	fa09 f202 	lsl.w	r2, r9, r2
 800cd5c:	420a      	tst	r2, r1
 800cd5e:	d003      	beq.n	800cd68 <__gethex+0x1ac>
 800cd60:	454b      	cmp	r3, r9
 800cd62:	dc36      	bgt.n	800cdd2 <__gethex+0x216>
 800cd64:	f04f 0902 	mov.w	r9, #2
 800cd68:	4629      	mov	r1, r5
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f7ff febe 	bl	800caec <rshift>
 800cd70:	442f      	add	r7, r5
 800cd72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd76:	42bb      	cmp	r3, r7
 800cd78:	da42      	bge.n	800ce00 <__gethex+0x244>
 800cd7a:	9801      	ldr	r0, [sp, #4]
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	f000 fa41 	bl	800d204 <_Bfree>
 800cd82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd84:	2300      	movs	r3, #0
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	25a3      	movs	r5, #163	@ 0xa3
 800cd8a:	e793      	b.n	800ccb4 <__gethex+0xf8>
 800cd8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cd90:	2a2e      	cmp	r2, #46	@ 0x2e
 800cd92:	d012      	beq.n	800cdba <__gethex+0x1fe>
 800cd94:	2b20      	cmp	r3, #32
 800cd96:	d104      	bne.n	800cda2 <__gethex+0x1e6>
 800cd98:	f845 bb04 	str.w	fp, [r5], #4
 800cd9c:	f04f 0b00 	mov.w	fp, #0
 800cda0:	465b      	mov	r3, fp
 800cda2:	7830      	ldrb	r0, [r6, #0]
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	f7ff fef3 	bl	800cb90 <__hexdig_fun>
 800cdaa:	9b03      	ldr	r3, [sp, #12]
 800cdac:	f000 000f 	and.w	r0, r0, #15
 800cdb0:	4098      	lsls	r0, r3
 800cdb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cdb6:	3304      	adds	r3, #4
 800cdb8:	e7ae      	b.n	800cd18 <__gethex+0x15c>
 800cdba:	45b1      	cmp	r9, r6
 800cdbc:	d8ea      	bhi.n	800cd94 <__gethex+0x1d8>
 800cdbe:	492b      	ldr	r1, [pc, #172]	@ (800ce6c <__gethex+0x2b0>)
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f7ff fd45 	bl	800c854 <strncmp>
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d1e1      	bne.n	800cd94 <__gethex+0x1d8>
 800cdd0:	e7a2      	b.n	800cd18 <__gethex+0x15c>
 800cdd2:	1ea9      	subs	r1, r5, #2
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 fe66 	bl	800daa6 <__any_on>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d0c2      	beq.n	800cd64 <__gethex+0x1a8>
 800cdde:	f04f 0903 	mov.w	r9, #3
 800cde2:	e7c1      	b.n	800cd68 <__gethex+0x1ac>
 800cde4:	da09      	bge.n	800cdfa <__gethex+0x23e>
 800cde6:	1b75      	subs	r5, r6, r5
 800cde8:	4621      	mov	r1, r4
 800cdea:	9801      	ldr	r0, [sp, #4]
 800cdec:	462a      	mov	r2, r5
 800cdee:	f000 fc21 	bl	800d634 <__lshift>
 800cdf2:	1b7f      	subs	r7, r7, r5
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	f100 0a14 	add.w	sl, r0, #20
 800cdfa:	f04f 0900 	mov.w	r9, #0
 800cdfe:	e7b8      	b.n	800cd72 <__gethex+0x1b6>
 800ce00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ce04:	42bd      	cmp	r5, r7
 800ce06:	dd6f      	ble.n	800cee8 <__gethex+0x32c>
 800ce08:	1bed      	subs	r5, r5, r7
 800ce0a:	42ae      	cmp	r6, r5
 800ce0c:	dc34      	bgt.n	800ce78 <__gethex+0x2bc>
 800ce0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d022      	beq.n	800ce5c <__gethex+0x2a0>
 800ce16:	2b03      	cmp	r3, #3
 800ce18:	d024      	beq.n	800ce64 <__gethex+0x2a8>
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d115      	bne.n	800ce4a <__gethex+0x28e>
 800ce1e:	42ae      	cmp	r6, r5
 800ce20:	d113      	bne.n	800ce4a <__gethex+0x28e>
 800ce22:	2e01      	cmp	r6, #1
 800ce24:	d10b      	bne.n	800ce3e <__gethex+0x282>
 800ce26:	9a02      	ldr	r2, [sp, #8]
 800ce28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce2c:	6013      	str	r3, [r2, #0]
 800ce2e:	2301      	movs	r3, #1
 800ce30:	6123      	str	r3, [r4, #16]
 800ce32:	f8ca 3000 	str.w	r3, [sl]
 800ce36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce38:	2562      	movs	r5, #98	@ 0x62
 800ce3a:	601c      	str	r4, [r3, #0]
 800ce3c:	e73a      	b.n	800ccb4 <__gethex+0xf8>
 800ce3e:	1e71      	subs	r1, r6, #1
 800ce40:	4620      	mov	r0, r4
 800ce42:	f000 fe30 	bl	800daa6 <__any_on>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d1ed      	bne.n	800ce26 <__gethex+0x26a>
 800ce4a:	9801      	ldr	r0, [sp, #4]
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	f000 f9d9 	bl	800d204 <_Bfree>
 800ce52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce54:	2300      	movs	r3, #0
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	2550      	movs	r5, #80	@ 0x50
 800ce5a:	e72b      	b.n	800ccb4 <__gethex+0xf8>
 800ce5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1f3      	bne.n	800ce4a <__gethex+0x28e>
 800ce62:	e7e0      	b.n	800ce26 <__gethex+0x26a>
 800ce64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1dd      	bne.n	800ce26 <__gethex+0x26a>
 800ce6a:	e7ee      	b.n	800ce4a <__gethex+0x28e>
 800ce6c:	0800f36c 	.word	0x0800f36c
 800ce70:	0800f4d9 	.word	0x0800f4d9
 800ce74:	0800f4ea 	.word	0x0800f4ea
 800ce78:	1e6f      	subs	r7, r5, #1
 800ce7a:	f1b9 0f00 	cmp.w	r9, #0
 800ce7e:	d130      	bne.n	800cee2 <__gethex+0x326>
 800ce80:	b127      	cbz	r7, 800ce8c <__gethex+0x2d0>
 800ce82:	4639      	mov	r1, r7
 800ce84:	4620      	mov	r0, r4
 800ce86:	f000 fe0e 	bl	800daa6 <__any_on>
 800ce8a:	4681      	mov	r9, r0
 800ce8c:	117a      	asrs	r2, r7, #5
 800ce8e:	2301      	movs	r3, #1
 800ce90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce94:	f007 071f 	and.w	r7, r7, #31
 800ce98:	40bb      	lsls	r3, r7
 800ce9a:	4213      	tst	r3, r2
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	4620      	mov	r0, r4
 800cea0:	bf18      	it	ne
 800cea2:	f049 0902 	orrne.w	r9, r9, #2
 800cea6:	f7ff fe21 	bl	800caec <rshift>
 800ceaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ceae:	1b76      	subs	r6, r6, r5
 800ceb0:	2502      	movs	r5, #2
 800ceb2:	f1b9 0f00 	cmp.w	r9, #0
 800ceb6:	d047      	beq.n	800cf48 <__gethex+0x38c>
 800ceb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d015      	beq.n	800ceec <__gethex+0x330>
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d017      	beq.n	800cef4 <__gethex+0x338>
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d109      	bne.n	800cedc <__gethex+0x320>
 800cec8:	f019 0f02 	tst.w	r9, #2
 800cecc:	d006      	beq.n	800cedc <__gethex+0x320>
 800cece:	f8da 3000 	ldr.w	r3, [sl]
 800ced2:	ea49 0903 	orr.w	r9, r9, r3
 800ced6:	f019 0f01 	tst.w	r9, #1
 800ceda:	d10e      	bne.n	800cefa <__gethex+0x33e>
 800cedc:	f045 0510 	orr.w	r5, r5, #16
 800cee0:	e032      	b.n	800cf48 <__gethex+0x38c>
 800cee2:	f04f 0901 	mov.w	r9, #1
 800cee6:	e7d1      	b.n	800ce8c <__gethex+0x2d0>
 800cee8:	2501      	movs	r5, #1
 800ceea:	e7e2      	b.n	800ceb2 <__gethex+0x2f6>
 800ceec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ceee:	f1c3 0301 	rsb	r3, r3, #1
 800cef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0f0      	beq.n	800cedc <__gethex+0x320>
 800cefa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cefe:	f104 0314 	add.w	r3, r4, #20
 800cf02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cf06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cf0a:	f04f 0c00 	mov.w	ip, #0
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf18:	d01b      	beq.n	800cf52 <__gethex+0x396>
 800cf1a:	3201      	adds	r2, #1
 800cf1c:	6002      	str	r2, [r0, #0]
 800cf1e:	2d02      	cmp	r5, #2
 800cf20:	f104 0314 	add.w	r3, r4, #20
 800cf24:	d13c      	bne.n	800cfa0 <__gethex+0x3e4>
 800cf26:	f8d8 2000 	ldr.w	r2, [r8]
 800cf2a:	3a01      	subs	r2, #1
 800cf2c:	42b2      	cmp	r2, r6
 800cf2e:	d109      	bne.n	800cf44 <__gethex+0x388>
 800cf30:	1171      	asrs	r1, r6, #5
 800cf32:	2201      	movs	r2, #1
 800cf34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf38:	f006 061f 	and.w	r6, r6, #31
 800cf3c:	fa02 f606 	lsl.w	r6, r2, r6
 800cf40:	421e      	tst	r6, r3
 800cf42:	d13a      	bne.n	800cfba <__gethex+0x3fe>
 800cf44:	f045 0520 	orr.w	r5, r5, #32
 800cf48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf4a:	601c      	str	r4, [r3, #0]
 800cf4c:	9b02      	ldr	r3, [sp, #8]
 800cf4e:	601f      	str	r7, [r3, #0]
 800cf50:	e6b0      	b.n	800ccb4 <__gethex+0xf8>
 800cf52:	4299      	cmp	r1, r3
 800cf54:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf58:	d8d9      	bhi.n	800cf0e <__gethex+0x352>
 800cf5a:	68a3      	ldr	r3, [r4, #8]
 800cf5c:	459b      	cmp	fp, r3
 800cf5e:	db17      	blt.n	800cf90 <__gethex+0x3d4>
 800cf60:	6861      	ldr	r1, [r4, #4]
 800cf62:	9801      	ldr	r0, [sp, #4]
 800cf64:	3101      	adds	r1, #1
 800cf66:	f000 f90d 	bl	800d184 <_Balloc>
 800cf6a:	4681      	mov	r9, r0
 800cf6c:	b918      	cbnz	r0, 800cf76 <__gethex+0x3ba>
 800cf6e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd8 <__gethex+0x41c>)
 800cf70:	4602      	mov	r2, r0
 800cf72:	2184      	movs	r1, #132	@ 0x84
 800cf74:	e6c5      	b.n	800cd02 <__gethex+0x146>
 800cf76:	6922      	ldr	r2, [r4, #16]
 800cf78:	3202      	adds	r2, #2
 800cf7a:	f104 010c 	add.w	r1, r4, #12
 800cf7e:	0092      	lsls	r2, r2, #2
 800cf80:	300c      	adds	r0, #12
 800cf82:	f7ff fd52 	bl	800ca2a <memcpy>
 800cf86:	4621      	mov	r1, r4
 800cf88:	9801      	ldr	r0, [sp, #4]
 800cf8a:	f000 f93b 	bl	800d204 <_Bfree>
 800cf8e:	464c      	mov	r4, r9
 800cf90:	6923      	ldr	r3, [r4, #16]
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf98:	6122      	str	r2, [r4, #16]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	615a      	str	r2, [r3, #20]
 800cf9e:	e7be      	b.n	800cf1e <__gethex+0x362>
 800cfa0:	6922      	ldr	r2, [r4, #16]
 800cfa2:	455a      	cmp	r2, fp
 800cfa4:	dd0b      	ble.n	800cfbe <__gethex+0x402>
 800cfa6:	2101      	movs	r1, #1
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f7ff fd9f 	bl	800caec <rshift>
 800cfae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfb2:	3701      	adds	r7, #1
 800cfb4:	42bb      	cmp	r3, r7
 800cfb6:	f6ff aee0 	blt.w	800cd7a <__gethex+0x1be>
 800cfba:	2501      	movs	r5, #1
 800cfbc:	e7c2      	b.n	800cf44 <__gethex+0x388>
 800cfbe:	f016 061f 	ands.w	r6, r6, #31
 800cfc2:	d0fa      	beq.n	800cfba <__gethex+0x3fe>
 800cfc4:	4453      	add	r3, sl
 800cfc6:	f1c6 0620 	rsb	r6, r6, #32
 800cfca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cfce:	f000 f9cb 	bl	800d368 <__hi0bits>
 800cfd2:	42b0      	cmp	r0, r6
 800cfd4:	dbe7      	blt.n	800cfa6 <__gethex+0x3ea>
 800cfd6:	e7f0      	b.n	800cfba <__gethex+0x3fe>
 800cfd8:	0800f4d9 	.word	0x0800f4d9

0800cfdc <L_shift>:
 800cfdc:	f1c2 0208 	rsb	r2, r2, #8
 800cfe0:	0092      	lsls	r2, r2, #2
 800cfe2:	b570      	push	{r4, r5, r6, lr}
 800cfe4:	f1c2 0620 	rsb	r6, r2, #32
 800cfe8:	6843      	ldr	r3, [r0, #4]
 800cfea:	6804      	ldr	r4, [r0, #0]
 800cfec:	fa03 f506 	lsl.w	r5, r3, r6
 800cff0:	432c      	orrs	r4, r5
 800cff2:	40d3      	lsrs	r3, r2
 800cff4:	6004      	str	r4, [r0, #0]
 800cff6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cffa:	4288      	cmp	r0, r1
 800cffc:	d3f4      	bcc.n	800cfe8 <L_shift+0xc>
 800cffe:	bd70      	pop	{r4, r5, r6, pc}

0800d000 <__match>:
 800d000:	b530      	push	{r4, r5, lr}
 800d002:	6803      	ldr	r3, [r0, #0]
 800d004:	3301      	adds	r3, #1
 800d006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d00a:	b914      	cbnz	r4, 800d012 <__match+0x12>
 800d00c:	6003      	str	r3, [r0, #0]
 800d00e:	2001      	movs	r0, #1
 800d010:	bd30      	pop	{r4, r5, pc}
 800d012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d016:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d01a:	2d19      	cmp	r5, #25
 800d01c:	bf98      	it	ls
 800d01e:	3220      	addls	r2, #32
 800d020:	42a2      	cmp	r2, r4
 800d022:	d0f0      	beq.n	800d006 <__match+0x6>
 800d024:	2000      	movs	r0, #0
 800d026:	e7f3      	b.n	800d010 <__match+0x10>

0800d028 <__hexnan>:
 800d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02c:	680b      	ldr	r3, [r1, #0]
 800d02e:	6801      	ldr	r1, [r0, #0]
 800d030:	115e      	asrs	r6, r3, #5
 800d032:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d036:	f013 031f 	ands.w	r3, r3, #31
 800d03a:	b087      	sub	sp, #28
 800d03c:	bf18      	it	ne
 800d03e:	3604      	addne	r6, #4
 800d040:	2500      	movs	r5, #0
 800d042:	1f37      	subs	r7, r6, #4
 800d044:	4682      	mov	sl, r0
 800d046:	4690      	mov	r8, r2
 800d048:	9301      	str	r3, [sp, #4]
 800d04a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d04e:	46b9      	mov	r9, r7
 800d050:	463c      	mov	r4, r7
 800d052:	9502      	str	r5, [sp, #8]
 800d054:	46ab      	mov	fp, r5
 800d056:	784a      	ldrb	r2, [r1, #1]
 800d058:	1c4b      	adds	r3, r1, #1
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	b342      	cbz	r2, 800d0b0 <__hexnan+0x88>
 800d05e:	4610      	mov	r0, r2
 800d060:	9105      	str	r1, [sp, #20]
 800d062:	9204      	str	r2, [sp, #16]
 800d064:	f7ff fd94 	bl	800cb90 <__hexdig_fun>
 800d068:	2800      	cmp	r0, #0
 800d06a:	d151      	bne.n	800d110 <__hexnan+0xe8>
 800d06c:	9a04      	ldr	r2, [sp, #16]
 800d06e:	9905      	ldr	r1, [sp, #20]
 800d070:	2a20      	cmp	r2, #32
 800d072:	d818      	bhi.n	800d0a6 <__hexnan+0x7e>
 800d074:	9b02      	ldr	r3, [sp, #8]
 800d076:	459b      	cmp	fp, r3
 800d078:	dd13      	ble.n	800d0a2 <__hexnan+0x7a>
 800d07a:	454c      	cmp	r4, r9
 800d07c:	d206      	bcs.n	800d08c <__hexnan+0x64>
 800d07e:	2d07      	cmp	r5, #7
 800d080:	dc04      	bgt.n	800d08c <__hexnan+0x64>
 800d082:	462a      	mov	r2, r5
 800d084:	4649      	mov	r1, r9
 800d086:	4620      	mov	r0, r4
 800d088:	f7ff ffa8 	bl	800cfdc <L_shift>
 800d08c:	4544      	cmp	r4, r8
 800d08e:	d952      	bls.n	800d136 <__hexnan+0x10e>
 800d090:	2300      	movs	r3, #0
 800d092:	f1a4 0904 	sub.w	r9, r4, #4
 800d096:	f844 3c04 	str.w	r3, [r4, #-4]
 800d09a:	f8cd b008 	str.w	fp, [sp, #8]
 800d09e:	464c      	mov	r4, r9
 800d0a0:	461d      	mov	r5, r3
 800d0a2:	9903      	ldr	r1, [sp, #12]
 800d0a4:	e7d7      	b.n	800d056 <__hexnan+0x2e>
 800d0a6:	2a29      	cmp	r2, #41	@ 0x29
 800d0a8:	d157      	bne.n	800d15a <__hexnan+0x132>
 800d0aa:	3102      	adds	r1, #2
 800d0ac:	f8ca 1000 	str.w	r1, [sl]
 800d0b0:	f1bb 0f00 	cmp.w	fp, #0
 800d0b4:	d051      	beq.n	800d15a <__hexnan+0x132>
 800d0b6:	454c      	cmp	r4, r9
 800d0b8:	d206      	bcs.n	800d0c8 <__hexnan+0xa0>
 800d0ba:	2d07      	cmp	r5, #7
 800d0bc:	dc04      	bgt.n	800d0c8 <__hexnan+0xa0>
 800d0be:	462a      	mov	r2, r5
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f7ff ff8a 	bl	800cfdc <L_shift>
 800d0c8:	4544      	cmp	r4, r8
 800d0ca:	d936      	bls.n	800d13a <__hexnan+0x112>
 800d0cc:	f1a8 0204 	sub.w	r2, r8, #4
 800d0d0:	4623      	mov	r3, r4
 800d0d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d0d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d0da:	429f      	cmp	r7, r3
 800d0dc:	d2f9      	bcs.n	800d0d2 <__hexnan+0xaa>
 800d0de:	1b3b      	subs	r3, r7, r4
 800d0e0:	f023 0303 	bic.w	r3, r3, #3
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	3401      	adds	r4, #1
 800d0e8:	3e03      	subs	r6, #3
 800d0ea:	42b4      	cmp	r4, r6
 800d0ec:	bf88      	it	hi
 800d0ee:	2304      	movhi	r3, #4
 800d0f0:	4443      	add	r3, r8
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f843 2b04 	str.w	r2, [r3], #4
 800d0f8:	429f      	cmp	r7, r3
 800d0fa:	d2fb      	bcs.n	800d0f4 <__hexnan+0xcc>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	b91b      	cbnz	r3, 800d108 <__hexnan+0xe0>
 800d100:	4547      	cmp	r7, r8
 800d102:	d128      	bne.n	800d156 <__hexnan+0x12e>
 800d104:	2301      	movs	r3, #1
 800d106:	603b      	str	r3, [r7, #0]
 800d108:	2005      	movs	r0, #5
 800d10a:	b007      	add	sp, #28
 800d10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d110:	3501      	adds	r5, #1
 800d112:	2d08      	cmp	r5, #8
 800d114:	f10b 0b01 	add.w	fp, fp, #1
 800d118:	dd06      	ble.n	800d128 <__hexnan+0x100>
 800d11a:	4544      	cmp	r4, r8
 800d11c:	d9c1      	bls.n	800d0a2 <__hexnan+0x7a>
 800d11e:	2300      	movs	r3, #0
 800d120:	f844 3c04 	str.w	r3, [r4, #-4]
 800d124:	2501      	movs	r5, #1
 800d126:	3c04      	subs	r4, #4
 800d128:	6822      	ldr	r2, [r4, #0]
 800d12a:	f000 000f 	and.w	r0, r0, #15
 800d12e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d132:	6020      	str	r0, [r4, #0]
 800d134:	e7b5      	b.n	800d0a2 <__hexnan+0x7a>
 800d136:	2508      	movs	r5, #8
 800d138:	e7b3      	b.n	800d0a2 <__hexnan+0x7a>
 800d13a:	9b01      	ldr	r3, [sp, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d0dd      	beq.n	800d0fc <__hexnan+0xd4>
 800d140:	f1c3 0320 	rsb	r3, r3, #32
 800d144:	f04f 32ff 	mov.w	r2, #4294967295
 800d148:	40da      	lsrs	r2, r3
 800d14a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d14e:	4013      	ands	r3, r2
 800d150:	f846 3c04 	str.w	r3, [r6, #-4]
 800d154:	e7d2      	b.n	800d0fc <__hexnan+0xd4>
 800d156:	3f04      	subs	r7, #4
 800d158:	e7d0      	b.n	800d0fc <__hexnan+0xd4>
 800d15a:	2004      	movs	r0, #4
 800d15c:	e7d5      	b.n	800d10a <__hexnan+0xe2>

0800d15e <__ascii_mbtowc>:
 800d15e:	b082      	sub	sp, #8
 800d160:	b901      	cbnz	r1, 800d164 <__ascii_mbtowc+0x6>
 800d162:	a901      	add	r1, sp, #4
 800d164:	b142      	cbz	r2, 800d178 <__ascii_mbtowc+0x1a>
 800d166:	b14b      	cbz	r3, 800d17c <__ascii_mbtowc+0x1e>
 800d168:	7813      	ldrb	r3, [r2, #0]
 800d16a:	600b      	str	r3, [r1, #0]
 800d16c:	7812      	ldrb	r2, [r2, #0]
 800d16e:	1e10      	subs	r0, r2, #0
 800d170:	bf18      	it	ne
 800d172:	2001      	movne	r0, #1
 800d174:	b002      	add	sp, #8
 800d176:	4770      	bx	lr
 800d178:	4610      	mov	r0, r2
 800d17a:	e7fb      	b.n	800d174 <__ascii_mbtowc+0x16>
 800d17c:	f06f 0001 	mvn.w	r0, #1
 800d180:	e7f8      	b.n	800d174 <__ascii_mbtowc+0x16>
	...

0800d184 <_Balloc>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	69c6      	ldr	r6, [r0, #28]
 800d188:	4604      	mov	r4, r0
 800d18a:	460d      	mov	r5, r1
 800d18c:	b976      	cbnz	r6, 800d1ac <_Balloc+0x28>
 800d18e:	2010      	movs	r0, #16
 800d190:	f7fe faca 	bl	800b728 <malloc>
 800d194:	4602      	mov	r2, r0
 800d196:	61e0      	str	r0, [r4, #28]
 800d198:	b920      	cbnz	r0, 800d1a4 <_Balloc+0x20>
 800d19a:	4b18      	ldr	r3, [pc, #96]	@ (800d1fc <_Balloc+0x78>)
 800d19c:	4818      	ldr	r0, [pc, #96]	@ (800d200 <_Balloc+0x7c>)
 800d19e:	216b      	movs	r1, #107	@ 0x6b
 800d1a0:	f001 fbf0 	bl	800e984 <__assert_func>
 800d1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1a8:	6006      	str	r6, [r0, #0]
 800d1aa:	60c6      	str	r6, [r0, #12]
 800d1ac:	69e6      	ldr	r6, [r4, #28]
 800d1ae:	68f3      	ldr	r3, [r6, #12]
 800d1b0:	b183      	cbz	r3, 800d1d4 <_Balloc+0x50>
 800d1b2:	69e3      	ldr	r3, [r4, #28]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1ba:	b9b8      	cbnz	r0, 800d1ec <_Balloc+0x68>
 800d1bc:	2101      	movs	r1, #1
 800d1be:	fa01 f605 	lsl.w	r6, r1, r5
 800d1c2:	1d72      	adds	r2, r6, #5
 800d1c4:	0092      	lsls	r2, r2, #2
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f001 fbfa 	bl	800e9c0 <_calloc_r>
 800d1cc:	b160      	cbz	r0, 800d1e8 <_Balloc+0x64>
 800d1ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1d2:	e00e      	b.n	800d1f2 <_Balloc+0x6e>
 800d1d4:	2221      	movs	r2, #33	@ 0x21
 800d1d6:	2104      	movs	r1, #4
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f001 fbf1 	bl	800e9c0 <_calloc_r>
 800d1de:	69e3      	ldr	r3, [r4, #28]
 800d1e0:	60f0      	str	r0, [r6, #12]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1e4      	bne.n	800d1b2 <_Balloc+0x2e>
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	6802      	ldr	r2, [r0, #0]
 800d1ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1f8:	e7f7      	b.n	800d1ea <_Balloc+0x66>
 800d1fa:	bf00      	nop
 800d1fc:	0800f54a 	.word	0x0800f54a
 800d200:	0800f561 	.word	0x0800f561

0800d204 <_Bfree>:
 800d204:	b570      	push	{r4, r5, r6, lr}
 800d206:	69c6      	ldr	r6, [r0, #28]
 800d208:	4605      	mov	r5, r0
 800d20a:	460c      	mov	r4, r1
 800d20c:	b976      	cbnz	r6, 800d22c <_Bfree+0x28>
 800d20e:	2010      	movs	r0, #16
 800d210:	f7fe fa8a 	bl	800b728 <malloc>
 800d214:	4602      	mov	r2, r0
 800d216:	61e8      	str	r0, [r5, #28]
 800d218:	b920      	cbnz	r0, 800d224 <_Bfree+0x20>
 800d21a:	4b09      	ldr	r3, [pc, #36]	@ (800d240 <_Bfree+0x3c>)
 800d21c:	4809      	ldr	r0, [pc, #36]	@ (800d244 <_Bfree+0x40>)
 800d21e:	218f      	movs	r1, #143	@ 0x8f
 800d220:	f001 fbb0 	bl	800e984 <__assert_func>
 800d224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d228:	6006      	str	r6, [r0, #0]
 800d22a:	60c6      	str	r6, [r0, #12]
 800d22c:	b13c      	cbz	r4, 800d23e <_Bfree+0x3a>
 800d22e:	69eb      	ldr	r3, [r5, #28]
 800d230:	6862      	ldr	r2, [r4, #4]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d238:	6021      	str	r1, [r4, #0]
 800d23a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d23e:	bd70      	pop	{r4, r5, r6, pc}
 800d240:	0800f54a 	.word	0x0800f54a
 800d244:	0800f561 	.word	0x0800f561

0800d248 <__multadd>:
 800d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24c:	690d      	ldr	r5, [r1, #16]
 800d24e:	4607      	mov	r7, r0
 800d250:	460c      	mov	r4, r1
 800d252:	461e      	mov	r6, r3
 800d254:	f101 0c14 	add.w	ip, r1, #20
 800d258:	2000      	movs	r0, #0
 800d25a:	f8dc 3000 	ldr.w	r3, [ip]
 800d25e:	b299      	uxth	r1, r3
 800d260:	fb02 6101 	mla	r1, r2, r1, r6
 800d264:	0c1e      	lsrs	r6, r3, #16
 800d266:	0c0b      	lsrs	r3, r1, #16
 800d268:	fb02 3306 	mla	r3, r2, r6, r3
 800d26c:	b289      	uxth	r1, r1
 800d26e:	3001      	adds	r0, #1
 800d270:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d274:	4285      	cmp	r5, r0
 800d276:	f84c 1b04 	str.w	r1, [ip], #4
 800d27a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d27e:	dcec      	bgt.n	800d25a <__multadd+0x12>
 800d280:	b30e      	cbz	r6, 800d2c6 <__multadd+0x7e>
 800d282:	68a3      	ldr	r3, [r4, #8]
 800d284:	42ab      	cmp	r3, r5
 800d286:	dc19      	bgt.n	800d2bc <__multadd+0x74>
 800d288:	6861      	ldr	r1, [r4, #4]
 800d28a:	4638      	mov	r0, r7
 800d28c:	3101      	adds	r1, #1
 800d28e:	f7ff ff79 	bl	800d184 <_Balloc>
 800d292:	4680      	mov	r8, r0
 800d294:	b928      	cbnz	r0, 800d2a2 <__multadd+0x5a>
 800d296:	4602      	mov	r2, r0
 800d298:	4b0c      	ldr	r3, [pc, #48]	@ (800d2cc <__multadd+0x84>)
 800d29a:	480d      	ldr	r0, [pc, #52]	@ (800d2d0 <__multadd+0x88>)
 800d29c:	21ba      	movs	r1, #186	@ 0xba
 800d29e:	f001 fb71 	bl	800e984 <__assert_func>
 800d2a2:	6922      	ldr	r2, [r4, #16]
 800d2a4:	3202      	adds	r2, #2
 800d2a6:	f104 010c 	add.w	r1, r4, #12
 800d2aa:	0092      	lsls	r2, r2, #2
 800d2ac:	300c      	adds	r0, #12
 800d2ae:	f7ff fbbc 	bl	800ca2a <memcpy>
 800d2b2:	4621      	mov	r1, r4
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	f7ff ffa5 	bl	800d204 <_Bfree>
 800d2ba:	4644      	mov	r4, r8
 800d2bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	615e      	str	r6, [r3, #20]
 800d2c4:	6125      	str	r5, [r4, #16]
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2cc:	0800f4d9 	.word	0x0800f4d9
 800d2d0:	0800f561 	.word	0x0800f561

0800d2d4 <__s2b>:
 800d2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2d8:	460c      	mov	r4, r1
 800d2da:	4615      	mov	r5, r2
 800d2dc:	461f      	mov	r7, r3
 800d2de:	2209      	movs	r2, #9
 800d2e0:	3308      	adds	r3, #8
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	db09      	blt.n	800d304 <__s2b+0x30>
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f7ff ff47 	bl	800d184 <_Balloc>
 800d2f6:	b940      	cbnz	r0, 800d30a <__s2b+0x36>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	4b19      	ldr	r3, [pc, #100]	@ (800d360 <__s2b+0x8c>)
 800d2fc:	4819      	ldr	r0, [pc, #100]	@ (800d364 <__s2b+0x90>)
 800d2fe:	21d3      	movs	r1, #211	@ 0xd3
 800d300:	f001 fb40 	bl	800e984 <__assert_func>
 800d304:	0052      	lsls	r2, r2, #1
 800d306:	3101      	adds	r1, #1
 800d308:	e7f0      	b.n	800d2ec <__s2b+0x18>
 800d30a:	9b08      	ldr	r3, [sp, #32]
 800d30c:	6143      	str	r3, [r0, #20]
 800d30e:	2d09      	cmp	r5, #9
 800d310:	f04f 0301 	mov.w	r3, #1
 800d314:	6103      	str	r3, [r0, #16]
 800d316:	dd16      	ble.n	800d346 <__s2b+0x72>
 800d318:	f104 0909 	add.w	r9, r4, #9
 800d31c:	46c8      	mov	r8, r9
 800d31e:	442c      	add	r4, r5
 800d320:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d324:	4601      	mov	r1, r0
 800d326:	3b30      	subs	r3, #48	@ 0x30
 800d328:	220a      	movs	r2, #10
 800d32a:	4630      	mov	r0, r6
 800d32c:	f7ff ff8c 	bl	800d248 <__multadd>
 800d330:	45a0      	cmp	r8, r4
 800d332:	d1f5      	bne.n	800d320 <__s2b+0x4c>
 800d334:	f1a5 0408 	sub.w	r4, r5, #8
 800d338:	444c      	add	r4, r9
 800d33a:	1b2d      	subs	r5, r5, r4
 800d33c:	1963      	adds	r3, r4, r5
 800d33e:	42bb      	cmp	r3, r7
 800d340:	db04      	blt.n	800d34c <__s2b+0x78>
 800d342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d346:	340a      	adds	r4, #10
 800d348:	2509      	movs	r5, #9
 800d34a:	e7f6      	b.n	800d33a <__s2b+0x66>
 800d34c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d350:	4601      	mov	r1, r0
 800d352:	3b30      	subs	r3, #48	@ 0x30
 800d354:	220a      	movs	r2, #10
 800d356:	4630      	mov	r0, r6
 800d358:	f7ff ff76 	bl	800d248 <__multadd>
 800d35c:	e7ee      	b.n	800d33c <__s2b+0x68>
 800d35e:	bf00      	nop
 800d360:	0800f4d9 	.word	0x0800f4d9
 800d364:	0800f561 	.word	0x0800f561

0800d368 <__hi0bits>:
 800d368:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d36c:	4603      	mov	r3, r0
 800d36e:	bf36      	itet	cc
 800d370:	0403      	lslcc	r3, r0, #16
 800d372:	2000      	movcs	r0, #0
 800d374:	2010      	movcc	r0, #16
 800d376:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d37a:	bf3c      	itt	cc
 800d37c:	021b      	lslcc	r3, r3, #8
 800d37e:	3008      	addcc	r0, #8
 800d380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d384:	bf3c      	itt	cc
 800d386:	011b      	lslcc	r3, r3, #4
 800d388:	3004      	addcc	r0, #4
 800d38a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d38e:	bf3c      	itt	cc
 800d390:	009b      	lslcc	r3, r3, #2
 800d392:	3002      	addcc	r0, #2
 800d394:	2b00      	cmp	r3, #0
 800d396:	db05      	blt.n	800d3a4 <__hi0bits+0x3c>
 800d398:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d39c:	f100 0001 	add.w	r0, r0, #1
 800d3a0:	bf08      	it	eq
 800d3a2:	2020      	moveq	r0, #32
 800d3a4:	4770      	bx	lr

0800d3a6 <__lo0bits>:
 800d3a6:	6803      	ldr	r3, [r0, #0]
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	f013 0007 	ands.w	r0, r3, #7
 800d3ae:	d00b      	beq.n	800d3c8 <__lo0bits+0x22>
 800d3b0:	07d9      	lsls	r1, r3, #31
 800d3b2:	d421      	bmi.n	800d3f8 <__lo0bits+0x52>
 800d3b4:	0798      	lsls	r0, r3, #30
 800d3b6:	bf49      	itett	mi
 800d3b8:	085b      	lsrmi	r3, r3, #1
 800d3ba:	089b      	lsrpl	r3, r3, #2
 800d3bc:	2001      	movmi	r0, #1
 800d3be:	6013      	strmi	r3, [r2, #0]
 800d3c0:	bf5c      	itt	pl
 800d3c2:	6013      	strpl	r3, [r2, #0]
 800d3c4:	2002      	movpl	r0, #2
 800d3c6:	4770      	bx	lr
 800d3c8:	b299      	uxth	r1, r3
 800d3ca:	b909      	cbnz	r1, 800d3d0 <__lo0bits+0x2a>
 800d3cc:	0c1b      	lsrs	r3, r3, #16
 800d3ce:	2010      	movs	r0, #16
 800d3d0:	b2d9      	uxtb	r1, r3
 800d3d2:	b909      	cbnz	r1, 800d3d8 <__lo0bits+0x32>
 800d3d4:	3008      	adds	r0, #8
 800d3d6:	0a1b      	lsrs	r3, r3, #8
 800d3d8:	0719      	lsls	r1, r3, #28
 800d3da:	bf04      	itt	eq
 800d3dc:	091b      	lsreq	r3, r3, #4
 800d3de:	3004      	addeq	r0, #4
 800d3e0:	0799      	lsls	r1, r3, #30
 800d3e2:	bf04      	itt	eq
 800d3e4:	089b      	lsreq	r3, r3, #2
 800d3e6:	3002      	addeq	r0, #2
 800d3e8:	07d9      	lsls	r1, r3, #31
 800d3ea:	d403      	bmi.n	800d3f4 <__lo0bits+0x4e>
 800d3ec:	085b      	lsrs	r3, r3, #1
 800d3ee:	f100 0001 	add.w	r0, r0, #1
 800d3f2:	d003      	beq.n	800d3fc <__lo0bits+0x56>
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	4770      	bx	lr
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	4770      	bx	lr
 800d3fc:	2020      	movs	r0, #32
 800d3fe:	4770      	bx	lr

0800d400 <__i2b>:
 800d400:	b510      	push	{r4, lr}
 800d402:	460c      	mov	r4, r1
 800d404:	2101      	movs	r1, #1
 800d406:	f7ff febd 	bl	800d184 <_Balloc>
 800d40a:	4602      	mov	r2, r0
 800d40c:	b928      	cbnz	r0, 800d41a <__i2b+0x1a>
 800d40e:	4b05      	ldr	r3, [pc, #20]	@ (800d424 <__i2b+0x24>)
 800d410:	4805      	ldr	r0, [pc, #20]	@ (800d428 <__i2b+0x28>)
 800d412:	f240 1145 	movw	r1, #325	@ 0x145
 800d416:	f001 fab5 	bl	800e984 <__assert_func>
 800d41a:	2301      	movs	r3, #1
 800d41c:	6144      	str	r4, [r0, #20]
 800d41e:	6103      	str	r3, [r0, #16]
 800d420:	bd10      	pop	{r4, pc}
 800d422:	bf00      	nop
 800d424:	0800f4d9 	.word	0x0800f4d9
 800d428:	0800f561 	.word	0x0800f561

0800d42c <__multiply>:
 800d42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	4614      	mov	r4, r2
 800d432:	690a      	ldr	r2, [r1, #16]
 800d434:	6923      	ldr	r3, [r4, #16]
 800d436:	429a      	cmp	r2, r3
 800d438:	bfa8      	it	ge
 800d43a:	4623      	movge	r3, r4
 800d43c:	460f      	mov	r7, r1
 800d43e:	bfa4      	itt	ge
 800d440:	460c      	movge	r4, r1
 800d442:	461f      	movge	r7, r3
 800d444:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d448:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d44c:	68a3      	ldr	r3, [r4, #8]
 800d44e:	6861      	ldr	r1, [r4, #4]
 800d450:	eb0a 0609 	add.w	r6, sl, r9
 800d454:	42b3      	cmp	r3, r6
 800d456:	b085      	sub	sp, #20
 800d458:	bfb8      	it	lt
 800d45a:	3101      	addlt	r1, #1
 800d45c:	f7ff fe92 	bl	800d184 <_Balloc>
 800d460:	b930      	cbnz	r0, 800d470 <__multiply+0x44>
 800d462:	4602      	mov	r2, r0
 800d464:	4b44      	ldr	r3, [pc, #272]	@ (800d578 <__multiply+0x14c>)
 800d466:	4845      	ldr	r0, [pc, #276]	@ (800d57c <__multiply+0x150>)
 800d468:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d46c:	f001 fa8a 	bl	800e984 <__assert_func>
 800d470:	f100 0514 	add.w	r5, r0, #20
 800d474:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d478:	462b      	mov	r3, r5
 800d47a:	2200      	movs	r2, #0
 800d47c:	4543      	cmp	r3, r8
 800d47e:	d321      	bcc.n	800d4c4 <__multiply+0x98>
 800d480:	f107 0114 	add.w	r1, r7, #20
 800d484:	f104 0214 	add.w	r2, r4, #20
 800d488:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d48c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d490:	9302      	str	r3, [sp, #8]
 800d492:	1b13      	subs	r3, r2, r4
 800d494:	3b15      	subs	r3, #21
 800d496:	f023 0303 	bic.w	r3, r3, #3
 800d49a:	3304      	adds	r3, #4
 800d49c:	f104 0715 	add.w	r7, r4, #21
 800d4a0:	42ba      	cmp	r2, r7
 800d4a2:	bf38      	it	cc
 800d4a4:	2304      	movcc	r3, #4
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	9b02      	ldr	r3, [sp, #8]
 800d4aa:	9103      	str	r1, [sp, #12]
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	d80c      	bhi.n	800d4ca <__multiply+0x9e>
 800d4b0:	2e00      	cmp	r6, #0
 800d4b2:	dd03      	ble.n	800d4bc <__multiply+0x90>
 800d4b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d05b      	beq.n	800d574 <__multiply+0x148>
 800d4bc:	6106      	str	r6, [r0, #16]
 800d4be:	b005      	add	sp, #20
 800d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c4:	f843 2b04 	str.w	r2, [r3], #4
 800d4c8:	e7d8      	b.n	800d47c <__multiply+0x50>
 800d4ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800d4ce:	f1ba 0f00 	cmp.w	sl, #0
 800d4d2:	d024      	beq.n	800d51e <__multiply+0xf2>
 800d4d4:	f104 0e14 	add.w	lr, r4, #20
 800d4d8:	46a9      	mov	r9, r5
 800d4da:	f04f 0c00 	mov.w	ip, #0
 800d4de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d4e2:	f8d9 3000 	ldr.w	r3, [r9]
 800d4e6:	fa1f fb87 	uxth.w	fp, r7
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800d4f0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d4f4:	f8d9 7000 	ldr.w	r7, [r9]
 800d4f8:	4463      	add	r3, ip
 800d4fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d4fe:	fb0a c70b 	mla	r7, sl, fp, ip
 800d502:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d506:	b29b      	uxth	r3, r3
 800d508:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d50c:	4572      	cmp	r2, lr
 800d50e:	f849 3b04 	str.w	r3, [r9], #4
 800d512:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d516:	d8e2      	bhi.n	800d4de <__multiply+0xb2>
 800d518:	9b01      	ldr	r3, [sp, #4]
 800d51a:	f845 c003 	str.w	ip, [r5, r3]
 800d51e:	9b03      	ldr	r3, [sp, #12]
 800d520:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d524:	3104      	adds	r1, #4
 800d526:	f1b9 0f00 	cmp.w	r9, #0
 800d52a:	d021      	beq.n	800d570 <__multiply+0x144>
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	f104 0c14 	add.w	ip, r4, #20
 800d532:	46ae      	mov	lr, r5
 800d534:	f04f 0a00 	mov.w	sl, #0
 800d538:	f8bc b000 	ldrh.w	fp, [ip]
 800d53c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d540:	fb09 770b 	mla	r7, r9, fp, r7
 800d544:	4457      	add	r7, sl
 800d546:	b29b      	uxth	r3, r3
 800d548:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d54c:	f84e 3b04 	str.w	r3, [lr], #4
 800d550:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d554:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d558:	f8be 3000 	ldrh.w	r3, [lr]
 800d55c:	fb09 330a 	mla	r3, r9, sl, r3
 800d560:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d564:	4562      	cmp	r2, ip
 800d566:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d56a:	d8e5      	bhi.n	800d538 <__multiply+0x10c>
 800d56c:	9f01      	ldr	r7, [sp, #4]
 800d56e:	51eb      	str	r3, [r5, r7]
 800d570:	3504      	adds	r5, #4
 800d572:	e799      	b.n	800d4a8 <__multiply+0x7c>
 800d574:	3e01      	subs	r6, #1
 800d576:	e79b      	b.n	800d4b0 <__multiply+0x84>
 800d578:	0800f4d9 	.word	0x0800f4d9
 800d57c:	0800f561 	.word	0x0800f561

0800d580 <__pow5mult>:
 800d580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d584:	4615      	mov	r5, r2
 800d586:	f012 0203 	ands.w	r2, r2, #3
 800d58a:	4607      	mov	r7, r0
 800d58c:	460e      	mov	r6, r1
 800d58e:	d007      	beq.n	800d5a0 <__pow5mult+0x20>
 800d590:	4c25      	ldr	r4, [pc, #148]	@ (800d628 <__pow5mult+0xa8>)
 800d592:	3a01      	subs	r2, #1
 800d594:	2300      	movs	r3, #0
 800d596:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d59a:	f7ff fe55 	bl	800d248 <__multadd>
 800d59e:	4606      	mov	r6, r0
 800d5a0:	10ad      	asrs	r5, r5, #2
 800d5a2:	d03d      	beq.n	800d620 <__pow5mult+0xa0>
 800d5a4:	69fc      	ldr	r4, [r7, #28]
 800d5a6:	b97c      	cbnz	r4, 800d5c8 <__pow5mult+0x48>
 800d5a8:	2010      	movs	r0, #16
 800d5aa:	f7fe f8bd 	bl	800b728 <malloc>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	61f8      	str	r0, [r7, #28]
 800d5b2:	b928      	cbnz	r0, 800d5c0 <__pow5mult+0x40>
 800d5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d62c <__pow5mult+0xac>)
 800d5b6:	481e      	ldr	r0, [pc, #120]	@ (800d630 <__pow5mult+0xb0>)
 800d5b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d5bc:	f001 f9e2 	bl	800e984 <__assert_func>
 800d5c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5c4:	6004      	str	r4, [r0, #0]
 800d5c6:	60c4      	str	r4, [r0, #12]
 800d5c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d5cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d5d0:	b94c      	cbnz	r4, 800d5e6 <__pow5mult+0x66>
 800d5d2:	f240 2171 	movw	r1, #625	@ 0x271
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f7ff ff12 	bl	800d400 <__i2b>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	6003      	str	r3, [r0, #0]
 800d5e6:	f04f 0900 	mov.w	r9, #0
 800d5ea:	07eb      	lsls	r3, r5, #31
 800d5ec:	d50a      	bpl.n	800d604 <__pow5mult+0x84>
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	4622      	mov	r2, r4
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	f7ff ff1a 	bl	800d42c <__multiply>
 800d5f8:	4631      	mov	r1, r6
 800d5fa:	4680      	mov	r8, r0
 800d5fc:	4638      	mov	r0, r7
 800d5fe:	f7ff fe01 	bl	800d204 <_Bfree>
 800d602:	4646      	mov	r6, r8
 800d604:	106d      	asrs	r5, r5, #1
 800d606:	d00b      	beq.n	800d620 <__pow5mult+0xa0>
 800d608:	6820      	ldr	r0, [r4, #0]
 800d60a:	b938      	cbnz	r0, 800d61c <__pow5mult+0x9c>
 800d60c:	4622      	mov	r2, r4
 800d60e:	4621      	mov	r1, r4
 800d610:	4638      	mov	r0, r7
 800d612:	f7ff ff0b 	bl	800d42c <__multiply>
 800d616:	6020      	str	r0, [r4, #0]
 800d618:	f8c0 9000 	str.w	r9, [r0]
 800d61c:	4604      	mov	r4, r0
 800d61e:	e7e4      	b.n	800d5ea <__pow5mult+0x6a>
 800d620:	4630      	mov	r0, r6
 800d622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d626:	bf00      	nop
 800d628:	0800f5bc 	.word	0x0800f5bc
 800d62c:	0800f54a 	.word	0x0800f54a
 800d630:	0800f561 	.word	0x0800f561

0800d634 <__lshift>:
 800d634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d638:	460c      	mov	r4, r1
 800d63a:	6849      	ldr	r1, [r1, #4]
 800d63c:	6923      	ldr	r3, [r4, #16]
 800d63e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d642:	68a3      	ldr	r3, [r4, #8]
 800d644:	4607      	mov	r7, r0
 800d646:	4691      	mov	r9, r2
 800d648:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d64c:	f108 0601 	add.w	r6, r8, #1
 800d650:	42b3      	cmp	r3, r6
 800d652:	db0b      	blt.n	800d66c <__lshift+0x38>
 800d654:	4638      	mov	r0, r7
 800d656:	f7ff fd95 	bl	800d184 <_Balloc>
 800d65a:	4605      	mov	r5, r0
 800d65c:	b948      	cbnz	r0, 800d672 <__lshift+0x3e>
 800d65e:	4602      	mov	r2, r0
 800d660:	4b28      	ldr	r3, [pc, #160]	@ (800d704 <__lshift+0xd0>)
 800d662:	4829      	ldr	r0, [pc, #164]	@ (800d708 <__lshift+0xd4>)
 800d664:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d668:	f001 f98c 	bl	800e984 <__assert_func>
 800d66c:	3101      	adds	r1, #1
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	e7ee      	b.n	800d650 <__lshift+0x1c>
 800d672:	2300      	movs	r3, #0
 800d674:	f100 0114 	add.w	r1, r0, #20
 800d678:	f100 0210 	add.w	r2, r0, #16
 800d67c:	4618      	mov	r0, r3
 800d67e:	4553      	cmp	r3, sl
 800d680:	db33      	blt.n	800d6ea <__lshift+0xb6>
 800d682:	6920      	ldr	r0, [r4, #16]
 800d684:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d688:	f104 0314 	add.w	r3, r4, #20
 800d68c:	f019 091f 	ands.w	r9, r9, #31
 800d690:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d694:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d698:	d02b      	beq.n	800d6f2 <__lshift+0xbe>
 800d69a:	f1c9 0e20 	rsb	lr, r9, #32
 800d69e:	468a      	mov	sl, r1
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	6818      	ldr	r0, [r3, #0]
 800d6a4:	fa00 f009 	lsl.w	r0, r0, r9
 800d6a8:	4310      	orrs	r0, r2
 800d6aa:	f84a 0b04 	str.w	r0, [sl], #4
 800d6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6b2:	459c      	cmp	ip, r3
 800d6b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6b8:	d8f3      	bhi.n	800d6a2 <__lshift+0x6e>
 800d6ba:	ebac 0304 	sub.w	r3, ip, r4
 800d6be:	3b15      	subs	r3, #21
 800d6c0:	f023 0303 	bic.w	r3, r3, #3
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	f104 0015 	add.w	r0, r4, #21
 800d6ca:	4584      	cmp	ip, r0
 800d6cc:	bf38      	it	cc
 800d6ce:	2304      	movcc	r3, #4
 800d6d0:	50ca      	str	r2, [r1, r3]
 800d6d2:	b10a      	cbz	r2, 800d6d8 <__lshift+0xa4>
 800d6d4:	f108 0602 	add.w	r6, r8, #2
 800d6d8:	3e01      	subs	r6, #1
 800d6da:	4638      	mov	r0, r7
 800d6dc:	612e      	str	r6, [r5, #16]
 800d6de:	4621      	mov	r1, r4
 800d6e0:	f7ff fd90 	bl	800d204 <_Bfree>
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	e7c5      	b.n	800d67e <__lshift+0x4a>
 800d6f2:	3904      	subs	r1, #4
 800d6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d6fc:	459c      	cmp	ip, r3
 800d6fe:	d8f9      	bhi.n	800d6f4 <__lshift+0xc0>
 800d700:	e7ea      	b.n	800d6d8 <__lshift+0xa4>
 800d702:	bf00      	nop
 800d704:	0800f4d9 	.word	0x0800f4d9
 800d708:	0800f561 	.word	0x0800f561

0800d70c <__mcmp>:
 800d70c:	690a      	ldr	r2, [r1, #16]
 800d70e:	4603      	mov	r3, r0
 800d710:	6900      	ldr	r0, [r0, #16]
 800d712:	1a80      	subs	r0, r0, r2
 800d714:	b530      	push	{r4, r5, lr}
 800d716:	d10e      	bne.n	800d736 <__mcmp+0x2a>
 800d718:	3314      	adds	r3, #20
 800d71a:	3114      	adds	r1, #20
 800d71c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d720:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d72c:	4295      	cmp	r5, r2
 800d72e:	d003      	beq.n	800d738 <__mcmp+0x2c>
 800d730:	d205      	bcs.n	800d73e <__mcmp+0x32>
 800d732:	f04f 30ff 	mov.w	r0, #4294967295
 800d736:	bd30      	pop	{r4, r5, pc}
 800d738:	42a3      	cmp	r3, r4
 800d73a:	d3f3      	bcc.n	800d724 <__mcmp+0x18>
 800d73c:	e7fb      	b.n	800d736 <__mcmp+0x2a>
 800d73e:	2001      	movs	r0, #1
 800d740:	e7f9      	b.n	800d736 <__mcmp+0x2a>
	...

0800d744 <__mdiff>:
 800d744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d748:	4689      	mov	r9, r1
 800d74a:	4606      	mov	r6, r0
 800d74c:	4611      	mov	r1, r2
 800d74e:	4648      	mov	r0, r9
 800d750:	4614      	mov	r4, r2
 800d752:	f7ff ffdb 	bl	800d70c <__mcmp>
 800d756:	1e05      	subs	r5, r0, #0
 800d758:	d112      	bne.n	800d780 <__mdiff+0x3c>
 800d75a:	4629      	mov	r1, r5
 800d75c:	4630      	mov	r0, r6
 800d75e:	f7ff fd11 	bl	800d184 <_Balloc>
 800d762:	4602      	mov	r2, r0
 800d764:	b928      	cbnz	r0, 800d772 <__mdiff+0x2e>
 800d766:	4b3f      	ldr	r3, [pc, #252]	@ (800d864 <__mdiff+0x120>)
 800d768:	f240 2137 	movw	r1, #567	@ 0x237
 800d76c:	483e      	ldr	r0, [pc, #248]	@ (800d868 <__mdiff+0x124>)
 800d76e:	f001 f909 	bl	800e984 <__assert_func>
 800d772:	2301      	movs	r3, #1
 800d774:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d778:	4610      	mov	r0, r2
 800d77a:	b003      	add	sp, #12
 800d77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d780:	bfbc      	itt	lt
 800d782:	464b      	movlt	r3, r9
 800d784:	46a1      	movlt	r9, r4
 800d786:	4630      	mov	r0, r6
 800d788:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d78c:	bfba      	itte	lt
 800d78e:	461c      	movlt	r4, r3
 800d790:	2501      	movlt	r5, #1
 800d792:	2500      	movge	r5, #0
 800d794:	f7ff fcf6 	bl	800d184 <_Balloc>
 800d798:	4602      	mov	r2, r0
 800d79a:	b918      	cbnz	r0, 800d7a4 <__mdiff+0x60>
 800d79c:	4b31      	ldr	r3, [pc, #196]	@ (800d864 <__mdiff+0x120>)
 800d79e:	f240 2145 	movw	r1, #581	@ 0x245
 800d7a2:	e7e3      	b.n	800d76c <__mdiff+0x28>
 800d7a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d7a8:	6926      	ldr	r6, [r4, #16]
 800d7aa:	60c5      	str	r5, [r0, #12]
 800d7ac:	f109 0310 	add.w	r3, r9, #16
 800d7b0:	f109 0514 	add.w	r5, r9, #20
 800d7b4:	f104 0e14 	add.w	lr, r4, #20
 800d7b8:	f100 0b14 	add.w	fp, r0, #20
 800d7bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d7c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d7c4:	9301      	str	r3, [sp, #4]
 800d7c6:	46d9      	mov	r9, fp
 800d7c8:	f04f 0c00 	mov.w	ip, #0
 800d7cc:	9b01      	ldr	r3, [sp, #4]
 800d7ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d7d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	fa1f f38a 	uxth.w	r3, sl
 800d7dc:	4619      	mov	r1, r3
 800d7de:	b283      	uxth	r3, r0
 800d7e0:	1acb      	subs	r3, r1, r3
 800d7e2:	0c00      	lsrs	r0, r0, #16
 800d7e4:	4463      	add	r3, ip
 800d7e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d7ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d7f4:	4576      	cmp	r6, lr
 800d7f6:	f849 3b04 	str.w	r3, [r9], #4
 800d7fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7fe:	d8e5      	bhi.n	800d7cc <__mdiff+0x88>
 800d800:	1b33      	subs	r3, r6, r4
 800d802:	3b15      	subs	r3, #21
 800d804:	f023 0303 	bic.w	r3, r3, #3
 800d808:	3415      	adds	r4, #21
 800d80a:	3304      	adds	r3, #4
 800d80c:	42a6      	cmp	r6, r4
 800d80e:	bf38      	it	cc
 800d810:	2304      	movcc	r3, #4
 800d812:	441d      	add	r5, r3
 800d814:	445b      	add	r3, fp
 800d816:	461e      	mov	r6, r3
 800d818:	462c      	mov	r4, r5
 800d81a:	4544      	cmp	r4, r8
 800d81c:	d30e      	bcc.n	800d83c <__mdiff+0xf8>
 800d81e:	f108 0103 	add.w	r1, r8, #3
 800d822:	1b49      	subs	r1, r1, r5
 800d824:	f021 0103 	bic.w	r1, r1, #3
 800d828:	3d03      	subs	r5, #3
 800d82a:	45a8      	cmp	r8, r5
 800d82c:	bf38      	it	cc
 800d82e:	2100      	movcc	r1, #0
 800d830:	440b      	add	r3, r1
 800d832:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d836:	b191      	cbz	r1, 800d85e <__mdiff+0x11a>
 800d838:	6117      	str	r7, [r2, #16]
 800d83a:	e79d      	b.n	800d778 <__mdiff+0x34>
 800d83c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d840:	46e6      	mov	lr, ip
 800d842:	0c08      	lsrs	r0, r1, #16
 800d844:	fa1c fc81 	uxtah	ip, ip, r1
 800d848:	4471      	add	r1, lr
 800d84a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d84e:	b289      	uxth	r1, r1
 800d850:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d854:	f846 1b04 	str.w	r1, [r6], #4
 800d858:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d85c:	e7dd      	b.n	800d81a <__mdiff+0xd6>
 800d85e:	3f01      	subs	r7, #1
 800d860:	e7e7      	b.n	800d832 <__mdiff+0xee>
 800d862:	bf00      	nop
 800d864:	0800f4d9 	.word	0x0800f4d9
 800d868:	0800f561 	.word	0x0800f561

0800d86c <__ulp>:
 800d86c:	b082      	sub	sp, #8
 800d86e:	ed8d 0b00 	vstr	d0, [sp]
 800d872:	9a01      	ldr	r2, [sp, #4]
 800d874:	4b0f      	ldr	r3, [pc, #60]	@ (800d8b4 <__ulp+0x48>)
 800d876:	4013      	ands	r3, r2
 800d878:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	dc08      	bgt.n	800d892 <__ulp+0x26>
 800d880:	425b      	negs	r3, r3
 800d882:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d886:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d88a:	da04      	bge.n	800d896 <__ulp+0x2a>
 800d88c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d890:	4113      	asrs	r3, r2
 800d892:	2200      	movs	r2, #0
 800d894:	e008      	b.n	800d8a8 <__ulp+0x3c>
 800d896:	f1a2 0314 	sub.w	r3, r2, #20
 800d89a:	2b1e      	cmp	r3, #30
 800d89c:	bfda      	itte	le
 800d89e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d8a2:	40da      	lsrle	r2, r3
 800d8a4:	2201      	movgt	r2, #1
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	ec41 0b10 	vmov	d0, r0, r1
 800d8b0:	b002      	add	sp, #8
 800d8b2:	4770      	bx	lr
 800d8b4:	7ff00000 	.word	0x7ff00000

0800d8b8 <__b2d>:
 800d8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8bc:	6906      	ldr	r6, [r0, #16]
 800d8be:	f100 0814 	add.w	r8, r0, #20
 800d8c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d8c6:	1f37      	subs	r7, r6, #4
 800d8c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f7ff fd4b 	bl	800d368 <__hi0bits>
 800d8d2:	f1c0 0320 	rsb	r3, r0, #32
 800d8d6:	280a      	cmp	r0, #10
 800d8d8:	600b      	str	r3, [r1, #0]
 800d8da:	491b      	ldr	r1, [pc, #108]	@ (800d948 <__b2d+0x90>)
 800d8dc:	dc15      	bgt.n	800d90a <__b2d+0x52>
 800d8de:	f1c0 0c0b 	rsb	ip, r0, #11
 800d8e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800d8e6:	45b8      	cmp	r8, r7
 800d8e8:	ea43 0501 	orr.w	r5, r3, r1
 800d8ec:	bf34      	ite	cc
 800d8ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d8f2:	2300      	movcs	r3, #0
 800d8f4:	3015      	adds	r0, #21
 800d8f6:	fa02 f000 	lsl.w	r0, r2, r0
 800d8fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800d8fe:	4303      	orrs	r3, r0
 800d900:	461c      	mov	r4, r3
 800d902:	ec45 4b10 	vmov	d0, r4, r5
 800d906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90a:	45b8      	cmp	r8, r7
 800d90c:	bf3a      	itte	cc
 800d90e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d912:	f1a6 0708 	subcc.w	r7, r6, #8
 800d916:	2300      	movcs	r3, #0
 800d918:	380b      	subs	r0, #11
 800d91a:	d012      	beq.n	800d942 <__b2d+0x8a>
 800d91c:	f1c0 0120 	rsb	r1, r0, #32
 800d920:	fa23 f401 	lsr.w	r4, r3, r1
 800d924:	4082      	lsls	r2, r0
 800d926:	4322      	orrs	r2, r4
 800d928:	4547      	cmp	r7, r8
 800d92a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d92e:	bf8c      	ite	hi
 800d930:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d934:	2200      	movls	r2, #0
 800d936:	4083      	lsls	r3, r0
 800d938:	40ca      	lsrs	r2, r1
 800d93a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d93e:	4313      	orrs	r3, r2
 800d940:	e7de      	b.n	800d900 <__b2d+0x48>
 800d942:	ea42 0501 	orr.w	r5, r2, r1
 800d946:	e7db      	b.n	800d900 <__b2d+0x48>
 800d948:	3ff00000 	.word	0x3ff00000

0800d94c <__d2b>:
 800d94c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d950:	460f      	mov	r7, r1
 800d952:	2101      	movs	r1, #1
 800d954:	ec59 8b10 	vmov	r8, r9, d0
 800d958:	4616      	mov	r6, r2
 800d95a:	f7ff fc13 	bl	800d184 <_Balloc>
 800d95e:	4604      	mov	r4, r0
 800d960:	b930      	cbnz	r0, 800d970 <__d2b+0x24>
 800d962:	4602      	mov	r2, r0
 800d964:	4b23      	ldr	r3, [pc, #140]	@ (800d9f4 <__d2b+0xa8>)
 800d966:	4824      	ldr	r0, [pc, #144]	@ (800d9f8 <__d2b+0xac>)
 800d968:	f240 310f 	movw	r1, #783	@ 0x30f
 800d96c:	f001 f80a 	bl	800e984 <__assert_func>
 800d970:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d974:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d978:	b10d      	cbz	r5, 800d97e <__d2b+0x32>
 800d97a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	f1b8 0300 	subs.w	r3, r8, #0
 800d984:	d023      	beq.n	800d9ce <__d2b+0x82>
 800d986:	4668      	mov	r0, sp
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	f7ff fd0c 	bl	800d3a6 <__lo0bits>
 800d98e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d992:	b1d0      	cbz	r0, 800d9ca <__d2b+0x7e>
 800d994:	f1c0 0320 	rsb	r3, r0, #32
 800d998:	fa02 f303 	lsl.w	r3, r2, r3
 800d99c:	430b      	orrs	r3, r1
 800d99e:	40c2      	lsrs	r2, r0
 800d9a0:	6163      	str	r3, [r4, #20]
 800d9a2:	9201      	str	r2, [sp, #4]
 800d9a4:	9b01      	ldr	r3, [sp, #4]
 800d9a6:	61a3      	str	r3, [r4, #24]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	bf0c      	ite	eq
 800d9ac:	2201      	moveq	r2, #1
 800d9ae:	2202      	movne	r2, #2
 800d9b0:	6122      	str	r2, [r4, #16]
 800d9b2:	b1a5      	cbz	r5, 800d9de <__d2b+0x92>
 800d9b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9b8:	4405      	add	r5, r0
 800d9ba:	603d      	str	r5, [r7, #0]
 800d9bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d9c0:	6030      	str	r0, [r6, #0]
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	b003      	add	sp, #12
 800d9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ca:	6161      	str	r1, [r4, #20]
 800d9cc:	e7ea      	b.n	800d9a4 <__d2b+0x58>
 800d9ce:	a801      	add	r0, sp, #4
 800d9d0:	f7ff fce9 	bl	800d3a6 <__lo0bits>
 800d9d4:	9b01      	ldr	r3, [sp, #4]
 800d9d6:	6163      	str	r3, [r4, #20]
 800d9d8:	3020      	adds	r0, #32
 800d9da:	2201      	movs	r2, #1
 800d9dc:	e7e8      	b.n	800d9b0 <__d2b+0x64>
 800d9de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d9e6:	6038      	str	r0, [r7, #0]
 800d9e8:	6918      	ldr	r0, [r3, #16]
 800d9ea:	f7ff fcbd 	bl	800d368 <__hi0bits>
 800d9ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9f2:	e7e5      	b.n	800d9c0 <__d2b+0x74>
 800d9f4:	0800f4d9 	.word	0x0800f4d9
 800d9f8:	0800f561 	.word	0x0800f561

0800d9fc <__ratio>:
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	b085      	sub	sp, #20
 800da02:	e9cd 1000 	strd	r1, r0, [sp]
 800da06:	a902      	add	r1, sp, #8
 800da08:	f7ff ff56 	bl	800d8b8 <__b2d>
 800da0c:	9800      	ldr	r0, [sp, #0]
 800da0e:	a903      	add	r1, sp, #12
 800da10:	ec55 4b10 	vmov	r4, r5, d0
 800da14:	f7ff ff50 	bl	800d8b8 <__b2d>
 800da18:	9b01      	ldr	r3, [sp, #4]
 800da1a:	6919      	ldr	r1, [r3, #16]
 800da1c:	9b00      	ldr	r3, [sp, #0]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	1ac9      	subs	r1, r1, r3
 800da22:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800da26:	1a9b      	subs	r3, r3, r2
 800da28:	ec5b ab10 	vmov	sl, fp, d0
 800da2c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800da30:	2b00      	cmp	r3, #0
 800da32:	bfce      	itee	gt
 800da34:	462a      	movgt	r2, r5
 800da36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da3a:	465a      	movle	r2, fp
 800da3c:	462f      	mov	r7, r5
 800da3e:	46d9      	mov	r9, fp
 800da40:	bfcc      	ite	gt
 800da42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da46:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800da4a:	464b      	mov	r3, r9
 800da4c:	4652      	mov	r2, sl
 800da4e:	4620      	mov	r0, r4
 800da50:	4639      	mov	r1, r7
 800da52:	f7f2 ff0b 	bl	800086c <__aeabi_ddiv>
 800da56:	ec41 0b10 	vmov	d0, r0, r1
 800da5a:	b005      	add	sp, #20
 800da5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da60 <__copybits>:
 800da60:	3901      	subs	r1, #1
 800da62:	b570      	push	{r4, r5, r6, lr}
 800da64:	1149      	asrs	r1, r1, #5
 800da66:	6914      	ldr	r4, [r2, #16]
 800da68:	3101      	adds	r1, #1
 800da6a:	f102 0314 	add.w	r3, r2, #20
 800da6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da76:	1f05      	subs	r5, r0, #4
 800da78:	42a3      	cmp	r3, r4
 800da7a:	d30c      	bcc.n	800da96 <__copybits+0x36>
 800da7c:	1aa3      	subs	r3, r4, r2
 800da7e:	3b11      	subs	r3, #17
 800da80:	f023 0303 	bic.w	r3, r3, #3
 800da84:	3211      	adds	r2, #17
 800da86:	42a2      	cmp	r2, r4
 800da88:	bf88      	it	hi
 800da8a:	2300      	movhi	r3, #0
 800da8c:	4418      	add	r0, r3
 800da8e:	2300      	movs	r3, #0
 800da90:	4288      	cmp	r0, r1
 800da92:	d305      	bcc.n	800daa0 <__copybits+0x40>
 800da94:	bd70      	pop	{r4, r5, r6, pc}
 800da96:	f853 6b04 	ldr.w	r6, [r3], #4
 800da9a:	f845 6f04 	str.w	r6, [r5, #4]!
 800da9e:	e7eb      	b.n	800da78 <__copybits+0x18>
 800daa0:	f840 3b04 	str.w	r3, [r0], #4
 800daa4:	e7f4      	b.n	800da90 <__copybits+0x30>

0800daa6 <__any_on>:
 800daa6:	f100 0214 	add.w	r2, r0, #20
 800daaa:	6900      	ldr	r0, [r0, #16]
 800daac:	114b      	asrs	r3, r1, #5
 800daae:	4298      	cmp	r0, r3
 800dab0:	b510      	push	{r4, lr}
 800dab2:	db11      	blt.n	800dad8 <__any_on+0x32>
 800dab4:	dd0a      	ble.n	800dacc <__any_on+0x26>
 800dab6:	f011 011f 	ands.w	r1, r1, #31
 800daba:	d007      	beq.n	800dacc <__any_on+0x26>
 800dabc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dac0:	fa24 f001 	lsr.w	r0, r4, r1
 800dac4:	fa00 f101 	lsl.w	r1, r0, r1
 800dac8:	428c      	cmp	r4, r1
 800daca:	d10b      	bne.n	800dae4 <__any_on+0x3e>
 800dacc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d803      	bhi.n	800dadc <__any_on+0x36>
 800dad4:	2000      	movs	r0, #0
 800dad6:	bd10      	pop	{r4, pc}
 800dad8:	4603      	mov	r3, r0
 800dada:	e7f7      	b.n	800dacc <__any_on+0x26>
 800dadc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dae0:	2900      	cmp	r1, #0
 800dae2:	d0f5      	beq.n	800dad0 <__any_on+0x2a>
 800dae4:	2001      	movs	r0, #1
 800dae6:	e7f6      	b.n	800dad6 <__any_on+0x30>

0800dae8 <_malloc_usable_size_r>:
 800dae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daec:	1f18      	subs	r0, r3, #4
 800daee:	2b00      	cmp	r3, #0
 800daf0:	bfbc      	itt	lt
 800daf2:	580b      	ldrlt	r3, [r1, r0]
 800daf4:	18c0      	addlt	r0, r0, r3
 800daf6:	4770      	bx	lr

0800daf8 <__ascii_wctomb>:
 800daf8:	4603      	mov	r3, r0
 800dafa:	4608      	mov	r0, r1
 800dafc:	b141      	cbz	r1, 800db10 <__ascii_wctomb+0x18>
 800dafe:	2aff      	cmp	r2, #255	@ 0xff
 800db00:	d904      	bls.n	800db0c <__ascii_wctomb+0x14>
 800db02:	228a      	movs	r2, #138	@ 0x8a
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	f04f 30ff 	mov.w	r0, #4294967295
 800db0a:	4770      	bx	lr
 800db0c:	700a      	strb	r2, [r1, #0]
 800db0e:	2001      	movs	r0, #1
 800db10:	4770      	bx	lr

0800db12 <__ssputs_r>:
 800db12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db16:	688e      	ldr	r6, [r1, #8]
 800db18:	461f      	mov	r7, r3
 800db1a:	42be      	cmp	r6, r7
 800db1c:	680b      	ldr	r3, [r1, #0]
 800db1e:	4682      	mov	sl, r0
 800db20:	460c      	mov	r4, r1
 800db22:	4690      	mov	r8, r2
 800db24:	d82d      	bhi.n	800db82 <__ssputs_r+0x70>
 800db26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800db2e:	d026      	beq.n	800db7e <__ssputs_r+0x6c>
 800db30:	6965      	ldr	r5, [r4, #20]
 800db32:	6909      	ldr	r1, [r1, #16]
 800db34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db38:	eba3 0901 	sub.w	r9, r3, r1
 800db3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db40:	1c7b      	adds	r3, r7, #1
 800db42:	444b      	add	r3, r9
 800db44:	106d      	asrs	r5, r5, #1
 800db46:	429d      	cmp	r5, r3
 800db48:	bf38      	it	cc
 800db4a:	461d      	movcc	r5, r3
 800db4c:	0553      	lsls	r3, r2, #21
 800db4e:	d527      	bpl.n	800dba0 <__ssputs_r+0x8e>
 800db50:	4629      	mov	r1, r5
 800db52:	f7fd fe1b 	bl	800b78c <_malloc_r>
 800db56:	4606      	mov	r6, r0
 800db58:	b360      	cbz	r0, 800dbb4 <__ssputs_r+0xa2>
 800db5a:	6921      	ldr	r1, [r4, #16]
 800db5c:	464a      	mov	r2, r9
 800db5e:	f7fe ff64 	bl	800ca2a <memcpy>
 800db62:	89a3      	ldrh	r3, [r4, #12]
 800db64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db6c:	81a3      	strh	r3, [r4, #12]
 800db6e:	6126      	str	r6, [r4, #16]
 800db70:	6165      	str	r5, [r4, #20]
 800db72:	444e      	add	r6, r9
 800db74:	eba5 0509 	sub.w	r5, r5, r9
 800db78:	6026      	str	r6, [r4, #0]
 800db7a:	60a5      	str	r5, [r4, #8]
 800db7c:	463e      	mov	r6, r7
 800db7e:	42be      	cmp	r6, r7
 800db80:	d900      	bls.n	800db84 <__ssputs_r+0x72>
 800db82:	463e      	mov	r6, r7
 800db84:	6820      	ldr	r0, [r4, #0]
 800db86:	4632      	mov	r2, r6
 800db88:	4641      	mov	r1, r8
 800db8a:	f000 fee0 	bl	800e94e <memmove>
 800db8e:	68a3      	ldr	r3, [r4, #8]
 800db90:	1b9b      	subs	r3, r3, r6
 800db92:	60a3      	str	r3, [r4, #8]
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	4433      	add	r3, r6
 800db98:	6023      	str	r3, [r4, #0]
 800db9a:	2000      	movs	r0, #0
 800db9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dba0:	462a      	mov	r2, r5
 800dba2:	f7fd fe87 	bl	800b8b4 <_realloc_r>
 800dba6:	4606      	mov	r6, r0
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	d1e0      	bne.n	800db6e <__ssputs_r+0x5c>
 800dbac:	6921      	ldr	r1, [r4, #16]
 800dbae:	4650      	mov	r0, sl
 800dbb0:	f7fe ff52 	bl	800ca58 <_free_r>
 800dbb4:	230c      	movs	r3, #12
 800dbb6:	f8ca 3000 	str.w	r3, [sl]
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc6:	e7e9      	b.n	800db9c <__ssputs_r+0x8a>

0800dbc8 <_svfiprintf_r>:
 800dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	4698      	mov	r8, r3
 800dbce:	898b      	ldrh	r3, [r1, #12]
 800dbd0:	061b      	lsls	r3, r3, #24
 800dbd2:	b09d      	sub	sp, #116	@ 0x74
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	460d      	mov	r5, r1
 800dbd8:	4614      	mov	r4, r2
 800dbda:	d510      	bpl.n	800dbfe <_svfiprintf_r+0x36>
 800dbdc:	690b      	ldr	r3, [r1, #16]
 800dbde:	b973      	cbnz	r3, 800dbfe <_svfiprintf_r+0x36>
 800dbe0:	2140      	movs	r1, #64	@ 0x40
 800dbe2:	f7fd fdd3 	bl	800b78c <_malloc_r>
 800dbe6:	6028      	str	r0, [r5, #0]
 800dbe8:	6128      	str	r0, [r5, #16]
 800dbea:	b930      	cbnz	r0, 800dbfa <_svfiprintf_r+0x32>
 800dbec:	230c      	movs	r3, #12
 800dbee:	603b      	str	r3, [r7, #0]
 800dbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf4:	b01d      	add	sp, #116	@ 0x74
 800dbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfa:	2340      	movs	r3, #64	@ 0x40
 800dbfc:	616b      	str	r3, [r5, #20]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc02:	2320      	movs	r3, #32
 800dc04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc08:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc0c:	2330      	movs	r3, #48	@ 0x30
 800dc0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ddac <_svfiprintf_r+0x1e4>
 800dc12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc16:	f04f 0901 	mov.w	r9, #1
 800dc1a:	4623      	mov	r3, r4
 800dc1c:	469a      	mov	sl, r3
 800dc1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc22:	b10a      	cbz	r2, 800dc28 <_svfiprintf_r+0x60>
 800dc24:	2a25      	cmp	r2, #37	@ 0x25
 800dc26:	d1f9      	bne.n	800dc1c <_svfiprintf_r+0x54>
 800dc28:	ebba 0b04 	subs.w	fp, sl, r4
 800dc2c:	d00b      	beq.n	800dc46 <_svfiprintf_r+0x7e>
 800dc2e:	465b      	mov	r3, fp
 800dc30:	4622      	mov	r2, r4
 800dc32:	4629      	mov	r1, r5
 800dc34:	4638      	mov	r0, r7
 800dc36:	f7ff ff6c 	bl	800db12 <__ssputs_r>
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	f000 80a7 	beq.w	800dd8e <_svfiprintf_r+0x1c6>
 800dc40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc42:	445a      	add	r2, fp
 800dc44:	9209      	str	r2, [sp, #36]	@ 0x24
 800dc46:	f89a 3000 	ldrb.w	r3, [sl]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f000 809f 	beq.w	800dd8e <_svfiprintf_r+0x1c6>
 800dc50:	2300      	movs	r3, #0
 800dc52:	f04f 32ff 	mov.w	r2, #4294967295
 800dc56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc5a:	f10a 0a01 	add.w	sl, sl, #1
 800dc5e:	9304      	str	r3, [sp, #16]
 800dc60:	9307      	str	r3, [sp, #28]
 800dc62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc66:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc68:	4654      	mov	r4, sl
 800dc6a:	2205      	movs	r2, #5
 800dc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc70:	484e      	ldr	r0, [pc, #312]	@ (800ddac <_svfiprintf_r+0x1e4>)
 800dc72:	f7f2 fac5 	bl	8000200 <memchr>
 800dc76:	9a04      	ldr	r2, [sp, #16]
 800dc78:	b9d8      	cbnz	r0, 800dcb2 <_svfiprintf_r+0xea>
 800dc7a:	06d0      	lsls	r0, r2, #27
 800dc7c:	bf44      	itt	mi
 800dc7e:	2320      	movmi	r3, #32
 800dc80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc84:	0711      	lsls	r1, r2, #28
 800dc86:	bf44      	itt	mi
 800dc88:	232b      	movmi	r3, #43	@ 0x2b
 800dc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc8e:	f89a 3000 	ldrb.w	r3, [sl]
 800dc92:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc94:	d015      	beq.n	800dcc2 <_svfiprintf_r+0xfa>
 800dc96:	9a07      	ldr	r2, [sp, #28]
 800dc98:	4654      	mov	r4, sl
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	f04f 0c0a 	mov.w	ip, #10
 800dca0:	4621      	mov	r1, r4
 800dca2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dca6:	3b30      	subs	r3, #48	@ 0x30
 800dca8:	2b09      	cmp	r3, #9
 800dcaa:	d94b      	bls.n	800dd44 <_svfiprintf_r+0x17c>
 800dcac:	b1b0      	cbz	r0, 800dcdc <_svfiprintf_r+0x114>
 800dcae:	9207      	str	r2, [sp, #28]
 800dcb0:	e014      	b.n	800dcdc <_svfiprintf_r+0x114>
 800dcb2:	eba0 0308 	sub.w	r3, r0, r8
 800dcb6:	fa09 f303 	lsl.w	r3, r9, r3
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	9304      	str	r3, [sp, #16]
 800dcbe:	46a2      	mov	sl, r4
 800dcc0:	e7d2      	b.n	800dc68 <_svfiprintf_r+0xa0>
 800dcc2:	9b03      	ldr	r3, [sp, #12]
 800dcc4:	1d19      	adds	r1, r3, #4
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	9103      	str	r1, [sp, #12]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	bfbb      	ittet	lt
 800dcce:	425b      	neglt	r3, r3
 800dcd0:	f042 0202 	orrlt.w	r2, r2, #2
 800dcd4:	9307      	strge	r3, [sp, #28]
 800dcd6:	9307      	strlt	r3, [sp, #28]
 800dcd8:	bfb8      	it	lt
 800dcda:	9204      	strlt	r2, [sp, #16]
 800dcdc:	7823      	ldrb	r3, [r4, #0]
 800dcde:	2b2e      	cmp	r3, #46	@ 0x2e
 800dce0:	d10a      	bne.n	800dcf8 <_svfiprintf_r+0x130>
 800dce2:	7863      	ldrb	r3, [r4, #1]
 800dce4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dce6:	d132      	bne.n	800dd4e <_svfiprintf_r+0x186>
 800dce8:	9b03      	ldr	r3, [sp, #12]
 800dcea:	1d1a      	adds	r2, r3, #4
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	9203      	str	r2, [sp, #12]
 800dcf0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dcf4:	3402      	adds	r4, #2
 800dcf6:	9305      	str	r3, [sp, #20]
 800dcf8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ddbc <_svfiprintf_r+0x1f4>
 800dcfc:	7821      	ldrb	r1, [r4, #0]
 800dcfe:	2203      	movs	r2, #3
 800dd00:	4650      	mov	r0, sl
 800dd02:	f7f2 fa7d 	bl	8000200 <memchr>
 800dd06:	b138      	cbz	r0, 800dd18 <_svfiprintf_r+0x150>
 800dd08:	9b04      	ldr	r3, [sp, #16]
 800dd0a:	eba0 000a 	sub.w	r0, r0, sl
 800dd0e:	2240      	movs	r2, #64	@ 0x40
 800dd10:	4082      	lsls	r2, r0
 800dd12:	4313      	orrs	r3, r2
 800dd14:	3401      	adds	r4, #1
 800dd16:	9304      	str	r3, [sp, #16]
 800dd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1c:	4824      	ldr	r0, [pc, #144]	@ (800ddb0 <_svfiprintf_r+0x1e8>)
 800dd1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd22:	2206      	movs	r2, #6
 800dd24:	f7f2 fa6c 	bl	8000200 <memchr>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d036      	beq.n	800dd9a <_svfiprintf_r+0x1d2>
 800dd2c:	4b21      	ldr	r3, [pc, #132]	@ (800ddb4 <_svfiprintf_r+0x1ec>)
 800dd2e:	bb1b      	cbnz	r3, 800dd78 <_svfiprintf_r+0x1b0>
 800dd30:	9b03      	ldr	r3, [sp, #12]
 800dd32:	3307      	adds	r3, #7
 800dd34:	f023 0307 	bic.w	r3, r3, #7
 800dd38:	3308      	adds	r3, #8
 800dd3a:	9303      	str	r3, [sp, #12]
 800dd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd3e:	4433      	add	r3, r6
 800dd40:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd42:	e76a      	b.n	800dc1a <_svfiprintf_r+0x52>
 800dd44:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd48:	460c      	mov	r4, r1
 800dd4a:	2001      	movs	r0, #1
 800dd4c:	e7a8      	b.n	800dca0 <_svfiprintf_r+0xd8>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	3401      	adds	r4, #1
 800dd52:	9305      	str	r3, [sp, #20]
 800dd54:	4619      	mov	r1, r3
 800dd56:	f04f 0c0a 	mov.w	ip, #10
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd60:	3a30      	subs	r2, #48	@ 0x30
 800dd62:	2a09      	cmp	r2, #9
 800dd64:	d903      	bls.n	800dd6e <_svfiprintf_r+0x1a6>
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d0c6      	beq.n	800dcf8 <_svfiprintf_r+0x130>
 800dd6a:	9105      	str	r1, [sp, #20]
 800dd6c:	e7c4      	b.n	800dcf8 <_svfiprintf_r+0x130>
 800dd6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd72:	4604      	mov	r4, r0
 800dd74:	2301      	movs	r3, #1
 800dd76:	e7f0      	b.n	800dd5a <_svfiprintf_r+0x192>
 800dd78:	ab03      	add	r3, sp, #12
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	462a      	mov	r2, r5
 800dd7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ddb8 <_svfiprintf_r+0x1f0>)
 800dd80:	a904      	add	r1, sp, #16
 800dd82:	4638      	mov	r0, r7
 800dd84:	f3af 8000 	nop.w
 800dd88:	1c42      	adds	r2, r0, #1
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	d1d6      	bne.n	800dd3c <_svfiprintf_r+0x174>
 800dd8e:	89ab      	ldrh	r3, [r5, #12]
 800dd90:	065b      	lsls	r3, r3, #25
 800dd92:	f53f af2d 	bmi.w	800dbf0 <_svfiprintf_r+0x28>
 800dd96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd98:	e72c      	b.n	800dbf4 <_svfiprintf_r+0x2c>
 800dd9a:	ab03      	add	r3, sp, #12
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	462a      	mov	r2, r5
 800dda0:	4b05      	ldr	r3, [pc, #20]	@ (800ddb8 <_svfiprintf_r+0x1f0>)
 800dda2:	a904      	add	r1, sp, #16
 800dda4:	4638      	mov	r0, r7
 800dda6:	f000 fa45 	bl	800e234 <_printf_i>
 800ddaa:	e7ed      	b.n	800dd88 <_svfiprintf_r+0x1c0>
 800ddac:	0800f6b8 	.word	0x0800f6b8
 800ddb0:	0800f6c2 	.word	0x0800f6c2
 800ddb4:	00000000 	.word	0x00000000
 800ddb8:	0800db13 	.word	0x0800db13
 800ddbc:	0800f6be 	.word	0x0800f6be

0800ddc0 <_sungetc_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	1c4b      	adds	r3, r1, #1
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	d103      	bne.n	800ddd0 <_sungetc_r+0x10>
 800ddc8:	f04f 35ff 	mov.w	r5, #4294967295
 800ddcc:	4628      	mov	r0, r5
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	8993      	ldrh	r3, [r2, #12]
 800ddd2:	f023 0320 	bic.w	r3, r3, #32
 800ddd6:	8193      	strh	r3, [r2, #12]
 800ddd8:	6853      	ldr	r3, [r2, #4]
 800ddda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dddc:	b2cd      	uxtb	r5, r1
 800ddde:	b18a      	cbz	r2, 800de04 <_sungetc_r+0x44>
 800dde0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dde2:	429a      	cmp	r2, r3
 800dde4:	dd08      	ble.n	800ddf8 <_sungetc_r+0x38>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	1e5a      	subs	r2, r3, #1
 800ddea:	6022      	str	r2, [r4, #0]
 800ddec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ddf0:	6863      	ldr	r3, [r4, #4]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	6063      	str	r3, [r4, #4]
 800ddf6:	e7e9      	b.n	800ddcc <_sungetc_r+0xc>
 800ddf8:	4621      	mov	r1, r4
 800ddfa:	f000 fd6e 	bl	800e8da <__submore>
 800ddfe:	2800      	cmp	r0, #0
 800de00:	d0f1      	beq.n	800dde6 <_sungetc_r+0x26>
 800de02:	e7e1      	b.n	800ddc8 <_sungetc_r+0x8>
 800de04:	6921      	ldr	r1, [r4, #16]
 800de06:	6822      	ldr	r2, [r4, #0]
 800de08:	b141      	cbz	r1, 800de1c <_sungetc_r+0x5c>
 800de0a:	4291      	cmp	r1, r2
 800de0c:	d206      	bcs.n	800de1c <_sungetc_r+0x5c>
 800de0e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800de12:	42a9      	cmp	r1, r5
 800de14:	d102      	bne.n	800de1c <_sungetc_r+0x5c>
 800de16:	3a01      	subs	r2, #1
 800de18:	6022      	str	r2, [r4, #0]
 800de1a:	e7ea      	b.n	800ddf2 <_sungetc_r+0x32>
 800de1c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800de20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de24:	6363      	str	r3, [r4, #52]	@ 0x34
 800de26:	2303      	movs	r3, #3
 800de28:	63a3      	str	r3, [r4, #56]	@ 0x38
 800de2a:	4623      	mov	r3, r4
 800de2c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	2301      	movs	r3, #1
 800de34:	e7de      	b.n	800ddf4 <_sungetc_r+0x34>

0800de36 <__ssrefill_r>:
 800de36:	b510      	push	{r4, lr}
 800de38:	460c      	mov	r4, r1
 800de3a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800de3c:	b169      	cbz	r1, 800de5a <__ssrefill_r+0x24>
 800de3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de42:	4299      	cmp	r1, r3
 800de44:	d001      	beq.n	800de4a <__ssrefill_r+0x14>
 800de46:	f7fe fe07 	bl	800ca58 <_free_r>
 800de4a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de4c:	6063      	str	r3, [r4, #4]
 800de4e:	2000      	movs	r0, #0
 800de50:	6360      	str	r0, [r4, #52]	@ 0x34
 800de52:	b113      	cbz	r3, 800de5a <__ssrefill_r+0x24>
 800de54:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	bd10      	pop	{r4, pc}
 800de5a:	6923      	ldr	r3, [r4, #16]
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	2300      	movs	r3, #0
 800de60:	6063      	str	r3, [r4, #4]
 800de62:	89a3      	ldrh	r3, [r4, #12]
 800de64:	f043 0320 	orr.w	r3, r3, #32
 800de68:	81a3      	strh	r3, [r4, #12]
 800de6a:	f04f 30ff 	mov.w	r0, #4294967295
 800de6e:	e7f3      	b.n	800de58 <__ssrefill_r+0x22>

0800de70 <__ssvfiscanf_r>:
 800de70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de74:	460c      	mov	r4, r1
 800de76:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800de7a:	2100      	movs	r1, #0
 800de7c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800de80:	49a5      	ldr	r1, [pc, #660]	@ (800e118 <__ssvfiscanf_r+0x2a8>)
 800de82:	91a0      	str	r1, [sp, #640]	@ 0x280
 800de84:	f10d 0804 	add.w	r8, sp, #4
 800de88:	49a4      	ldr	r1, [pc, #656]	@ (800e11c <__ssvfiscanf_r+0x2ac>)
 800de8a:	4fa5      	ldr	r7, [pc, #660]	@ (800e120 <__ssvfiscanf_r+0x2b0>)
 800de8c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800de90:	4606      	mov	r6, r0
 800de92:	91a1      	str	r1, [sp, #644]	@ 0x284
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	7813      	ldrb	r3, [r2, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f000 8158 	beq.w	800e14e <__ssvfiscanf_r+0x2de>
 800de9e:	5cf9      	ldrb	r1, [r7, r3]
 800dea0:	f011 0108 	ands.w	r1, r1, #8
 800dea4:	f102 0501 	add.w	r5, r2, #1
 800dea8:	d019      	beq.n	800dede <__ssvfiscanf_r+0x6e>
 800deaa:	6863      	ldr	r3, [r4, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	dd0f      	ble.n	800ded0 <__ssvfiscanf_r+0x60>
 800deb0:	6823      	ldr	r3, [r4, #0]
 800deb2:	781a      	ldrb	r2, [r3, #0]
 800deb4:	5cba      	ldrb	r2, [r7, r2]
 800deb6:	0712      	lsls	r2, r2, #28
 800deb8:	d401      	bmi.n	800debe <__ssvfiscanf_r+0x4e>
 800deba:	462a      	mov	r2, r5
 800debc:	e7eb      	b.n	800de96 <__ssvfiscanf_r+0x26>
 800debe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dec0:	3201      	adds	r2, #1
 800dec2:	9245      	str	r2, [sp, #276]	@ 0x114
 800dec4:	6862      	ldr	r2, [r4, #4]
 800dec6:	3301      	adds	r3, #1
 800dec8:	3a01      	subs	r2, #1
 800deca:	6062      	str	r2, [r4, #4]
 800decc:	6023      	str	r3, [r4, #0]
 800dece:	e7ec      	b.n	800deaa <__ssvfiscanf_r+0x3a>
 800ded0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ded2:	4621      	mov	r1, r4
 800ded4:	4630      	mov	r0, r6
 800ded6:	4798      	blx	r3
 800ded8:	2800      	cmp	r0, #0
 800deda:	d0e9      	beq.n	800deb0 <__ssvfiscanf_r+0x40>
 800dedc:	e7ed      	b.n	800deba <__ssvfiscanf_r+0x4a>
 800dede:	2b25      	cmp	r3, #37	@ 0x25
 800dee0:	d012      	beq.n	800df08 <__ssvfiscanf_r+0x98>
 800dee2:	4699      	mov	r9, r3
 800dee4:	6863      	ldr	r3, [r4, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f340 8093 	ble.w	800e012 <__ssvfiscanf_r+0x1a2>
 800deec:	6822      	ldr	r2, [r4, #0]
 800deee:	7813      	ldrb	r3, [r2, #0]
 800def0:	454b      	cmp	r3, r9
 800def2:	f040 812c 	bne.w	800e14e <__ssvfiscanf_r+0x2de>
 800def6:	6863      	ldr	r3, [r4, #4]
 800def8:	3b01      	subs	r3, #1
 800defa:	6063      	str	r3, [r4, #4]
 800defc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800defe:	3201      	adds	r2, #1
 800df00:	3301      	adds	r3, #1
 800df02:	6022      	str	r2, [r4, #0]
 800df04:	9345      	str	r3, [sp, #276]	@ 0x114
 800df06:	e7d8      	b.n	800deba <__ssvfiscanf_r+0x4a>
 800df08:	9141      	str	r1, [sp, #260]	@ 0x104
 800df0a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800df0c:	7853      	ldrb	r3, [r2, #1]
 800df0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800df10:	bf02      	ittt	eq
 800df12:	2310      	moveq	r3, #16
 800df14:	1c95      	addeq	r5, r2, #2
 800df16:	9341      	streq	r3, [sp, #260]	@ 0x104
 800df18:	220a      	movs	r2, #10
 800df1a:	46a9      	mov	r9, r5
 800df1c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800df20:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800df24:	2b09      	cmp	r3, #9
 800df26:	d91e      	bls.n	800df66 <__ssvfiscanf_r+0xf6>
 800df28:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e124 <__ssvfiscanf_r+0x2b4>
 800df2c:	2203      	movs	r2, #3
 800df2e:	4650      	mov	r0, sl
 800df30:	f7f2 f966 	bl	8000200 <memchr>
 800df34:	b138      	cbz	r0, 800df46 <__ssvfiscanf_r+0xd6>
 800df36:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800df38:	eba0 000a 	sub.w	r0, r0, sl
 800df3c:	2301      	movs	r3, #1
 800df3e:	4083      	lsls	r3, r0
 800df40:	4313      	orrs	r3, r2
 800df42:	9341      	str	r3, [sp, #260]	@ 0x104
 800df44:	464d      	mov	r5, r9
 800df46:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df4a:	2b78      	cmp	r3, #120	@ 0x78
 800df4c:	d806      	bhi.n	800df5c <__ssvfiscanf_r+0xec>
 800df4e:	2b57      	cmp	r3, #87	@ 0x57
 800df50:	d810      	bhi.n	800df74 <__ssvfiscanf_r+0x104>
 800df52:	2b25      	cmp	r3, #37	@ 0x25
 800df54:	d0c5      	beq.n	800dee2 <__ssvfiscanf_r+0x72>
 800df56:	d857      	bhi.n	800e008 <__ssvfiscanf_r+0x198>
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d065      	beq.n	800e028 <__ssvfiscanf_r+0x1b8>
 800df5c:	2303      	movs	r3, #3
 800df5e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800df60:	230a      	movs	r3, #10
 800df62:	9342      	str	r3, [sp, #264]	@ 0x108
 800df64:	e078      	b.n	800e058 <__ssvfiscanf_r+0x1e8>
 800df66:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800df68:	fb02 1103 	mla	r1, r2, r3, r1
 800df6c:	3930      	subs	r1, #48	@ 0x30
 800df6e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800df70:	464d      	mov	r5, r9
 800df72:	e7d2      	b.n	800df1a <__ssvfiscanf_r+0xaa>
 800df74:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800df78:	2a20      	cmp	r2, #32
 800df7a:	d8ef      	bhi.n	800df5c <__ssvfiscanf_r+0xec>
 800df7c:	a101      	add	r1, pc, #4	@ (adr r1, 800df84 <__ssvfiscanf_r+0x114>)
 800df7e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df82:	bf00      	nop
 800df84:	0800e037 	.word	0x0800e037
 800df88:	0800df5d 	.word	0x0800df5d
 800df8c:	0800df5d 	.word	0x0800df5d
 800df90:	0800e091 	.word	0x0800e091
 800df94:	0800df5d 	.word	0x0800df5d
 800df98:	0800df5d 	.word	0x0800df5d
 800df9c:	0800df5d 	.word	0x0800df5d
 800dfa0:	0800df5d 	.word	0x0800df5d
 800dfa4:	0800df5d 	.word	0x0800df5d
 800dfa8:	0800df5d 	.word	0x0800df5d
 800dfac:	0800df5d 	.word	0x0800df5d
 800dfb0:	0800e0a7 	.word	0x0800e0a7
 800dfb4:	0800e08d 	.word	0x0800e08d
 800dfb8:	0800e00f 	.word	0x0800e00f
 800dfbc:	0800e00f 	.word	0x0800e00f
 800dfc0:	0800e00f 	.word	0x0800e00f
 800dfc4:	0800df5d 	.word	0x0800df5d
 800dfc8:	0800e049 	.word	0x0800e049
 800dfcc:	0800df5d 	.word	0x0800df5d
 800dfd0:	0800df5d 	.word	0x0800df5d
 800dfd4:	0800df5d 	.word	0x0800df5d
 800dfd8:	0800df5d 	.word	0x0800df5d
 800dfdc:	0800e0b7 	.word	0x0800e0b7
 800dfe0:	0800e051 	.word	0x0800e051
 800dfe4:	0800e02f 	.word	0x0800e02f
 800dfe8:	0800df5d 	.word	0x0800df5d
 800dfec:	0800df5d 	.word	0x0800df5d
 800dff0:	0800e0b3 	.word	0x0800e0b3
 800dff4:	0800df5d 	.word	0x0800df5d
 800dff8:	0800e08d 	.word	0x0800e08d
 800dffc:	0800df5d 	.word	0x0800df5d
 800e000:	0800df5d 	.word	0x0800df5d
 800e004:	0800e037 	.word	0x0800e037
 800e008:	3b45      	subs	r3, #69	@ 0x45
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d8a6      	bhi.n	800df5c <__ssvfiscanf_r+0xec>
 800e00e:	2305      	movs	r3, #5
 800e010:	e021      	b.n	800e056 <__ssvfiscanf_r+0x1e6>
 800e012:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e014:	4621      	mov	r1, r4
 800e016:	4630      	mov	r0, r6
 800e018:	4798      	blx	r3
 800e01a:	2800      	cmp	r0, #0
 800e01c:	f43f af66 	beq.w	800deec <__ssvfiscanf_r+0x7c>
 800e020:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e022:	2800      	cmp	r0, #0
 800e024:	f040 808b 	bne.w	800e13e <__ssvfiscanf_r+0x2ce>
 800e028:	f04f 30ff 	mov.w	r0, #4294967295
 800e02c:	e08b      	b.n	800e146 <__ssvfiscanf_r+0x2d6>
 800e02e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e030:	f042 0220 	orr.w	r2, r2, #32
 800e034:	9241      	str	r2, [sp, #260]	@ 0x104
 800e036:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e03c:	9241      	str	r2, [sp, #260]	@ 0x104
 800e03e:	2210      	movs	r2, #16
 800e040:	2b6e      	cmp	r3, #110	@ 0x6e
 800e042:	9242      	str	r2, [sp, #264]	@ 0x108
 800e044:	d902      	bls.n	800e04c <__ssvfiscanf_r+0x1dc>
 800e046:	e005      	b.n	800e054 <__ssvfiscanf_r+0x1e4>
 800e048:	2300      	movs	r3, #0
 800e04a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e04c:	2303      	movs	r3, #3
 800e04e:	e002      	b.n	800e056 <__ssvfiscanf_r+0x1e6>
 800e050:	2308      	movs	r3, #8
 800e052:	9342      	str	r3, [sp, #264]	@ 0x108
 800e054:	2304      	movs	r3, #4
 800e056:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e058:	6863      	ldr	r3, [r4, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	dd39      	ble.n	800e0d2 <__ssvfiscanf_r+0x262>
 800e05e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e060:	0659      	lsls	r1, r3, #25
 800e062:	d404      	bmi.n	800e06e <__ssvfiscanf_r+0x1fe>
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	781a      	ldrb	r2, [r3, #0]
 800e068:	5cba      	ldrb	r2, [r7, r2]
 800e06a:	0712      	lsls	r2, r2, #28
 800e06c:	d438      	bmi.n	800e0e0 <__ssvfiscanf_r+0x270>
 800e06e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e070:	2b02      	cmp	r3, #2
 800e072:	dc47      	bgt.n	800e104 <__ssvfiscanf_r+0x294>
 800e074:	466b      	mov	r3, sp
 800e076:	4622      	mov	r2, r4
 800e078:	a941      	add	r1, sp, #260	@ 0x104
 800e07a:	4630      	mov	r0, r6
 800e07c:	f000 f9fa 	bl	800e474 <_scanf_chars>
 800e080:	2801      	cmp	r0, #1
 800e082:	d064      	beq.n	800e14e <__ssvfiscanf_r+0x2de>
 800e084:	2802      	cmp	r0, #2
 800e086:	f47f af18 	bne.w	800deba <__ssvfiscanf_r+0x4a>
 800e08a:	e7c9      	b.n	800e020 <__ssvfiscanf_r+0x1b0>
 800e08c:	220a      	movs	r2, #10
 800e08e:	e7d7      	b.n	800e040 <__ssvfiscanf_r+0x1d0>
 800e090:	4629      	mov	r1, r5
 800e092:	4640      	mov	r0, r8
 800e094:	f000 fbe8 	bl	800e868 <__sccl>
 800e098:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e09e:	9341      	str	r3, [sp, #260]	@ 0x104
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e7d7      	b.n	800e056 <__ssvfiscanf_r+0x1e6>
 800e0a6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e0a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0ac:	9341      	str	r3, [sp, #260]	@ 0x104
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e7d1      	b.n	800e056 <__ssvfiscanf_r+0x1e6>
 800e0b2:	2302      	movs	r3, #2
 800e0b4:	e7cf      	b.n	800e056 <__ssvfiscanf_r+0x1e6>
 800e0b6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e0b8:	06c3      	lsls	r3, r0, #27
 800e0ba:	f53f aefe 	bmi.w	800deba <__ssvfiscanf_r+0x4a>
 800e0be:	9b00      	ldr	r3, [sp, #0]
 800e0c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e0c2:	1d19      	adds	r1, r3, #4
 800e0c4:	9100      	str	r1, [sp, #0]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	07c0      	lsls	r0, r0, #31
 800e0ca:	bf4c      	ite	mi
 800e0cc:	801a      	strhmi	r2, [r3, #0]
 800e0ce:	601a      	strpl	r2, [r3, #0]
 800e0d0:	e6f3      	b.n	800deba <__ssvfiscanf_r+0x4a>
 800e0d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	4798      	blx	r3
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d0bf      	beq.n	800e05e <__ssvfiscanf_r+0x1ee>
 800e0de:	e79f      	b.n	800e020 <__ssvfiscanf_r+0x1b0>
 800e0e0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	9245      	str	r2, [sp, #276]	@ 0x114
 800e0e6:	6862      	ldr	r2, [r4, #4]
 800e0e8:	3a01      	subs	r2, #1
 800e0ea:	2a00      	cmp	r2, #0
 800e0ec:	6062      	str	r2, [r4, #4]
 800e0ee:	dd02      	ble.n	800e0f6 <__ssvfiscanf_r+0x286>
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	6023      	str	r3, [r4, #0]
 800e0f4:	e7b6      	b.n	800e064 <__ssvfiscanf_r+0x1f4>
 800e0f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e0f8:	4621      	mov	r1, r4
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	4798      	blx	r3
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d0b0      	beq.n	800e064 <__ssvfiscanf_r+0x1f4>
 800e102:	e78d      	b.n	800e020 <__ssvfiscanf_r+0x1b0>
 800e104:	2b04      	cmp	r3, #4
 800e106:	dc0f      	bgt.n	800e128 <__ssvfiscanf_r+0x2b8>
 800e108:	466b      	mov	r3, sp
 800e10a:	4622      	mov	r2, r4
 800e10c:	a941      	add	r1, sp, #260	@ 0x104
 800e10e:	4630      	mov	r0, r6
 800e110:	f000 fa0a 	bl	800e528 <_scanf_i>
 800e114:	e7b4      	b.n	800e080 <__ssvfiscanf_r+0x210>
 800e116:	bf00      	nop
 800e118:	0800ddc1 	.word	0x0800ddc1
 800e11c:	0800de37 	.word	0x0800de37
 800e120:	0800f3d1 	.word	0x0800f3d1
 800e124:	0800f6be 	.word	0x0800f6be
 800e128:	4b0a      	ldr	r3, [pc, #40]	@ (800e154 <__ssvfiscanf_r+0x2e4>)
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f43f aec5 	beq.w	800deba <__ssvfiscanf_r+0x4a>
 800e130:	466b      	mov	r3, sp
 800e132:	4622      	mov	r2, r4
 800e134:	a941      	add	r1, sp, #260	@ 0x104
 800e136:	4630      	mov	r0, r6
 800e138:	f3af 8000 	nop.w
 800e13c:	e7a0      	b.n	800e080 <__ssvfiscanf_r+0x210>
 800e13e:	89a3      	ldrh	r3, [r4, #12]
 800e140:	065b      	lsls	r3, r3, #25
 800e142:	f53f af71 	bmi.w	800e028 <__ssvfiscanf_r+0x1b8>
 800e146:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e14e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e150:	e7f9      	b.n	800e146 <__ssvfiscanf_r+0x2d6>
 800e152:	bf00      	nop
 800e154:	00000000 	.word	0x00000000

0800e158 <_printf_common>:
 800e158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e15c:	4616      	mov	r6, r2
 800e15e:	4698      	mov	r8, r3
 800e160:	688a      	ldr	r2, [r1, #8]
 800e162:	690b      	ldr	r3, [r1, #16]
 800e164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e168:	4293      	cmp	r3, r2
 800e16a:	bfb8      	it	lt
 800e16c:	4613      	movlt	r3, r2
 800e16e:	6033      	str	r3, [r6, #0]
 800e170:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e174:	4607      	mov	r7, r0
 800e176:	460c      	mov	r4, r1
 800e178:	b10a      	cbz	r2, 800e17e <_printf_common+0x26>
 800e17a:	3301      	adds	r3, #1
 800e17c:	6033      	str	r3, [r6, #0]
 800e17e:	6823      	ldr	r3, [r4, #0]
 800e180:	0699      	lsls	r1, r3, #26
 800e182:	bf42      	ittt	mi
 800e184:	6833      	ldrmi	r3, [r6, #0]
 800e186:	3302      	addmi	r3, #2
 800e188:	6033      	strmi	r3, [r6, #0]
 800e18a:	6825      	ldr	r5, [r4, #0]
 800e18c:	f015 0506 	ands.w	r5, r5, #6
 800e190:	d106      	bne.n	800e1a0 <_printf_common+0x48>
 800e192:	f104 0a19 	add.w	sl, r4, #25
 800e196:	68e3      	ldr	r3, [r4, #12]
 800e198:	6832      	ldr	r2, [r6, #0]
 800e19a:	1a9b      	subs	r3, r3, r2
 800e19c:	42ab      	cmp	r3, r5
 800e19e:	dc26      	bgt.n	800e1ee <_printf_common+0x96>
 800e1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1a4:	6822      	ldr	r2, [r4, #0]
 800e1a6:	3b00      	subs	r3, #0
 800e1a8:	bf18      	it	ne
 800e1aa:	2301      	movne	r3, #1
 800e1ac:	0692      	lsls	r2, r2, #26
 800e1ae:	d42b      	bmi.n	800e208 <_printf_common+0xb0>
 800e1b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1b4:	4641      	mov	r1, r8
 800e1b6:	4638      	mov	r0, r7
 800e1b8:	47c8      	blx	r9
 800e1ba:	3001      	adds	r0, #1
 800e1bc:	d01e      	beq.n	800e1fc <_printf_common+0xa4>
 800e1be:	6823      	ldr	r3, [r4, #0]
 800e1c0:	6922      	ldr	r2, [r4, #16]
 800e1c2:	f003 0306 	and.w	r3, r3, #6
 800e1c6:	2b04      	cmp	r3, #4
 800e1c8:	bf02      	ittt	eq
 800e1ca:	68e5      	ldreq	r5, [r4, #12]
 800e1cc:	6833      	ldreq	r3, [r6, #0]
 800e1ce:	1aed      	subeq	r5, r5, r3
 800e1d0:	68a3      	ldr	r3, [r4, #8]
 800e1d2:	bf0c      	ite	eq
 800e1d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1d8:	2500      	movne	r5, #0
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	bfc4      	itt	gt
 800e1de:	1a9b      	subgt	r3, r3, r2
 800e1e0:	18ed      	addgt	r5, r5, r3
 800e1e2:	2600      	movs	r6, #0
 800e1e4:	341a      	adds	r4, #26
 800e1e6:	42b5      	cmp	r5, r6
 800e1e8:	d11a      	bne.n	800e220 <_printf_common+0xc8>
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	e008      	b.n	800e200 <_printf_common+0xa8>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	4652      	mov	r2, sl
 800e1f2:	4641      	mov	r1, r8
 800e1f4:	4638      	mov	r0, r7
 800e1f6:	47c8      	blx	r9
 800e1f8:	3001      	adds	r0, #1
 800e1fa:	d103      	bne.n	800e204 <_printf_common+0xac>
 800e1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e204:	3501      	adds	r5, #1
 800e206:	e7c6      	b.n	800e196 <_printf_common+0x3e>
 800e208:	18e1      	adds	r1, r4, r3
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	2030      	movs	r0, #48	@ 0x30
 800e20e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e212:	4422      	add	r2, r4
 800e214:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e21c:	3302      	adds	r3, #2
 800e21e:	e7c7      	b.n	800e1b0 <_printf_common+0x58>
 800e220:	2301      	movs	r3, #1
 800e222:	4622      	mov	r2, r4
 800e224:	4641      	mov	r1, r8
 800e226:	4638      	mov	r0, r7
 800e228:	47c8      	blx	r9
 800e22a:	3001      	adds	r0, #1
 800e22c:	d0e6      	beq.n	800e1fc <_printf_common+0xa4>
 800e22e:	3601      	adds	r6, #1
 800e230:	e7d9      	b.n	800e1e6 <_printf_common+0x8e>
	...

0800e234 <_printf_i>:
 800e234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e238:	7e0f      	ldrb	r7, [r1, #24]
 800e23a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e23c:	2f78      	cmp	r7, #120	@ 0x78
 800e23e:	4691      	mov	r9, r2
 800e240:	4680      	mov	r8, r0
 800e242:	460c      	mov	r4, r1
 800e244:	469a      	mov	sl, r3
 800e246:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e24a:	d807      	bhi.n	800e25c <_printf_i+0x28>
 800e24c:	2f62      	cmp	r7, #98	@ 0x62
 800e24e:	d80a      	bhi.n	800e266 <_printf_i+0x32>
 800e250:	2f00      	cmp	r7, #0
 800e252:	f000 80d2 	beq.w	800e3fa <_printf_i+0x1c6>
 800e256:	2f58      	cmp	r7, #88	@ 0x58
 800e258:	f000 80b9 	beq.w	800e3ce <_printf_i+0x19a>
 800e25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e260:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e264:	e03a      	b.n	800e2dc <_printf_i+0xa8>
 800e266:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e26a:	2b15      	cmp	r3, #21
 800e26c:	d8f6      	bhi.n	800e25c <_printf_i+0x28>
 800e26e:	a101      	add	r1, pc, #4	@ (adr r1, 800e274 <_printf_i+0x40>)
 800e270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e274:	0800e2cd 	.word	0x0800e2cd
 800e278:	0800e2e1 	.word	0x0800e2e1
 800e27c:	0800e25d 	.word	0x0800e25d
 800e280:	0800e25d 	.word	0x0800e25d
 800e284:	0800e25d 	.word	0x0800e25d
 800e288:	0800e25d 	.word	0x0800e25d
 800e28c:	0800e2e1 	.word	0x0800e2e1
 800e290:	0800e25d 	.word	0x0800e25d
 800e294:	0800e25d 	.word	0x0800e25d
 800e298:	0800e25d 	.word	0x0800e25d
 800e29c:	0800e25d 	.word	0x0800e25d
 800e2a0:	0800e3e1 	.word	0x0800e3e1
 800e2a4:	0800e30b 	.word	0x0800e30b
 800e2a8:	0800e39b 	.word	0x0800e39b
 800e2ac:	0800e25d 	.word	0x0800e25d
 800e2b0:	0800e25d 	.word	0x0800e25d
 800e2b4:	0800e403 	.word	0x0800e403
 800e2b8:	0800e25d 	.word	0x0800e25d
 800e2bc:	0800e30b 	.word	0x0800e30b
 800e2c0:	0800e25d 	.word	0x0800e25d
 800e2c4:	0800e25d 	.word	0x0800e25d
 800e2c8:	0800e3a3 	.word	0x0800e3a3
 800e2cc:	6833      	ldr	r3, [r6, #0]
 800e2ce:	1d1a      	adds	r2, r3, #4
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6032      	str	r2, [r6, #0]
 800e2d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e09d      	b.n	800e41c <_printf_i+0x1e8>
 800e2e0:	6833      	ldr	r3, [r6, #0]
 800e2e2:	6820      	ldr	r0, [r4, #0]
 800e2e4:	1d19      	adds	r1, r3, #4
 800e2e6:	6031      	str	r1, [r6, #0]
 800e2e8:	0606      	lsls	r6, r0, #24
 800e2ea:	d501      	bpl.n	800e2f0 <_printf_i+0xbc>
 800e2ec:	681d      	ldr	r5, [r3, #0]
 800e2ee:	e003      	b.n	800e2f8 <_printf_i+0xc4>
 800e2f0:	0645      	lsls	r5, r0, #25
 800e2f2:	d5fb      	bpl.n	800e2ec <_printf_i+0xb8>
 800e2f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e2f8:	2d00      	cmp	r5, #0
 800e2fa:	da03      	bge.n	800e304 <_printf_i+0xd0>
 800e2fc:	232d      	movs	r3, #45	@ 0x2d
 800e2fe:	426d      	negs	r5, r5
 800e300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e304:	4859      	ldr	r0, [pc, #356]	@ (800e46c <_printf_i+0x238>)
 800e306:	230a      	movs	r3, #10
 800e308:	e011      	b.n	800e32e <_printf_i+0xfa>
 800e30a:	6821      	ldr	r1, [r4, #0]
 800e30c:	6833      	ldr	r3, [r6, #0]
 800e30e:	0608      	lsls	r0, r1, #24
 800e310:	f853 5b04 	ldr.w	r5, [r3], #4
 800e314:	d402      	bmi.n	800e31c <_printf_i+0xe8>
 800e316:	0649      	lsls	r1, r1, #25
 800e318:	bf48      	it	mi
 800e31a:	b2ad      	uxthmi	r5, r5
 800e31c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e31e:	4853      	ldr	r0, [pc, #332]	@ (800e46c <_printf_i+0x238>)
 800e320:	6033      	str	r3, [r6, #0]
 800e322:	bf14      	ite	ne
 800e324:	230a      	movne	r3, #10
 800e326:	2308      	moveq	r3, #8
 800e328:	2100      	movs	r1, #0
 800e32a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e32e:	6866      	ldr	r6, [r4, #4]
 800e330:	60a6      	str	r6, [r4, #8]
 800e332:	2e00      	cmp	r6, #0
 800e334:	bfa2      	ittt	ge
 800e336:	6821      	ldrge	r1, [r4, #0]
 800e338:	f021 0104 	bicge.w	r1, r1, #4
 800e33c:	6021      	strge	r1, [r4, #0]
 800e33e:	b90d      	cbnz	r5, 800e344 <_printf_i+0x110>
 800e340:	2e00      	cmp	r6, #0
 800e342:	d04b      	beq.n	800e3dc <_printf_i+0x1a8>
 800e344:	4616      	mov	r6, r2
 800e346:	fbb5 f1f3 	udiv	r1, r5, r3
 800e34a:	fb03 5711 	mls	r7, r3, r1, r5
 800e34e:	5dc7      	ldrb	r7, [r0, r7]
 800e350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e354:	462f      	mov	r7, r5
 800e356:	42bb      	cmp	r3, r7
 800e358:	460d      	mov	r5, r1
 800e35a:	d9f4      	bls.n	800e346 <_printf_i+0x112>
 800e35c:	2b08      	cmp	r3, #8
 800e35e:	d10b      	bne.n	800e378 <_printf_i+0x144>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	07df      	lsls	r7, r3, #31
 800e364:	d508      	bpl.n	800e378 <_printf_i+0x144>
 800e366:	6923      	ldr	r3, [r4, #16]
 800e368:	6861      	ldr	r1, [r4, #4]
 800e36a:	4299      	cmp	r1, r3
 800e36c:	bfde      	ittt	le
 800e36e:	2330      	movle	r3, #48	@ 0x30
 800e370:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e374:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e378:	1b92      	subs	r2, r2, r6
 800e37a:	6122      	str	r2, [r4, #16]
 800e37c:	f8cd a000 	str.w	sl, [sp]
 800e380:	464b      	mov	r3, r9
 800e382:	aa03      	add	r2, sp, #12
 800e384:	4621      	mov	r1, r4
 800e386:	4640      	mov	r0, r8
 800e388:	f7ff fee6 	bl	800e158 <_printf_common>
 800e38c:	3001      	adds	r0, #1
 800e38e:	d14a      	bne.n	800e426 <_printf_i+0x1f2>
 800e390:	f04f 30ff 	mov.w	r0, #4294967295
 800e394:	b004      	add	sp, #16
 800e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	f043 0320 	orr.w	r3, r3, #32
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	4833      	ldr	r0, [pc, #204]	@ (800e470 <_printf_i+0x23c>)
 800e3a4:	2778      	movs	r7, #120	@ 0x78
 800e3a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3aa:	6823      	ldr	r3, [r4, #0]
 800e3ac:	6831      	ldr	r1, [r6, #0]
 800e3ae:	061f      	lsls	r7, r3, #24
 800e3b0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3b4:	d402      	bmi.n	800e3bc <_printf_i+0x188>
 800e3b6:	065f      	lsls	r7, r3, #25
 800e3b8:	bf48      	it	mi
 800e3ba:	b2ad      	uxthmi	r5, r5
 800e3bc:	6031      	str	r1, [r6, #0]
 800e3be:	07d9      	lsls	r1, r3, #31
 800e3c0:	bf44      	itt	mi
 800e3c2:	f043 0320 	orrmi.w	r3, r3, #32
 800e3c6:	6023      	strmi	r3, [r4, #0]
 800e3c8:	b11d      	cbz	r5, 800e3d2 <_printf_i+0x19e>
 800e3ca:	2310      	movs	r3, #16
 800e3cc:	e7ac      	b.n	800e328 <_printf_i+0xf4>
 800e3ce:	4827      	ldr	r0, [pc, #156]	@ (800e46c <_printf_i+0x238>)
 800e3d0:	e7e9      	b.n	800e3a6 <_printf_i+0x172>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	f023 0320 	bic.w	r3, r3, #32
 800e3d8:	6023      	str	r3, [r4, #0]
 800e3da:	e7f6      	b.n	800e3ca <_printf_i+0x196>
 800e3dc:	4616      	mov	r6, r2
 800e3de:	e7bd      	b.n	800e35c <_printf_i+0x128>
 800e3e0:	6833      	ldr	r3, [r6, #0]
 800e3e2:	6825      	ldr	r5, [r4, #0]
 800e3e4:	6961      	ldr	r1, [r4, #20]
 800e3e6:	1d18      	adds	r0, r3, #4
 800e3e8:	6030      	str	r0, [r6, #0]
 800e3ea:	062e      	lsls	r6, r5, #24
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	d501      	bpl.n	800e3f4 <_printf_i+0x1c0>
 800e3f0:	6019      	str	r1, [r3, #0]
 800e3f2:	e002      	b.n	800e3fa <_printf_i+0x1c6>
 800e3f4:	0668      	lsls	r0, r5, #25
 800e3f6:	d5fb      	bpl.n	800e3f0 <_printf_i+0x1bc>
 800e3f8:	8019      	strh	r1, [r3, #0]
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	6123      	str	r3, [r4, #16]
 800e3fe:	4616      	mov	r6, r2
 800e400:	e7bc      	b.n	800e37c <_printf_i+0x148>
 800e402:	6833      	ldr	r3, [r6, #0]
 800e404:	1d1a      	adds	r2, r3, #4
 800e406:	6032      	str	r2, [r6, #0]
 800e408:	681e      	ldr	r6, [r3, #0]
 800e40a:	6862      	ldr	r2, [r4, #4]
 800e40c:	2100      	movs	r1, #0
 800e40e:	4630      	mov	r0, r6
 800e410:	f7f1 fef6 	bl	8000200 <memchr>
 800e414:	b108      	cbz	r0, 800e41a <_printf_i+0x1e6>
 800e416:	1b80      	subs	r0, r0, r6
 800e418:	6060      	str	r0, [r4, #4]
 800e41a:	6863      	ldr	r3, [r4, #4]
 800e41c:	6123      	str	r3, [r4, #16]
 800e41e:	2300      	movs	r3, #0
 800e420:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e424:	e7aa      	b.n	800e37c <_printf_i+0x148>
 800e426:	6923      	ldr	r3, [r4, #16]
 800e428:	4632      	mov	r2, r6
 800e42a:	4649      	mov	r1, r9
 800e42c:	4640      	mov	r0, r8
 800e42e:	47d0      	blx	sl
 800e430:	3001      	adds	r0, #1
 800e432:	d0ad      	beq.n	800e390 <_printf_i+0x15c>
 800e434:	6823      	ldr	r3, [r4, #0]
 800e436:	079b      	lsls	r3, r3, #30
 800e438:	d413      	bmi.n	800e462 <_printf_i+0x22e>
 800e43a:	68e0      	ldr	r0, [r4, #12]
 800e43c:	9b03      	ldr	r3, [sp, #12]
 800e43e:	4298      	cmp	r0, r3
 800e440:	bfb8      	it	lt
 800e442:	4618      	movlt	r0, r3
 800e444:	e7a6      	b.n	800e394 <_printf_i+0x160>
 800e446:	2301      	movs	r3, #1
 800e448:	4632      	mov	r2, r6
 800e44a:	4649      	mov	r1, r9
 800e44c:	4640      	mov	r0, r8
 800e44e:	47d0      	blx	sl
 800e450:	3001      	adds	r0, #1
 800e452:	d09d      	beq.n	800e390 <_printf_i+0x15c>
 800e454:	3501      	adds	r5, #1
 800e456:	68e3      	ldr	r3, [r4, #12]
 800e458:	9903      	ldr	r1, [sp, #12]
 800e45a:	1a5b      	subs	r3, r3, r1
 800e45c:	42ab      	cmp	r3, r5
 800e45e:	dcf2      	bgt.n	800e446 <_printf_i+0x212>
 800e460:	e7eb      	b.n	800e43a <_printf_i+0x206>
 800e462:	2500      	movs	r5, #0
 800e464:	f104 0619 	add.w	r6, r4, #25
 800e468:	e7f5      	b.n	800e456 <_printf_i+0x222>
 800e46a:	bf00      	nop
 800e46c:	0800f6c9 	.word	0x0800f6c9
 800e470:	0800f6da 	.word	0x0800f6da

0800e474 <_scanf_chars>:
 800e474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e478:	4615      	mov	r5, r2
 800e47a:	688a      	ldr	r2, [r1, #8]
 800e47c:	4680      	mov	r8, r0
 800e47e:	460c      	mov	r4, r1
 800e480:	b932      	cbnz	r2, 800e490 <_scanf_chars+0x1c>
 800e482:	698a      	ldr	r2, [r1, #24]
 800e484:	2a00      	cmp	r2, #0
 800e486:	bf14      	ite	ne
 800e488:	f04f 32ff 	movne.w	r2, #4294967295
 800e48c:	2201      	moveq	r2, #1
 800e48e:	608a      	str	r2, [r1, #8]
 800e490:	6822      	ldr	r2, [r4, #0]
 800e492:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e524 <_scanf_chars+0xb0>
 800e496:	06d1      	lsls	r1, r2, #27
 800e498:	bf5f      	itttt	pl
 800e49a:	681a      	ldrpl	r2, [r3, #0]
 800e49c:	1d11      	addpl	r1, r2, #4
 800e49e:	6019      	strpl	r1, [r3, #0]
 800e4a0:	6816      	ldrpl	r6, [r2, #0]
 800e4a2:	2700      	movs	r7, #0
 800e4a4:	69a0      	ldr	r0, [r4, #24]
 800e4a6:	b188      	cbz	r0, 800e4cc <_scanf_chars+0x58>
 800e4a8:	2801      	cmp	r0, #1
 800e4aa:	d107      	bne.n	800e4bc <_scanf_chars+0x48>
 800e4ac:	682b      	ldr	r3, [r5, #0]
 800e4ae:	781a      	ldrb	r2, [r3, #0]
 800e4b0:	6963      	ldr	r3, [r4, #20]
 800e4b2:	5c9b      	ldrb	r3, [r3, r2]
 800e4b4:	b953      	cbnz	r3, 800e4cc <_scanf_chars+0x58>
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	d031      	beq.n	800e51e <_scanf_chars+0xaa>
 800e4ba:	e022      	b.n	800e502 <_scanf_chars+0x8e>
 800e4bc:	2802      	cmp	r0, #2
 800e4be:	d120      	bne.n	800e502 <_scanf_chars+0x8e>
 800e4c0:	682b      	ldr	r3, [r5, #0]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e4c8:	071b      	lsls	r3, r3, #28
 800e4ca:	d41a      	bmi.n	800e502 <_scanf_chars+0x8e>
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	06da      	lsls	r2, r3, #27
 800e4d0:	bf5e      	ittt	pl
 800e4d2:	682b      	ldrpl	r3, [r5, #0]
 800e4d4:	781b      	ldrbpl	r3, [r3, #0]
 800e4d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e4da:	682a      	ldr	r2, [r5, #0]
 800e4dc:	686b      	ldr	r3, [r5, #4]
 800e4de:	3201      	adds	r2, #1
 800e4e0:	602a      	str	r2, [r5, #0]
 800e4e2:	68a2      	ldr	r2, [r4, #8]
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	3a01      	subs	r2, #1
 800e4e8:	606b      	str	r3, [r5, #4]
 800e4ea:	3701      	adds	r7, #1
 800e4ec:	60a2      	str	r2, [r4, #8]
 800e4ee:	b142      	cbz	r2, 800e502 <_scanf_chars+0x8e>
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	dcd7      	bgt.n	800e4a4 <_scanf_chars+0x30>
 800e4f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	4640      	mov	r0, r8
 800e4fc:	4798      	blx	r3
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d0d0      	beq.n	800e4a4 <_scanf_chars+0x30>
 800e502:	6823      	ldr	r3, [r4, #0]
 800e504:	f013 0310 	ands.w	r3, r3, #16
 800e508:	d105      	bne.n	800e516 <_scanf_chars+0xa2>
 800e50a:	68e2      	ldr	r2, [r4, #12]
 800e50c:	3201      	adds	r2, #1
 800e50e:	60e2      	str	r2, [r4, #12]
 800e510:	69a2      	ldr	r2, [r4, #24]
 800e512:	b102      	cbz	r2, 800e516 <_scanf_chars+0xa2>
 800e514:	7033      	strb	r3, [r6, #0]
 800e516:	6923      	ldr	r3, [r4, #16]
 800e518:	443b      	add	r3, r7
 800e51a:	6123      	str	r3, [r4, #16]
 800e51c:	2000      	movs	r0, #0
 800e51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e522:	bf00      	nop
 800e524:	0800f3d1 	.word	0x0800f3d1

0800e528 <_scanf_i>:
 800e528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e52c:	4698      	mov	r8, r3
 800e52e:	4b74      	ldr	r3, [pc, #464]	@ (800e700 <_scanf_i+0x1d8>)
 800e530:	460c      	mov	r4, r1
 800e532:	4682      	mov	sl, r0
 800e534:	4616      	mov	r6, r2
 800e536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e53a:	b087      	sub	sp, #28
 800e53c:	ab03      	add	r3, sp, #12
 800e53e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e542:	4b70      	ldr	r3, [pc, #448]	@ (800e704 <_scanf_i+0x1dc>)
 800e544:	69a1      	ldr	r1, [r4, #24]
 800e546:	4a70      	ldr	r2, [pc, #448]	@ (800e708 <_scanf_i+0x1e0>)
 800e548:	2903      	cmp	r1, #3
 800e54a:	bf08      	it	eq
 800e54c:	461a      	moveq	r2, r3
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	9201      	str	r2, [sp, #4]
 800e552:	1e5a      	subs	r2, r3, #1
 800e554:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e558:	bf88      	it	hi
 800e55a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e55e:	4627      	mov	r7, r4
 800e560:	bf82      	ittt	hi
 800e562:	eb03 0905 	addhi.w	r9, r3, r5
 800e566:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e56a:	60a3      	strhi	r3, [r4, #8]
 800e56c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e570:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e574:	bf98      	it	ls
 800e576:	f04f 0900 	movls.w	r9, #0
 800e57a:	6023      	str	r3, [r4, #0]
 800e57c:	463d      	mov	r5, r7
 800e57e:	f04f 0b00 	mov.w	fp, #0
 800e582:	6831      	ldr	r1, [r6, #0]
 800e584:	ab03      	add	r3, sp, #12
 800e586:	7809      	ldrb	r1, [r1, #0]
 800e588:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e58c:	2202      	movs	r2, #2
 800e58e:	f7f1 fe37 	bl	8000200 <memchr>
 800e592:	b328      	cbz	r0, 800e5e0 <_scanf_i+0xb8>
 800e594:	f1bb 0f01 	cmp.w	fp, #1
 800e598:	d159      	bne.n	800e64e <_scanf_i+0x126>
 800e59a:	6862      	ldr	r2, [r4, #4]
 800e59c:	b92a      	cbnz	r2, 800e5aa <_scanf_i+0x82>
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	2108      	movs	r1, #8
 800e5a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5a6:	6061      	str	r1, [r4, #4]
 800e5a8:	6022      	str	r2, [r4, #0]
 800e5aa:	6822      	ldr	r2, [r4, #0]
 800e5ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e5b0:	6022      	str	r2, [r4, #0]
 800e5b2:	68a2      	ldr	r2, [r4, #8]
 800e5b4:	1e51      	subs	r1, r2, #1
 800e5b6:	60a1      	str	r1, [r4, #8]
 800e5b8:	b192      	cbz	r2, 800e5e0 <_scanf_i+0xb8>
 800e5ba:	6832      	ldr	r2, [r6, #0]
 800e5bc:	1c51      	adds	r1, r2, #1
 800e5be:	6031      	str	r1, [r6, #0]
 800e5c0:	7812      	ldrb	r2, [r2, #0]
 800e5c2:	f805 2b01 	strb.w	r2, [r5], #1
 800e5c6:	6872      	ldr	r2, [r6, #4]
 800e5c8:	3a01      	subs	r2, #1
 800e5ca:	2a00      	cmp	r2, #0
 800e5cc:	6072      	str	r2, [r6, #4]
 800e5ce:	dc07      	bgt.n	800e5e0 <_scanf_i+0xb8>
 800e5d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	4650      	mov	r0, sl
 800e5d8:	4790      	blx	r2
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	f040 8085 	bne.w	800e6ea <_scanf_i+0x1c2>
 800e5e0:	f10b 0b01 	add.w	fp, fp, #1
 800e5e4:	f1bb 0f03 	cmp.w	fp, #3
 800e5e8:	d1cb      	bne.n	800e582 <_scanf_i+0x5a>
 800e5ea:	6863      	ldr	r3, [r4, #4]
 800e5ec:	b90b      	cbnz	r3, 800e5f2 <_scanf_i+0xca>
 800e5ee:	230a      	movs	r3, #10
 800e5f0:	6063      	str	r3, [r4, #4]
 800e5f2:	6863      	ldr	r3, [r4, #4]
 800e5f4:	4945      	ldr	r1, [pc, #276]	@ (800e70c <_scanf_i+0x1e4>)
 800e5f6:	6960      	ldr	r0, [r4, #20]
 800e5f8:	1ac9      	subs	r1, r1, r3
 800e5fa:	f000 f935 	bl	800e868 <__sccl>
 800e5fe:	f04f 0b00 	mov.w	fp, #0
 800e602:	68a3      	ldr	r3, [r4, #8]
 800e604:	6822      	ldr	r2, [r4, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d03d      	beq.n	800e686 <_scanf_i+0x15e>
 800e60a:	6831      	ldr	r1, [r6, #0]
 800e60c:	6960      	ldr	r0, [r4, #20]
 800e60e:	f891 c000 	ldrb.w	ip, [r1]
 800e612:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e616:	2800      	cmp	r0, #0
 800e618:	d035      	beq.n	800e686 <_scanf_i+0x15e>
 800e61a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e61e:	d124      	bne.n	800e66a <_scanf_i+0x142>
 800e620:	0510      	lsls	r0, r2, #20
 800e622:	d522      	bpl.n	800e66a <_scanf_i+0x142>
 800e624:	f10b 0b01 	add.w	fp, fp, #1
 800e628:	f1b9 0f00 	cmp.w	r9, #0
 800e62c:	d003      	beq.n	800e636 <_scanf_i+0x10e>
 800e62e:	3301      	adds	r3, #1
 800e630:	f109 39ff 	add.w	r9, r9, #4294967295
 800e634:	60a3      	str	r3, [r4, #8]
 800e636:	6873      	ldr	r3, [r6, #4]
 800e638:	3b01      	subs	r3, #1
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	6073      	str	r3, [r6, #4]
 800e63e:	dd1b      	ble.n	800e678 <_scanf_i+0x150>
 800e640:	6833      	ldr	r3, [r6, #0]
 800e642:	3301      	adds	r3, #1
 800e644:	6033      	str	r3, [r6, #0]
 800e646:	68a3      	ldr	r3, [r4, #8]
 800e648:	3b01      	subs	r3, #1
 800e64a:	60a3      	str	r3, [r4, #8]
 800e64c:	e7d9      	b.n	800e602 <_scanf_i+0xda>
 800e64e:	f1bb 0f02 	cmp.w	fp, #2
 800e652:	d1ae      	bne.n	800e5b2 <_scanf_i+0x8a>
 800e654:	6822      	ldr	r2, [r4, #0]
 800e656:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e65a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e65e:	d1bf      	bne.n	800e5e0 <_scanf_i+0xb8>
 800e660:	2110      	movs	r1, #16
 800e662:	6061      	str	r1, [r4, #4]
 800e664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e668:	e7a2      	b.n	800e5b0 <_scanf_i+0x88>
 800e66a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e66e:	6022      	str	r2, [r4, #0]
 800e670:	780b      	ldrb	r3, [r1, #0]
 800e672:	f805 3b01 	strb.w	r3, [r5], #1
 800e676:	e7de      	b.n	800e636 <_scanf_i+0x10e>
 800e678:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e67c:	4631      	mov	r1, r6
 800e67e:	4650      	mov	r0, sl
 800e680:	4798      	blx	r3
 800e682:	2800      	cmp	r0, #0
 800e684:	d0df      	beq.n	800e646 <_scanf_i+0x11e>
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	05d9      	lsls	r1, r3, #23
 800e68a:	d50d      	bpl.n	800e6a8 <_scanf_i+0x180>
 800e68c:	42bd      	cmp	r5, r7
 800e68e:	d909      	bls.n	800e6a4 <_scanf_i+0x17c>
 800e690:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e694:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e698:	4632      	mov	r2, r6
 800e69a:	4650      	mov	r0, sl
 800e69c:	4798      	blx	r3
 800e69e:	f105 39ff 	add.w	r9, r5, #4294967295
 800e6a2:	464d      	mov	r5, r9
 800e6a4:	42bd      	cmp	r5, r7
 800e6a6:	d028      	beq.n	800e6fa <_scanf_i+0x1d2>
 800e6a8:	6822      	ldr	r2, [r4, #0]
 800e6aa:	f012 0210 	ands.w	r2, r2, #16
 800e6ae:	d113      	bne.n	800e6d8 <_scanf_i+0x1b0>
 800e6b0:	702a      	strb	r2, [r5, #0]
 800e6b2:	6863      	ldr	r3, [r4, #4]
 800e6b4:	9e01      	ldr	r6, [sp, #4]
 800e6b6:	4639      	mov	r1, r7
 800e6b8:	4650      	mov	r0, sl
 800e6ba:	47b0      	blx	r6
 800e6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800e6c0:	6821      	ldr	r1, [r4, #0]
 800e6c2:	1d1a      	adds	r2, r3, #4
 800e6c4:	f8c8 2000 	str.w	r2, [r8]
 800e6c8:	f011 0f20 	tst.w	r1, #32
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	d00f      	beq.n	800e6f0 <_scanf_i+0x1c8>
 800e6d0:	6018      	str	r0, [r3, #0]
 800e6d2:	68e3      	ldr	r3, [r4, #12]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	60e3      	str	r3, [r4, #12]
 800e6d8:	6923      	ldr	r3, [r4, #16]
 800e6da:	1bed      	subs	r5, r5, r7
 800e6dc:	445d      	add	r5, fp
 800e6de:	442b      	add	r3, r5
 800e6e0:	6123      	str	r3, [r4, #16]
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	b007      	add	sp, #28
 800e6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ea:	f04f 0b00 	mov.w	fp, #0
 800e6ee:	e7ca      	b.n	800e686 <_scanf_i+0x15e>
 800e6f0:	07ca      	lsls	r2, r1, #31
 800e6f2:	bf4c      	ite	mi
 800e6f4:	8018      	strhmi	r0, [r3, #0]
 800e6f6:	6018      	strpl	r0, [r3, #0]
 800e6f8:	e7eb      	b.n	800e6d2 <_scanf_i+0x1aa>
 800e6fa:	2001      	movs	r0, #1
 800e6fc:	e7f2      	b.n	800e6e4 <_scanf_i+0x1bc>
 800e6fe:	bf00      	nop
 800e700:	0800f33c 	.word	0x0800f33c
 800e704:	0800eadd 	.word	0x0800eadd
 800e708:	0800ebbd 	.word	0x0800ebbd
 800e70c:	0800f6fb 	.word	0x0800f6fb

0800e710 <__sflush_r>:
 800e710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e718:	0716      	lsls	r6, r2, #28
 800e71a:	4605      	mov	r5, r0
 800e71c:	460c      	mov	r4, r1
 800e71e:	d454      	bmi.n	800e7ca <__sflush_r+0xba>
 800e720:	684b      	ldr	r3, [r1, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	dc02      	bgt.n	800e72c <__sflush_r+0x1c>
 800e726:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e728:	2b00      	cmp	r3, #0
 800e72a:	dd48      	ble.n	800e7be <__sflush_r+0xae>
 800e72c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e72e:	2e00      	cmp	r6, #0
 800e730:	d045      	beq.n	800e7be <__sflush_r+0xae>
 800e732:	2300      	movs	r3, #0
 800e734:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e738:	682f      	ldr	r7, [r5, #0]
 800e73a:	6a21      	ldr	r1, [r4, #32]
 800e73c:	602b      	str	r3, [r5, #0]
 800e73e:	d030      	beq.n	800e7a2 <__sflush_r+0x92>
 800e740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	0759      	lsls	r1, r3, #29
 800e746:	d505      	bpl.n	800e754 <__sflush_r+0x44>
 800e748:	6863      	ldr	r3, [r4, #4]
 800e74a:	1ad2      	subs	r2, r2, r3
 800e74c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e74e:	b10b      	cbz	r3, 800e754 <__sflush_r+0x44>
 800e750:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e752:	1ad2      	subs	r2, r2, r3
 800e754:	2300      	movs	r3, #0
 800e756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e758:	6a21      	ldr	r1, [r4, #32]
 800e75a:	4628      	mov	r0, r5
 800e75c:	47b0      	blx	r6
 800e75e:	1c43      	adds	r3, r0, #1
 800e760:	89a3      	ldrh	r3, [r4, #12]
 800e762:	d106      	bne.n	800e772 <__sflush_r+0x62>
 800e764:	6829      	ldr	r1, [r5, #0]
 800e766:	291d      	cmp	r1, #29
 800e768:	d82b      	bhi.n	800e7c2 <__sflush_r+0xb2>
 800e76a:	4a2a      	ldr	r2, [pc, #168]	@ (800e814 <__sflush_r+0x104>)
 800e76c:	410a      	asrs	r2, r1
 800e76e:	07d6      	lsls	r6, r2, #31
 800e770:	d427      	bmi.n	800e7c2 <__sflush_r+0xb2>
 800e772:	2200      	movs	r2, #0
 800e774:	6062      	str	r2, [r4, #4]
 800e776:	04d9      	lsls	r1, r3, #19
 800e778:	6922      	ldr	r2, [r4, #16]
 800e77a:	6022      	str	r2, [r4, #0]
 800e77c:	d504      	bpl.n	800e788 <__sflush_r+0x78>
 800e77e:	1c42      	adds	r2, r0, #1
 800e780:	d101      	bne.n	800e786 <__sflush_r+0x76>
 800e782:	682b      	ldr	r3, [r5, #0]
 800e784:	b903      	cbnz	r3, 800e788 <__sflush_r+0x78>
 800e786:	6560      	str	r0, [r4, #84]	@ 0x54
 800e788:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e78a:	602f      	str	r7, [r5, #0]
 800e78c:	b1b9      	cbz	r1, 800e7be <__sflush_r+0xae>
 800e78e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e792:	4299      	cmp	r1, r3
 800e794:	d002      	beq.n	800e79c <__sflush_r+0x8c>
 800e796:	4628      	mov	r0, r5
 800e798:	f7fe f95e 	bl	800ca58 <_free_r>
 800e79c:	2300      	movs	r3, #0
 800e79e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7a0:	e00d      	b.n	800e7be <__sflush_r+0xae>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	47b0      	blx	r6
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	1c50      	adds	r0, r2, #1
 800e7ac:	d1c9      	bne.n	800e742 <__sflush_r+0x32>
 800e7ae:	682b      	ldr	r3, [r5, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0c6      	beq.n	800e742 <__sflush_r+0x32>
 800e7b4:	2b1d      	cmp	r3, #29
 800e7b6:	d001      	beq.n	800e7bc <__sflush_r+0xac>
 800e7b8:	2b16      	cmp	r3, #22
 800e7ba:	d11e      	bne.n	800e7fa <__sflush_r+0xea>
 800e7bc:	602f      	str	r7, [r5, #0]
 800e7be:	2000      	movs	r0, #0
 800e7c0:	e022      	b.n	800e808 <__sflush_r+0xf8>
 800e7c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7c6:	b21b      	sxth	r3, r3
 800e7c8:	e01b      	b.n	800e802 <__sflush_r+0xf2>
 800e7ca:	690f      	ldr	r7, [r1, #16]
 800e7cc:	2f00      	cmp	r7, #0
 800e7ce:	d0f6      	beq.n	800e7be <__sflush_r+0xae>
 800e7d0:	0793      	lsls	r3, r2, #30
 800e7d2:	680e      	ldr	r6, [r1, #0]
 800e7d4:	bf08      	it	eq
 800e7d6:	694b      	ldreq	r3, [r1, #20]
 800e7d8:	600f      	str	r7, [r1, #0]
 800e7da:	bf18      	it	ne
 800e7dc:	2300      	movne	r3, #0
 800e7de:	eba6 0807 	sub.w	r8, r6, r7
 800e7e2:	608b      	str	r3, [r1, #8]
 800e7e4:	f1b8 0f00 	cmp.w	r8, #0
 800e7e8:	dde9      	ble.n	800e7be <__sflush_r+0xae>
 800e7ea:	6a21      	ldr	r1, [r4, #32]
 800e7ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e7ee:	4643      	mov	r3, r8
 800e7f0:	463a      	mov	r2, r7
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	47b0      	blx	r6
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	dc08      	bgt.n	800e80c <__sflush_r+0xfc>
 800e7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e802:	81a3      	strh	r3, [r4, #12]
 800e804:	f04f 30ff 	mov.w	r0, #4294967295
 800e808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e80c:	4407      	add	r7, r0
 800e80e:	eba8 0800 	sub.w	r8, r8, r0
 800e812:	e7e7      	b.n	800e7e4 <__sflush_r+0xd4>
 800e814:	dfbffffe 	.word	0xdfbffffe

0800e818 <_fflush_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	690b      	ldr	r3, [r1, #16]
 800e81c:	4605      	mov	r5, r0
 800e81e:	460c      	mov	r4, r1
 800e820:	b913      	cbnz	r3, 800e828 <_fflush_r+0x10>
 800e822:	2500      	movs	r5, #0
 800e824:	4628      	mov	r0, r5
 800e826:	bd38      	pop	{r3, r4, r5, pc}
 800e828:	b118      	cbz	r0, 800e832 <_fflush_r+0x1a>
 800e82a:	6a03      	ldr	r3, [r0, #32]
 800e82c:	b90b      	cbnz	r3, 800e832 <_fflush_r+0x1a>
 800e82e:	f7fd ff0b 	bl	800c648 <__sinit>
 800e832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0f3      	beq.n	800e822 <_fflush_r+0xa>
 800e83a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e83c:	07d0      	lsls	r0, r2, #31
 800e83e:	d404      	bmi.n	800e84a <_fflush_r+0x32>
 800e840:	0599      	lsls	r1, r3, #22
 800e842:	d402      	bmi.n	800e84a <_fflush_r+0x32>
 800e844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e846:	f7fe f8ee 	bl	800ca26 <__retarget_lock_acquire_recursive>
 800e84a:	4628      	mov	r0, r5
 800e84c:	4621      	mov	r1, r4
 800e84e:	f7ff ff5f 	bl	800e710 <__sflush_r>
 800e852:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e854:	07da      	lsls	r2, r3, #31
 800e856:	4605      	mov	r5, r0
 800e858:	d4e4      	bmi.n	800e824 <_fflush_r+0xc>
 800e85a:	89a3      	ldrh	r3, [r4, #12]
 800e85c:	059b      	lsls	r3, r3, #22
 800e85e:	d4e1      	bmi.n	800e824 <_fflush_r+0xc>
 800e860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e862:	f7fe f8e1 	bl	800ca28 <__retarget_lock_release_recursive>
 800e866:	e7dd      	b.n	800e824 <_fflush_r+0xc>

0800e868 <__sccl>:
 800e868:	b570      	push	{r4, r5, r6, lr}
 800e86a:	780b      	ldrb	r3, [r1, #0]
 800e86c:	4604      	mov	r4, r0
 800e86e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e870:	bf0b      	itete	eq
 800e872:	784b      	ldrbeq	r3, [r1, #1]
 800e874:	1c4a      	addne	r2, r1, #1
 800e876:	1c8a      	addeq	r2, r1, #2
 800e878:	2100      	movne	r1, #0
 800e87a:	bf08      	it	eq
 800e87c:	2101      	moveq	r1, #1
 800e87e:	3801      	subs	r0, #1
 800e880:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e884:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e888:	42a8      	cmp	r0, r5
 800e88a:	d1fb      	bne.n	800e884 <__sccl+0x1c>
 800e88c:	b90b      	cbnz	r3, 800e892 <__sccl+0x2a>
 800e88e:	1e50      	subs	r0, r2, #1
 800e890:	bd70      	pop	{r4, r5, r6, pc}
 800e892:	f081 0101 	eor.w	r1, r1, #1
 800e896:	54e1      	strb	r1, [r4, r3]
 800e898:	4610      	mov	r0, r2
 800e89a:	4602      	mov	r2, r0
 800e89c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e8a0:	2d2d      	cmp	r5, #45	@ 0x2d
 800e8a2:	d005      	beq.n	800e8b0 <__sccl+0x48>
 800e8a4:	2d5d      	cmp	r5, #93	@ 0x5d
 800e8a6:	d016      	beq.n	800e8d6 <__sccl+0x6e>
 800e8a8:	2d00      	cmp	r5, #0
 800e8aa:	d0f1      	beq.n	800e890 <__sccl+0x28>
 800e8ac:	462b      	mov	r3, r5
 800e8ae:	e7f2      	b.n	800e896 <__sccl+0x2e>
 800e8b0:	7846      	ldrb	r6, [r0, #1]
 800e8b2:	2e5d      	cmp	r6, #93	@ 0x5d
 800e8b4:	d0fa      	beq.n	800e8ac <__sccl+0x44>
 800e8b6:	42b3      	cmp	r3, r6
 800e8b8:	dcf8      	bgt.n	800e8ac <__sccl+0x44>
 800e8ba:	3002      	adds	r0, #2
 800e8bc:	461a      	mov	r2, r3
 800e8be:	3201      	adds	r2, #1
 800e8c0:	4296      	cmp	r6, r2
 800e8c2:	54a1      	strb	r1, [r4, r2]
 800e8c4:	dcfb      	bgt.n	800e8be <__sccl+0x56>
 800e8c6:	1af2      	subs	r2, r6, r3
 800e8c8:	3a01      	subs	r2, #1
 800e8ca:	1c5d      	adds	r5, r3, #1
 800e8cc:	42b3      	cmp	r3, r6
 800e8ce:	bfa8      	it	ge
 800e8d0:	2200      	movge	r2, #0
 800e8d2:	18ab      	adds	r3, r5, r2
 800e8d4:	e7e1      	b.n	800e89a <__sccl+0x32>
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	e7da      	b.n	800e890 <__sccl+0x28>

0800e8da <__submore>:
 800e8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8de:	460c      	mov	r4, r1
 800e8e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e8e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8e6:	4299      	cmp	r1, r3
 800e8e8:	d11d      	bne.n	800e926 <__submore+0x4c>
 800e8ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e8ee:	f7fc ff4d 	bl	800b78c <_malloc_r>
 800e8f2:	b918      	cbnz	r0, 800e8fc <__submore+0x22>
 800e8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e900:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e902:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e906:	6360      	str	r0, [r4, #52]	@ 0x34
 800e908:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e90c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e910:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e914:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e918:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e91c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e920:	6020      	str	r0, [r4, #0]
 800e922:	2000      	movs	r0, #0
 800e924:	e7e8      	b.n	800e8f8 <__submore+0x1e>
 800e926:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e928:	0077      	lsls	r7, r6, #1
 800e92a:	463a      	mov	r2, r7
 800e92c:	f7fc ffc2 	bl	800b8b4 <_realloc_r>
 800e930:	4605      	mov	r5, r0
 800e932:	2800      	cmp	r0, #0
 800e934:	d0de      	beq.n	800e8f4 <__submore+0x1a>
 800e936:	eb00 0806 	add.w	r8, r0, r6
 800e93a:	4601      	mov	r1, r0
 800e93c:	4632      	mov	r2, r6
 800e93e:	4640      	mov	r0, r8
 800e940:	f7fe f873 	bl	800ca2a <memcpy>
 800e944:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e948:	f8c4 8000 	str.w	r8, [r4]
 800e94c:	e7e9      	b.n	800e922 <__submore+0x48>

0800e94e <memmove>:
 800e94e:	4288      	cmp	r0, r1
 800e950:	b510      	push	{r4, lr}
 800e952:	eb01 0402 	add.w	r4, r1, r2
 800e956:	d902      	bls.n	800e95e <memmove+0x10>
 800e958:	4284      	cmp	r4, r0
 800e95a:	4623      	mov	r3, r4
 800e95c:	d807      	bhi.n	800e96e <memmove+0x20>
 800e95e:	1e43      	subs	r3, r0, #1
 800e960:	42a1      	cmp	r1, r4
 800e962:	d008      	beq.n	800e976 <memmove+0x28>
 800e964:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e968:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e96c:	e7f8      	b.n	800e960 <memmove+0x12>
 800e96e:	4402      	add	r2, r0
 800e970:	4601      	mov	r1, r0
 800e972:	428a      	cmp	r2, r1
 800e974:	d100      	bne.n	800e978 <memmove+0x2a>
 800e976:	bd10      	pop	{r4, pc}
 800e978:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e97c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e980:	e7f7      	b.n	800e972 <memmove+0x24>
	...

0800e984 <__assert_func>:
 800e984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e986:	4614      	mov	r4, r2
 800e988:	461a      	mov	r2, r3
 800e98a:	4b09      	ldr	r3, [pc, #36]	@ (800e9b0 <__assert_func+0x2c>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4605      	mov	r5, r0
 800e990:	68d8      	ldr	r0, [r3, #12]
 800e992:	b954      	cbnz	r4, 800e9aa <__assert_func+0x26>
 800e994:	4b07      	ldr	r3, [pc, #28]	@ (800e9b4 <__assert_func+0x30>)
 800e996:	461c      	mov	r4, r3
 800e998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e99c:	9100      	str	r1, [sp, #0]
 800e99e:	462b      	mov	r3, r5
 800e9a0:	4905      	ldr	r1, [pc, #20]	@ (800e9b8 <__assert_func+0x34>)
 800e9a2:	f000 f90d 	bl	800ebc0 <fiprintf>
 800e9a6:	f000 f91d 	bl	800ebe4 <abort>
 800e9aa:	4b04      	ldr	r3, [pc, #16]	@ (800e9bc <__assert_func+0x38>)
 800e9ac:	e7f4      	b.n	800e998 <__assert_func+0x14>
 800e9ae:	bf00      	nop
 800e9b0:	20000198 	.word	0x20000198
 800e9b4:	0800f741 	.word	0x0800f741
 800e9b8:	0800f713 	.word	0x0800f713
 800e9bc:	0800f706 	.word	0x0800f706

0800e9c0 <_calloc_r>:
 800e9c0:	b570      	push	{r4, r5, r6, lr}
 800e9c2:	fba1 5402 	umull	r5, r4, r1, r2
 800e9c6:	b93c      	cbnz	r4, 800e9d8 <_calloc_r+0x18>
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	f7fc fedf 	bl	800b78c <_malloc_r>
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	b928      	cbnz	r0, 800e9de <_calloc_r+0x1e>
 800e9d2:	2600      	movs	r6, #0
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	bd70      	pop	{r4, r5, r6, pc}
 800e9d8:	220c      	movs	r2, #12
 800e9da:	6002      	str	r2, [r0, #0]
 800e9dc:	e7f9      	b.n	800e9d2 <_calloc_r+0x12>
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	f7fd ff2f 	bl	800c844 <memset>
 800e9e6:	e7f5      	b.n	800e9d4 <_calloc_r+0x14>

0800e9e8 <_strtol_l.constprop.0>:
 800e9e8:	2b24      	cmp	r3, #36	@ 0x24
 800e9ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9ee:	4686      	mov	lr, r0
 800e9f0:	4690      	mov	r8, r2
 800e9f2:	d801      	bhi.n	800e9f8 <_strtol_l.constprop.0+0x10>
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d106      	bne.n	800ea06 <_strtol_l.constprop.0+0x1e>
 800e9f8:	f7fd ffea 	bl	800c9d0 <__errno>
 800e9fc:	2316      	movs	r3, #22
 800e9fe:	6003      	str	r3, [r0, #0]
 800ea00:	2000      	movs	r0, #0
 800ea02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea06:	4834      	ldr	r0, [pc, #208]	@ (800ead8 <_strtol_l.constprop.0+0xf0>)
 800ea08:	460d      	mov	r5, r1
 800ea0a:	462a      	mov	r2, r5
 800ea0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea10:	5d06      	ldrb	r6, [r0, r4]
 800ea12:	f016 0608 	ands.w	r6, r6, #8
 800ea16:	d1f8      	bne.n	800ea0a <_strtol_l.constprop.0+0x22>
 800ea18:	2c2d      	cmp	r4, #45	@ 0x2d
 800ea1a:	d12d      	bne.n	800ea78 <_strtol_l.constprop.0+0x90>
 800ea1c:	782c      	ldrb	r4, [r5, #0]
 800ea1e:	2601      	movs	r6, #1
 800ea20:	1c95      	adds	r5, r2, #2
 800ea22:	f033 0210 	bics.w	r2, r3, #16
 800ea26:	d109      	bne.n	800ea3c <_strtol_l.constprop.0+0x54>
 800ea28:	2c30      	cmp	r4, #48	@ 0x30
 800ea2a:	d12a      	bne.n	800ea82 <_strtol_l.constprop.0+0x9a>
 800ea2c:	782a      	ldrb	r2, [r5, #0]
 800ea2e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea32:	2a58      	cmp	r2, #88	@ 0x58
 800ea34:	d125      	bne.n	800ea82 <_strtol_l.constprop.0+0x9a>
 800ea36:	786c      	ldrb	r4, [r5, #1]
 800ea38:	2310      	movs	r3, #16
 800ea3a:	3502      	adds	r5, #2
 800ea3c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ea40:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ea44:	2200      	movs	r2, #0
 800ea46:	fbbc f9f3 	udiv	r9, ip, r3
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ea50:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ea54:	2f09      	cmp	r7, #9
 800ea56:	d81b      	bhi.n	800ea90 <_strtol_l.constprop.0+0xa8>
 800ea58:	463c      	mov	r4, r7
 800ea5a:	42a3      	cmp	r3, r4
 800ea5c:	dd27      	ble.n	800eaae <_strtol_l.constprop.0+0xc6>
 800ea5e:	1c57      	adds	r7, r2, #1
 800ea60:	d007      	beq.n	800ea72 <_strtol_l.constprop.0+0x8a>
 800ea62:	4581      	cmp	r9, r0
 800ea64:	d320      	bcc.n	800eaa8 <_strtol_l.constprop.0+0xc0>
 800ea66:	d101      	bne.n	800ea6c <_strtol_l.constprop.0+0x84>
 800ea68:	45a2      	cmp	sl, r4
 800ea6a:	db1d      	blt.n	800eaa8 <_strtol_l.constprop.0+0xc0>
 800ea6c:	fb00 4003 	mla	r0, r0, r3, r4
 800ea70:	2201      	movs	r2, #1
 800ea72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea76:	e7eb      	b.n	800ea50 <_strtol_l.constprop.0+0x68>
 800ea78:	2c2b      	cmp	r4, #43	@ 0x2b
 800ea7a:	bf04      	itt	eq
 800ea7c:	782c      	ldrbeq	r4, [r5, #0]
 800ea7e:	1c95      	addeq	r5, r2, #2
 800ea80:	e7cf      	b.n	800ea22 <_strtol_l.constprop.0+0x3a>
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1da      	bne.n	800ea3c <_strtol_l.constprop.0+0x54>
 800ea86:	2c30      	cmp	r4, #48	@ 0x30
 800ea88:	bf0c      	ite	eq
 800ea8a:	2308      	moveq	r3, #8
 800ea8c:	230a      	movne	r3, #10
 800ea8e:	e7d5      	b.n	800ea3c <_strtol_l.constprop.0+0x54>
 800ea90:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ea94:	2f19      	cmp	r7, #25
 800ea96:	d801      	bhi.n	800ea9c <_strtol_l.constprop.0+0xb4>
 800ea98:	3c37      	subs	r4, #55	@ 0x37
 800ea9a:	e7de      	b.n	800ea5a <_strtol_l.constprop.0+0x72>
 800ea9c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800eaa0:	2f19      	cmp	r7, #25
 800eaa2:	d804      	bhi.n	800eaae <_strtol_l.constprop.0+0xc6>
 800eaa4:	3c57      	subs	r4, #87	@ 0x57
 800eaa6:	e7d8      	b.n	800ea5a <_strtol_l.constprop.0+0x72>
 800eaa8:	f04f 32ff 	mov.w	r2, #4294967295
 800eaac:	e7e1      	b.n	800ea72 <_strtol_l.constprop.0+0x8a>
 800eaae:	1c53      	adds	r3, r2, #1
 800eab0:	d108      	bne.n	800eac4 <_strtol_l.constprop.0+0xdc>
 800eab2:	2322      	movs	r3, #34	@ 0x22
 800eab4:	f8ce 3000 	str.w	r3, [lr]
 800eab8:	4660      	mov	r0, ip
 800eaba:	f1b8 0f00 	cmp.w	r8, #0
 800eabe:	d0a0      	beq.n	800ea02 <_strtol_l.constprop.0+0x1a>
 800eac0:	1e69      	subs	r1, r5, #1
 800eac2:	e006      	b.n	800ead2 <_strtol_l.constprop.0+0xea>
 800eac4:	b106      	cbz	r6, 800eac8 <_strtol_l.constprop.0+0xe0>
 800eac6:	4240      	negs	r0, r0
 800eac8:	f1b8 0f00 	cmp.w	r8, #0
 800eacc:	d099      	beq.n	800ea02 <_strtol_l.constprop.0+0x1a>
 800eace:	2a00      	cmp	r2, #0
 800ead0:	d1f6      	bne.n	800eac0 <_strtol_l.constprop.0+0xd8>
 800ead2:	f8c8 1000 	str.w	r1, [r8]
 800ead6:	e794      	b.n	800ea02 <_strtol_l.constprop.0+0x1a>
 800ead8:	0800f3d1 	.word	0x0800f3d1

0800eadc <_strtol_r>:
 800eadc:	f7ff bf84 	b.w	800e9e8 <_strtol_l.constprop.0>

0800eae0 <_strtoul_l.constprop.0>:
 800eae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eae4:	4e34      	ldr	r6, [pc, #208]	@ (800ebb8 <_strtoul_l.constprop.0+0xd8>)
 800eae6:	4686      	mov	lr, r0
 800eae8:	460d      	mov	r5, r1
 800eaea:	4628      	mov	r0, r5
 800eaec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eaf0:	5d37      	ldrb	r7, [r6, r4]
 800eaf2:	f017 0708 	ands.w	r7, r7, #8
 800eaf6:	d1f8      	bne.n	800eaea <_strtoul_l.constprop.0+0xa>
 800eaf8:	2c2d      	cmp	r4, #45	@ 0x2d
 800eafa:	d12f      	bne.n	800eb5c <_strtoul_l.constprop.0+0x7c>
 800eafc:	782c      	ldrb	r4, [r5, #0]
 800eafe:	2701      	movs	r7, #1
 800eb00:	1c85      	adds	r5, r0, #2
 800eb02:	f033 0010 	bics.w	r0, r3, #16
 800eb06:	d109      	bne.n	800eb1c <_strtoul_l.constprop.0+0x3c>
 800eb08:	2c30      	cmp	r4, #48	@ 0x30
 800eb0a:	d12c      	bne.n	800eb66 <_strtoul_l.constprop.0+0x86>
 800eb0c:	7828      	ldrb	r0, [r5, #0]
 800eb0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800eb12:	2858      	cmp	r0, #88	@ 0x58
 800eb14:	d127      	bne.n	800eb66 <_strtoul_l.constprop.0+0x86>
 800eb16:	786c      	ldrb	r4, [r5, #1]
 800eb18:	2310      	movs	r3, #16
 800eb1a:	3502      	adds	r5, #2
 800eb1c:	f04f 38ff 	mov.w	r8, #4294967295
 800eb20:	2600      	movs	r6, #0
 800eb22:	fbb8 f8f3 	udiv	r8, r8, r3
 800eb26:	fb03 f908 	mul.w	r9, r3, r8
 800eb2a:	ea6f 0909 	mvn.w	r9, r9
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800eb34:	f1bc 0f09 	cmp.w	ip, #9
 800eb38:	d81c      	bhi.n	800eb74 <_strtoul_l.constprop.0+0x94>
 800eb3a:	4664      	mov	r4, ip
 800eb3c:	42a3      	cmp	r3, r4
 800eb3e:	dd2a      	ble.n	800eb96 <_strtoul_l.constprop.0+0xb6>
 800eb40:	f1b6 3fff 	cmp.w	r6, #4294967295
 800eb44:	d007      	beq.n	800eb56 <_strtoul_l.constprop.0+0x76>
 800eb46:	4580      	cmp	r8, r0
 800eb48:	d322      	bcc.n	800eb90 <_strtoul_l.constprop.0+0xb0>
 800eb4a:	d101      	bne.n	800eb50 <_strtoul_l.constprop.0+0x70>
 800eb4c:	45a1      	cmp	r9, r4
 800eb4e:	db1f      	blt.n	800eb90 <_strtoul_l.constprop.0+0xb0>
 800eb50:	fb00 4003 	mla	r0, r0, r3, r4
 800eb54:	2601      	movs	r6, #1
 800eb56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb5a:	e7e9      	b.n	800eb30 <_strtoul_l.constprop.0+0x50>
 800eb5c:	2c2b      	cmp	r4, #43	@ 0x2b
 800eb5e:	bf04      	itt	eq
 800eb60:	782c      	ldrbeq	r4, [r5, #0]
 800eb62:	1c85      	addeq	r5, r0, #2
 800eb64:	e7cd      	b.n	800eb02 <_strtoul_l.constprop.0+0x22>
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d1d8      	bne.n	800eb1c <_strtoul_l.constprop.0+0x3c>
 800eb6a:	2c30      	cmp	r4, #48	@ 0x30
 800eb6c:	bf0c      	ite	eq
 800eb6e:	2308      	moveq	r3, #8
 800eb70:	230a      	movne	r3, #10
 800eb72:	e7d3      	b.n	800eb1c <_strtoul_l.constprop.0+0x3c>
 800eb74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800eb78:	f1bc 0f19 	cmp.w	ip, #25
 800eb7c:	d801      	bhi.n	800eb82 <_strtoul_l.constprop.0+0xa2>
 800eb7e:	3c37      	subs	r4, #55	@ 0x37
 800eb80:	e7dc      	b.n	800eb3c <_strtoul_l.constprop.0+0x5c>
 800eb82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800eb86:	f1bc 0f19 	cmp.w	ip, #25
 800eb8a:	d804      	bhi.n	800eb96 <_strtoul_l.constprop.0+0xb6>
 800eb8c:	3c57      	subs	r4, #87	@ 0x57
 800eb8e:	e7d5      	b.n	800eb3c <_strtoul_l.constprop.0+0x5c>
 800eb90:	f04f 36ff 	mov.w	r6, #4294967295
 800eb94:	e7df      	b.n	800eb56 <_strtoul_l.constprop.0+0x76>
 800eb96:	1c73      	adds	r3, r6, #1
 800eb98:	d106      	bne.n	800eba8 <_strtoul_l.constprop.0+0xc8>
 800eb9a:	2322      	movs	r3, #34	@ 0x22
 800eb9c:	f8ce 3000 	str.w	r3, [lr]
 800eba0:	4630      	mov	r0, r6
 800eba2:	b932      	cbnz	r2, 800ebb2 <_strtoul_l.constprop.0+0xd2>
 800eba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eba8:	b107      	cbz	r7, 800ebac <_strtoul_l.constprop.0+0xcc>
 800ebaa:	4240      	negs	r0, r0
 800ebac:	2a00      	cmp	r2, #0
 800ebae:	d0f9      	beq.n	800eba4 <_strtoul_l.constprop.0+0xc4>
 800ebb0:	b106      	cbz	r6, 800ebb4 <_strtoul_l.constprop.0+0xd4>
 800ebb2:	1e69      	subs	r1, r5, #1
 800ebb4:	6011      	str	r1, [r2, #0]
 800ebb6:	e7f5      	b.n	800eba4 <_strtoul_l.constprop.0+0xc4>
 800ebb8:	0800f3d1 	.word	0x0800f3d1

0800ebbc <_strtoul_r>:
 800ebbc:	f7ff bf90 	b.w	800eae0 <_strtoul_l.constprop.0>

0800ebc0 <fiprintf>:
 800ebc0:	b40e      	push	{r1, r2, r3}
 800ebc2:	b503      	push	{r0, r1, lr}
 800ebc4:	4601      	mov	r1, r0
 800ebc6:	ab03      	add	r3, sp, #12
 800ebc8:	4805      	ldr	r0, [pc, #20]	@ (800ebe0 <fiprintf+0x20>)
 800ebca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebce:	6800      	ldr	r0, [r0, #0]
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	f000 f837 	bl	800ec44 <_vfiprintf_r>
 800ebd6:	b002      	add	sp, #8
 800ebd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebdc:	b003      	add	sp, #12
 800ebde:	4770      	bx	lr
 800ebe0:	20000198 	.word	0x20000198

0800ebe4 <abort>:
 800ebe4:	b508      	push	{r3, lr}
 800ebe6:	2006      	movs	r0, #6
 800ebe8:	f000 fa00 	bl	800efec <raise>
 800ebec:	2001      	movs	r0, #1
 800ebee:	f7f5 ff71 	bl	8004ad4 <_exit>

0800ebf2 <__sfputc_r>:
 800ebf2:	6893      	ldr	r3, [r2, #8]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	b410      	push	{r4}
 800ebfa:	6093      	str	r3, [r2, #8]
 800ebfc:	da08      	bge.n	800ec10 <__sfputc_r+0x1e>
 800ebfe:	6994      	ldr	r4, [r2, #24]
 800ec00:	42a3      	cmp	r3, r4
 800ec02:	db01      	blt.n	800ec08 <__sfputc_r+0x16>
 800ec04:	290a      	cmp	r1, #10
 800ec06:	d103      	bne.n	800ec10 <__sfputc_r+0x1e>
 800ec08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec0c:	f000 b932 	b.w	800ee74 <__swbuf_r>
 800ec10:	6813      	ldr	r3, [r2, #0]
 800ec12:	1c58      	adds	r0, r3, #1
 800ec14:	6010      	str	r0, [r2, #0]
 800ec16:	7019      	strb	r1, [r3, #0]
 800ec18:	4608      	mov	r0, r1
 800ec1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <__sfputs_r>:
 800ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec22:	4606      	mov	r6, r0
 800ec24:	460f      	mov	r7, r1
 800ec26:	4614      	mov	r4, r2
 800ec28:	18d5      	adds	r5, r2, r3
 800ec2a:	42ac      	cmp	r4, r5
 800ec2c:	d101      	bne.n	800ec32 <__sfputs_r+0x12>
 800ec2e:	2000      	movs	r0, #0
 800ec30:	e007      	b.n	800ec42 <__sfputs_r+0x22>
 800ec32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec36:	463a      	mov	r2, r7
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f7ff ffda 	bl	800ebf2 <__sfputc_r>
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	d1f3      	bne.n	800ec2a <__sfputs_r+0xa>
 800ec42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec44 <_vfiprintf_r>:
 800ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec48:	460d      	mov	r5, r1
 800ec4a:	b09d      	sub	sp, #116	@ 0x74
 800ec4c:	4614      	mov	r4, r2
 800ec4e:	4698      	mov	r8, r3
 800ec50:	4606      	mov	r6, r0
 800ec52:	b118      	cbz	r0, 800ec5c <_vfiprintf_r+0x18>
 800ec54:	6a03      	ldr	r3, [r0, #32]
 800ec56:	b90b      	cbnz	r3, 800ec5c <_vfiprintf_r+0x18>
 800ec58:	f7fd fcf6 	bl	800c648 <__sinit>
 800ec5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec5e:	07d9      	lsls	r1, r3, #31
 800ec60:	d405      	bmi.n	800ec6e <_vfiprintf_r+0x2a>
 800ec62:	89ab      	ldrh	r3, [r5, #12]
 800ec64:	059a      	lsls	r2, r3, #22
 800ec66:	d402      	bmi.n	800ec6e <_vfiprintf_r+0x2a>
 800ec68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec6a:	f7fd fedc 	bl	800ca26 <__retarget_lock_acquire_recursive>
 800ec6e:	89ab      	ldrh	r3, [r5, #12]
 800ec70:	071b      	lsls	r3, r3, #28
 800ec72:	d501      	bpl.n	800ec78 <_vfiprintf_r+0x34>
 800ec74:	692b      	ldr	r3, [r5, #16]
 800ec76:	b99b      	cbnz	r3, 800eca0 <_vfiprintf_r+0x5c>
 800ec78:	4629      	mov	r1, r5
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f000 f938 	bl	800eef0 <__swsetup_r>
 800ec80:	b170      	cbz	r0, 800eca0 <_vfiprintf_r+0x5c>
 800ec82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec84:	07dc      	lsls	r4, r3, #31
 800ec86:	d504      	bpl.n	800ec92 <_vfiprintf_r+0x4e>
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8c:	b01d      	add	sp, #116	@ 0x74
 800ec8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec92:	89ab      	ldrh	r3, [r5, #12]
 800ec94:	0598      	lsls	r0, r3, #22
 800ec96:	d4f7      	bmi.n	800ec88 <_vfiprintf_r+0x44>
 800ec98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec9a:	f7fd fec5 	bl	800ca28 <__retarget_lock_release_recursive>
 800ec9e:	e7f3      	b.n	800ec88 <_vfiprintf_r+0x44>
 800eca0:	2300      	movs	r3, #0
 800eca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800eca4:	2320      	movs	r3, #32
 800eca6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecae:	2330      	movs	r3, #48	@ 0x30
 800ecb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee60 <_vfiprintf_r+0x21c>
 800ecb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecb8:	f04f 0901 	mov.w	r9, #1
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	469a      	mov	sl, r3
 800ecc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecc4:	b10a      	cbz	r2, 800ecca <_vfiprintf_r+0x86>
 800ecc6:	2a25      	cmp	r2, #37	@ 0x25
 800ecc8:	d1f9      	bne.n	800ecbe <_vfiprintf_r+0x7a>
 800ecca:	ebba 0b04 	subs.w	fp, sl, r4
 800ecce:	d00b      	beq.n	800ece8 <_vfiprintf_r+0xa4>
 800ecd0:	465b      	mov	r3, fp
 800ecd2:	4622      	mov	r2, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	4630      	mov	r0, r6
 800ecd8:	f7ff ffa2 	bl	800ec20 <__sfputs_r>
 800ecdc:	3001      	adds	r0, #1
 800ecde:	f000 80a7 	beq.w	800ee30 <_vfiprintf_r+0x1ec>
 800ece2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ece4:	445a      	add	r2, fp
 800ece6:	9209      	str	r2, [sp, #36]	@ 0x24
 800ece8:	f89a 3000 	ldrb.w	r3, [sl]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	f000 809f 	beq.w	800ee30 <_vfiprintf_r+0x1ec>
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecfc:	f10a 0a01 	add.w	sl, sl, #1
 800ed00:	9304      	str	r3, [sp, #16]
 800ed02:	9307      	str	r3, [sp, #28]
 800ed04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed08:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed0a:	4654      	mov	r4, sl
 800ed0c:	2205      	movs	r2, #5
 800ed0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed12:	4853      	ldr	r0, [pc, #332]	@ (800ee60 <_vfiprintf_r+0x21c>)
 800ed14:	f7f1 fa74 	bl	8000200 <memchr>
 800ed18:	9a04      	ldr	r2, [sp, #16]
 800ed1a:	b9d8      	cbnz	r0, 800ed54 <_vfiprintf_r+0x110>
 800ed1c:	06d1      	lsls	r1, r2, #27
 800ed1e:	bf44      	itt	mi
 800ed20:	2320      	movmi	r3, #32
 800ed22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed26:	0713      	lsls	r3, r2, #28
 800ed28:	bf44      	itt	mi
 800ed2a:	232b      	movmi	r3, #43	@ 0x2b
 800ed2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed30:	f89a 3000 	ldrb.w	r3, [sl]
 800ed34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed36:	d015      	beq.n	800ed64 <_vfiprintf_r+0x120>
 800ed38:	9a07      	ldr	r2, [sp, #28]
 800ed3a:	4654      	mov	r4, sl
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	f04f 0c0a 	mov.w	ip, #10
 800ed42:	4621      	mov	r1, r4
 800ed44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed48:	3b30      	subs	r3, #48	@ 0x30
 800ed4a:	2b09      	cmp	r3, #9
 800ed4c:	d94b      	bls.n	800ede6 <_vfiprintf_r+0x1a2>
 800ed4e:	b1b0      	cbz	r0, 800ed7e <_vfiprintf_r+0x13a>
 800ed50:	9207      	str	r2, [sp, #28]
 800ed52:	e014      	b.n	800ed7e <_vfiprintf_r+0x13a>
 800ed54:	eba0 0308 	sub.w	r3, r0, r8
 800ed58:	fa09 f303 	lsl.w	r3, r9, r3
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	9304      	str	r3, [sp, #16]
 800ed60:	46a2      	mov	sl, r4
 800ed62:	e7d2      	b.n	800ed0a <_vfiprintf_r+0xc6>
 800ed64:	9b03      	ldr	r3, [sp, #12]
 800ed66:	1d19      	adds	r1, r3, #4
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	9103      	str	r1, [sp, #12]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	bfbb      	ittet	lt
 800ed70:	425b      	neglt	r3, r3
 800ed72:	f042 0202 	orrlt.w	r2, r2, #2
 800ed76:	9307      	strge	r3, [sp, #28]
 800ed78:	9307      	strlt	r3, [sp, #28]
 800ed7a:	bfb8      	it	lt
 800ed7c:	9204      	strlt	r2, [sp, #16]
 800ed7e:	7823      	ldrb	r3, [r4, #0]
 800ed80:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed82:	d10a      	bne.n	800ed9a <_vfiprintf_r+0x156>
 800ed84:	7863      	ldrb	r3, [r4, #1]
 800ed86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed88:	d132      	bne.n	800edf0 <_vfiprintf_r+0x1ac>
 800ed8a:	9b03      	ldr	r3, [sp, #12]
 800ed8c:	1d1a      	adds	r2, r3, #4
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	9203      	str	r2, [sp, #12]
 800ed92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed96:	3402      	adds	r4, #2
 800ed98:	9305      	str	r3, [sp, #20]
 800ed9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee70 <_vfiprintf_r+0x22c>
 800ed9e:	7821      	ldrb	r1, [r4, #0]
 800eda0:	2203      	movs	r2, #3
 800eda2:	4650      	mov	r0, sl
 800eda4:	f7f1 fa2c 	bl	8000200 <memchr>
 800eda8:	b138      	cbz	r0, 800edba <_vfiprintf_r+0x176>
 800edaa:	9b04      	ldr	r3, [sp, #16]
 800edac:	eba0 000a 	sub.w	r0, r0, sl
 800edb0:	2240      	movs	r2, #64	@ 0x40
 800edb2:	4082      	lsls	r2, r0
 800edb4:	4313      	orrs	r3, r2
 800edb6:	3401      	adds	r4, #1
 800edb8:	9304      	str	r3, [sp, #16]
 800edba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edbe:	4829      	ldr	r0, [pc, #164]	@ (800ee64 <_vfiprintf_r+0x220>)
 800edc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edc4:	2206      	movs	r2, #6
 800edc6:	f7f1 fa1b 	bl	8000200 <memchr>
 800edca:	2800      	cmp	r0, #0
 800edcc:	d03f      	beq.n	800ee4e <_vfiprintf_r+0x20a>
 800edce:	4b26      	ldr	r3, [pc, #152]	@ (800ee68 <_vfiprintf_r+0x224>)
 800edd0:	bb1b      	cbnz	r3, 800ee1a <_vfiprintf_r+0x1d6>
 800edd2:	9b03      	ldr	r3, [sp, #12]
 800edd4:	3307      	adds	r3, #7
 800edd6:	f023 0307 	bic.w	r3, r3, #7
 800edda:	3308      	adds	r3, #8
 800eddc:	9303      	str	r3, [sp, #12]
 800edde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ede0:	443b      	add	r3, r7
 800ede2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ede4:	e76a      	b.n	800ecbc <_vfiprintf_r+0x78>
 800ede6:	fb0c 3202 	mla	r2, ip, r2, r3
 800edea:	460c      	mov	r4, r1
 800edec:	2001      	movs	r0, #1
 800edee:	e7a8      	b.n	800ed42 <_vfiprintf_r+0xfe>
 800edf0:	2300      	movs	r3, #0
 800edf2:	3401      	adds	r4, #1
 800edf4:	9305      	str	r3, [sp, #20]
 800edf6:	4619      	mov	r1, r3
 800edf8:	f04f 0c0a 	mov.w	ip, #10
 800edfc:	4620      	mov	r0, r4
 800edfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee02:	3a30      	subs	r2, #48	@ 0x30
 800ee04:	2a09      	cmp	r2, #9
 800ee06:	d903      	bls.n	800ee10 <_vfiprintf_r+0x1cc>
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d0c6      	beq.n	800ed9a <_vfiprintf_r+0x156>
 800ee0c:	9105      	str	r1, [sp, #20]
 800ee0e:	e7c4      	b.n	800ed9a <_vfiprintf_r+0x156>
 800ee10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee14:	4604      	mov	r4, r0
 800ee16:	2301      	movs	r3, #1
 800ee18:	e7f0      	b.n	800edfc <_vfiprintf_r+0x1b8>
 800ee1a:	ab03      	add	r3, sp, #12
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	462a      	mov	r2, r5
 800ee20:	4b12      	ldr	r3, [pc, #72]	@ (800ee6c <_vfiprintf_r+0x228>)
 800ee22:	a904      	add	r1, sp, #16
 800ee24:	4630      	mov	r0, r6
 800ee26:	f3af 8000 	nop.w
 800ee2a:	4607      	mov	r7, r0
 800ee2c:	1c78      	adds	r0, r7, #1
 800ee2e:	d1d6      	bne.n	800edde <_vfiprintf_r+0x19a>
 800ee30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee32:	07d9      	lsls	r1, r3, #31
 800ee34:	d405      	bmi.n	800ee42 <_vfiprintf_r+0x1fe>
 800ee36:	89ab      	ldrh	r3, [r5, #12]
 800ee38:	059a      	lsls	r2, r3, #22
 800ee3a:	d402      	bmi.n	800ee42 <_vfiprintf_r+0x1fe>
 800ee3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee3e:	f7fd fdf3 	bl	800ca28 <__retarget_lock_release_recursive>
 800ee42:	89ab      	ldrh	r3, [r5, #12]
 800ee44:	065b      	lsls	r3, r3, #25
 800ee46:	f53f af1f 	bmi.w	800ec88 <_vfiprintf_r+0x44>
 800ee4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee4c:	e71e      	b.n	800ec8c <_vfiprintf_r+0x48>
 800ee4e:	ab03      	add	r3, sp, #12
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	462a      	mov	r2, r5
 800ee54:	4b05      	ldr	r3, [pc, #20]	@ (800ee6c <_vfiprintf_r+0x228>)
 800ee56:	a904      	add	r1, sp, #16
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f7ff f9eb 	bl	800e234 <_printf_i>
 800ee5e:	e7e4      	b.n	800ee2a <_vfiprintf_r+0x1e6>
 800ee60:	0800f6b8 	.word	0x0800f6b8
 800ee64:	0800f6c2 	.word	0x0800f6c2
 800ee68:	00000000 	.word	0x00000000
 800ee6c:	0800ec21 	.word	0x0800ec21
 800ee70:	0800f6be 	.word	0x0800f6be

0800ee74 <__swbuf_r>:
 800ee74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee76:	460e      	mov	r6, r1
 800ee78:	4614      	mov	r4, r2
 800ee7a:	4605      	mov	r5, r0
 800ee7c:	b118      	cbz	r0, 800ee86 <__swbuf_r+0x12>
 800ee7e:	6a03      	ldr	r3, [r0, #32]
 800ee80:	b90b      	cbnz	r3, 800ee86 <__swbuf_r+0x12>
 800ee82:	f7fd fbe1 	bl	800c648 <__sinit>
 800ee86:	69a3      	ldr	r3, [r4, #24]
 800ee88:	60a3      	str	r3, [r4, #8]
 800ee8a:	89a3      	ldrh	r3, [r4, #12]
 800ee8c:	071a      	lsls	r2, r3, #28
 800ee8e:	d501      	bpl.n	800ee94 <__swbuf_r+0x20>
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	b943      	cbnz	r3, 800eea6 <__swbuf_r+0x32>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4628      	mov	r0, r5
 800ee98:	f000 f82a 	bl	800eef0 <__swsetup_r>
 800ee9c:	b118      	cbz	r0, 800eea6 <__swbuf_r+0x32>
 800ee9e:	f04f 37ff 	mov.w	r7, #4294967295
 800eea2:	4638      	mov	r0, r7
 800eea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	6922      	ldr	r2, [r4, #16]
 800eeaa:	1a98      	subs	r0, r3, r2
 800eeac:	6963      	ldr	r3, [r4, #20]
 800eeae:	b2f6      	uxtb	r6, r6
 800eeb0:	4283      	cmp	r3, r0
 800eeb2:	4637      	mov	r7, r6
 800eeb4:	dc05      	bgt.n	800eec2 <__swbuf_r+0x4e>
 800eeb6:	4621      	mov	r1, r4
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f7ff fcad 	bl	800e818 <_fflush_r>
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d1ed      	bne.n	800ee9e <__swbuf_r+0x2a>
 800eec2:	68a3      	ldr	r3, [r4, #8]
 800eec4:	3b01      	subs	r3, #1
 800eec6:	60a3      	str	r3, [r4, #8]
 800eec8:	6823      	ldr	r3, [r4, #0]
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	6022      	str	r2, [r4, #0]
 800eece:	701e      	strb	r6, [r3, #0]
 800eed0:	6962      	ldr	r2, [r4, #20]
 800eed2:	1c43      	adds	r3, r0, #1
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d004      	beq.n	800eee2 <__swbuf_r+0x6e>
 800eed8:	89a3      	ldrh	r3, [r4, #12]
 800eeda:	07db      	lsls	r3, r3, #31
 800eedc:	d5e1      	bpl.n	800eea2 <__swbuf_r+0x2e>
 800eede:	2e0a      	cmp	r6, #10
 800eee0:	d1df      	bne.n	800eea2 <__swbuf_r+0x2e>
 800eee2:	4621      	mov	r1, r4
 800eee4:	4628      	mov	r0, r5
 800eee6:	f7ff fc97 	bl	800e818 <_fflush_r>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d0d9      	beq.n	800eea2 <__swbuf_r+0x2e>
 800eeee:	e7d6      	b.n	800ee9e <__swbuf_r+0x2a>

0800eef0 <__swsetup_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4b29      	ldr	r3, [pc, #164]	@ (800ef98 <__swsetup_r+0xa8>)
 800eef4:	4605      	mov	r5, r0
 800eef6:	6818      	ldr	r0, [r3, #0]
 800eef8:	460c      	mov	r4, r1
 800eefa:	b118      	cbz	r0, 800ef04 <__swsetup_r+0x14>
 800eefc:	6a03      	ldr	r3, [r0, #32]
 800eefe:	b90b      	cbnz	r3, 800ef04 <__swsetup_r+0x14>
 800ef00:	f7fd fba2 	bl	800c648 <__sinit>
 800ef04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef08:	0719      	lsls	r1, r3, #28
 800ef0a:	d422      	bmi.n	800ef52 <__swsetup_r+0x62>
 800ef0c:	06da      	lsls	r2, r3, #27
 800ef0e:	d407      	bmi.n	800ef20 <__swsetup_r+0x30>
 800ef10:	2209      	movs	r2, #9
 800ef12:	602a      	str	r2, [r5, #0]
 800ef14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef18:	81a3      	strh	r3, [r4, #12]
 800ef1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1e:	e033      	b.n	800ef88 <__swsetup_r+0x98>
 800ef20:	0758      	lsls	r0, r3, #29
 800ef22:	d512      	bpl.n	800ef4a <__swsetup_r+0x5a>
 800ef24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef26:	b141      	cbz	r1, 800ef3a <__swsetup_r+0x4a>
 800ef28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef2c:	4299      	cmp	r1, r3
 800ef2e:	d002      	beq.n	800ef36 <__swsetup_r+0x46>
 800ef30:	4628      	mov	r0, r5
 800ef32:	f7fd fd91 	bl	800ca58 <_free_r>
 800ef36:	2300      	movs	r3, #0
 800ef38:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	2300      	movs	r3, #0
 800ef44:	6063      	str	r3, [r4, #4]
 800ef46:	6923      	ldr	r3, [r4, #16]
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	f043 0308 	orr.w	r3, r3, #8
 800ef50:	81a3      	strh	r3, [r4, #12]
 800ef52:	6923      	ldr	r3, [r4, #16]
 800ef54:	b94b      	cbnz	r3, 800ef6a <__swsetup_r+0x7a>
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef60:	d003      	beq.n	800ef6a <__swsetup_r+0x7a>
 800ef62:	4621      	mov	r1, r4
 800ef64:	4628      	mov	r0, r5
 800ef66:	f000 f883 	bl	800f070 <__smakebuf_r>
 800ef6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef6e:	f013 0201 	ands.w	r2, r3, #1
 800ef72:	d00a      	beq.n	800ef8a <__swsetup_r+0x9a>
 800ef74:	2200      	movs	r2, #0
 800ef76:	60a2      	str	r2, [r4, #8]
 800ef78:	6962      	ldr	r2, [r4, #20]
 800ef7a:	4252      	negs	r2, r2
 800ef7c:	61a2      	str	r2, [r4, #24]
 800ef7e:	6922      	ldr	r2, [r4, #16]
 800ef80:	b942      	cbnz	r2, 800ef94 <__swsetup_r+0xa4>
 800ef82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef86:	d1c5      	bne.n	800ef14 <__swsetup_r+0x24>
 800ef88:	bd38      	pop	{r3, r4, r5, pc}
 800ef8a:	0799      	lsls	r1, r3, #30
 800ef8c:	bf58      	it	pl
 800ef8e:	6962      	ldrpl	r2, [r4, #20]
 800ef90:	60a2      	str	r2, [r4, #8]
 800ef92:	e7f4      	b.n	800ef7e <__swsetup_r+0x8e>
 800ef94:	2000      	movs	r0, #0
 800ef96:	e7f7      	b.n	800ef88 <__swsetup_r+0x98>
 800ef98:	20000198 	.word	0x20000198

0800ef9c <_raise_r>:
 800ef9c:	291f      	cmp	r1, #31
 800ef9e:	b538      	push	{r3, r4, r5, lr}
 800efa0:	4605      	mov	r5, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	d904      	bls.n	800efb0 <_raise_r+0x14>
 800efa6:	2316      	movs	r3, #22
 800efa8:	6003      	str	r3, [r0, #0]
 800efaa:	f04f 30ff 	mov.w	r0, #4294967295
 800efae:	bd38      	pop	{r3, r4, r5, pc}
 800efb0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efb2:	b112      	cbz	r2, 800efba <_raise_r+0x1e>
 800efb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efb8:	b94b      	cbnz	r3, 800efce <_raise_r+0x32>
 800efba:	4628      	mov	r0, r5
 800efbc:	f000 f830 	bl	800f020 <_getpid_r>
 800efc0:	4622      	mov	r2, r4
 800efc2:	4601      	mov	r1, r0
 800efc4:	4628      	mov	r0, r5
 800efc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efca:	f000 b817 	b.w	800effc <_kill_r>
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d00a      	beq.n	800efe8 <_raise_r+0x4c>
 800efd2:	1c59      	adds	r1, r3, #1
 800efd4:	d103      	bne.n	800efde <_raise_r+0x42>
 800efd6:	2316      	movs	r3, #22
 800efd8:	6003      	str	r3, [r0, #0]
 800efda:	2001      	movs	r0, #1
 800efdc:	e7e7      	b.n	800efae <_raise_r+0x12>
 800efde:	2100      	movs	r1, #0
 800efe0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efe4:	4620      	mov	r0, r4
 800efe6:	4798      	blx	r3
 800efe8:	2000      	movs	r0, #0
 800efea:	e7e0      	b.n	800efae <_raise_r+0x12>

0800efec <raise>:
 800efec:	4b02      	ldr	r3, [pc, #8]	@ (800eff8 <raise+0xc>)
 800efee:	4601      	mov	r1, r0
 800eff0:	6818      	ldr	r0, [r3, #0]
 800eff2:	f7ff bfd3 	b.w	800ef9c <_raise_r>
 800eff6:	bf00      	nop
 800eff8:	20000198 	.word	0x20000198

0800effc <_kill_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	4d07      	ldr	r5, [pc, #28]	@ (800f01c <_kill_r+0x20>)
 800f000:	2300      	movs	r3, #0
 800f002:	4604      	mov	r4, r0
 800f004:	4608      	mov	r0, r1
 800f006:	4611      	mov	r1, r2
 800f008:	602b      	str	r3, [r5, #0]
 800f00a:	f7f5 fd53 	bl	8004ab4 <_kill>
 800f00e:	1c43      	adds	r3, r0, #1
 800f010:	d102      	bne.n	800f018 <_kill_r+0x1c>
 800f012:	682b      	ldr	r3, [r5, #0]
 800f014:	b103      	cbz	r3, 800f018 <_kill_r+0x1c>
 800f016:	6023      	str	r3, [r4, #0]
 800f018:	bd38      	pop	{r3, r4, r5, pc}
 800f01a:	bf00      	nop
 800f01c:	20005250 	.word	0x20005250

0800f020 <_getpid_r>:
 800f020:	f7f5 bd40 	b.w	8004aa4 <_getpid>

0800f024 <__swhatbuf_r>:
 800f024:	b570      	push	{r4, r5, r6, lr}
 800f026:	460c      	mov	r4, r1
 800f028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f02c:	2900      	cmp	r1, #0
 800f02e:	b096      	sub	sp, #88	@ 0x58
 800f030:	4615      	mov	r5, r2
 800f032:	461e      	mov	r6, r3
 800f034:	da0d      	bge.n	800f052 <__swhatbuf_r+0x2e>
 800f036:	89a3      	ldrh	r3, [r4, #12]
 800f038:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f03c:	f04f 0100 	mov.w	r1, #0
 800f040:	bf14      	ite	ne
 800f042:	2340      	movne	r3, #64	@ 0x40
 800f044:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f048:	2000      	movs	r0, #0
 800f04a:	6031      	str	r1, [r6, #0]
 800f04c:	602b      	str	r3, [r5, #0]
 800f04e:	b016      	add	sp, #88	@ 0x58
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	466a      	mov	r2, sp
 800f054:	f000 f848 	bl	800f0e8 <_fstat_r>
 800f058:	2800      	cmp	r0, #0
 800f05a:	dbec      	blt.n	800f036 <__swhatbuf_r+0x12>
 800f05c:	9901      	ldr	r1, [sp, #4]
 800f05e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f062:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f066:	4259      	negs	r1, r3
 800f068:	4159      	adcs	r1, r3
 800f06a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f06e:	e7eb      	b.n	800f048 <__swhatbuf_r+0x24>

0800f070 <__smakebuf_r>:
 800f070:	898b      	ldrh	r3, [r1, #12]
 800f072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f074:	079d      	lsls	r5, r3, #30
 800f076:	4606      	mov	r6, r0
 800f078:	460c      	mov	r4, r1
 800f07a:	d507      	bpl.n	800f08c <__smakebuf_r+0x1c>
 800f07c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	6123      	str	r3, [r4, #16]
 800f084:	2301      	movs	r3, #1
 800f086:	6163      	str	r3, [r4, #20]
 800f088:	b003      	add	sp, #12
 800f08a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f08c:	ab01      	add	r3, sp, #4
 800f08e:	466a      	mov	r2, sp
 800f090:	f7ff ffc8 	bl	800f024 <__swhatbuf_r>
 800f094:	9f00      	ldr	r7, [sp, #0]
 800f096:	4605      	mov	r5, r0
 800f098:	4639      	mov	r1, r7
 800f09a:	4630      	mov	r0, r6
 800f09c:	f7fc fb76 	bl	800b78c <_malloc_r>
 800f0a0:	b948      	cbnz	r0, 800f0b6 <__smakebuf_r+0x46>
 800f0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0a6:	059a      	lsls	r2, r3, #22
 800f0a8:	d4ee      	bmi.n	800f088 <__smakebuf_r+0x18>
 800f0aa:	f023 0303 	bic.w	r3, r3, #3
 800f0ae:	f043 0302 	orr.w	r3, r3, #2
 800f0b2:	81a3      	strh	r3, [r4, #12]
 800f0b4:	e7e2      	b.n	800f07c <__smakebuf_r+0xc>
 800f0b6:	89a3      	ldrh	r3, [r4, #12]
 800f0b8:	6020      	str	r0, [r4, #0]
 800f0ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0be:	81a3      	strh	r3, [r4, #12]
 800f0c0:	9b01      	ldr	r3, [sp, #4]
 800f0c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0c6:	b15b      	cbz	r3, 800f0e0 <__smakebuf_r+0x70>
 800f0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f000 f81d 	bl	800f10c <_isatty_r>
 800f0d2:	b128      	cbz	r0, 800f0e0 <__smakebuf_r+0x70>
 800f0d4:	89a3      	ldrh	r3, [r4, #12]
 800f0d6:	f023 0303 	bic.w	r3, r3, #3
 800f0da:	f043 0301 	orr.w	r3, r3, #1
 800f0de:	81a3      	strh	r3, [r4, #12]
 800f0e0:	89a3      	ldrh	r3, [r4, #12]
 800f0e2:	431d      	orrs	r5, r3
 800f0e4:	81a5      	strh	r5, [r4, #12]
 800f0e6:	e7cf      	b.n	800f088 <__smakebuf_r+0x18>

0800f0e8 <_fstat_r>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	4d07      	ldr	r5, [pc, #28]	@ (800f108 <_fstat_r+0x20>)
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	4608      	mov	r0, r1
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	602b      	str	r3, [r5, #0]
 800f0f6:	f7f5 fd3d 	bl	8004b74 <_fstat>
 800f0fa:	1c43      	adds	r3, r0, #1
 800f0fc:	d102      	bne.n	800f104 <_fstat_r+0x1c>
 800f0fe:	682b      	ldr	r3, [r5, #0]
 800f100:	b103      	cbz	r3, 800f104 <_fstat_r+0x1c>
 800f102:	6023      	str	r3, [r4, #0]
 800f104:	bd38      	pop	{r3, r4, r5, pc}
 800f106:	bf00      	nop
 800f108:	20005250 	.word	0x20005250

0800f10c <_isatty_r>:
 800f10c:	b538      	push	{r3, r4, r5, lr}
 800f10e:	4d06      	ldr	r5, [pc, #24]	@ (800f128 <_isatty_r+0x1c>)
 800f110:	2300      	movs	r3, #0
 800f112:	4604      	mov	r4, r0
 800f114:	4608      	mov	r0, r1
 800f116:	602b      	str	r3, [r5, #0]
 800f118:	f7f5 fd3c 	bl	8004b94 <_isatty>
 800f11c:	1c43      	adds	r3, r0, #1
 800f11e:	d102      	bne.n	800f126 <_isatty_r+0x1a>
 800f120:	682b      	ldr	r3, [r5, #0]
 800f122:	b103      	cbz	r3, 800f126 <_isatty_r+0x1a>
 800f124:	6023      	str	r3, [r4, #0]
 800f126:	bd38      	pop	{r3, r4, r5, pc}
 800f128:	20005250 	.word	0x20005250

0800f12c <_init>:
 800f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12e:	bf00      	nop
 800f130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f132:	bc08      	pop	{r3}
 800f134:	469e      	mov	lr, r3
 800f136:	4770      	bx	lr

0800f138 <_fini>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	bf00      	nop
 800f13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f13e:	bc08      	pop	{r3}
 800f140:	469e      	mov	lr, r3
 800f142:	4770      	bx	lr
