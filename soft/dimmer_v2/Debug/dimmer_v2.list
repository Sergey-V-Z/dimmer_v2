
dimmer_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800f578  0800f578  00010578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb6c  0800fb6c  000111e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb6c  0800fb6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb74  0800fb74  000111e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb74  0800fb74  00010b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb78  0800fb78  00010b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800fb7c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111e8  2**0
                  CONTENTS
 10 .bss          00008d38  200001e8  200001e8  000111e8  2**2
                  ALLOC
 11 ._user_heap_stack 0000e000  20008f20  20008f20  000111e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcb2  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045df  00000000  00000000  0002ceca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001930  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013bf  00000000  00000000  00032de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f7d  00000000  00000000  0003419f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d74e  00000000  00000000  0005811c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf2b2  00000000  00000000  0007586a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00144b1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ea4  00000000  00000000  00144b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0014ca04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f55c 	.word	0x0800f55c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800f55c 	.word	0x0800f55c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <cJSON_GetNumberValue>:

    return item->valuestring;
}

CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    if (!cJSON_IsNumber(item))
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f002 f8b4 	bl	800317a <cJSON_IsNumber>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <cJSON_GetNumberValue+0x1c>
    {
        return (double) NAN;
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <cJSON_GetNumberValue+0x34>)
 800101e:	e002      	b.n	8001026 <cJSON_GetNumberValue+0x22>
    }

    return item->valuedouble;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8001026:	ec43 2b17 	vmov	d7, r2, r3
 800102a:	eeb0 0a47 	vmov.f32	s0, s14
 800102e:	eef0 0a67 	vmov.f32	s1, s15
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	7ff80000 	.word	0x7ff80000

0800103c <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <case_insensitive_strcmp+0x16>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001052:	2301      	movs	r3, #1
 8001054:	e056      	b.n	8001104 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d10d      	bne.n	800107a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e050      	b.n	8001104 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <case_insensitive_strcmp+0x32>
        {
            return 0;
 800106a:	2300      	movs	r3, #0
 800106c:	e04a      	b.n	8001104 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3301      	adds	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	3301      	adds	r3, #1
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 8001086:	4413      	add	r3, r2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d103      	bne.n	800109a <case_insensitive_strcmp+0x5e>
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	f103 0220 	add.w	r2, r3, #32
 8001098:	e000      	b.n	800109c <case_insensitive_strcmp+0x60>
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	7bbb      	ldrb	r3, [r7, #14]
 80010a4:	3301      	adds	r3, #1
 80010a6:	491a      	ldr	r1, [pc, #104]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 80010a8:	440b      	add	r3, r1
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d102      	bne.n	80010ba <case_insensitive_strcmp+0x7e>
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	3320      	adds	r3, #32
 80010b8:	e000      	b.n	80010bc <case_insensitive_strcmp+0x80>
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d0d0      	beq.n	8001062 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	737b      	strb	r3, [r7, #13]
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	3301      	adds	r3, #1
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d103      	bne.n	80010e0 <case_insensitive_strcmp+0xa4>
 80010d8:	7b7b      	ldrb	r3, [r7, #13]
 80010da:	f103 0220 	add.w	r2, r3, #32
 80010de:	e000      	b.n	80010e2 <case_insensitive_strcmp+0xa6>
 80010e0:	7b7a      	ldrb	r2, [r7, #13]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	733b      	strb	r3, [r7, #12]
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4908      	ldr	r1, [pc, #32]	@ (8001110 <case_insensitive_strcmp+0xd4>)
 80010ee:	440b      	add	r3, r1
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <case_insensitive_strcmp+0xc4>
 80010fa:	7b3b      	ldrb	r3, [r7, #12]
 80010fc:	3320      	adds	r3, #32
 80010fe:	e000      	b.n	8001102 <case_insensitive_strcmp+0xc6>
 8001100:	7b3b      	ldrb	r3, [r7, #12]
 8001102:	1ad3      	subs	r3, r2, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	0800f7f8 	.word	0x0800f7f8

08001114 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <cJSON_strdup+0x1c>
    {
        return NULL;
 800112c:	2300      	movs	r3, #0
 800112e:	e015      	b.n	800115c <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff f857 	bl	80001e4 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	4798      	blx	r3
 8001144:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <cJSON_strdup+0x3c>
    {
        return NULL;
 800114c:	2300      	movs	r3, #0
 800114e:	e005      	b.n	800115c <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f00b fe80 	bl	800ce5a <memcpy>

    return copy;
 800115a:	68bb      	ldr	r3, [r7, #8]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2028      	movs	r0, #40	@ 0x28
 8001172:	4798      	blx	r3
 8001174:	60f8      	str	r0, [r7, #12]
    if (node)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 800117c:	2228      	movs	r2, #40	@ 0x28
 800117e:	2100      	movs	r1, #0
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f00b fd77 	bl	800cc74 <memset>
    }

    return node;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800119c:	e03d      	b.n	800121a <cJSON_Delete+0x8a>
    {
        next = item->next;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d108      	bne.n	80011c2 <cJSON_Delete+0x32>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ffe7 	bl	8001190 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <cJSON_Delete+0x58>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d008      	beq.n	80011e8 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <cJSON_Delete+0x9c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6912      	ldr	r2, [r2, #16]
 80011de:	4610      	mov	r0, r2
 80011e0:	4798      	blx	r3
            item->valuestring = NULL;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10c      	bne.n	800120e <cJSON_Delete+0x7e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <cJSON_Delete+0x9c>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6a12      	ldr	r2, [r2, #32]
 8001204:	4610      	mov	r0, r2
 8001206:	4798      	blx	r3
            item->string = NULL;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <cJSON_Delete+0x9c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
        item = next;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1be      	bne.n	800119e <cJSON_Delete+0xe>
    }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001234:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b098      	sub	sp, #96	@ 0x60
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    double number = 0;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 8001256:	2300      	movs	r3, #0
 8001258:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 800125a:	f7ff ffe9 	bl	8001230 <get_decimal_point>
 800125e:	4603      	mov	r3, r0
 8001260:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <parse_number+0x36>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <parse_number+0x3a>
    {
        return false;
 8001276:	2300      	movs	r3, #0
 8001278:	e0a0      	b.n	80013bc <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800127a:	2300      	movs	r3, #0
 800127c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800127e:	e03d      	b.n	80012fc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6899      	ldr	r1, [r3, #8]
 8001288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800128a:	440b      	add	r3, r1
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b45      	cmp	r3, #69	@ 0x45
 8001292:	dc17      	bgt.n	80012c4 <parse_number+0x84>
 8001294:	2b2b      	cmp	r3, #43	@ 0x2b
 8001296:	db40      	blt.n	800131a <parse_number+0xda>
 8001298:	3b2b      	subs	r3, #43	@ 0x2b
 800129a:	2201      	movs	r2, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <parse_number+0x190>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	bf14      	ite	ne
 80012a6:	2301      	movne	r3, #1
 80012a8:	2300      	moveq	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10b      	bne.n	80012c8 <parse_number+0x88>
 80012b0:	f002 0308 	and.w	r3, r2, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d111      	bne.n	80012e6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80012c2:	e02a      	b.n	800131a <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80012c4:	2b65      	cmp	r3, #101	@ 0x65
 80012c6:	d128      	bne.n	800131a <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6899      	ldr	r1, [r3, #8]
 80012d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012d2:	440b      	add	r3, r1
 80012d4:	4413      	add	r3, r2
 80012d6:	7819      	ldrb	r1, [r3, #0]
 80012d8:	f107 0208 	add.w	r2, r7, #8
 80012dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012de:	4413      	add	r3, r2
 80012e0:	460a      	mov	r2, r1
 80012e2:	701a      	strb	r2, [r3, #0]
                break;
 80012e4:	e007      	b.n	80012f6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 80012e6:	f107 0208 	add.w	r2, r7, #8
 80012ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ec:	4413      	add	r3, r2
 80012ee:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80012f2:	701a      	strb	r2, [r3, #0]
                break;
 80012f4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80012f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012f8:	3301      	adds	r3, #1
 80012fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80012fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8001300:	d80d      	bhi.n	800131e <parse_number+0xde>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00a      	beq.n	800131e <parse_number+0xde>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800130e:	441a      	add	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3b3      	bcc.n	8001280 <parse_number+0x40>
        }
    }
loop_end:
 8001318:	e001      	b.n	800131e <parse_number+0xde>
                goto loop_end;
 800131a:	bf00      	nop
 800131c:	e000      	b.n	8001320 <parse_number+0xe0>
loop_end:
 800131e:	bf00      	nop
    number_c_string[i] = '\0';
 8001320:	f107 0208 	add.w	r2, r7, #8
 8001324:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001326:	4413      	add	r3, r2
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 800132c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f00b fb06 	bl	800c948 <strtod>
 800133c:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	429a      	cmp	r2, r3
 8001348:	d101      	bne.n	800134e <parse_number+0x10e>
    {
        return false; /* parse_error */
 800134a:	2300      	movs	r3, #0
 800134c:	e036      	b.n	80013bc <parse_number+0x17c>
    }

    item->valuedouble = number;
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001354:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001358:	a31b      	add	r3, pc, #108	@ (adr r3, 80013c8 <parse_number+0x188>)
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001362:	f7ff fbdf 	bl	8000b24 <__aeabi_dcmpge>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001372:	615a      	str	r2, [r3, #20]
 8001374:	e015      	b.n	80013a2 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <parse_number+0x194>)
 800137c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001380:	f7ff fbc6 	bl	8000b10 <__aeabi_dcmple>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	e006      	b.n	80013a2 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8001394:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001398:	f7ff fbee 	bl	8000b78 <__aeabi_d2iz>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2208      	movs	r2, #8
 80013a6:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80013ae:	f107 0208 	add.w	r2, r7, #8
 80013b2:	1a8a      	subs	r2, r1, r2
 80013b4:	441a      	add	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	609a      	str	r2, [r3, #8]
    return true;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3760      	adds	r7, #96	@ 0x60
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	f3af 8000 	nop.w
 80013c8:	ffc00000 	.word	0xffc00000
 80013cc:	41dfffff 	.word	0x41dfffff
 80013d0:	04007fe5 	.word	0x04007fe5
 80013d4:	c1e00000 	.word	0xc1e00000

080013d8 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <ensure+0x20>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <ensure+0x24>
    {
        return NULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e083      	b.n	8001504 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <ensure+0x3c>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d301      	bcc.n	8001414 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001410:	2300      	movs	r3, #0
 8001412:	e077      	b.n	8001504 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	da01      	bge.n	800141e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800141a:	2300      	movs	r3, #0
 800141c:	e072      	b.n	8001504 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	3301      	adds	r3, #1
 8001428:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d805      	bhi.n	8001440 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4413      	add	r3, r2
 800143e:	e061      	b.n	8001504 <ensure+0x12c>
    }

    if (p->noalloc) {
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <ensure+0x74>
        return NULL;
 8001448:	2300      	movs	r3, #0
 800144a:	e05b      	b.n	8001504 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001452:	d308      	bcc.n	8001466 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db03      	blt.n	8001462 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800145a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	e004      	b.n	800146c <ensure+0x94>
        }
        else
        {
            return NULL;
 8001462:	2300      	movs	r3, #0
 8001464:	e04e      	b.n	8001504 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d018      	beq.n	80014a6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	4610      	mov	r0, r2
 8001480:	4798      	blx	r3
 8001482:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d132      	bne.n	80014f0 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	4610      	mov	r0, r2
 8001494:	4798      	blx	r3
            p->length = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

            return NULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e02e      	b.n	8001504 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	68b8      	ldr	r0, [r7, #8]
 80014ac:	4798      	blx	r3
 80014ae:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10d      	bne.n	80014d2 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	4610      	mov	r0, r2
 80014c0:	4798      	blx	r3
            p->length = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

            return NULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e018      	b.n	8001504 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	3301      	adds	r3, #1
 80014dc:	461a      	mov	r2, r3
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f00b fcbb 	bl	800ce5a <memcpy>
        p->hooks.deallocate(p->buffer);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	4610      	mov	r0, r2
 80014ee:	4798      	blx	r3
    }
    p->length = newsize;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d013      	beq.n	8001546 <update_offset+0x3a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00f      	beq.n	8001546 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	4413      	add	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689c      	ldr	r4, [r3, #8]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f7fe fe54 	bl	80001e4 <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	18e2      	adds	r2, r4, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e000      	b.n	8001548 <update_offset+0x3c>
        return;
 8001546:	bf00      	nop
}
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
	...

08001550 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001554:	b087      	sub	sp, #28
 8001556:	af00      	add	r7, sp, #0
 8001558:	ed87 0b02 	vstr	d0, [r7, #8]
 800155c:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001560:	68b8      	ldr	r0, [r7, #8]
 8001562:	68fe      	ldr	r6, [r7, #12]
 8001564:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	687e      	ldr	r6, [r7, #4]
 800156c:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8001570:	f7ff fae2 	bl	8000b38 <__aeabi_dcmpgt>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <compare_double+0x34>
 800157a:	68bc      	ldr	r4, [r7, #8]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001582:	e003      	b.n	800158c <compare_double+0x3c>
 8001584:	683c      	ldr	r4, [r7, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800158c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8001590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001594:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001598:	f7fe fe86 	bl	80002a8 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4690      	mov	r8, r2
 80015a2:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <compare_double+0x8c>)
 80015ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b0:	f7ff f832 	bl	8000618 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	2101      	movs	r1, #1
 80015ba:	460c      	mov	r4, r1
 80015bc:	4640      	mov	r0, r8
 80015be:	4649      	mov	r1, r9
 80015c0:	f7ff faa6 	bl	8000b10 <__aeabi_dcmple>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <compare_double+0x7e>
 80015ca:	2300      	movs	r3, #0
 80015cc:	461c      	mov	r4, r3
 80015ce:	b2e3      	uxtb	r3, r4
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015da:	bf00      	nop
 80015dc:	3cb00000 	.word	0x3cb00000

080015e0 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	b093      	sub	sp, #76	@ 0x4c
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015f4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	f107 0318 	add.w	r3, r7, #24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8001616:	f7ff fe0b 	bl	8001230 <get_decimal_point>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <print_number+0x56>
    {
        return false;
 8001632:	2300      	movs	r3, #0
 8001634:	e0b4      	b.n	80017a0 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8001636:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800163a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800163e:	f7ff fa85 	bl	8000b4c <__aeabi_dcmpun>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d121      	bne.n	800168c <print_number+0xac>
 8001648:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800164a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001650:	2301      	movs	r3, #1
 8001652:	461e      	mov	r6, r3
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <print_number+0x1c8>)
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7ff fa75 	bl	8000b4c <__aeabi_dcmpun>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <print_number+0xa0>
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	4b4e      	ldr	r3, [pc, #312]	@ (80017a8 <print_number+0x1c8>)
 800166e:	4620      	mov	r0, r4
 8001670:	4629      	mov	r1, r5
 8001672:	f7ff fa4d 	bl	8000b10 <__aeabi_dcmple>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <print_number+0xa0>
 800167c:	2300      	movs	r3, #0
 800167e:	461e      	mov	r6, r3
 8001680:	b2f3      	uxtb	r3, r6
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4946      	ldr	r1, [pc, #280]	@ (80017ac <print_number+0x1cc>)
 8001692:	4618      	mov	r0, r3
 8001694:	f00b fa26 	bl	800cae4 <siprintf>
 8001698:	6478      	str	r0, [r7, #68]	@ 0x44
 800169a:	e03f      	b.n	800171c <print_number+0x13c>
    }
    else if(d == (double)item->valueint)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff4f 	bl	8000544 <__aeabi_i2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016ae:	f7ff fa1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695a      	ldr	r2, [r3, #20]
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	493b      	ldr	r1, [pc, #236]	@ (80017b0 <print_number+0x1d0>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00b fa0e 	bl	800cae4 <siprintf>
 80016c8:	6478      	str	r0, [r7, #68]	@ 0x44
 80016ca:	e027      	b.n	800171c <print_number+0x13c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80016cc:	f107 0014 	add.w	r0, r7, #20
 80016d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016d4:	4937      	ldr	r1, [pc, #220]	@ (80017b4 <print_number+0x1d4>)
 80016d6:	f00b fa05 	bl	800cae4 <siprintf>
 80016da:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80016dc:	f107 0208 	add.w	r2, r7, #8
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4934      	ldr	r1, [pc, #208]	@ (80017b8 <print_number+0x1d8>)
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00b fa1c 	bl	800cb24 <siscanf>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10c      	bne.n	800170c <print_number+0x12c>
 80016f2:	ed97 7b02 	vldr	d7, [r7, #8]
 80016f6:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 80016fa:	eeb0 0a47 	vmov.f32	s0, s14
 80016fe:	eef0 0a67 	vmov.f32	s1, s15
 8001702:	f7ff ff25 	bl	8001550 <compare_double>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800170c:	f107 0014 	add.w	r0, r7, #20
 8001710:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001714:	4929      	ldr	r1, [pc, #164]	@ (80017bc <print_number+0x1dc>)
 8001716:	f00b f9e5 	bl	800cae4 <siprintf>
 800171a:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800171c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800171e:	2b00      	cmp	r3, #0
 8001720:	db02      	blt.n	8001728 <print_number+0x148>
 8001722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001724:	2b19      	cmp	r3, #25
 8001726:	dd01      	ble.n	800172c <print_number+0x14c>
    {
        return false;
 8001728:	2300      	movs	r3, #0
 800172a:	e039      	b.n	80017a0 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800172c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172e:	3301      	adds	r3, #1
 8001730:	4619      	mov	r1, r3
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f7ff fe50 	bl	80013d8 <ensure>
 8001738:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800173a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <print_number+0x164>
    {
        return false;
 8001740:	2300      	movs	r3, #0
 8001742:	e02d      	b.n	80017a0 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001744:	2300      	movs	r3, #0
 8001746:	643b      	str	r3, [r7, #64]	@ 0x40
 8001748:	e01a      	b.n	8001780 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 800174a:	f107 0214 	add.w	r2, r7, #20
 800174e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001758:	429a      	cmp	r2, r3
 800175a:	d105      	bne.n	8001768 <print_number+0x188>
        {
            output_pointer[i] = '.';
 800175c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800175e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001760:	4413      	add	r3, r2
 8001762:	222e      	movs	r2, #46	@ 0x2e
 8001764:	701a      	strb	r2, [r3, #0]
            continue;
 8001766:	e008      	b.n	800177a <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8001768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800176a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800176c:	4413      	add	r3, r2
 800176e:	f107 0114 	add.w	r1, r7, #20
 8001772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001774:	440a      	add	r2, r1
 8001776:	7812      	ldrb	r2, [r2, #0]
 8001778:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800177a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800177c:	3301      	adds	r3, #1
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001782:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001784:	429a      	cmp	r2, r3
 8001786:	d3e0      	bcc.n	800174a <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8001788:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800178a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800178c:	4413      	add	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001798:	441a      	add	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	609a      	str	r2, [r3, #8]

    return true;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	374c      	adds	r7, #76	@ 0x4c
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a8:	7fefffff 	.word	0x7fefffff
 80017ac:	0800f584 	.word	0x0800f584
 80017b0:	0800f58c 	.word	0x0800f58c
 80017b4:	0800f590 	.word	0x0800f590
 80017b8:	0800f598 	.word	0x0800f598
 80017bc:	0800f59c 	.word	0x0800f59c

080017c0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	e04c      	b.n	8001870 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b2f      	cmp	r3, #47	@ 0x2f
 80017e0:	d90f      	bls.n	8001802 <parse_hex4+0x42>
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b39      	cmp	r3, #57	@ 0x39
 80017ec:	d809      	bhi.n	8001802 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	3b30      	subs	r3, #48	@ 0x30
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e02d      	b.n	800185e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b40      	cmp	r3, #64	@ 0x40
 800180c:	d90f      	bls.n	800182e <parse_hex4+0x6e>
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b46      	cmp	r3, #70	@ 0x46
 8001818:	d809      	bhi.n	800182e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	3b37      	subs	r3, #55	@ 0x37
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e017      	b.n	800185e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b60      	cmp	r3, #96	@ 0x60
 8001838:	d90f      	bls.n	800185a <parse_hex4+0x9a>
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b66      	cmp	r3, #102	@ 0x66
 8001844:	d809      	bhi.n	800185a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	3b57      	subs	r3, #87	@ 0x57
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e001      	b.n	800185e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800185a:	2300      	movs	r3, #0
 800185c:	e00c      	b.n	8001878 <parse_hex4+0xb8>
        }

        if (i < 3)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d802      	bhi.n	800186a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	3301      	adds	r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d9af      	bls.n	80017d6 <parse_hex4+0x16>
        }
    }

    return h;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	f340 80b7 	ble.w	8001a2e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	3302      	adds	r3, #2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff7b 	bl	80017c0 <parse_hex4>
 80018ca:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80018d2:	d304      	bcc.n	80018de <utf16_literal_to_utf8+0x5a>
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80018da:	f0c0 80aa 	bcc.w	8001a32 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80018e4:	d337      	bcc.n	8001956 <utf16_literal_to_utf8+0xd2>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80018ec:	d233      	bcs.n	8001956 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	3306      	adds	r3, #6
 80018f2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80018f8:	230c      	movs	r3, #12
 80018fa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	f340 8096 	ble.w	8001a36 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001910:	f040 8093 	bne.w	8001a3a <utf16_literal_to_utf8+0x1b6>
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b75      	cmp	r3, #117	@ 0x75
 800191c:	f040 808d 	bne.w	8001a3a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3302      	adds	r3, #2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff4b 	bl	80017c0 <parse_hex4>
 800192a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001932:	f0c0 8084 	bcc.w	8001a3e <utf16_literal_to_utf8+0x1ba>
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800193c:	d27f      	bcs.n	8001a3e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	029a      	lsls	r2, r3, #10
 8001942:	4b43      	ldr	r3, [pc, #268]	@ (8001a50 <utf16_literal_to_utf8+0x1cc>)
 8001944:	4013      	ands	r3, r2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800194c:	4313      	orrs	r3, r2
 800194e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001954:	e004      	b.n	8001960 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001956:	2306      	movs	r3, #6
 8001958:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	2b7f      	cmp	r3, #127	@ 0x7f
 8001964:	d803      	bhi.n	800196e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800196c:	e01f      	b.n	80019ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001974:	d206      	bcs.n	8001984 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001976:	2302      	movs	r3, #2
 8001978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800197c:	23c0      	movs	r3, #192	@ 0xc0
 800197e:	f887 3020 	strb.w	r3, [r7, #32]
 8001982:	e014      	b.n	80019ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198a:	d206      	bcs.n	800199a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800198c:	2303      	movs	r3, #3
 800198e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001992:	23e0      	movs	r3, #224	@ 0xe0
 8001994:	f887 3020 	strb.w	r3, [r7, #32]
 8001998:	e009      	b.n	80019ae <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80019a0:	d24f      	bcs.n	8001a42 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80019a2:	2304      	movs	r3, #4
 80019a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80019a8:	23f0      	movs	r3, #240	@ 0xf0
 80019aa:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80019b8:	e015      	b.n	80019e6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6819      	ldr	r1, [r3, #0]
 80019c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019cc:	440b      	add	r3, r1
 80019ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80019dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019e0:	3b01      	subs	r3, #1
 80019e2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80019e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e5      	bne.n	80019ba <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80019ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d909      	bls.n	8001a0a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	b2d9      	uxtb	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e007      	b.n	8001a1a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a22:	441a      	add	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001a28:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001a2c:	e00b      	b.n	8001a46 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001a2e:	bf00      	nop
 8001a30:	e008      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a32:	bf00      	nop
 8001a34:	e006      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a36:	bf00      	nop
 8001a38:	e004      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a3a:	bf00      	nop
 8001a3c:	e002      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001a3e:	bf00      	nop
 8001a40:	e000      	b.n	8001a44 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001a42:	bf00      	nop

fail:
    return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	000ffc00 	.word	0x000ffc00

08001a54 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	3301      	adds	r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b22      	cmp	r3, #34	@ 0x22
 8001a90:	f040 8103 	bne.w	8001c9a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001a9c:	e017      	b.n	8001ace <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b5c      	cmp	r3, #92	@ 0x5c
 8001aa4:	d110      	bne.n	8001ac8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	f080 80f1 	bcs.w	8001c9e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	3301      	adds	r3, #1
 8001acc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d203      	bcs.n	8001ae8 <parse_string+0x94>
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b22      	cmp	r3, #34	@ 0x22
 8001ae6:	d1da      	bne.n	8001a9e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	f080 80d3 	bcs.w	8001ca2 <parse_string+0x24e>
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b22      	cmp	r3, #34	@ 0x22
 8001b02:	f040 80ce 	bne.w	8001ca2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4413      	add	r3, r2
 8001b10:	6a3a      	ldr	r2, [r7, #32]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	3201      	adds	r2, #1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4798      	blx	r3
 8001b28:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80ba 	beq.w	8001ca6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001b36:	e094      	b.n	8001c62 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001b3e:	d008      	beq.n	8001b52 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b42:	1c53      	adds	r3, r2, #1
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1c59      	adds	r1, r3, #1
 8001b4a:	60f9      	str	r1, [r7, #12]
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	e087      	b.n	8001c62 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001b52:	2302      	movs	r3, #2
 8001b54:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f340 80a4 	ble.w	8001caa <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b75      	cmp	r3, #117	@ 0x75
 8001b6a:	f300 80a0 	bgt.w	8001cae <parse_string+0x25a>
 8001b6e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001b70:	da04      	bge.n	8001b7c <parse_string+0x128>
 8001b72:	2b22      	cmp	r3, #34	@ 0x22
 8001b74:	d05c      	beq.n	8001c30 <parse_string+0x1dc>
 8001b76:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b78:	d05a      	beq.n	8001c30 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001b7a:	e098      	b.n	8001cae <parse_string+0x25a>
            switch (input_pointer[1])
 8001b7c:	3b5c      	subs	r3, #92	@ 0x5c
 8001b7e:	2b19      	cmp	r3, #25
 8001b80:	f200 8095 	bhi.w	8001cae <parse_string+0x25a>
 8001b84:	a201      	add	r2, pc, #4	@ (adr r2, 8001b8c <parse_string+0x138>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001c31 	.word	0x08001c31
 8001b90:	08001caf 	.word	0x08001caf
 8001b94:	08001caf 	.word	0x08001caf
 8001b98:	08001caf 	.word	0x08001caf
 8001b9c:	08001caf 	.word	0x08001caf
 8001ba0:	08001caf 	.word	0x08001caf
 8001ba4:	08001bf5 	.word	0x08001bf5
 8001ba8:	08001caf 	.word	0x08001caf
 8001bac:	08001caf 	.word	0x08001caf
 8001bb0:	08001caf 	.word	0x08001caf
 8001bb4:	08001c01 	.word	0x08001c01
 8001bb8:	08001caf 	.word	0x08001caf
 8001bbc:	08001caf 	.word	0x08001caf
 8001bc0:	08001caf 	.word	0x08001caf
 8001bc4:	08001caf 	.word	0x08001caf
 8001bc8:	08001caf 	.word	0x08001caf
 8001bcc:	08001caf 	.word	0x08001caf
 8001bd0:	08001caf 	.word	0x08001caf
 8001bd4:	08001c0d 	.word	0x08001c0d
 8001bd8:	08001caf 	.word	0x08001caf
 8001bdc:	08001caf 	.word	0x08001caf
 8001be0:	08001caf 	.word	0x08001caf
 8001be4:	08001c19 	.word	0x08001c19
 8001be8:	08001caf 	.word	0x08001caf
 8001bec:	08001c25 	.word	0x08001c25
 8001bf0:	08001c41 	.word	0x08001c41
                    *output_pointer++ = '\b';
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60fa      	str	r2, [r7, #12]
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	701a      	strb	r2, [r3, #0]
                    break;
 8001bfe:	e02c      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60fa      	str	r2, [r7, #12]
 8001c06:	220c      	movs	r2, #12
 8001c08:	701a      	strb	r2, [r3, #0]
                    break;
 8001c0a:	e026      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60fa      	str	r2, [r7, #12]
 8001c12:	220a      	movs	r2, #10
 8001c14:	701a      	strb	r2, [r3, #0]
                    break;
 8001c16:	e020      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60fa      	str	r2, [r7, #12]
 8001c1e:	220d      	movs	r2, #13
 8001c20:	701a      	strb	r2, [r3, #0]
                    break;
 8001c22:	e01a      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60fa      	str	r2, [r7, #12]
 8001c2a:	2209      	movs	r2, #9
 8001c2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c2e:	e014      	b.n	8001c5a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	60f9      	str	r1, [r7, #12]
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c3e:	e00c      	b.n	8001c5a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	461a      	mov	r2, r3
 8001c46:	6a39      	ldr	r1, [r7, #32]
 8001c48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c4a:	f7ff fe1b 	bl	8001884 <utf16_literal_to_utf8>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d02c      	beq.n	8001cb2 <parse_string+0x25e>
                    break;
 8001c58:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c5e:	4413      	add	r3, r2
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	f4ff af66 	bcc.w	8001b38 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2210      	movs	r2, #16
 8001c76:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6a3a      	ldr	r2, [r7, #32]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	609a      	str	r2, [r3, #8]

    return true;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e020      	b.n	8001cdc <parse_string+0x288>
        goto fail;
 8001c9a:	bf00      	nop
 8001c9c:	e00a      	b.n	8001cb4 <parse_string+0x260>
                    goto fail;
 8001c9e:	bf00      	nop
 8001ca0:	e008      	b.n	8001cb4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001ca2:	bf00      	nop
 8001ca4:	e006      	b.n	8001cb4 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001ca6:	bf00      	nop
 8001ca8:	e004      	b.n	8001cb4 <parse_string+0x260>
                goto fail;
 8001caa:	bf00      	nop
 8001cac:	e002      	b.n	8001cb4 <parse_string+0x260>
                    goto fail;
 8001cae:	bf00      	nop
 8001cb0:	e000      	b.n	8001cb4 <parse_string+0x260>
                        goto fail;
 8001cb2:	bf00      	nop

fail:
    if (output != NULL)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	69f8      	ldr	r0, [r7, #28]
 8001cc0:	4798      	blx	r3
        output = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3728      	adds	r7, #40	@ 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <print_string_ptr+0x28>
    {
        return false;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e110      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d111      	bne.n	8001d36 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001d12:	2103      	movs	r1, #3
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fb5f 	bl	80013d8 <ensure>
 8001d1a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <print_string_ptr+0x42>
        {
            return false;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e103      	b.n	8001f2e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4a83      	ldr	r2, [pc, #524]	@ (8001f38 <print_string_ptr+0x254>)
 8001d2a:	8811      	ldrh	r1, [r2, #0]
 8001d2c:	7892      	ldrb	r2, [r2, #2]
 8001d2e:	8019      	strh	r1, [r3, #0]
 8001d30:	709a      	strb	r2, [r3, #2]

        return true;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0fb      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e024      	b.n	8001d86 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b22      	cmp	r3, #34	@ 0x22
 8001d42:	dc0f      	bgt.n	8001d64 <print_string_ptr+0x80>
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	db13      	blt.n	8001d70 <print_string_ptr+0x8c>
 8001d48:	3b08      	subs	r3, #8
 8001d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f3c <print_string_ptr+0x258>)
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf14      	ite	ne
 8001d58:	2301      	movne	r3, #1
 8001d5a:	2300      	moveq	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <print_string_ptr+0x84>
 8001d62:	e005      	b.n	8001d70 <print_string_ptr+0x8c>
 8001d64:	2b5c      	cmp	r3, #92	@ 0x5c
 8001d66:	d103      	bne.n	8001d70 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
                break;
 8001d6e:	e007      	b.n	8001d80 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	d802      	bhi.n	8001d7e <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3305      	adds	r3, #5
 8001d7c:	617b      	str	r3, [r7, #20]
                }
                break;
 8001d7e:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1d6      	bne.n	8001d3c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3303      	adds	r3, #3
 8001da0:	4619      	mov	r1, r3
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f7ff fb18 	bl	80013d8 <ensure>
 8001da8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <print_string_ptr+0xd0>
    {
        return false;
 8001db0:	2300      	movs	r3, #0
 8001db2:	e0bc      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d117      	bne.n	8001dea <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2222      	movs	r2, #34	@ 0x22
 8001dbe:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00b f846 	bl	800ce5a <memcpy>
        output[output_length + 1] = '\"';
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	2222      	movs	r2, #34	@ 0x22
 8001dd8:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]

        return true;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0a1      	b.n	8001f2e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2222      	movs	r2, #34	@ 0x22
 8001dee:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	3301      	adds	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e086      	b.n	8001f0a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b1f      	cmp	r3, #31
 8001e02:	d90c      	bls.n	8001e1e <print_string_ptr+0x13a>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b22      	cmp	r3, #34	@ 0x22
 8001e0a:	d008      	beq.n	8001e1e <print_string_ptr+0x13a>
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e12:	d004      	beq.n	8001e1e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	701a      	strb	r2, [r3, #0]
 8001e1c:	e06f      	b.n	8001efe <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	61ba      	str	r2, [r7, #24]
 8001e24:	225c      	movs	r2, #92	@ 0x5c
 8001e26:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b22      	cmp	r3, #34	@ 0x22
 8001e2e:	dc3d      	bgt.n	8001eac <print_string_ptr+0x1c8>
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	db59      	blt.n	8001ee8 <print_string_ptr+0x204>
 8001e34:	3b08      	subs	r3, #8
 8001e36:	2b1a      	cmp	r3, #26
 8001e38:	d856      	bhi.n	8001ee8 <print_string_ptr+0x204>
 8001e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e40 <print_string_ptr+0x15c>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001ec1 	.word	0x08001ec1
 8001e44:	08001ee1 	.word	0x08001ee1
 8001e48:	08001ed1 	.word	0x08001ed1
 8001e4c:	08001ee9 	.word	0x08001ee9
 8001e50:	08001ec9 	.word	0x08001ec9
 8001e54:	08001ed9 	.word	0x08001ed9
 8001e58:	08001ee9 	.word	0x08001ee9
 8001e5c:	08001ee9 	.word	0x08001ee9
 8001e60:	08001ee9 	.word	0x08001ee9
 8001e64:	08001ee9 	.word	0x08001ee9
 8001e68:	08001ee9 	.word	0x08001ee9
 8001e6c:	08001ee9 	.word	0x08001ee9
 8001e70:	08001ee9 	.word	0x08001ee9
 8001e74:	08001ee9 	.word	0x08001ee9
 8001e78:	08001ee9 	.word	0x08001ee9
 8001e7c:	08001ee9 	.word	0x08001ee9
 8001e80:	08001ee9 	.word	0x08001ee9
 8001e84:	08001ee9 	.word	0x08001ee9
 8001e88:	08001ee9 	.word	0x08001ee9
 8001e8c:	08001ee9 	.word	0x08001ee9
 8001e90:	08001ee9 	.word	0x08001ee9
 8001e94:	08001ee9 	.word	0x08001ee9
 8001e98:	08001ee9 	.word	0x08001ee9
 8001e9c:	08001ee9 	.word	0x08001ee9
 8001ea0:	08001ee9 	.word	0x08001ee9
 8001ea4:	08001ee9 	.word	0x08001ee9
 8001ea8:	08001eb9 	.word	0x08001eb9
 8001eac:	2b5c      	cmp	r3, #92	@ 0x5c
 8001eae:	d11b      	bne.n	8001ee8 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	225c      	movs	r2, #92	@ 0x5c
 8001eb4:	701a      	strb	r2, [r3, #0]
                    break;
 8001eb6:	e022      	b.n	8001efe <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2222      	movs	r2, #34	@ 0x22
 8001ebc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ebe:	e01e      	b.n	8001efe <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2262      	movs	r2, #98	@ 0x62
 8001ec4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ec6:	e01a      	b.n	8001efe <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2266      	movs	r2, #102	@ 0x66
 8001ecc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ece:	e016      	b.n	8001efe <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	226e      	movs	r2, #110	@ 0x6e
 8001ed4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ed6:	e012      	b.n	8001efe <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2272      	movs	r2, #114	@ 0x72
 8001edc:	701a      	strb	r2, [r3, #0]
                    break;
 8001ede:	e00e      	b.n	8001efe <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2274      	movs	r2, #116	@ 0x74
 8001ee4:	701a      	strb	r2, [r3, #0]
                    break;
 8001ee6:	e00a      	b.n	8001efe <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4914      	ldr	r1, [pc, #80]	@ (8001f40 <print_string_ptr+0x25c>)
 8001ef0:	69b8      	ldr	r0, [r7, #24]
 8001ef2:	f00a fdf7 	bl	800cae4 <siprintf>
                    output_pointer += 4;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	61bb      	str	r3, [r7, #24]
                    break;
 8001efc:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	3301      	adds	r3, #1
 8001f08:	61bb      	str	r3, [r7, #24]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f47f af74 	bne.w	8001dfc <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3301      	adds	r3, #1
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	2222      	movs	r2, #34	@ 0x22
 8001f1e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3302      	adds	r3, #2
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]

    return true;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	0800f5a4 	.word	0x0800f5a4
 8001f3c:	04000037 	.word	0x04000037
 8001f40:	0800f5a8 	.word	0x0800f5a8

08001f44 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fec5 	bl	8001ce4 <print_string_ptr>
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <buffer_skip_whitespace+0x16>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e02c      	b.n	8001fd8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <buffer_skip_whitespace+0x2c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d306      	bcc.n	8001f9e <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	e021      	b.n	8001fd8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00d      	beq.n	8001fc0 <buffer_skip_whitespace+0x5c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <buffer_skip_whitespace+0x5c>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d9e9      	bls.n	8001f94 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d104      	bne.n	8001fd6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001fd6:	687b      	ldr	r3, [r7, #4]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <skip_utf8_bom+0x1e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <skip_utf8_bom+0x1e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <skip_utf8_bom+0x22>
    {
        return NULL;
 8002002:	2300      	movs	r3, #0
 8002004:	e01c      	b.n	8002040 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d018      	beq.n	800203e <skip_utf8_bom+0x5a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	1d1a      	adds	r2, r3, #4
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	d211      	bcs.n	800203e <skip_utf8_bom+0x5a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4413      	add	r3, r2
 8002024:	2203      	movs	r2, #3
 8002026:	4908      	ldr	r1, [pc, #32]	@ (8002048 <skip_utf8_bom+0x64>)
 8002028:	4618      	mov	r0, r3
 800202a:	f00a fe2b 	bl	800cc84 <strncmp>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	1cda      	adds	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800203e:	687b      	ldr	r3, [r7, #4]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	0800f5b0 	.word	0x0800f5b0

0800204c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	e00c      	b.n	800207c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7fe f8be 	bl	80001e4 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	6979      	ldr	r1, [r7, #20]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f805 	bl	8002084 <cJSON_ParseWithLengthOpts>
 800207a:	4603      	mov	r3, r0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	@ 0x38
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 80020aa:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80020b0:	4b3f      	ldr	r3, [pc, #252]	@ (80021b0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d042      	beq.n	8002142 <cJSON_ParseWithLengthOpts+0xbe>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d03f      	beq.n	8002142 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80020ce:	4a39      	ldr	r2, [pc, #228]	@ (80021b4 <cJSON_ParseWithLengthOpts+0x130>)
 80020d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80020da:	4836      	ldr	r0, [pc, #216]	@ (80021b4 <cJSON_ParseWithLengthOpts+0x130>)
 80020dc:	f7ff f842 	bl	8001164 <cJSON_New_Item>
 80020e0:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 80020e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d02e      	beq.n	8002146 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80020e8:	f107 0318 	add.w	r3, r7, #24
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff79 	bl	8001fe4 <skip_utf8_bom>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff35 	bl	8001f64 <buffer_skip_whitespace>
 80020fa:	4603      	mov	r3, r0
 80020fc:	4619      	mov	r1, r3
 80020fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002100:	f000 f902 	bl	8002308 <parse_value>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01f      	beq.n	800214a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002110:	f107 0318 	add.w	r3, r7, #24
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff25 	bl	8001f64 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800211a:	6a3a      	ldr	r2, [r7, #32]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	429a      	cmp	r2, r3
 8002120:	d215      	bcs.n	800214e <cJSON_ParseWithLengthOpts+0xca>
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	4413      	add	r3, r2
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10f      	bne.n	800214e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	441a      	add	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800213e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002140:	e031      	b.n	80021a6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002142:	bf00      	nop
 8002144:	e004      	b.n	8002150 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002146:	bf00      	nop
 8002148:	e002      	b.n	8002150 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800214a:	bf00      	nop
 800214c:	e000      	b.n	8002150 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800214e:	bf00      	nop

fail:
    if (item != NULL)
 8002150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002156:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002158:	f7ff f81a 	bl	8001190 <cJSON_Delete>
    }

    if (value != NULL)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800216a:	6a3a      	ldr	r2, [r7, #32]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	429a      	cmp	r2, r3
 8002170:	d202      	bcs.n	8002178 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e005      	b.n	8002184 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b01      	subs	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d004      	beq.n	8002194 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	441a      	add	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <cJSON_ParseWithLengthOpts+0x12c>)
 8002196:	461a      	mov	r2, r3
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021a0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3738      	adds	r7, #56	@ 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000204 	.word	0x20000204
 80021b4:	20000000 	.word	0x20000000

080021b8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff41 	bl	800204c <cJSON_ParseWithOpts>
 80021ca:	4603      	mov	r3, r0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	@ 0x38
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	2224      	movs	r2, #36	@ 0x24
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f00a fd41 	bl	800cc74 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	@ (80022e4 <print+0x110>)
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	4610      	mov	r0, r2
 80021fc:	4798      	blx	r3
 80021fe:	4603      	mov	r3, r0
 8002200:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002202:	4b38      	ldr	r3, [pc, #224]	@ (80022e4 <print+0x110>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002212:	ca07      	ldmia	r2, {r0, r1, r2}
 8002214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d042      	beq.n	80022a4 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800221e:	f107 0310 	add.w	r3, r7, #16
 8002222:	4619      	mov	r1, r3
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f95b 	bl	80024e0 <print_value>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03b      	beq.n	80022a8 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f969 	bl	800150c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	6938      	ldr	r0, [r7, #16]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	3201      	adds	r2, #1
 800224c:	4611      	mov	r1, r2
 800224e:	4798      	blx	r3
 8002250:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8002252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d029      	beq.n	80022ac <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e020      	b.n	80022a0 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	3201      	adds	r2, #1
 8002266:	4610      	mov	r0, r2
 8002268:	4798      	blx	r3
 800226a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800226c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01e      	beq.n	80022b0 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8002272:	6939      	ldr	r1, [r7, #16]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	4293      	cmp	r3, r2
 800227c:	bf28      	it	cs
 800227e:	4613      	movcs	r3, r2
 8002280:	461a      	mov	r2, r3
 8002282:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002284:	f00a fde9 	bl	800ce5a <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800228c:	4413      	add	r3, r2
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4610      	mov	r0, r2
 800229a:	4798      	blx	r3
        buffer->buffer = NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80022a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a2:	e01a      	b.n	80022da <print+0x106>
        goto fail;
 80022a4:	bf00      	nop
 80022a6:	e004      	b.n	80022b2 <print+0xde>
        goto fail;
 80022a8:	bf00      	nop
 80022aa:	e002      	b.n	80022b2 <print+0xde>
            goto fail;
 80022ac:	bf00      	nop
 80022ae:	e000      	b.n	80022b2 <print+0xde>
            goto fail;
 80022b0:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4610      	mov	r0, r2
 80022c0:	4798      	blx	r3
        buffer->buffer = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 80022c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <print+0x104>
    {
        hooks->deallocate(printed);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80022d2:	4798      	blx	r3
        printed = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3738      	adds	r7, #56	@ 0x38
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800f770 	.word	0x0800f770

080022e8 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 80022f0:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <cJSON_Print+0x1c>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff6d 	bl	80021d4 <print>
 80022fa:	4603      	mov	r3, r0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000000 	.word	0x20000000

08002308 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <parse_value+0x18>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <parse_value+0x1c>
    {
        return false; /* no input */
 8002320:	2300      	movs	r3, #0
 8002322:	e0d2      	b.n	80024ca <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d01d      	beq.n	8002366 <parse_value+0x5e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	1d1a      	adds	r2, r3, #4
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d816      	bhi.n	8002366 <parse_value+0x5e>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4413      	add	r3, r2
 8002342:	2204      	movs	r2, #4
 8002344:	4963      	ldr	r1, [pc, #396]	@ (80024d4 <parse_value+0x1cc>)
 8002346:	4618      	mov	r0, r3
 8002348:	f00a fc9c 	bl	800cc84 <strncmp>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2204      	movs	r2, #4
 8002356:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	1d1a      	adds	r2, r3, #4
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	609a      	str	r2, [r3, #8]
        return true;
 8002362:	2301      	movs	r3, #1
 8002364:	e0b1      	b.n	80024ca <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d01d      	beq.n	80023a8 <parse_value+0xa0>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	1d5a      	adds	r2, r3, #5
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d816      	bhi.n	80023a8 <parse_value+0xa0>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4413      	add	r3, r2
 8002384:	2205      	movs	r2, #5
 8002386:	4954      	ldr	r1, [pc, #336]	@ (80024d8 <parse_value+0x1d0>)
 8002388:	4618      	mov	r0, r3
 800238a:	f00a fc7b 	bl	800cc84 <strncmp>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	1d5a      	adds	r2, r3, #5
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	609a      	str	r2, [r3, #8]
        return true;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e090      	b.n	80024ca <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d020      	beq.n	80023f0 <parse_value+0xe8>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	1d1a      	adds	r2, r3, #4
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d819      	bhi.n	80023f0 <parse_value+0xe8>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4413      	add	r3, r2
 80023c6:	2204      	movs	r2, #4
 80023c8:	4944      	ldr	r1, [pc, #272]	@ (80024dc <parse_value+0x1d4>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f00a fc5a 	bl	800cc84 <strncmp>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10c      	bne.n	80023f0 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	1d1a      	adds	r2, r3, #4
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	609a      	str	r2, [r3, #8]
        return true;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e06c      	b.n	80024ca <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d013      	beq.n	800241e <parse_value+0x116>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d20d      	bcs.n	800241e <parse_value+0x116>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b22      	cmp	r3, #34	@ 0x22
 8002410:	d105      	bne.n	800241e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fb1d 	bl	8001a54 <parse_string>
 800241a:	4603      	mov	r3, r0
 800241c:	e055      	b.n	80024ca <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d023      	beq.n	800246c <parse_value+0x164>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	d21d      	bcs.n	800246c <parse_value+0x164>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4413      	add	r3, r2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b2d      	cmp	r3, #45	@ 0x2d
 800243e:	d00f      	beq.n	8002460 <parse_value+0x158>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b2f      	cmp	r3, #47	@ 0x2f
 800244e:	d90d      	bls.n	800246c <parse_value+0x164>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b39      	cmp	r3, #57	@ 0x39
 800245e:	d805      	bhi.n	800246c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe feec 	bl	8001240 <parse_number>
 8002468:	4603      	mov	r3, r0
 800246a:	e02e      	b.n	80024ca <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <parse_value+0x192>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d20d      	bcs.n	800249a <parse_value+0x192>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b5b      	cmp	r3, #91	@ 0x5b
 800248c:	d105      	bne.n	800249a <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f909 	bl	80026a8 <parse_array>
 8002496:	4603      	mov	r3, r0
 8002498:	e017      	b.n	80024ca <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <parse_value+0x1c0>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d20d      	bcs.n	80024c8 <parse_value+0x1c0>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b7b      	cmp	r3, #123	@ 0x7b
 80024ba:	d105      	bne.n	80024c8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa3c 	bl	800293c <parse_object>
 80024c4:	4603      	mov	r3, r0
 80024c6:	e000      	b.n	80024ca <parse_value+0x1c2>
    }

    return false;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	0800f584 	.word	0x0800f584
 80024d8:	0800f5b4 	.word	0x0800f5b4
 80024dc:	0800f5bc 	.word	0x0800f5bc

080024e0 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <print_value+0x1a>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <print_value+0x1e>
    {
        return false;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e0c9      	b.n	8002692 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	f000 808e 	beq.w	8002626 <print_value+0x146>
 800250a:	2b80      	cmp	r3, #128	@ 0x80
 800250c:	f300 80c0 	bgt.w	8002690 <print_value+0x1b0>
 8002510:	2b20      	cmp	r3, #32
 8002512:	dc49      	bgt.n	80025a8 <print_value+0xc8>
 8002514:	2b00      	cmp	r3, #0
 8002516:	f340 80bb 	ble.w	8002690 <print_value+0x1b0>
 800251a:	3b01      	subs	r3, #1
 800251c:	2b1f      	cmp	r3, #31
 800251e:	f200 80b7 	bhi.w	8002690 <print_value+0x1b0>
 8002522:	a201      	add	r2, pc, #4	@ (adr r2, 8002528 <print_value+0x48>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	080025d3 	.word	0x080025d3
 800252c:	080025f7 	.word	0x080025f7
 8002530:	08002691 	.word	0x08002691
 8002534:	080025af 	.word	0x080025af
 8002538:	08002691 	.word	0x08002691
 800253c:	08002691 	.word	0x08002691
 8002540:	08002691 	.word	0x08002691
 8002544:	0800261b 	.word	0x0800261b
 8002548:	08002691 	.word	0x08002691
 800254c:	08002691 	.word	0x08002691
 8002550:	08002691 	.word	0x08002691
 8002554:	08002691 	.word	0x08002691
 8002558:	08002691 	.word	0x08002691
 800255c:	08002691 	.word	0x08002691
 8002560:	08002691 	.word	0x08002691
 8002564:	0800266d 	.word	0x0800266d
 8002568:	08002691 	.word	0x08002691
 800256c:	08002691 	.word	0x08002691
 8002570:	08002691 	.word	0x08002691
 8002574:	08002691 	.word	0x08002691
 8002578:	08002691 	.word	0x08002691
 800257c:	08002691 	.word	0x08002691
 8002580:	08002691 	.word	0x08002691
 8002584:	08002691 	.word	0x08002691
 8002588:	08002691 	.word	0x08002691
 800258c:	08002691 	.word	0x08002691
 8002590:	08002691 	.word	0x08002691
 8002594:	08002691 	.word	0x08002691
 8002598:	08002691 	.word	0x08002691
 800259c:	08002691 	.word	0x08002691
 80025a0:	08002691 	.word	0x08002691
 80025a4:	08002679 	.word	0x08002679
 80025a8:	2b40      	cmp	r3, #64	@ 0x40
 80025aa:	d06b      	beq.n	8002684 <print_value+0x1a4>
 80025ac:	e070      	b.n	8002690 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80025ae:	2105      	movs	r1, #5
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f7fe ff11 	bl	80013d8 <ensure>
 80025b6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <print_value+0xe2>
            {
                return false;
 80025be:	2300      	movs	r3, #0
 80025c0:	e067      	b.n	8002692 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a35      	ldr	r2, [pc, #212]	@ (800269c <print_value+0x1bc>)
 80025c6:	6810      	ldr	r0, [r2, #0]
 80025c8:	6018      	str	r0, [r3, #0]
 80025ca:	7912      	ldrb	r2, [r2, #4]
 80025cc:	711a      	strb	r2, [r3, #4]
            return true;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e05f      	b.n	8002692 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80025d2:	2106      	movs	r1, #6
 80025d4:	6838      	ldr	r0, [r7, #0]
 80025d6:	f7fe feff 	bl	80013d8 <ensure>
 80025da:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <print_value+0x106>
            {
                return false;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e055      	b.n	8002692 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a2d      	ldr	r2, [pc, #180]	@ (80026a0 <print_value+0x1c0>)
 80025ea:	6810      	ldr	r0, [r2, #0]
 80025ec:	6018      	str	r0, [r3, #0]
 80025ee:	8892      	ldrh	r2, [r2, #4]
 80025f0:	809a      	strh	r2, [r3, #4]
            return true;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e04d      	b.n	8002692 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80025f6:	2105      	movs	r1, #5
 80025f8:	6838      	ldr	r0, [r7, #0]
 80025fa:	f7fe feed 	bl	80013d8 <ensure>
 80025fe:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <print_value+0x12a>
            {
                return false;
 8002606:	2300      	movs	r3, #0
 8002608:	e043      	b.n	8002692 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a25      	ldr	r2, [pc, #148]	@ (80026a4 <print_value+0x1c4>)
 800260e:	6810      	ldr	r0, [r2, #0]
 8002610:	6018      	str	r0, [r3, #0]
 8002612:	7912      	ldrb	r2, [r2, #4]
 8002614:	711a      	strb	r2, [r3, #4]
            return true;
 8002616:	2301      	movs	r3, #1
 8002618:	e03b      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe ffdf 	bl	80015e0 <print_number>
 8002622:	4603      	mov	r3, r0
 8002624:	e035      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <print_value+0x156>
            {
                return false;
 8002632:	2300      	movs	r3, #0
 8002634:	e02d      	b.n	8002692 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd fdd2 	bl	80001e4 <strlen>
 8002640:	4603      	mov	r3, r0
 8002642:	3301      	adds	r3, #1
 8002644:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	6838      	ldr	r0, [r7, #0]
 800264a:	f7fe fec5 	bl	80013d8 <ensure>
 800264e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <print_value+0x17a>
            {
                return false;
 8002656:	2300      	movs	r3, #0
 8002658:	e01b      	b.n	8002692 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4619      	mov	r1, r3
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f00a fbf9 	bl	800ce5a <memcpy>
            return true;
 8002668:	2301      	movs	r3, #1
 800266a:	e012      	b.n	8002692 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fc68 	bl	8001f44 <print_string>
 8002674:	4603      	mov	r3, r0
 8002676:	e00c      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8d8 	bl	8002830 <print_array>
 8002680:	4603      	mov	r3, r0
 8002682:	e006      	b.n	8002692 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa64 	bl	8002b54 <print_object>
 800268c:	4603      	mov	r3, r0
 800268e:	e000      	b.n	8002692 <print_value+0x1b2>

        default:
            return false;
 8002690:	2300      	movs	r3, #0
    }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	0800f584 	.word	0x0800f584
 80026a0:	0800f5b4 	.word	0x0800f5b4
 80026a4:	0800f5bc 	.word	0x0800f5bc

080026a8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c2:	d301      	bcc.n	80026c8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80026c4:	2300      	movs	r3, #0
 80026c6:	e0af      	b.n	8002828 <parse_array+0x180>
    }
    input_buffer->depth++;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b5b      	cmp	r3, #91	@ 0x5b
 80026e0:	f040 8094 	bne.w	800280c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	f7ff fc38 	bl	8001f64 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00d      	beq.n	8002716 <parse_array+0x6e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d207      	bcs.n	8002716 <parse_array+0x6e>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b5d      	cmp	r3, #93	@ 0x5d
 8002714:	d061      	beq.n	80027da <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <parse_array+0x80>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d305      	bcc.n	8002734 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	609a      	str	r2, [r3, #8]
        goto fail;
 8002732:	e072      	b.n	800281a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	1e5a      	subs	r2, r3, #1
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3310      	adds	r3, #16
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fd0e 	bl	8001164 <cJSON_New_Item>
 8002748:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d05f      	beq.n	8002810 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d104      	bne.n	8002760 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	e007      	b.n	8002770 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	f7ff fbf2 	bl	8001f64 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	6938      	ldr	r0, [r7, #16]
 8002784:	f7ff fdc0 	bl	8002308 <parse_value>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d042      	beq.n	8002814 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 800278e:	6838      	ldr	r0, [r7, #0]
 8002790:	f7ff fbe8 	bl	8001f64 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <parse_array+0x10e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d207      	bcs.n	80027b6 <parse_array+0x10e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4413      	add	r3, r2
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b2c      	cmp	r3, #44	@ 0x2c
 80027b4:	d0c3      	beq.n	800273e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02d      	beq.n	8002818 <parse_array+0x170>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d227      	bcs.n	8002818 <parse_array+0x170>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4413      	add	r3, r2
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b5d      	cmp	r3, #93	@ 0x5d
 80027d6:	d11f      	bne.n	8002818 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 80027d8:	e000      	b.n	80027dc <parse_array+0x134>
        goto success;
 80027da:	bf00      	nop
    input_buffer->depth--;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <parse_array+0x14a>
        head->prev = current_item;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	60da      	str	r2, [r3, #12]
    item->child = head;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	609a      	str	r2, [r3, #8]

    return true;
 8002808:	2301      	movs	r3, #1
 800280a:	e00d      	b.n	8002828 <parse_array+0x180>
        goto fail;
 800280c:	bf00      	nop
 800280e:	e004      	b.n	800281a <parse_array+0x172>
            goto fail; /* allocation failure */
 8002810:	bf00      	nop
 8002812:	e002      	b.n	800281a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002814:	bf00      	nop
 8002816:	e000      	b.n	800281a <parse_array+0x172>
        goto fail; /* expected end of array */
 8002818:	bf00      	nop

fail:
    if (head != NULL)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002820:	6978      	ldr	r0, [r7, #20]
 8002822:	f7fe fcb5 	bl	8001190 <cJSON_Delete>
    }

    return false;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <print_array+0x22>
    {
        return false;
 800284e:	2300      	movs	r3, #0
 8002850:	e070      	b.n	8002934 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8002852:	2101      	movs	r1, #1
 8002854:	6838      	ldr	r0, [r7, #0]
 8002856:	f7fe fdbf 	bl	80013d8 <ensure>
 800285a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <print_array+0x36>
    {
        return false;
 8002862:	2300      	movs	r3, #0
 8002864:	e066      	b.n	8002934 <print_array+0x104>
    }

    *output_pointer = '[';
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	225b      	movs	r2, #91	@ 0x5b
 800286a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8002880:	e03d      	b.n	80028fe <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	6938      	ldr	r0, [r7, #16]
 8002886:	f7ff fe2b 	bl	80024e0 <print_value>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <print_array+0x64>
        {
            return false;
 8002890:	2300      	movs	r3, #0
 8002892:	e04f      	b.n	8002934 <print_array+0x104>
        }
        update_offset(output_buffer);
 8002894:	6838      	ldr	r0, [r7, #0]
 8002896:	f7fe fe39 	bl	800150c <update_offset>
        if (current_element->next)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d02a      	beq.n	80028f8 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <print_array+0x7e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e000      	b.n	80028b0 <print_array+0x80>
 80028ae:	2301      	movs	r3, #1
 80028b0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4619      	mov	r1, r3
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	f7fe fd8d 	bl	80013d8 <ensure>
 80028be:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <print_array+0x9a>
            {
                return false;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e034      	b.n	8002934 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	617a      	str	r2, [r7, #20]
 80028d0:	222c      	movs	r2, #44	@ 0x2c
 80028d2:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	617a      	str	r2, [r7, #20]
 80028e2:	2220      	movs	r2, #32
 80028e4:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	441a      	add	r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1be      	bne.n	8002882 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002904:	2102      	movs	r1, #2
 8002906:	6838      	ldr	r0, [r7, #0]
 8002908:	f7fe fd66 	bl	80013d8 <ensure>
 800290c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <print_array+0xe8>
    {
        return false;
 8002914:	2300      	movs	r3, #0
 8002916:	e00d      	b.n	8002934 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	617a      	str	r2, [r7, #20]
 800291e:	225d      	movs	r2, #93	@ 0x5d
 8002920:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	60da      	str	r2, [r3, #12]

    return true;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002956:	d301      	bcc.n	800295c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002958:	2300      	movs	r3, #0
 800295a:	e0f7      	b.n	8002b4c <parse_object+0x210>
    }
    input_buffer->depth++;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80db 	beq.w	8002b24 <parse_object+0x1e8>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	f080 80d4 	bcs.w	8002b24 <parse_object+0x1e8>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4413      	add	r3, r2
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b7b      	cmp	r3, #123	@ 0x7b
 800298a:	f040 80cb 	bne.w	8002b24 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	f7ff fae3 	bl	8001f64 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <parse_object+0x86>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d208      	bcs.n	80029c2 <parse_object+0x86>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b7d      	cmp	r3, #125	@ 0x7d
 80029be:	f000 8098 	beq.w	8002af2 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <parse_object+0x98>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d305      	bcc.n	80029e0 <parse_object+0xa4>
    {
        input_buffer->offset--;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	609a      	str	r2, [r3, #8]
        goto fail;
 80029de:	e0ae      	b.n	8002b3e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3310      	adds	r3, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fbb8 	bl	8001164 <cJSON_New_Item>
 80029f4:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8095 	beq.w	8002b28 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e007      	b.n	8002a1e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8083 	beq.w	8002b2c <parse_object+0x1f0>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d27b      	bcs.n	8002b2c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a3e:	6838      	ldr	r0, [r7, #0]
 8002a40:	f7ff fa90 	bl	8001f64 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	6938      	ldr	r0, [r7, #16]
 8002a48:	f7ff f804 	bl	8001a54 <parse_string>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d06e      	beq.n	8002b30 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002a52:	6838      	ldr	r0, [r7, #0]
 8002a54:	f7ff fa86 	bl	8001f64 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d063      	beq.n	8002b34 <parse_object+0x1f8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d25d      	bcs.n	8002b34 <parse_object+0x1f8>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b3a      	cmp	r3, #58	@ 0x3a
 8002a86:	d155      	bne.n	8002b34 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f7ff fa66 	bl	8001f64 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	6938      	ldr	r0, [r7, #16]
 8002a9c:	f7ff fc34 	bl	8002308 <parse_value>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d048      	beq.n	8002b38 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	f7ff fa5c 	bl	8001f64 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00d      	beq.n	8002ace <parse_object+0x192>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d207      	bcs.n	8002ace <parse_object+0x192>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b2c      	cmp	r3, #44	@ 0x2c
 8002acc:	d08d      	beq.n	80029ea <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d033      	beq.n	8002b3c <parse_object+0x200>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d22d      	bcs.n	8002b3c <parse_object+0x200>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4413      	add	r3, r2
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b7d      	cmp	r3, #125	@ 0x7d
 8002aee:	d125      	bne.n	8002b3c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002af0:	e000      	b.n	8002af4 <parse_object+0x1b8>
        goto success; /* empty object */
 8002af2:	bf00      	nop
    input_buffer->depth--;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <parse_object+0x1ce>
        head->prev = current_item;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	609a      	str	r2, [r3, #8]
    return true;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e013      	b.n	8002b4c <parse_object+0x210>
        goto fail; /* not an object */
 8002b24:	bf00      	nop
 8002b26:	e00a      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002b28:	bf00      	nop
 8002b2a:	e008      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002b2c:	bf00      	nop
 8002b2e:	e006      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002b30:	bf00      	nop
 8002b32:	e004      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* invalid object */
 8002b34:	bf00      	nop
 8002b36:	e002      	b.n	8002b3e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <parse_object+0x202>
        goto fail; /* expected end of object */
 8002b3c:	bf00      	nop

fail:
    if (head != NULL)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002b44:	6978      	ldr	r0, [r7, #20]
 8002b46:	f7fe fb23 	bl	8001190 <cJSON_Delete>
    }

    return false;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <print_object+0x22>
    {
        return false;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e108      	b.n	8002d88 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <print_object+0x2e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e000      	b.n	8002b84 <print_object+0x30>
 8002b82:	2301      	movs	r3, #1
 8002b84:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f7fe fc23 	bl	80013d8 <ensure>
 8002b92:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <print_object+0x4a>
    {
        return false;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e0f4      	b.n	8002d88 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	61fa      	str	r2, [r7, #28]
 8002ba4:	227b      	movs	r2, #123	@ 0x7b
 8002ba6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	61fa      	str	r2, [r7, #28]
 8002bc0:	220a      	movs	r2, #10
 8002bc2:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	441a      	add	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002bd0:	e0a0      	b.n	8002d14 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d022      	beq.n	8002c20 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4619      	mov	r1, r3
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	f7fe fbf9 	bl	80013d8 <ensure>
 8002be6:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <print_object+0x9e>
            {
                return false;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e0ca      	b.n	8002d88 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e007      	b.n	8002c08 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	61fa      	str	r2, [r7, #28]
 8002bfe:	2209      	movs	r2, #9
 8002c00:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d3f2      	bcc.n	8002bf8 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	441a      	add	r2, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f85c 	bl	8001ce4 <print_string_ptr>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <print_object+0xe2>
        {
            return false;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e0a8      	b.n	8002d88 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	f7fe fc68 	bl	800150c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <print_object+0xf4>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e000      	b.n	8002c4a <print_object+0xf6>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002c4c:	68f9      	ldr	r1, [r7, #12]
 8002c4e:	6838      	ldr	r0, [r7, #0]
 8002c50:	f7fe fbc2 	bl	80013d8 <ensure>
 8002c54:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <print_object+0x10c>
        {
            return false;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e093      	b.n	8002d88 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1c5a      	adds	r2, r3, #1
 8002c64:	61fa      	str	r2, [r7, #28]
 8002c66:	223a      	movs	r2, #58	@ 0x3a
 8002c68:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	61fa      	str	r2, [r7, #28]
 8002c78:	2209      	movs	r2, #9
 8002c7a:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	441a      	add	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002c88:	6839      	ldr	r1, [r7, #0]
 8002c8a:	69b8      	ldr	r0, [r7, #24]
 8002c8c:	f7ff fc28 	bl	80024e0 <print_value>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <print_object+0x146>
        {
            return false;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e076      	b.n	8002d88 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002c9a:	6838      	ldr	r0, [r7, #0]
 8002c9c:	f7fe fc36 	bl	800150c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <print_object+0x158>
 8002ca8:	2201      	movs	r2, #1
 8002caa:	e000      	b.n	8002cae <print_object+0x15a>
 8002cac:	2200      	movs	r2, #0
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <print_object+0x166>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <print_object+0x168>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	4413      	add	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6838      	ldr	r0, [r7, #0]
 8002cc8:	f7fe fb86 	bl	80013d8 <ensure>
 8002ccc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <print_object+0x184>
        {
            return false;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e057      	b.n	8002d88 <print_object+0x234>
        }
        if (current_item->next)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	61fa      	str	r2, [r7, #28]
 8002ce6:	222c      	movs	r2, #44	@ 0x2c
 8002ce8:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	61fa      	str	r2, [r7, #28]
 8002cf8:	220a      	movs	r2, #10
 8002cfa:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	441a      	add	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f47f af5b 	bne.w	8002bd2 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <print_object+0x1d8>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	e000      	b.n	8002d2e <print_object+0x1da>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6838      	ldr	r0, [r7, #0]
 8002d32:	f7fe fb51 	bl	80013d8 <ensure>
 8002d36:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <print_object+0x1ee>
    {
        return false;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e022      	b.n	8002d88 <print_object+0x234>
    }
    if (output_buffer->format)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	e007      	b.n	8002d60 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	61fa      	str	r2, [r7, #28]
 8002d56:	2209      	movs	r2, #9
 8002d58:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3f1      	bcc.n	8002d50 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	61fa      	str	r2, [r7, #28]
 8002d72:	227d      	movs	r2, #125	@ 0x7d
 8002d74:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	60da      	str	r2, [r3, #12]

    return true;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <get_object_item+0x1c>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <get_object_item+0x20>
    {
        return NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e033      	b.n	8002e18 <get_object_item+0x88>
    }

    current_element = object->child;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dbc:	e002      	b.n	8002dc4 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01c      	beq.n	8002e04 <get_object_item+0x74>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d018      	beq.n	8002e04 <get_object_item+0x74>
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	68b8      	ldr	r0, [r7, #8]
 8002dda:	f7fd f9f9 	bl	80001d0 <strcmp>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ec      	bne.n	8002dbe <get_object_item+0x2e>
 8002de4:	e00e      	b.n	8002e04 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <get_object_item+0x74>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4619      	mov	r1, r3
 8002df8:	68b8      	ldr	r0, [r7, #8]
 8002dfa:	f7fe f91f 	bl	800103c <case_insensitive_strcmp>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <get_object_item+0x82>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <get_object_item+0x86>
        return NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <get_object_item+0x88>
    }

    return current_element;
 8002e16:	697b      	ldr	r3, [r7, #20]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	6839      	ldr	r1, [r7, #0]
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffae 	bl	8002d90 <get_object_item>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <add_item_to_array+0x22>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <add_item_to_array+0x22>
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d101      	bne.n	8002e86 <add_item_to_array+0x26>
    {
        return false;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e01e      	b.n	8002ec4 <add_item_to_array+0x64>
    }

    child = array->child;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e00d      	b.n	8002ec2 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ffc2 	bl	8002e3e <suffix_object>
            array->child->prev = item;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002ed4:	687b      	ldr	r3, [r7, #4]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <add_item_to_object+0x30>
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <add_item_to_object+0x30>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <add_item_to_object+0x30>
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d101      	bne.n	8002f16 <add_item_to_object+0x34>
    {
        return false;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e036      	b.n	8002f84 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002f1c:	68b8      	ldr	r0, [r7, #8]
 8002f1e:	f7ff ffd5 	bl	8002ecc <cast_away_const>
 8002f22:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e00e      	b.n	8002f4e <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	68b8      	ldr	r0, [r7, #8]
 8002f34:	f7fe f8ee 	bl	8001114 <cJSON_strdup>
 8002f38:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <add_item_to_object+0x62>
        {
            return false;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e01f      	b.n	8002f84 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f4c:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <add_item_to_object+0x8c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6a12      	ldr	r2, [r2, #32]
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4798      	blx	r3
    }

    item->string = new_key;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff ff6f 	bl	8002e60 <add_item_to_array>
 8002f82:	4603      	mov	r3, r0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <cJSON_AddItemToObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
    return add_item_to_object(object, string, item, &global_hooks, false);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <cJSON_AddItemToObject+0x28>)
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff ff9d 	bl	8002ee2 <add_item_to_object>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8002fc6:	ed97 0b00 	vldr	d0, [r7]
 8002fca:	f000 f83d 	bl	8003048 <cJSON_CreateNumber>
 8002fce:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <cJSON_AddNumberToObject+0x44>)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ff81 	bl	8002ee2 <add_item_to_object>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	e003      	b.n	8002ff2 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8002fea:	6978      	ldr	r0, [r7, #20]
 8002fec:	f7fe f8d0 	bl	8001190 <cJSON_Delete>
    return NULL;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000

08003000 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f863 	bl	80030d8 <cJSON_CreateString>
 8003012:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8003014:	2300      	movs	r3, #0
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <cJSON_AddStringToObject+0x40>)
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f7ff ff5f 	bl	8002ee2 <add_item_to_object>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	e003      	b.n	8003036 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7fe f8ae 	bl	8001190 <cJSON_Delete>
    return NULL;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000
 8003044:	00000000 	.word	0x00000000

08003048 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003052:	481f      	ldr	r0, [pc, #124]	@ (80030d0 <cJSON_CreateNumber+0x88>)
 8003054:	f7fe f886 	bl	8001164 <cJSON_New_Item>
 8003058:	60f8      	str	r0, [r7, #12]
    if(item)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02c      	beq.n	80030ba <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2208      	movs	r2, #8
 8003064:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8003066:	68f9      	ldr	r1, [r7, #12]
 8003068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800306c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8003070:	a315      	add	r3, pc, #84	@ (adr r3, 80030c8 <cJSON_CreateNumber+0x80>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	e9d7 0100 	ldrd	r0, r1, [r7]
 800307a:	f7fd fd53 	bl	8000b24 <__aeabi_dcmpge>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800308a:	615a      	str	r2, [r3, #20]
 800308c:	e015      	b.n	80030ba <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <cJSON_CreateNumber+0x8c>)
 8003094:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003098:	f7fd fd3a 	bl	8000b10 <__aeabi_dcmple>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d004      	beq.n	80030ac <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80030a8:	615a      	str	r2, [r3, #20]
 80030aa:	e006      	b.n	80030ba <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80030ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030b0:	f7fd fd62 	bl	8000b78 <__aeabi_d2iz>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f3af 8000 	nop.w
 80030c8:	ffc00000 	.word	0xffc00000
 80030cc:	41dfffff 	.word	0x41dfffff
 80030d0:	20000000 	.word	0x20000000
 80030d4:	c1e00000 	.word	0xc1e00000

080030d8 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80030e0:	480f      	ldr	r0, [pc, #60]	@ (8003120 <cJSON_CreateString+0x48>)
 80030e2:	f7fe f83f 	bl	8001164 <cJSON_New_Item>
 80030e6:	60f8      	str	r0, [r7, #12]
    if(item)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2210      	movs	r2, #16
 80030f2:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80030f4:	490a      	ldr	r1, [pc, #40]	@ (8003120 <cJSON_CreateString+0x48>)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe f80c 	bl	8001114 <cJSON_strdup>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7fe f840 	bl	8001190 <cJSON_Delete>
            return NULL;
 8003110:	2300      	movs	r3, #0
 8003112:	e000      	b.n	8003116 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8003114:	68fb      	ldr	r3, [r7, #12]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000

08003124 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800312a:	4807      	ldr	r0, [pc, #28]	@ (8003148 <cJSON_CreateObject+0x24>)
 800312c:	f7fe f81a 	bl	8001164 <cJSON_New_Item>
 8003130:	6078      	str	r0, [r7, #4]
    if (item)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2240      	movs	r2, #64	@ 0x40
 800313c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800313e:	687b      	ldr	r3, [r7, #4]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000000 	.word	0x20000000

0800314c <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <cJSON_IsTrue+0x12>
    {
        return false;
 800315a:	2300      	movs	r3, #0
 800315c:	e007      	b.n	800316e <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <cJSON_IsNumber+0x12>
    {
        return false;
 8003188:	2300      	movs	r3, #0
 800318a:	e007      	b.n	800319c <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b08      	cmp	r3, #8
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 80031b0:	4b04      	ldr	r3, [pc, #16]	@ (80031c4 <cJSON_free+0x1c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
    object = NULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	607b      	str	r3, [r7, #4]
}
 80031bc:	bf00      	nop
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000000 	.word	0x20000000

080031c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <MX_DMA_Init+0x88>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003250 <MX_DMA_Init+0x88>)
 80031d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <MX_DMA_Init+0x88>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
 80031ee:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <MX_DMA_Init+0x88>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a17      	ldr	r2, [pc, #92]	@ (8003250 <MX_DMA_Init+0x88>)
 80031f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <MX_DMA_Init+0x88>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2105      	movs	r1, #5
 800320a:	2010      	movs	r0, #16
 800320c:	f002 f9be 	bl	800558c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003210:	2010      	movs	r0, #16
 8003212:	f002 f9d7 	bl	80055c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2105      	movs	r1, #5
 800321a:	2011      	movs	r0, #17
 800321c:	f002 f9b6 	bl	800558c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003220:	2011      	movs	r0, #17
 8003222:	f002 f9cf 	bl	80055c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	2105      	movs	r1, #5
 800322a:	203a      	movs	r0, #58	@ 0x3a
 800322c:	f002 f9ae 	bl	800558c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003230:	203a      	movs	r0, #58	@ 0x3a
 8003232:	f002 f9c7 	bl	80055c4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2105      	movs	r1, #5
 800323a:	2046      	movs	r0, #70	@ 0x46
 800323c:	f002 f9a6 	bl	800558c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003240:	2046      	movs	r0, #70	@ 0x46
 8003242:	f002 f9bf 	bl	80055c4 <HAL_NVIC_EnableIRQ>

}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800

08003254 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	@ 0x28
 8003258:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800325a:	2306      	movs	r3, #6
 800325c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800325e:	2306      	movs	r3, #6
 8003260:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	83fb      	strh	r3, [r7, #30]
 800326a:	2300      	movs	r3, #0
 800326c:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800326e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003272:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8003278:	4ba1      	ldr	r3, [pc, #644]	@ (8003500 <EE_Init+0x2ac>)
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800327e:	4ba1      	ldr	r3, [pc, #644]	@ (8003504 <EE_Init+0x2b0>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8003284:	2300      	movs	r3, #0
 8003286:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8003288:	230a      	movs	r3, #10
 800328a:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 800328c:	2301      	movs	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003290:	2302      	movs	r3, #2
 8003292:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8003294:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800329a:	4293      	cmp	r3, r2
 800329c:	d00b      	beq.n	80032b6 <EE_Init+0x62>
 800329e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a2:	f280 8196 	bge.w	80035d2 <EE_Init+0x37e>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80f8 	beq.w	800349c <EE_Init+0x248>
 80032ac:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d050      	beq.n	8003356 <EE_Init+0x102>
 80032b4:	e18d      	b.n	80035d2 <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80032b6:	8c3b      	ldrh	r3, [r7, #32]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d116      	bne.n	80032ea <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80032bc:	4890      	ldr	r0, [pc, #576]	@ (8003500 <EE_Init+0x2ac>)
 80032be:	f000 f9a9 	bl	8003614 <EE_VerifyPageFullyErased>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 818e 	bne.w	80035e6 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80032ca:	f107 0214 	add.w	r2, r7, #20
 80032ce:	463b      	mov	r3, r7
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 ffb6 	bl	8006244 <HAL_FLASHEx_Erase>
 80032d8:	4603      	mov	r3, r0
 80032da:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80032dc:	7efb      	ldrb	r3, [r7, #27]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8181 	beq.w	80035e6 <EE_Init+0x392>
          {
            return FlashStatus;
 80032e4:	7efb      	ldrb	r3, [r7, #27]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	e185      	b.n	80035f6 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 80032ea:	8c3b      	ldrh	r3, [r7, #32]
 80032ec:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d125      	bne.n	8003340 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80032f4:	4882      	ldr	r0, [pc, #520]	@ (8003500 <EE_Init+0x2ac>)
 80032f6:	f000 f98d 	bl	8003614 <EE_VerifyPageFullyErased>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10e      	bne.n	800331e <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003300:	f107 0214 	add.w	r2, r7, #20
 8003304:	463b      	mov	r3, r7
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f002 ff9b 	bl	8006244 <HAL_FLASHEx_Erase>
 800330e:	4603      	mov	r3, r0
 8003310:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8003312:	7efb      	ldrb	r3, [r7, #27]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <EE_Init+0xca>
          {
            return FlashStatus;
 8003318:	7efb      	ldrb	r3, [r7, #27]
 800331a:	b29b      	uxth	r3, r3
 800331c:	e16b      	b.n	80035f6 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	4977      	ldr	r1, [pc, #476]	@ (8003504 <EE_Init+0x2b0>)
 8003328:	2001      	movs	r0, #1
 800332a:	f002 fdd5 	bl	8005ed8 <HAL_FLASH_Program>
 800332e:	4603      	mov	r3, r0
 8003330:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003332:	7efb      	ldrb	r3, [r7, #27]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8156 	beq.w	80035e6 <EE_Init+0x392>
        {
          return FlashStatus;
 800333a:	7efb      	ldrb	r3, [r7, #27]
 800333c:	b29b      	uxth	r3, r3
 800333e:	e15a      	b.n	80035f6 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8003340:	f000 f9fc 	bl	800373c <EE_Format>
 8003344:	4603      	mov	r3, r0
 8003346:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003348:	7efb      	ldrb	r3, [r7, #27]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 814b 	beq.w	80035e6 <EE_Init+0x392>
        {
          return FlashStatus;
 8003350:	7efb      	ldrb	r3, [r7, #27]
 8003352:	b29b      	uxth	r3, r3
 8003354:	e14f      	b.n	80035f6 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8003356:	8c3b      	ldrh	r3, [r7, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d163      	bne.n	8003424 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800335c:	2300      	movs	r3, #0
 800335e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003360:	e030      	b.n	80033c4 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8003362:	4b69      	ldr	r3, [pc, #420]	@ (8003508 <EE_Init+0x2b4>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29a      	uxth	r2, r3
 8003368:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800336a:	4968      	ldr	r1, [pc, #416]	@ (800350c <EE_Init+0x2b8>)
 800336c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003370:	429a      	cmp	r2, r3
 8003372:	d101      	bne.n	8003378 <EE_Init+0x124>
          {
            x = VarIdx;
 8003374:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003376:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 8003378:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800337a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800337e:	429a      	cmp	r2, r3
 8003380:	d01d      	beq.n	80033be <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8003382:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003384:	4a61      	ldr	r2, [pc, #388]	@ (800350c <EE_Init+0x2b8>)
 8003386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800338a:	4961      	ldr	r1, [pc, #388]	@ (8003510 <EE_Init+0x2bc>)
 800338c:	4618      	mov	r0, r3
 800338e:	f000 f96b 	bl	8003668 <EE_ReadVariable>
 8003392:	4603      	mov	r3, r0
 8003394:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8003396:	8bbb      	ldrh	r3, [r7, #28]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d010      	beq.n	80033be <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800339c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800339e:	4a5b      	ldr	r2, [pc, #364]	@ (800350c <EE_Init+0x2b8>)
 80033a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003510 <EE_Init+0x2bc>)
 80033a6:	8812      	ldrh	r2, [r2, #0]
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fa5e 	bl	800386c <EE_VerifyPageFullWriteVariable>
 80033b0:	4603      	mov	r3, r0
 80033b2:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80033b4:	8bfb      	ldrh	r3, [r7, #30]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <EE_Init+0x16a>
              {
                return EepromStatus;
 80033ba:	8bfb      	ldrh	r3, [r7, #30]
 80033bc:	e11b      	b.n	80035f6 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80033be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80033c0:	3301      	adds	r3, #1
 80033c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80033c4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80033c6:	2b1f      	cmp	r3, #31
 80033c8:	d9cb      	bls.n	8003362 <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	494b      	ldr	r1, [pc, #300]	@ (8003500 <EE_Init+0x2ac>)
 80033d4:	2001      	movs	r0, #1
 80033d6:	f002 fd7f 	bl	8005ed8 <HAL_FLASH_Program>
 80033da:	4603      	mov	r3, r0
 80033dc:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80033de:	7efb      	ldrb	r3, [r7, #27]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <EE_Init+0x196>
        {
          return FlashStatus;
 80033e4:	7efb      	ldrb	r3, [r7, #27]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	e105      	b.n	80035f6 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 80033ea:	230b      	movs	r3, #11
 80033ec:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80033ee:	2301      	movs	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80033f2:	2302      	movs	r3, #2
 80033f4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80033f6:	4843      	ldr	r0, [pc, #268]	@ (8003504 <EE_Init+0x2b0>)
 80033f8:	f000 f90c 	bl	8003614 <EE_VerifyPageFullyErased>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 80f3 	bne.w	80035ea <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003404:	f107 0214 	add.w	r2, r7, #20
 8003408:	463b      	mov	r3, r7
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f002 ff19 	bl	8006244 <HAL_FLASHEx_Erase>
 8003412:	4603      	mov	r3, r0
 8003414:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8003416:	7efb      	ldrb	r3, [r7, #27]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80e6 	beq.w	80035ea <EE_Init+0x396>
          {
            return FlashStatus;
 800341e:	7efb      	ldrb	r3, [r7, #27]
 8003420:	b29b      	uxth	r3, r3
 8003422:	e0e8      	b.n	80035f6 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8003424:	8c3b      	ldrh	r3, [r7, #32]
 8003426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800342a:	4293      	cmp	r3, r2
 800342c:	d12b      	bne.n	8003486 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 800342e:	230b      	movs	r3, #11
 8003430:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8003432:	2301      	movs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003436:	2302      	movs	r3, #2
 8003438:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800343a:	4832      	ldr	r0, [pc, #200]	@ (8003504 <EE_Init+0x2b0>)
 800343c:	f000 f8ea 	bl	8003614 <EE_VerifyPageFullyErased>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8003446:	f107 0214 	add.w	r2, r7, #20
 800344a:	463b      	mov	r3, r7
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fef8 	bl	8006244 <HAL_FLASHEx_Erase>
 8003454:	4603      	mov	r3, r0
 8003456:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8003458:	7efb      	ldrb	r3, [r7, #27]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <EE_Init+0x210>
          {
            return FlashStatus;
 800345e:	7efb      	ldrb	r3, [r7, #27]
 8003460:	b29b      	uxth	r3, r3
 8003462:	e0c8      	b.n	80035f6 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	4924      	ldr	r1, [pc, #144]	@ (8003500 <EE_Init+0x2ac>)
 800346e:	2001      	movs	r0, #1
 8003470:	f002 fd32 	bl	8005ed8 <HAL_FLASH_Program>
 8003474:	4603      	mov	r3, r0
 8003476:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003478:	7efb      	ldrb	r3, [r7, #27]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80b5 	beq.w	80035ea <EE_Init+0x396>
        {
          return FlashStatus;
 8003480:	7efb      	ldrb	r3, [r7, #27]
 8003482:	b29b      	uxth	r3, r3
 8003484:	e0b7      	b.n	80035f6 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8003486:	f000 f959 	bl	800373c <EE_Format>
 800348a:	4603      	mov	r3, r0
 800348c:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800348e:	7efb      	ldrb	r3, [r7, #27]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80aa 	beq.w	80035ea <EE_Init+0x396>
        {
          return FlashStatus;
 8003496:	7efb      	ldrb	r3, [r7, #27]
 8003498:	b29b      	uxth	r3, r3
 800349a:	e0ac      	b.n	80035f6 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800349c:	8c3b      	ldrh	r3, [r7, #32]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80034a2:	f000 f94b 	bl	800373c <EE_Format>
 80034a6:	4603      	mov	r3, r0
 80034a8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80034aa:	7efb      	ldrb	r3, [r7, #27]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 809e 	beq.w	80035ee <EE_Init+0x39a>
        {
          return FlashStatus;
 80034b2:	7efb      	ldrb	r3, [r7, #27]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	e09e      	b.n	80035f6 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80034b8:	8c3b      	ldrh	r3, [r7, #32]
 80034ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034be:	4293      	cmp	r3, r2
 80034c0:	d11b      	bne.n	80034fa <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 80034c2:	230b      	movs	r3, #11
 80034c4:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80034c6:	2301      	movs	r3, #1
 80034c8:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80034ca:	2302      	movs	r3, #2
 80034cc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80034ce:	480d      	ldr	r0, [pc, #52]	@ (8003504 <EE_Init+0x2b0>)
 80034d0:	f000 f8a0 	bl	8003614 <EE_VerifyPageFullyErased>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f040 8089 	bne.w	80035ee <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80034dc:	f107 0214 	add.w	r2, r7, #20
 80034e0:	463b      	mov	r3, r7
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 fead 	bl	8006244 <HAL_FLASHEx_Erase>
 80034ea:	4603      	mov	r3, r0
 80034ec:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80034ee:	7efb      	ldrb	r3, [r7, #27]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d07c      	beq.n	80035ee <EE_Init+0x39a>
          {
            return FlashStatus;
 80034f4:	7efb      	ldrb	r3, [r7, #27]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	e07d      	b.n	80035f6 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80034fe:	e03a      	b.n	8003576 <EE_Init+0x322>
 8003500:	080c0000 	.word	0x080c0000
 8003504:	080e0000 	.word	0x080e0000
 8003508:	080c0006 	.word	0x080c0006
 800350c:	200008e8 	.word	0x200008e8
 8003510:	2000020c 	.word	0x2000020c
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8003514:	4b3a      	ldr	r3, [pc, #232]	@ (8003600 <EE_Init+0x3ac>)
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b29a      	uxth	r2, r3
 800351a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800351c:	4939      	ldr	r1, [pc, #228]	@ (8003604 <EE_Init+0x3b0>)
 800351e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003522:	429a      	cmp	r2, r3
 8003524:	d101      	bne.n	800352a <EE_Init+0x2d6>
          {
            x = VarIdx;
 8003526:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003528:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800352a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800352c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003530:	429a      	cmp	r2, r3
 8003532:	d01d      	beq.n	8003570 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8003534:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003536:	4a33      	ldr	r2, [pc, #204]	@ (8003604 <EE_Init+0x3b0>)
 8003538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800353c:	4932      	ldr	r1, [pc, #200]	@ (8003608 <EE_Init+0x3b4>)
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f892 	bl	8003668 <EE_ReadVariable>
 8003544:	4603      	mov	r3, r0
 8003546:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8003548:	8bbb      	ldrh	r3, [r7, #28]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d010      	beq.n	8003570 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800354e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003550:	4a2c      	ldr	r2, [pc, #176]	@ (8003604 <EE_Init+0x3b0>)
 8003552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003556:	4a2c      	ldr	r2, [pc, #176]	@ (8003608 <EE_Init+0x3b4>)
 8003558:	8812      	ldrh	r2, [r2, #0]
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f985 	bl	800386c <EE_VerifyPageFullWriteVariable>
 8003562:	4603      	mov	r3, r0
 8003564:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8003566:	8bfb      	ldrh	r3, [r7, #30]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <EE_Init+0x31c>
              {
                return EepromStatus;
 800356c:	8bfb      	ldrh	r3, [r7, #30]
 800356e:	e042      	b.n	80035f6 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003570:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003572:	3301      	adds	r3, #1
 8003574:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003578:	2b1f      	cmp	r3, #31
 800357a:	d9cb      	bls.n	8003514 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	4921      	ldr	r1, [pc, #132]	@ (800360c <EE_Init+0x3b8>)
 8003586:	2001      	movs	r0, #1
 8003588:	f002 fca6 	bl	8005ed8 <HAL_FLASH_Program>
 800358c:	4603      	mov	r3, r0
 800358e:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8003590:	7efb      	ldrb	r3, [r7, #27]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <EE_Init+0x348>
        {
          return FlashStatus;
 8003596:	7efb      	ldrb	r3, [r7, #27]
 8003598:	b29b      	uxth	r3, r3
 800359a:	e02c      	b.n	80035f6 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 800359c:	230a      	movs	r3, #10
 800359e:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80035a0:	2301      	movs	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80035a4:	2302      	movs	r3, #2
 80035a6:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80035a8:	4819      	ldr	r0, [pc, #100]	@ (8003610 <EE_Init+0x3bc>)
 80035aa:	f000 f833 	bl	8003614 <EE_VerifyPageFullyErased>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d11c      	bne.n	80035ee <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80035b4:	f107 0214 	add.w	r2, r7, #20
 80035b8:	463b      	mov	r3, r7
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f002 fe41 	bl	8006244 <HAL_FLASHEx_Erase>
 80035c2:	4603      	mov	r3, r0
 80035c4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80035c6:	7efb      	ldrb	r3, [r7, #27]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d010      	beq.n	80035ee <EE_Init+0x39a>
          {
            return FlashStatus;
 80035cc:	7efb      	ldrb	r3, [r7, #27]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	e011      	b.n	80035f6 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80035d2:	f000 f8b3 	bl	800373c <EE_Format>
 80035d6:	4603      	mov	r3, r0
 80035d8:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80035da:	7efb      	ldrb	r3, [r7, #27]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <EE_Init+0x39e>
      {
        return FlashStatus;
 80035e0:	7efb      	ldrb	r3, [r7, #27]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	e007      	b.n	80035f6 <EE_Init+0x3a2>
      break;
 80035e6:	bf00      	nop
 80035e8:	e004      	b.n	80035f4 <EE_Init+0x3a0>
      break;
 80035ea:	bf00      	nop
 80035ec:	e002      	b.n	80035f4 <EE_Init+0x3a0>
      break;
 80035ee:	bf00      	nop
 80035f0:	e000      	b.n	80035f4 <EE_Init+0x3a0>
      }
      break;
 80035f2:	bf00      	nop
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3728      	adds	r7, #40	@ 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	080e0006 	.word	0x080e0006
 8003604:	200008e8 	.word	0x200008e8
 8003608:	2000020c 	.word	0x2000020c
 800360c:	080e0000 	.word	0x080e0000
 8003610:	080c0000 	.word	0x080c0000

08003614 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 8003624:	f245 5355 	movw	r3, #21845	@ 0x5555
 8003628:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800362a:	e00d      	b.n	8003648 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003638:	4293      	cmp	r3, r2
 800363a:	d002      	beq.n	8003642 <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

      break;
 8003640:	e00a      	b.n	8003658 <EE_VerifyPageFullyErased+0x44>
    }
    /* Next address location */
    Address = Address + 4;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f503 33ff 	add.w	r3, r3, #130560	@ 0x1fe00
 800364e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d9e9      	bls.n	800362c <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	b29b      	uxth	r3, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	6039      	str	r1, [r7, #0]
 8003672:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8003674:	2300      	movs	r3, #0
 8003676:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8003678:	f245 5355 	movw	r3, #21845	@ 0x5555
 800367c:	81bb      	strh	r3, [r7, #12]
 800367e:	2301      	movs	r3, #1
 8003680:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8003682:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <EE_ReadVariable+0x88>)
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <EE_ReadVariable+0x88>)
 8003688:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800368a:	2000      	movs	r0, #0
 800368c:	f000 f8a8 	bl	80037e0 <EE_FindValidPage>
 8003690:	4603      	mov	r3, r0
 8003692:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8003694:	89fb      	ldrh	r3, [r7, #14]
 8003696:	2bab      	cmp	r3, #171	@ 0xab
 8003698:	d101      	bne.n	800369e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800369a:	23ab      	movs	r3, #171	@ 0xab
 800369c:	e024      	b.n	80036e8 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800369e:	89fb      	ldrh	r3, [r7, #14]
 80036a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80036a4:	045b      	lsls	r3, r3, #17
 80036a6:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	3301      	adds	r3, #1
 80036ac:	045a      	lsls	r2, r3, #17
 80036ae:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <EE_ReadVariable+0x8c>)
 80036b0:	4413      	add	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80036b4:	e012      	b.n	80036dc <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80036bc:	89ba      	ldrh	r2, [r7, #12]
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d108      	bne.n	80036d6 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	3b02      	subs	r3, #2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	82fb      	strh	r3, [r7, #22]

      break;
 80036d4:	e007      	b.n	80036e6 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	3b04      	subs	r3, #4
 80036da:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	3302      	adds	r3, #2
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d8e7      	bhi.n	80036b6 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 80036e6:	8afb      	ldrh	r3, [r7, #22]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	080c0000 	.word	0x080c0000
 80036f4:	080bfffe 	.word	0x080bfffe

080036f8 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	460a      	mov	r2, r1
 8003702:	80fb      	strh	r3, [r7, #6]
 8003704:	4613      	mov	r3, r2
 8003706:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8003708:	2300      	movs	r3, #0
 800370a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800370c:	88ba      	ldrh	r2, [r7, #4]
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f8aa 	bl	800386c <EE_VerifyPageFullWriteVariable>
 8003718:	4603      	mov	r3, r0
 800371a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	2b80      	cmp	r3, #128	@ 0x80
 8003720:	d107      	bne.n	8003732 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8003722:	88ba      	ldrh	r2, [r7, #4]
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f901 	bl	8003930 <EE_PageTransfer>
 800372e:	4603      	mov	r3, r0
 8003730:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8003732:	89fb      	ldrh	r3, [r7, #14]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800374e:	230a      	movs	r3, #10
 8003750:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003756:	2302      	movs	r3, #2
 8003758:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800375a:	481f      	ldr	r0, [pc, #124]	@ (80037d8 <EE_Format+0x9c>)
 800375c:	f7ff ff5a 	bl	8003614 <EE_VerifyPageFullyErased>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8003766:	f107 0218 	add.w	r2, r7, #24
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f002 fd68 	bl	8006244 <HAL_FLASHEx_Erase>
 8003774:	4603      	mov	r3, r0
 8003776:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8003778:	7ffb      	ldrb	r3, [r7, #31]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <EE_Format+0x46>
    {
      return FlashStatus;
 800377e:	7ffb      	ldrb	r3, [r7, #31]
 8003780:	e025      	b.n	80037ce <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	4913      	ldr	r1, [pc, #76]	@ (80037d8 <EE_Format+0x9c>)
 800378c:	2001      	movs	r0, #1
 800378e:	f002 fba3 	bl	8005ed8 <HAL_FLASH_Program>
 8003792:	4603      	mov	r3, r0
 8003794:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <EE_Format+0x64>
  {
    return FlashStatus;
 800379c:	7ffb      	ldrb	r3, [r7, #31]
 800379e:	e016      	b.n	80037ce <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80037a0:	230b      	movs	r3, #11
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80037a4:	480d      	ldr	r0, [pc, #52]	@ (80037dc <EE_Format+0xa0>)
 80037a6:	f7ff ff35 	bl	8003614 <EE_VerifyPageFullyErased>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10d      	bne.n	80037cc <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80037b0:	f107 0218 	add.w	r2, r7, #24
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f002 fd43 	bl	8006244 <HAL_FLASHEx_Erase>
 80037be:	4603      	mov	r3, r0
 80037c0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80037c2:	7ffb      	ldrb	r3, [r7, #31]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <EE_Format+0x90>
    {
      return FlashStatus;
 80037c8:	7ffb      	ldrb	r3, [r7, #31]
 80037ca:	e000      	b.n	80037ce <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	080c0000 	.word	0x080c0000
 80037dc:	080e0000 	.word	0x080e0000

080037e0 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80037ea:	2306      	movs	r3, #6
 80037ec:	81fb      	strh	r3, [r7, #14]
 80037ee:	2306      	movs	r3, #6
 80037f0:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80037f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003864 <EE_FindValidPage+0x84>)
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80037f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <EE_FindValidPage+0x88>)
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01b      	beq.n	800383c <EE_FindValidPage+0x5c>
 8003804:	2b01      	cmp	r3, #1
 8003806:	d125      	bne.n	8003854 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8003808:	89bb      	ldrh	r3, [r7, #12]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800380e:	89fb      	ldrh	r3, [r7, #14]
 8003810:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003814:	4293      	cmp	r3, r2
 8003816:	d101      	bne.n	800381c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8003818:	2300      	movs	r3, #0
 800381a:	e01c      	b.n	8003856 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800381c:	2301      	movs	r3, #1
 800381e:	e01a      	b.n	8003856 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8003820:	89fb      	ldrh	r3, [r7, #14]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8003826:	89bb      	ldrh	r3, [r7, #12]
 8003828:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8003830:	2301      	movs	r3, #1
 8003832:	e010      	b.n	8003856 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8003834:	2300      	movs	r3, #0
 8003836:	e00e      	b.n	8003856 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8003838:	23ab      	movs	r3, #171	@ 0xab
 800383a:	e00c      	b.n	8003856 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800383c:	89fb      	ldrh	r3, [r7, #14]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8003842:	2300      	movs	r3, #0
 8003844:	e007      	b.n	8003856 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8003846:	89bb      	ldrh	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800384c:	2301      	movs	r3, #1
 800384e:	e002      	b.n	8003856 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8003850:	23ab      	movs	r3, #171	@ 0xab
 8003852:	e000      	b.n	8003856 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8003854:	2300      	movs	r3, #0
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	080c0000 	.word	0x080c0000
 8003868:	080e0000 	.word	0x080e0000

0800386c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800386c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	4603      	mov	r3, r0
 8003876:	460a      	mov	r2, r1
 8003878:	80fb      	strh	r3, [r7, #6]
 800387a:	4613      	mov	r3, r2
 800387c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8003882:	2300      	movs	r3, #0
 8003884:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8003886:	4b27      	ldr	r3, [pc, #156]	@ (8003924 <EE_VerifyPageFullWriteVariable+0xb8>)
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	4b27      	ldr	r3, [pc, #156]	@ (8003928 <EE_VerifyPageFullWriteVariable+0xbc>)
 800388c:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800388e:	2001      	movs	r0, #1
 8003890:	f7ff ffa6 	bl	80037e0 <EE_FindValidPage>
 8003894:	4603      	mov	r3, r0
 8003896:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8003898:	8a3b      	ldrh	r3, [r7, #16]
 800389a:	2bab      	cmp	r3, #171	@ 0xab
 800389c:	d101      	bne.n	80038a2 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800389e:	23ab      	movs	r3, #171	@ 0xab
 80038a0:	e03a      	b.n	8003918 <EE_VerifyPageFullWriteVariable+0xac>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80038a2:	8a3b      	ldrh	r3, [r7, #16]
 80038a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80038a8:	045b      	lsls	r3, r3, #17
 80038aa:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 80038ac:	8a3b      	ldrh	r3, [r7, #16]
 80038ae:	3301      	adds	r3, #1
 80038b0:	045a      	lsls	r2, r3, #17
 80038b2:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <EE_VerifyPageFullWriteVariable+0xc0>)
 80038b4:	4413      	add	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 80038b8:	e029      	b.n	800390e <EE_VerifyPageFullWriteVariable+0xa2>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d121      	bne.n	8003908 <EE_VerifyPageFullWriteVariable+0x9c>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 80038c4:	88bb      	ldrh	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	461c      	mov	r4, r3
 80038ca:	4615      	mov	r5, r2
 80038cc:	4622      	mov	r2, r4
 80038ce:	462b      	mov	r3, r5
 80038d0:	6979      	ldr	r1, [r7, #20]
 80038d2:	2001      	movs	r0, #1
 80038d4:	f002 fb00 	bl	8005ed8 <HAL_FLASH_Program>
 80038d8:	4603      	mov	r3, r0
 80038da:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <EE_VerifyPageFullWriteVariable+0x7c>
      {
        return FlashStatus;
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	e017      	b.n	8003918 <EE_VerifyPageFullWriteVariable+0xac>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1c99      	adds	r1, r3, #2
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	2200      	movs	r2, #0
 80038f0:	4698      	mov	r8, r3
 80038f2:	4691      	mov	r9, r2
 80038f4:	4642      	mov	r2, r8
 80038f6:	464b      	mov	r3, r9
 80038f8:	2001      	movs	r0, #1
 80038fa:	f002 faed 	bl	8005ed8 <HAL_FLASH_Program>
 80038fe:	4603      	mov	r3, r0
 8003900:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	b29b      	uxth	r3, r3
 8003906:	e007      	b.n	8003918 <EE_VerifyPageFullWriteVariable+0xac>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3304      	adds	r3, #4
 800390c:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	429a      	cmp	r2, r3
 8003914:	d3d1      	bcc.n	80038ba <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8003916:	2380      	movs	r3, #128	@ 0x80
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003922:	bf00      	nop
 8003924:	080c0000 	.word	0x080c0000
 8003928:	080e0000 	.word	0x080e0000
 800392c:	080bffff 	.word	0x080bffff

08003930 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	@ 0x30
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	460a      	mov	r2, r1
 800393a:	80fb      	strh	r3, [r7, #6]
 800393c:	4613      	mov	r3, r2
 800393e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8003946:	4b54      	ldr	r3, [pc, #336]	@ (8003a98 <EE_PageTransfer+0x168>)
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 800394a:	2300      	movs	r3, #0
 800394c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003952:	2300      	movs	r3, #0
 8003954:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	847b      	strh	r3, [r7, #34]	@ 0x22
 800395a:	2300      	movs	r3, #0
 800395c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8003962:	2000      	movs	r0, #0
 8003964:	f7ff ff3c 	bl	80037e0 <EE_FindValidPage>
 8003968:	4603      	mov	r3, r0
 800396a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 800396c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800396e:	2b01      	cmp	r3, #1
 8003970:	d104      	bne.n	800397c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8003972:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <EE_PageTransfer+0x168>)
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8003976:	230b      	movs	r3, #11
 8003978:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800397a:	e009      	b.n	8003990 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800397c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8003982:	4b46      	ldr	r3, [pc, #280]	@ (8003a9c <EE_PageTransfer+0x16c>)
 8003984:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8003986:	230a      	movs	r3, #10
 8003988:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800398a:	e001      	b.n	8003990 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800398c:	23ab      	movs	r3, #171	@ 0xab
 800398e:	e07e      	b.n	8003a8e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8003990:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800399a:	2001      	movs	r0, #1
 800399c:	f002 fa9c 	bl	8005ed8 <HAL_FLASH_Program>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80039a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 80039ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	e06b      	b.n	8003a8e <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80039b6:	88ba      	ldrh	r2, [r7, #4]
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff55 	bl	800386c <EE_VerifyPageFullWriteVariable>
 80039c2:	4603      	mov	r3, r0
 80039c4:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80039c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 80039cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80039ce:	e05e      	b.n	8003a8e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80039d4:	e027      	b.n	8003a26 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80039d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80039d8:	4a31      	ldr	r2, [pc, #196]	@ (8003aa0 <EE_PageTransfer+0x170>)
 80039da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d01d      	beq.n	8003a20 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80039e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80039e6:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa0 <EE_PageTransfer+0x170>)
 80039e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039ec:	492d      	ldr	r1, [pc, #180]	@ (8003aa4 <EE_PageTransfer+0x174>)
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fe3a 	bl	8003668 <EE_ReadVariable>
 80039f4:	4603      	mov	r3, r0
 80039f6:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 80039f8:	8c3b      	ldrh	r3, [r7, #32]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d010      	beq.n	8003a20 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80039fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <EE_PageTransfer+0x170>)
 8003a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a06:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <EE_PageTransfer+0x174>)
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff2d 	bl	800386c <EE_VerifyPageFullWriteVariable>
 8003a12:	4603      	mov	r3, r0
 8003a14:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8003a16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8003a1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003a1e:	e036      	b.n	8003a8e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8003a20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003a22:	3301      	adds	r3, #1
 8003a24:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003a26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003a28:	2b1f      	cmp	r3, #31
 8003a2a:	d9d4      	bls.n	80039d6 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8003a30:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003a32:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8003a34:	2301      	movs	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8003a3c:	f107 021c 	add.w	r2, r7, #28
 8003a40:	f107 0308 	add.w	r3, r7, #8
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 fbfc 	bl	8006244 <HAL_FLASHEx_Erase>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8003a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8003a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	e015      	b.n	8003a8e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f002 fa33 	bl	8005ed8 <HAL_FLASH_Program>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8003a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	e002      	b.n	8003a8e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8003a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a8c:	b29b      	uxth	r3, r3
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3730      	adds	r7, #48	@ 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	080c0000 	.word	0x080c0000
 8003a9c:	080e0000 	.word	0x080e0000
 8003aa0:	200008e8 	.word	0x200008e8
 8003aa4:	2000020c 	.word	0x2000020c

08003aa8 <map>:
void actoin_set(cJSON *obj, uint8_t save);
void actoin_resp_all_set(void);
void actoin_resp_status(void);

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	ed87 0a05 	vstr	s0, [r7, #20]
 8003ab2:	edc7 0a04 	vstr	s1, [r7, #16]
 8003ab6:	ed87 1a03 	vstr	s2, [r7, #12]
 8003aba:	edc7 1a02 	vstr	s3, [r7, #8]
 8003abe:	ed87 2a01 	vstr	s4, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ace:	edd7 6a01 	vldr	s13, [r7, #4]
 8003ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ad6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ada:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003ade:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ae2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003af2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003af6:	eeb0 0a67 	vmov.f32	s0, s15
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b14:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4a06      	ldr	r2, [pc, #24]	@ (8003b34 <vApplicationGetIdleTaskMemory+0x30>)
 8003b1a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2280      	movs	r2, #128	@ 0x80
 8003b20:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	2000063c 	.word	0x2000063c
 8003b34:	200006dc 	.word	0x200006dc

08003b38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b096      	sub	sp, #88	@ 0x58
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of ID */
  osMutexDef(ID);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b42:	2300      	movs	r3, #0
 8003b44:	657b      	str	r3, [r7, #84]	@ 0x54
  IDHandle = osMutexCreate(osMutex(ID));
 8003b46:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f005 fd35 	bl	80095ba <osMutexCreate>
 8003b50:	4603      	mov	r3, r0
 8003b52:	4a23      	ldr	r2, [pc, #140]	@ (8003be0 <MX_FREERTOS_Init+0xa8>)
 8003b54:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of eepromSem */
  osSemaphoreDef(eepromSem);
 8003b56:	2300      	movs	r3, #0
 8003b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  eepromSemHandle = osSemaphoreCreate(osSemaphore(eepromSem), 1);
 8003b5e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 fd40 	bl	80095ea <osSemaphoreCreate>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <MX_FREERTOS_Init+0xac>)
 8003b6e:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of rxDataUART2 */
  osMessageQDef(rxDataUART2, 16, uint16_t);
 8003b70:	4b1d      	ldr	r3, [pc, #116]	@ (8003be8 <MX_FREERTOS_Init+0xb0>)
 8003b72:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8003b76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  rxDataUART2Handle = osMessageCreate(osMessageQ(rxDataUART2), NULL);
 8003b7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f005 fd63 	bl	800964e <osMessageCreate>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <MX_FREERTOS_Init+0xb4>)
 8003b8c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MainTask */
  osThreadDef(MainTask, mainTask, osPriorityNormal, 0, 512);
 8003b8e:	4b18      	ldr	r3, [pc, #96]	@ (8003bf0 <MX_FREERTOS_Init+0xb8>)
 8003b90:	f107 041c 	add.w	r4, r7, #28
 8003b94:	461d      	mov	r5, r3
 8003b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8003ba2:	f107 031c 	add.w	r3, r7, #28
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f005 fca6 	bl	80094fa <osThreadCreate>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4a10      	ldr	r2, [pc, #64]	@ (8003bf4 <MX_FREERTOS_Init+0xbc>)
 8003bb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of SettingsTask */
  osThreadDef(SettingsTask, settingsTask, osPriorityNormal, 0, 1024);
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <MX_FREERTOS_Init+0xc0>)
 8003bb6:	463c      	mov	r4, r7
 8003bb8:	461d      	mov	r5, r3
 8003bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SettingsTaskHandle = osThreadCreate(osThread(SettingsTask), NULL);
 8003bc6:	463b      	mov	r3, r7
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f005 fc95 	bl	80094fa <osThreadCreate>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <MX_FREERTOS_Init+0xc4>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003bd6:	bf00      	nop
 8003bd8:	3758      	adds	r7, #88	@ 0x58
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000634 	.word	0x20000634
 8003be4:	20000638 	.word	0x20000638
 8003be8:	0800f5c4 	.word	0x0800f5c4
 8003bec:	20000630 	.word	0x20000630
 8003bf0:	0800f5e0 	.word	0x0800f5e0
 8003bf4:	20000628 	.word	0x20000628
 8003bf8:	0800f60c 	.word	0x0800f60c
 8003bfc:	2000062c 	.word	0x2000062c

08003c00 <mainTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_mainTask */
void mainTask(void const * argument)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN mainTask */


	oldTime = HAL_GetTick();
 8003c08:	f001 fbd8 	bl	80053bc <HAL_GetTick>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4a35      	ldr	r2, [pc, #212]	@ (8003ce4 <mainTask+0xe4>)
 8003c10:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2102      	movs	r1, #2
 8003c16:	4834      	ldr	r0, [pc, #208]	@ (8003ce8 <mainTask+0xe8>)
 8003c18:	f002 fece 	bl	80069b8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim13);
 8003c1c:	4833      	ldr	r0, [pc, #204]	@ (8003cec <mainTask+0xec>)
 8003c1e:	f003 fbf1 	bl	8007404 <HAL_TIM_Base_Start>

	//get_ROMid();
	/* Infinite loop */
	for (;;) {
		// чтение температуры по таймауту
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003c22:	2201      	movs	r2, #1
 8003c24:	2180      	movs	r1, #128	@ 0x80
 8003c26:	4832      	ldr	r0, [pc, #200]	@ (8003cf0 <mainTask+0xf0>)
 8003c28:	f002 fec6 	bl	80069b8 <HAL_GPIO_WritePin>
		//get_Temperature();
		  DS18B20_SampleTemp();               // Convert (Sample) Temperature Now
 8003c2c:	f000 fbe6 	bl	80043fc <DS18B20_SampleTemp>
		  osDelay(800);
 8003c30:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8003c34:	f005 fcad 	bl	8009592 <osDelay>
		  Temp[0] = DS18B20_ReadTemp();  // Read The Conversion Result Temperature Value
 8003c38:	f000 fbec 	bl	8004414 <DS18B20_ReadTemp>
 8003c3c:	eef0 7a40 	vmov.f32	s15, s0
 8003c40:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf4 <mainTask+0xf4>)
 8003c42:	edc3 7a00 	vstr	s15, [r3]
		  current_temp = Temp[0];
 8003c46:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <mainTask+0xf4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf8 <mainTask+0xf8>)
 8003c4c:	6013      	str	r3, [r2, #0]
		if (Temp[0] < termo_set.setTEMP) {
 8003c4e:	4b29      	ldr	r3, [pc, #164]	@ (8003cf4 <mainTask+0xf4>)
 8003c50:	ed93 7a00 	vldr	s14, [r3]
 8003c54:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <mainTask+0xfc>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c62:	d504      	bpl.n	8003c6e <mainTask+0x6e>
			//Temperature = 0;
			delay_dimm_us = 11000;
 8003c64:	4b26      	ldr	r3, [pc, #152]	@ (8003d00 <mainTask+0x100>)
 8003c66:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e02f      	b.n	8003cce <mainTask+0xce>
		} else if (Temp[0] > termo_set.maxTemp) {
 8003c6e:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <mainTask+0xf4>)
 8003c70:	ed93 7a00 	vldr	s14, [r3]
 8003c74:	4b21      	ldr	r3, [pc, #132]	@ (8003cfc <mainTask+0xfc>)
 8003c76:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	dd07      	ble.n	8003c94 <mainTask+0x94>
			Temp[0] = termo_set.maxTemp;
 8003c84:	4b1d      	ldr	r3, [pc, #116]	@ (8003cfc <mainTask+0xfc>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf4 <mainTask+0xf4>)
 8003c8a:	6013      	str	r3, [r2, #0]
			delay_dimm_us = 1;
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <mainTask+0x100>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e01c      	b.n	8003cce <mainTask+0xce>
		} else {
			// управление симистором
			delay_dimm_us = (uint32_t) map(Temp[0], termo_set.setTEMP, termo_set.maxTemp, FAN_START, 1);
 8003c94:	4b17      	ldr	r3, [pc, #92]	@ (8003cf4 <mainTask+0xf4>)
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <mainTask+0xfc>)
 8003c9c:	ed93 7a00 	vldr	s14, [r3]
 8003ca0:	4b16      	ldr	r3, [pc, #88]	@ (8003cfc <mainTask+0xfc>)
 8003ca2:	edd3 6a01 	vldr	s13, [r3, #4]
 8003ca6:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 8003caa:	eddf 1a16 	vldr	s3, [pc, #88]	@ 8003d04 <mainTask+0x104>
 8003cae:	eeb0 1a66 	vmov.f32	s2, s13
 8003cb2:	eef0 0a47 	vmov.f32	s1, s14
 8003cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cba:	f7ff fef5 	bl	8003aa8 <map>
 8003cbe:	eef0 7a40 	vmov.f32	s15, s0
 8003cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc6:	ee17 2a90 	vmov	r2, s15
 8003cca:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <mainTask+0x100>)
 8003ccc:	601a      	str	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2180      	movs	r1, #128	@ 0x80
 8003cd2:	4807      	ldr	r0, [pc, #28]	@ (8003cf0 <mainTask+0xf0>)
 8003cd4:	f002 fe70 	bl	80069b8 <HAL_GPIO_WritePin>
		osDelay(300);
 8003cd8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003cdc:	f005 fc59 	bl	8009592 <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003ce0:	e79f      	b.n	8003c22 <mainTask+0x22>
 8003ce2:	bf00      	nop
 8003ce4:	2000021c 	.word	0x2000021c
 8003ce8:	40020400 	.word	0x40020400
 8003cec:	200029bc 	.word	0x200029bc
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	20000210 	.word	0x20000210
 8003cf8:	20000214 	.word	0x20000214
 8003cfc:	200008dc 	.word	0x200008dc
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	45dac000 	.word	0x45dac000

08003d08 <settingsTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_settingsTask */
void settingsTask(void const * argument)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08c      	sub	sp, #48	@ 0x30
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN settingsTask */
	//HAL_UART_Receive_DMA(&huart2, UART2_rx, UART2_RX_LENGTH);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, UART2_rx, UART2_RX_LENGTH);
 8003d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d14:	4948      	ldr	r1, [pc, #288]	@ (8003e38 <settingsTask+0x130>)
 8003d16:	4849      	ldr	r0, [pc, #292]	@ (8003e3c <settingsTask+0x134>)
 8003d18:	f004 f88d 	bl	8007e36 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003d1c:	4b48      	ldr	r3, [pc, #288]	@ (8003e40 <settingsTask+0x138>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b47      	ldr	r3, [pc, #284]	@ (8003e40 <settingsTask+0x138>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0208 	bic.w	r2, r2, #8
 8003d2a:	601a      	str	r2, [r3, #0]
	//__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_TC);
	/* Infinite loop */
	for (;;) {
		// ожидать собщение
		osMessageGet(rxDataUART2Handle, osWaitForever);
 8003d2c:	4b45      	ldr	r3, [pc, #276]	@ (8003e44 <settingsTask+0x13c>)
 8003d2e:	6819      	ldr	r1, [r3, #0]
 8003d30:	463b      	mov	r3, r7
 8003d32:	f04f 32ff 	mov.w	r2, #4294967295
 8003d36:	4618      	mov	r0, r3
 8003d38:	f005 fcf2 	bl	8009720 <osMessageGet>
		//uint32_t message_len = strlen((char*) message_rx);
		//HAL_UART_Transmit(&huart2, message_rx, message_len, HAL_MAX_DELAY);

		// парсим  json
		cJSON *json = cJSON_Parse((char*) message_rx);
 8003d3c:	4842      	ldr	r0, [pc, #264]	@ (8003e48 <settingsTask+0x140>)
 8003d3e:	f7fe fa3b 	bl	80021b8 <cJSON_Parse>
 8003d42:	62b8      	str	r0, [r7, #40]	@ 0x28
		if (json != NULL) {
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d06e      	beq.n	8003e28 <settingsTask+0x120>

			cJSON *id = cJSON_GetObjectItemCaseSensitive(json, "id");
 8003d4a:	4940      	ldr	r1, [pc, #256]	@ (8003e4c <settingsTask+0x144>)
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d4e:	f7ff f867 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d52:	6278      	str	r0, [r7, #36]	@ 0x24
			//cJSON *name_device = cJSON_GetObjectItemCaseSensitive(json, "name_device");
			cJSON *type_data = cJSON_GetObjectItemCaseSensitive(json, "type_data");
 8003d54:	493e      	ldr	r1, [pc, #248]	@ (8003e50 <settingsTask+0x148>)
 8003d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d58:	f7ff f862 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d5c:	6238      	str	r0, [r7, #32]
			cJSON *save_settings = cJSON_GetObjectItemCaseSensitive(json, "save_settings");
 8003d5e:	493d      	ldr	r1, [pc, #244]	@ (8003e54 <settingsTask+0x14c>)
 8003d60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d62:	f7ff f85d 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d66:	61f8      	str	r0, [r7, #28]
			cJSON *obj = cJSON_GetObjectItemCaseSensitive(json, "obj");
 8003d68:	493b      	ldr	r1, [pc, #236]	@ (8003e58 <settingsTask+0x150>)
 8003d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d6c:	f7ff f858 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003d70:	61b8      	str	r0, [r7, #24]

			if (cJSON_IsNumber(id) && cJSON_GetNumberValue(id) == ID_CTRL) {
 8003d72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d74:	f7ff fa01 	bl	800317a <cJSON_IsNumber>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d04b      	beq.n	8003e16 <settingsTask+0x10e>
 8003d7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d80:	f7fd f940 	bl	8001004 <cJSON_GetNumberValue>
 8003d84:	ec51 0b10 	vmov	r0, r1, d0
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	4b33      	ldr	r3, [pc, #204]	@ (8003e5c <settingsTask+0x154>)
 8003d8e:	f7fc feab 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03e      	beq.n	8003e16 <settingsTask+0x10e>
				uint8_t save_set = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (cJSON_IsTrue(save_settings)) {
 8003d9e:	69f8      	ldr	r0, [r7, #28]
 8003da0:	f7ff f9d4 	bl	800314c <cJSON_IsTrue>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <settingsTask+0xaa>
					save_set = 1;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003db0:	e002      	b.n	8003db8 <settingsTask+0xb0>
				} else {
					save_set = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				}

				if (cJSON_IsNumber(type_data)) {
 8003db8:	6a38      	ldr	r0, [r7, #32]
 8003dba:	f7ff f9de 	bl	800317a <cJSON_IsNumber>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02c      	beq.n	8003e1e <settingsTask+0x116>
					switch (type_data->valueint) {
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d81e      	bhi.n	8003e0c <settingsTask+0x104>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <settingsTask+0xcc>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003df3 	.word	0x08003df3
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e07 	.word	0x08003e07
					case 1: // ip settings
						actoin_set(obj, save_set);
 8003de4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003de8:	4619      	mov	r1, r3
 8003dea:	69b8      	ldr	r0, [r7, #24]
 8003dec:	f000 f890 	bl	8003f10 <actoin_set>
						break;
 8003df0:	e010      	b.n	8003e14 <settingsTask+0x10c>
					case 2: // motor settings
						actoin_motor_set(obj, save_set);
 8003df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003df6:	4619      	mov	r1, r3
 8003df8:	69b8      	ldr	r0, [r7, #24]
 8003dfa:	f000 f87d 	bl	8003ef8 <actoin_motor_set>
						break;
 8003dfe:	e009      	b.n	8003e14 <settingsTask+0x10c>
					case 3:
						actoin_resp_all_set();
 8003e00:	f000 f904 	bl	800400c <actoin_resp_all_set>
						break;
 8003e04:	e006      	b.n	8003e14 <settingsTask+0x10c>
					case 4:
						actoin_resp_status();
 8003e06:	f000 f90b 	bl	8004020 <actoin_resp_status>
						break;
 8003e0a:	e003      	b.n	8003e14 <settingsTask+0x10c>
					default:
						STM_LOG("data type not registered");
 8003e0c:	4814      	ldr	r0, [pc, #80]	@ (8003e60 <settingsTask+0x158>)
 8003e0e:	f000 fcf5 	bl	80047fc <STM_LOG>
						break;
 8003e12:	bf00      	nop
			if (cJSON_IsNumber(id) && cJSON_GetNumberValue(id) == ID_CTRL) {
 8003e14:	e003      	b.n	8003e1e <settingsTask+0x116>
					}
				}
			} else {
				STM_LOG("id not valid");
 8003e16:	4813      	ldr	r0, [pc, #76]	@ (8003e64 <settingsTask+0x15c>)
 8003e18:	f000 fcf0 	bl	80047fc <STM_LOG>
 8003e1c:	e000      	b.n	8003e20 <settingsTask+0x118>
			if (cJSON_IsNumber(id) && cJSON_GetNumberValue(id) == ID_CTRL) {
 8003e1e:	bf00      	nop
			}

			cJSON_Delete(json);
 8003e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e22:	f7fd f9b5 	bl	8001190 <cJSON_Delete>
 8003e26:	e002      	b.n	8003e2e <settingsTask+0x126>
		} else {
			STM_LOG("Invalid JSON");
 8003e28:	480f      	ldr	r0, [pc, #60]	@ (8003e68 <settingsTask+0x160>)
 8003e2a:	f000 fce7 	bl	80047fc <STM_LOG>
		}

		osDelay(1);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f005 fbaf 	bl	8009592 <osDelay>
	for (;;) {
 8003e34:	e77a      	b.n	8003d2c <settingsTask+0x24>
 8003e36:	bf00      	nop
 8003e38:	20000420 	.word	0x20000420
 8003e3c:	20002a94 	.word	0x20002a94
 8003e40:	20002b9c 	.word	0x20002b9c
 8003e44:	20000630 	.word	0x20000630
 8003e48:	20000220 	.word	0x20000220
 8003e4c:	0800f628 	.word	0x0800f628
 8003e50:	0800f62c 	.word	0x0800f62c
 8003e54:	0800f638 	.word	0x0800f638
 8003e58:	0800f648 	.word	0x0800f648
 8003e5c:	40080000 	.word	0x40080000
 8003e60:	0800f64c 	.word	0x0800f64c
 8003e64:	0800f668 	.word	0x0800f668
 8003e68:	0800f678 	.word	0x0800f678

08003e6c <HAL_GPIO_EXTI_Callback>:
  /* USER CODE END settingsTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Zc_INT_Pin) {
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7c:	d12a      	bne.n	8003ed4 <HAL_GPIO_EXTI_Callback+0x68>
		HAL_GPIO_TogglePin(B2_GPIO_Port, B2_Pin);
 8003e7e:	2180      	movs	r1, #128	@ 0x80
 8003e80:	4817      	ldr	r0, [pc, #92]	@ (8003ee0 <HAL_GPIO_EXTI_Callback+0x74>)
 8003e82:	f002 fdb2 	bl	80069ea <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Stop_IT(&htim14);
 8003e86:	4817      	ldr	r0, [pc, #92]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x78>)
 8003e88:	f003 fb94 	bl	80075b4 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_AUTORELOAD(&htim14, delay_dimm_us); // таймар на открытие симистора
 8003e8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x78>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a15      	ldr	r2, [pc, #84]	@ (8003ee8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003e96:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x78>)
 8003e9c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8003e9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x78>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_RESET);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	4810      	ldr	r0, [pc, #64]	@ (8003eec <HAL_GPIO_EXTI_Callback+0x80>)
 8003eac:	f002 fd84 	bl	80069b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_RESET);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2140      	movs	r1, #64	@ 0x40
 8003eb4:	480a      	ldr	r0, [pc, #40]	@ (8003ee0 <HAL_GPIO_EXTI_Callback+0x74>)
 8003eb6:	f002 fd7f 	bl	80069b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ec0:	480b      	ldr	r0, [pc, #44]	@ (8003ef0 <HAL_GPIO_EXTI_Callback+0x84>)
 8003ec2:	f002 fd79 	bl	80069b8 <HAL_GPIO_WritePin>
		flag_pulse_Start = 0;
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <HAL_GPIO_EXTI_Callback+0x88>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14); // запуск таймара на открытие симистора
 8003ecc:	4805      	ldr	r0, [pc, #20]	@ (8003ee4 <HAL_GPIO_EXTI_Callback+0x78>)
 8003ece:	f003 fb01 	bl	80074d4 <HAL_TIM_Base_Start_IT>
	} else {
		__NOP();
	}
}
 8003ed2:	e000      	b.n	8003ed6 <HAL_GPIO_EXTI_Callback+0x6a>
		__NOP();
 8003ed4:	bf00      	nop
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40020000 	.word	0x40020000
 8003ee4:	20002a04 	.word	0x20002a04
 8003ee8:	2000000c 	.word	0x2000000c
 8003eec:	40020400 	.word	0x40020400
 8003ef0:	40020800 	.word	0x40020800
 8003ef4:	20000218 	.word	0x20000218

08003ef8 <actoin_motor_set>:

void actoin_motor_set(cJSON *obj, uint8_t save) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	70fb      	strb	r3, [r7, #3]


}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <actoin_set>:

void actoin_set(cJSON *obj, uint8_t save) {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	70fb      	strb	r3, [r7, #3]

	cJSON *j_SET_TEMP = cJSON_GetObjectItemCaseSensitive(obj, "set_temp");
 8003f1c:	4936      	ldr	r1, [pc, #216]	@ (8003ff8 <actoin_set+0xe8>)
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fe ff7e 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003f24:	6178      	str	r0, [r7, #20]
	cJSON *j_MAX_TEMP = cJSON_GetObjectItemCaseSensitive(obj, "max_temp");
 8003f26:	4935      	ldr	r1, [pc, #212]	@ (8003ffc <actoin_set+0xec>)
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fe ff79 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003f2e:	6138      	str	r0, [r7, #16]
	cJSON *j_STEP_TEMP = cJSON_GetObjectItemCaseSensitive(obj, "step_temp");
 8003f30:	4933      	ldr	r1, [pc, #204]	@ (8004000 <actoin_set+0xf0>)
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe ff74 	bl	8002e20 <cJSON_GetObjectItemCaseSensitive>
 8003f38:	60f8      	str	r0, [r7, #12]

	if((j_SET_TEMP != NULL) && cJSON_IsNumber(j_SET_TEMP))
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d011      	beq.n	8003f64 <actoin_set+0x54>
 8003f40:	6978      	ldr	r0, [r7, #20]
 8003f42:	f7ff f91a 	bl	800317a <cJSON_IsNumber>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <actoin_set+0x54>
	{
		termo_set.setTEMP = (float)cJSON_GetNumberValue(j_SET_TEMP);
 8003f4c:	6978      	ldr	r0, [r7, #20]
 8003f4e:	f7fd f859 	bl	8001004 <cJSON_GetNumberValue>
 8003f52:	ec53 2b10 	vmov	r2, r3, d0
 8003f56:	4610      	mov	r0, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f7fc fe55 	bl	8000c08 <__aeabi_d2f>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4a28      	ldr	r2, [pc, #160]	@ (8004004 <actoin_set+0xf4>)
 8003f62:	6013      	str	r3, [r2, #0]
	}
	if((j_MAX_TEMP != NULL) && cJSON_IsNumber(j_MAX_TEMP))
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <actoin_set+0x7e>
 8003f6a:	6938      	ldr	r0, [r7, #16]
 8003f6c:	f7ff f905 	bl	800317a <cJSON_IsNumber>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <actoin_set+0x7e>
	{
		termo_set.maxTemp = (float)cJSON_GetNumberValue(j_MAX_TEMP);
 8003f76:	6938      	ldr	r0, [r7, #16]
 8003f78:	f7fd f844 	bl	8001004 <cJSON_GetNumberValue>
 8003f7c:	ec53 2b10 	vmov	r2, r3, d0
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	f7fc fe40 	bl	8000c08 <__aeabi_d2f>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <actoin_set+0xf4>)
 8003f8c:	6053      	str	r3, [r2, #4]
	}
	if((j_STEP_TEMP != NULL) && cJSON_IsNumber(j_STEP_TEMP))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d011      	beq.n	8003fb8 <actoin_set+0xa8>
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff f8f0 	bl	800317a <cJSON_IsNumber>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00b      	beq.n	8003fb8 <actoin_set+0xa8>
	{
		termo_set.stepTemp = (float)cJSON_GetNumberValue(j_STEP_TEMP);
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7fd f82f 	bl	8001004 <cJSON_GetNumberValue>
 8003fa6:	ec53 2b10 	vmov	r2, r3, d0
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	f7fc fe2b 	bl	8000c08 <__aeabi_d2f>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4a13      	ldr	r2, [pc, #76]	@ (8004004 <actoin_set+0xf4>)
 8003fb6:	6093      	str	r3, [r2, #8]
	}

	HAL_StatusTypeDef ret;
	HAL_FLASH_Unlock();
 8003fb8:	f001 ffe2 	bl	8005f80 <HAL_FLASH_Unlock>
	ret = eeprom_write(termo_set);
 8003fbc:	4b11      	ldr	r3, [pc, #68]	@ (8004004 <actoin_set+0xf4>)
 8003fbe:	edd3 6a00 	vldr	s13, [r3]
 8003fc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003fc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fca:	eeb0 0a66 	vmov.f32	s0, s13
 8003fce:	eef0 0a47 	vmov.f32	s1, s14
 8003fd2:	eeb0 1a67 	vmov.f32	s2, s15
 8003fd6:	f000 fc89 	bl	80048ec <eeprom_write>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	72fb      	strb	r3, [r7, #11]
	if (ret != HAL_OK) {
 8003fde:	7afb      	ldrb	r3, [r7, #11]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <actoin_set+0xda>
		STM_LOG("Fail write settings");
 8003fe4:	4808      	ldr	r0, [pc, #32]	@ (8004008 <actoin_set+0xf8>)
 8003fe6:	f000 fc09 	bl	80047fc <STM_LOG>
	}
	HAL_FLASH_Lock();
 8003fea:	f001 ffeb 	bl	8005fc4 <HAL_FLASH_Lock>
}
 8003fee:	bf00      	nop
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	0800f688 	.word	0x0800f688
 8003ffc:	0800f694 	.word	0x0800f694
 8004000:	0800f6a0 	.word	0x0800f6a0
 8004004:	200008dc 	.word	0x200008dc
 8004008:	0800f6ac 	.word	0x0800f6ac

0800400c <actoin_resp_all_set>:

void actoin_resp_all_set() {
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0

}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	0000      	movs	r0, r0
 800401c:	0000      	movs	r0, r0
	...

08004020 <actoin_resp_status>:

void actoin_resp_status() {
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
	//STM_LOG("actoin_resp_status()");
	cJSON *j_all_settings_obj = cJSON_CreateObject();
 8004026:	f7ff f87d 	bl	8003124 <cJSON_CreateObject>
 800402a:	60f8      	str	r0, [r7, #12]
	cJSON *j_to_host = cJSON_CreateObject();
 800402c:	f7ff f87a 	bl	8003124 <cJSON_CreateObject>
 8004030:	60b8      	str	r0, [r7, #8]

	cJSON_AddNumberToObject(j_to_host, "id", ID_CTRL);
 8004032:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 80040d0 <actoin_resp_status+0xb0>
 8004036:	492a      	ldr	r1, [pc, #168]	@ (80040e0 <actoin_resp_status+0xc0>)
 8004038:	68b8      	ldr	r0, [r7, #8]
 800403a:	f7fe ffbd 	bl	8002fb8 <cJSON_AddNumberToObject>
	cJSON_AddStringToObject(j_to_host, "name_device", NAME);
 800403e:	4a29      	ldr	r2, [pc, #164]	@ (80040e4 <actoin_resp_status+0xc4>)
 8004040:	4929      	ldr	r1, [pc, #164]	@ (80040e8 <actoin_resp_status+0xc8>)
 8004042:	68b8      	ldr	r0, [r7, #8]
 8004044:	f7fe ffdc 	bl	8003000 <cJSON_AddStringToObject>
	cJSON_AddNumberToObject(j_to_host, "type_data", 4);
 8004048:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 80040d8 <actoin_resp_status+0xb8>
 800404c:	4927      	ldr	r1, [pc, #156]	@ (80040ec <actoin_resp_status+0xcc>)
 800404e:	68b8      	ldr	r0, [r7, #8]
 8004050:	f7fe ffb2 	bl	8002fb8 <cJSON_AddNumberToObject>

	cJSON_AddNumberToObject(j_all_settings_obj, "set_temp", (double)termo_set.setTEMP);
 8004054:	4b26      	ldr	r3, [pc, #152]	@ (80040f0 <actoin_resp_status+0xd0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc fa85 	bl	8000568 <__aeabi_f2d>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	ec43 2b10 	vmov	d0, r2, r3
 8004066:	4923      	ldr	r1, [pc, #140]	@ (80040f4 <actoin_resp_status+0xd4>)
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7fe ffa5 	bl	8002fb8 <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(j_all_settings_obj, "max_temp", (double)termo_set.maxTemp);
 800406e:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <actoin_resp_status+0xd0>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fc fa78 	bl	8000568 <__aeabi_f2d>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	ec43 2b10 	vmov	d0, r2, r3
 8004080:	491d      	ldr	r1, [pc, #116]	@ (80040f8 <actoin_resp_status+0xd8>)
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7fe ff98 	bl	8002fb8 <cJSON_AddNumberToObject>
	cJSON_AddNumberToObject(j_all_settings_obj, "step_temp", (double)termo_set.stepTemp);
 8004088:	4b19      	ldr	r3, [pc, #100]	@ (80040f0 <actoin_resp_status+0xd0>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc fa6b 	bl	8000568 <__aeabi_f2d>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	ec43 2b10 	vmov	d0, r2, r3
 800409a:	4918      	ldr	r1, [pc, #96]	@ (80040fc <actoin_resp_status+0xdc>)
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7fe ff8b 	bl	8002fb8 <cJSON_AddNumberToObject>
	//cJSON_AddNumberToObject(j_all_settings_obj, "current", (double)(current_temp));

	cJSON_AddItemToObject(j_to_host, "obj", j_all_settings_obj);
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4916      	ldr	r1, [pc, #88]	@ (8004100 <actoin_resp_status+0xe0>)
 80040a6:	68b8      	ldr	r0, [r7, #8]
 80040a8:	f7fe ff70 	bl	8002f8c <cJSON_AddItemToObject>

	char *str_to_host = cJSON_Print(j_to_host);
 80040ac:	68b8      	ldr	r0, [r7, #8]
 80040ae:	f7fe f91b 	bl	80022e8 <cJSON_Print>
 80040b2:	6078      	str	r0, [r7, #4]
	//string out = str_to_host;
	//out += '\r';

	//HAL_UART_Transmit(&huart2, (uint8_t*)out.c_str(), out.size(), HAL_MAX_DELAY);
	STM_LOG("%s", str_to_host);
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4813      	ldr	r0, [pc, #76]	@ (8004104 <actoin_resp_status+0xe4>)
 80040b8:	f000 fba0 	bl	80047fc <STM_LOG>

	cJSON_free(str_to_host);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff f873 	bl	80031a8 <cJSON_free>
	cJSON_Delete(j_to_host);
 80040c2:	68b8      	ldr	r0, [r7, #8]
 80040c4:	f7fd f864 	bl	8001190 <cJSON_Delete>
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	00000000 	.word	0x00000000
 80040d4:	40080000 	.word	0x40080000
 80040d8:	00000000 	.word	0x00000000
 80040dc:	40100000 	.word	0x40100000
 80040e0:	0800f628 	.word	0x0800f628
 80040e4:	0800f6c0 	.word	0x0800f6c0
 80040e8:	0800f6c8 	.word	0x0800f6c8
 80040ec:	0800f62c 	.word	0x0800f62c
 80040f0:	200008dc 	.word	0x200008dc
 80040f4:	0800f688 	.word	0x0800f688
 80040f8:	0800f694 	.word	0x0800f694
 80040fc:	0800f6a0 	.word	0x0800f6a0
 8004100:	0800f648 	.word	0x0800f648
 8004104:	0800f6d4 	.word	0x0800f6d4

08004108 <HAL_UARTEx_RxEventCallback>:

/******************************************************************************************************
 Handlers
 ******************************************************************************************************/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a4b      	ldr	r2, [pc, #300]	@ (8004248 <HAL_UARTEx_RxEventCallback+0x140>)
 800411a:	4293      	cmp	r3, r2
 800411c:	f040 808f 	bne.w	800423e <HAL_UARTEx_RxEventCallback+0x136>

		while ( __HAL_UART_GET_FLAG(huart, UART_FLAG_TC) != SET) {
 8004120:	bf00      	nop
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b40      	cmp	r3, #64	@ 0x40
 800412e:	d1f8      	bne.n	8004122 <HAL_UARTEx_RxEventCallback+0x1a>
		};

		uint16_t Size_Data = Size - Start_index;
 8004130:	4b46      	ldr	r3, [pc, #280]	@ (800424c <HAL_UARTEx_RxEventCallback+0x144>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	887a      	ldrh	r2, [r7, #2]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	81fb      	strh	r3, [r7, #14]

		HAL_UART_RxEventTypeTypeDef rxEventType;
		rxEventType = HAL_UARTEx_GetRxEventType(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f003 fed8 	bl	8007ef0 <HAL_UARTEx_GetRxEventType>
 8004140:	60b8      	str	r0, [r7, #8]
		switch (rxEventType) {
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d009      	beq.n	800415c <HAL_UARTEx_RxEventCallback+0x54>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d864      	bhi.n	8004218 <HAL_UARTEx_RxEventCallback+0x110>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d048      	beq.n	80041e6 <HAL_UARTEx_RxEventCallback+0xde>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d062      	beq.n	8004220 <HAL_UARTEx_RxEventCallback+0x118>
 800415a:	e05d      	b.n	8004218 <HAL_UARTEx_RxEventCallback+0x110>
		case HAL_UART_RXEVENT_IDLE:
			//STM_LOG( "IDLE. Size:%d sd:%d sti:%d", Size, Size_Data, Start_index);
			// копировать с индекса сообщения
			memcpy(&message_rx[indx_message_rx], &UART2_rx[Start_index],
 800415c:	4b3c      	ldr	r3, [pc, #240]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	4b3c      	ldr	r3, [pc, #240]	@ (8004254 <HAL_UARTEx_RxEventCallback+0x14c>)
 8004164:	4413      	add	r3, r2
 8004166:	4a39      	ldr	r2, [pc, #228]	@ (800424c <HAL_UARTEx_RxEventCallback+0x144>)
 8004168:	8812      	ldrh	r2, [r2, #0]
 800416a:	4611      	mov	r1, r2
 800416c:	4a3a      	ldr	r2, [pc, #232]	@ (8004258 <HAL_UARTEx_RxEventCallback+0x150>)
 800416e:	4411      	add	r1, r2
 8004170:	89fa      	ldrh	r2, [r7, #14]
 8004172:	4618      	mov	r0, r3
 8004174:	f008 fe71 	bl	800ce5a <memcpy>
					Size_Data);

			//|| (message_rx[indx_message_rx + Size_Data - 1] == '\n')
			if ((message_rx[indx_message_rx + Size_Data - 1] == '\r')
 8004178:	4b35      	ldr	r3, [pc, #212]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	89fb      	ldrh	r3, [r7, #14]
 8004180:	4413      	add	r3, r2
 8004182:	3b01      	subs	r3, #1
 8004184:	4a33      	ldr	r2, [pc, #204]	@ (8004254 <HAL_UARTEx_RxEventCallback+0x14c>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	2b0d      	cmp	r3, #13
 800418a:	d009      	beq.n	80041a0 <HAL_UARTEx_RxEventCallback+0x98>
					|| (message_rx[indx_message_rx + Size_Data - 1] == 0)) {
 800418c:	4b30      	ldr	r3, [pc, #192]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	89fb      	ldrh	r3, [r7, #14]
 8004194:	4413      	add	r3, r2
 8004196:	3b01      	subs	r3, #1
 8004198:	4a2e      	ldr	r2, [pc, #184]	@ (8004254 <HAL_UARTEx_RxEventCallback+0x14c>)
 800419a:	5cd3      	ldrb	r3, [r2, r3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d117      	bne.n	80041d0 <HAL_UARTEx_RxEventCallback+0xc8>
				message_rx[indx_message_rx + Size_Data] = 0;
 80041a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	89fb      	ldrh	r3, [r7, #14]
 80041a8:	4413      	add	r3, r2
 80041aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004254 <HAL_UARTEx_RxEventCallback+0x14c>)
 80041ac:	2100      	movs	r1, #0
 80041ae:	54d1      	strb	r1, [r2, r3]
				// выдать сигнал
				osMessagePut(rxDataUART2Handle, (uint32_t) indx_message_rx, 0);
 80041b0:	4b2a      	ldr	r3, [pc, #168]	@ (800425c <HAL_UARTEx_RxEventCallback+0x154>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a26      	ldr	r2, [pc, #152]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 80041b6:	8812      	ldrh	r2, [r2, #0]
 80041b8:	4611      	mov	r1, r2
 80041ba:	2200      	movs	r2, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 fa6f 	bl	80096a0 <osMessagePut>
				Size_message = 0;
 80041c2:	4b27      	ldr	r3, [pc, #156]	@ (8004260 <HAL_UARTEx_RxEventCallback+0x158>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	801a      	strh	r2, [r3, #0]
				// обнулить индекс сообщения
				indx_message_rx = 0;
 80041c8:	4b21      	ldr	r3, [pc, #132]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e006      	b.n	80041de <HAL_UARTEx_RxEventCallback+0xd6>
			} else {
				indx_message_rx += Size_Data;
 80041d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	89fb      	ldrh	r3, [r7, #14]
 80041d6:	4413      	add	r3, r2
 80041d8:	b29a      	uxth	r2, r3
 80041da:	4b1d      	ldr	r3, [pc, #116]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 80041dc:	801a      	strh	r2, [r3, #0]
			}

			Start_index = Size;
 80041de:	4a1b      	ldr	r2, [pc, #108]	@ (800424c <HAL_UARTEx_RxEventCallback+0x144>)
 80041e0:	887b      	ldrh	r3, [r7, #2]
 80041e2:	8013      	strh	r3, [r2, #0]

			//STM_LOG( "\n" );
			break;
 80041e4:	e01d      	b.n	8004222 <HAL_UARTEx_RxEventCallback+0x11a>
			break;

		case HAL_UART_RXEVENT_TC:
			//STM_LOG( "TC Size:%d sd:%d sti:%d", Size, Size_Data, Start_index);
			// скопировать в начало буфера
			memcpy(&message_rx[indx_message_rx], &UART2_rx[Start_index],
 80041e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_UARTEx_RxEventCallback+0x14c>)
 80041ee:	4413      	add	r3, r2
 80041f0:	4a16      	ldr	r2, [pc, #88]	@ (800424c <HAL_UARTEx_RxEventCallback+0x144>)
 80041f2:	8812      	ldrh	r2, [r2, #0]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <HAL_UARTEx_RxEventCallback+0x150>)
 80041f8:	4411      	add	r1, r2
 80041fa:	89fa      	ldrh	r2, [r7, #14]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f008 fe2c 	bl	800ce5a <memcpy>
					Size_Data);
			// сохронить индекс сообщения
			indx_message_rx += Size_Data;
 8004202:	4b13      	ldr	r3, [pc, #76]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 8004204:	881a      	ldrh	r2, [r3, #0]
 8004206:	89fb      	ldrh	r3, [r7, #14]
 8004208:	4413      	add	r3, r2
 800420a:	b29a      	uxth	r2, r3
 800420c:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <HAL_UARTEx_RxEventCallback+0x148>)
 800420e:	801a      	strh	r2, [r3, #0]
			Start_index = 0;
 8004210:	4b0e      	ldr	r3, [pc, #56]	@ (800424c <HAL_UARTEx_RxEventCallback+0x144>)
 8004212:	2200      	movs	r2, #0
 8004214:	801a      	strh	r2, [r3, #0]
			break;
 8004216:	e004      	b.n	8004222 <HAL_UARTEx_RxEventCallback+0x11a>

		default:
			STM_LOG("???");
 8004218:	4812      	ldr	r0, [pc, #72]	@ (8004264 <HAL_UARTEx_RxEventCallback+0x15c>)
 800421a:	f000 faef 	bl	80047fc <STM_LOG>
			break;
 800421e:	e000      	b.n	8004222 <HAL_UARTEx_RxEventCallback+0x11a>
			break;
 8004220:	bf00      	nop
		}

		HAL_UARTEx_ReceiveToIdle_DMA(huart, UART2_rx, UART2_RX_LENGTH);
 8004222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004226:	490c      	ldr	r1, [pc, #48]	@ (8004258 <HAL_UARTEx_RxEventCallback+0x150>)
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f003 fe04 	bl	8007e36 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800422e:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <HAL_UARTEx_RxEventCallback+0x160>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <HAL_UARTEx_RxEventCallback+0x160>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0208 	bic.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]
		//usart_rx_check(Size);
	}

}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40004400 	.word	0x40004400
 800424c:	20000624 	.word	0x20000624
 8004250:	20000620 	.word	0x20000620
 8004254:	20000220 	.word	0x20000220
 8004258:	20000420 	.word	0x20000420
 800425c:	20000630 	.word	0x20000630
 8004260:	20000622 	.word	0x20000622
 8004264:	0800f6d8 	.word	0x0800f6d8
 8004268:	20002b9c 	.word	0x20002b9c

0800426c <OW_toByte>:

//-----------------------------------------------------------------------------
// обратное преобразование - из того, что получено через USART опять собирается байт
// ow_bits - ссылка на буфер, размером не менее 8 байт
//-----------------------------------------------------------------------------
uint8_t OW_toByte(uint8_t *ow_bits) {
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	uint8_t ow_byte, i;
	ow_byte = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < 8; i++) {
 8004278:	2300      	movs	r3, #0
 800427a:	73bb      	strb	r3, [r7, #14]
 800427c:	e010      	b.n	80042a0 <OW_toByte+0x34>
		ow_byte = ow_byte >> 1;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
		if (*ow_bits == OW_R_1) {
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2bff      	cmp	r3, #255	@ 0xff
 800428a:	d103      	bne.n	8004294 <OW_toByte+0x28>
			ow_byte |= 0x80;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004292:	73fb      	strb	r3, [r7, #15]
		}
		ow_bits++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3301      	adds	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++) {
 800429a:	7bbb      	ldrb	r3, [r7, #14]
 800429c:	3301      	adds	r3, #1
 800429e:	73bb      	strb	r3, [r7, #14]
 80042a0:	7bbb      	ldrb	r3, [r7, #14]
 80042a2:	2b07      	cmp	r3, #7
 80042a4:	d9eb      	bls.n	800427e <OW_toByte+0x12>
	}

	return ow_byte;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <DS18B20_Init>:

static uint8_t DS18B20_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
	uint8_t ResetByte = 0xF0, PresenceByte;
 80042ba:	23f0      	movs	r3, #240	@ 0xf0
 80042bc:	71fb      	strb	r3, [r7, #7]
	//LL_USART_SetBaudRate(huart1.Instance, HAL_RCC_GetPCLK2Freq(), 9600);
	DS18B20_usart_setup(9600);
 80042be:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80042c2:	f000 f8d5 	bl	8004470 <DS18B20_usart_setup>
	// Send reset pulse (0xF0)
	HAL_UART_Transmit(&huart1, &ResetByte, 1, 1);
 80042c6:	1df9      	adds	r1, r7, #7
 80042c8:	2301      	movs	r3, #1
 80042ca:	2201      	movs	r2, #1
 80042cc:	480b      	ldr	r0, [pc, #44]	@ (80042fc <DS18B20_Init+0x48>)
 80042ce:	f003 fbfb 	bl	8007ac8 <HAL_UART_Transmit>
	// Wait for the presence pulse
	HAL_UART_Receive(&huart1, &PresenceByte, 1, 1);
 80042d2:	1db9      	adds	r1, r7, #6
 80042d4:	2301      	movs	r3, #1
 80042d6:	2201      	movs	r2, #1
 80042d8:	4808      	ldr	r0, [pc, #32]	@ (80042fc <DS18B20_Init+0x48>)
 80042da:	f003 fc80 	bl	8007bde <HAL_UART_Receive>
	//LL_USART_SetBaudRate(huart1.Instance, HAL_RCC_GetPCLK2Freq(), 115200);
	DS18B20_usart_setup(115200);
 80042de:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80042e2:	f000 f8c5 	bl	8004470 <DS18B20_usart_setup>
	// Check presence pulse
	if (PresenceByte != ResetByte){
 80042e6:	79ba      	ldrb	r2, [r7, #6]
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d001      	beq.n	80042f2 <DS18B20_Init+0x3e>
		return 1; // Presence pulse detected
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <DS18B20_Init+0x40>
	}
	else{
		return 0; // No presence pulse detected
 80042f2:	2300      	movs	r3, #0
	}
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20002a4c 	.word	0x20002a4c

08004300 <DS18B20_ReadByte>:

    return (RxBit & 0x01);
}*/

static uint8_t DS18B20_ReadByte(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
	// Буфер для приема/передачи по 1-wire
	uint8_t TxBuffer[8];
	uint8_t RxBuffer[8];
    for (int i=0; i<8; i++)
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	e008      	b.n	800431e <DS18B20_ReadByte+0x1e>
    {
		TxBuffer[i] = 0xFF;
 800430c:	f107 0208 	add.w	r2, r7, #8
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	4413      	add	r3, r2
 8004314:	22ff      	movs	r2, #255	@ 0xff
 8004316:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<8; i++)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	3301      	adds	r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b07      	cmp	r3, #7
 8004322:	ddf3      	ble.n	800430c <DS18B20_ReadByte+0xc>
    }

	uint8_t RxByte = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	74fb      	strb	r3, [r7, #19]
		{
			RxByte |= 0x80;
		}
	}*/

    HAL_UART_Receive_DMA(&huart1, RxBuffer, 8);
 8004328:	463b      	mov	r3, r7
 800432a:	2208      	movs	r2, #8
 800432c:	4619      	mov	r1, r3
 800432e:	480f      	ldr	r0, [pc, #60]	@ (800436c <DS18B20_ReadByte+0x6c>)
 8004330:	f003 fd5c 	bl	8007dec <HAL_UART_Receive_DMA>
    HAL_UART_Transmit(&huart1, TxBuffer, 8, 10);
 8004334:	f107 0108 	add.w	r1, r7, #8
 8004338:	230a      	movs	r3, #10
 800433a:	2208      	movs	r2, #8
 800433c:	480b      	ldr	r0, [pc, #44]	@ (800436c <DS18B20_ReadByte+0x6c>)
 800433e:	f003 fbc3 	bl	8007ac8 <HAL_UART_Transmit>

	while (HAL_DMA_STATE_READY != HAL_DMA_GetState(&hdma_usart1_rx)) {
 8004342:	e002      	b.n	800434a <DS18B20_ReadByte+0x4a>
		osDelay(1);
 8004344:	2001      	movs	r0, #1
 8004346:	f005 f924 	bl	8009592 <osDelay>
	while (HAL_DMA_STATE_READY != HAL_DMA_GetState(&hdma_usart1_rx)) {
 800434a:	4809      	ldr	r0, [pc, #36]	@ (8004370 <DS18B20_ReadByte+0x70>)
 800434c:	f001 fcd6 	bl	8005cfc <HAL_DMA_GetState>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d1f6      	bne.n	8004344 <DS18B20_ReadByte+0x44>
	}

	//HAL_UART_DMAStop(&huart1);

	RxByte = OW_toByte(RxBuffer);
 8004356:	463b      	mov	r3, r7
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff87 	bl	800426c <OW_toByte>
 800435e:	4603      	mov	r3, r0
 8004360:	74fb      	strb	r3, [r7, #19]

	return RxByte;
 8004362:	7cfb      	ldrb	r3, [r7, #19]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20002a4c 	.word	0x20002a4c
 8004370:	20002adc 	.word	0x20002adc

08004374 <DS18B20_WriteByte>:

static void DS18B20_WriteByte(uint8_t data)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[8];
	uint8_t RxBuffer[8];
    for (int i=0; i<8; i++)
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e017      	b.n	80043b4 <DS18B20_WriteByte+0x40>
    {
	  if ((data & (1<<i)) != 0){
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	fa42 f303 	asr.w	r3, r2, r3
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <DS18B20_WriteByte+0x2e>
		  TxBuffer[i] = 0xFF;
 8004394:	f107 0214 	add.w	r2, r7, #20
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	22ff      	movs	r2, #255	@ 0xff
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e005      	b.n	80043ae <DS18B20_WriteByte+0x3a>
	  }
	  else{
		  TxBuffer[i] = 0;
 80043a2:	f107 0214 	add.w	r2, r7, #20
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<8; i++)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3301      	adds	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b07      	cmp	r3, #7
 80043b8:	dde4      	ble.n	8004384 <DS18B20_WriteByte+0x10>
	  }
    }
    //HAL_UART_Transmit(&huart1, TxBuffer, 8, 10);

    HAL_UART_Receive_DMA(&huart1, RxBuffer, 8);
 80043ba:	f107 030c 	add.w	r3, r7, #12
 80043be:	2208      	movs	r2, #8
 80043c0:	4619      	mov	r1, r3
 80043c2:	480c      	ldr	r0, [pc, #48]	@ (80043f4 <DS18B20_WriteByte+0x80>)
 80043c4:	f003 fd12 	bl	8007dec <HAL_UART_Receive_DMA>
    HAL_UART_Transmit(&huart1, TxBuffer, 8, 10);
 80043c8:	f107 0114 	add.w	r1, r7, #20
 80043cc:	230a      	movs	r3, #10
 80043ce:	2208      	movs	r2, #8
 80043d0:	4808      	ldr	r0, [pc, #32]	@ (80043f4 <DS18B20_WriteByte+0x80>)
 80043d2:	f003 fb79 	bl	8007ac8 <HAL_UART_Transmit>
	while (HAL_DMA_STATE_READY != HAL_DMA_GetState(&hdma_usart1_rx)) {
 80043d6:	e002      	b.n	80043de <DS18B20_WriteByte+0x6a>
		osDelay(1);
 80043d8:	2001      	movs	r0, #1
 80043da:	f005 f8da 	bl	8009592 <osDelay>
	while (HAL_DMA_STATE_READY != HAL_DMA_GetState(&hdma_usart1_rx)) {
 80043de:	4806      	ldr	r0, [pc, #24]	@ (80043f8 <DS18B20_WriteByte+0x84>)
 80043e0:	f001 fc8c 	bl	8005cfc <HAL_DMA_GetState>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d1f6      	bne.n	80043d8 <DS18B20_WriteByte+0x64>
	}

	//HAL_UART_DMAStop(&huart1);
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20002a4c 	.word	0x20002a4c
 80043f8:	20002adc 	.word	0x20002adc

080043fc <DS18B20_SampleTemp>:

void DS18B20_SampleTemp(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
	DS18B20_Init();
 8004400:	f7ff ff58 	bl	80042b4 <DS18B20_Init>
	DS18B20_WriteByte(0xCC);  // Skip ROM   (ROM-CMD)
 8004404:	20cc      	movs	r0, #204	@ 0xcc
 8004406:	f7ff ffb5 	bl	8004374 <DS18B20_WriteByte>
	DS18B20_WriteByte(0x44);  // Convert T  (F-CMD)
 800440a:	2044      	movs	r0, #68	@ 0x44
 800440c:	f7ff ffb2 	bl	8004374 <DS18B20_WriteByte>
}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}

08004414 <DS18B20_ReadTemp>:

float DS18B20_ReadTemp(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
	uint8_t Temp_LSB, Temp_MSB;
	uint16_t Temp;
	float Temperature;

	DS18B20_Init();
 800441a:	f7ff ff4b 	bl	80042b4 <DS18B20_Init>
	DS18B20_WriteByte(0xCC);  // Skip ROM         (ROM-CMD)
 800441e:	20cc      	movs	r0, #204	@ 0xcc
 8004420:	f7ff ffa8 	bl	8004374 <DS18B20_WriteByte>
	DS18B20_WriteByte(0xBE);  // Read Scratchpad  (F-CMD)
 8004424:	20be      	movs	r0, #190	@ 0xbe
 8004426:	f7ff ffa5 	bl	8004374 <DS18B20_WriteByte>
	Temp_LSB = DS18B20_ReadByte();
 800442a:	f7ff ff69 	bl	8004300 <DS18B20_ReadByte>
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
	Temp_MSB = DS18B20_ReadByte();
 8004432:	f7ff ff65 	bl	8004300 <DS18B20_ReadByte>
 8004436:	4603      	mov	r3, r0
 8004438:	71bb      	strb	r3, [r7, #6]
	Temp = ((Temp_MSB<<8))|Temp_LSB;
 800443a:	79bb      	ldrb	r3, [r7, #6]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	b21a      	sxth	r2, r3
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	b21b      	sxth	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b21b      	sxth	r3, r3
 8004448:	80bb      	strh	r3, [r7, #4]
	Temperature = (float)Temp/16.0;
 800444a:	88bb      	ldrh	r3, [r7, #4]
 800444c:	ee07 3a90 	vmov	s15, r3
 8004450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004454:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800445c:	edc7 7a00 	vstr	s15, [r7]

	return Temperature;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	ee07 3a90 	vmov	s15, r3
}
 8004466:	eeb0 0a67 	vmov.f32	s0, s15
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <DS18B20_usart_setup>:

void DS18B20_usart_setup(uint32_t baud) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

	huart1.Instance = USART1;
 8004478:	4b18      	ldr	r3, [pc, #96]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 800447a:	4a19      	ldr	r2, [pc, #100]	@ (80044e0 <DS18B20_usart_setup+0x70>)
 800447c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = baud;
 800447e:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6053      	str	r3, [r2, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004484:	4b15      	ldr	r3, [pc, #84]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800448a:	4b14      	ldr	r3, [pc, #80]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 800448c:	2200      	movs	r2, #0
 800448e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004490:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004496:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 8004498:	220c      	movs	r2, #12
 800449a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800449c:	4b0f      	ldr	r3, [pc, #60]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 800449e:	2200      	movs	r2, #0
 80044a0:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	61da      	str	r2, [r3, #28]

	HAL_UART_Abort_IT(&huart1);
 80044a8:	480c      	ldr	r0, [pc, #48]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 80044aa:	f003 fd2d 	bl	8007f08 <HAL_UART_Abort_IT>
	HAL_UART_DeInit(&huart1);
 80044ae:	480b      	ldr	r0, [pc, #44]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 80044b0:	f003 fad8 	bl	8007a64 <HAL_UART_DeInit>
	if (HAL_UART_Init(&huart1) != HAL_OK) //HAL_UART_Init
 80044b4:	4809      	ldr	r0, [pc, #36]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 80044b6:	f003 fa85 	bl	80079c4 <HAL_UART_Init>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d000      	beq.n	80044c2 <DS18B20_usart_setup+0x52>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80044c0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4b04      	ldr	r3, [pc, #16]	@ (80044dc <DS18B20_usart_setup+0x6c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0220 	orr.w	r2, r2, #32
 80044d0:	60da      	str	r2, [r3, #12]
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20002a4c 	.word	0x20002a4c
 80044e0:	40011000 	.word	0x40011000

080044e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	4b3e      	ldr	r3, [pc, #248]	@ (80045f8 <MX_GPIO_Init+0x114>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	4a3d      	ldr	r2, [pc, #244]	@ (80045f8 <MX_GPIO_Init+0x114>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6313      	str	r3, [r2, #48]	@ 0x30
 800450a:	4b3b      	ldr	r3, [pc, #236]	@ (80045f8 <MX_GPIO_Init+0x114>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	607b      	str	r3, [r7, #4]
 800451a:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <MX_GPIO_Init+0x114>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	4a36      	ldr	r2, [pc, #216]	@ (80045f8 <MX_GPIO_Init+0x114>)
 8004520:	f043 0302 	orr.w	r3, r3, #2
 8004524:	6313      	str	r3, [r2, #48]	@ 0x30
 8004526:	4b34      	ldr	r3, [pc, #208]	@ (80045f8 <MX_GPIO_Init+0x114>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	603b      	str	r3, [r7, #0]
 8004536:	4b30      	ldr	r3, [pc, #192]	@ (80045f8 <MX_GPIO_Init+0x114>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	4a2f      	ldr	r2, [pc, #188]	@ (80045f8 <MX_GPIO_Init+0x114>)
 800453c:	f043 0304 	orr.w	r3, r3, #4
 8004540:	6313      	str	r3, [r2, #48]	@ 0x30
 8004542:	4b2d      	ldr	r3, [pc, #180]	@ (80045f8 <MX_GPIO_Init+0x114>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B1_Pin|B2_Pin, GPIO_PIN_RESET);
 800454e:	2200      	movs	r2, #0
 8004550:	21c0      	movs	r1, #192	@ 0xc0
 8004552:	482a      	ldr	r0, [pc, #168]	@ (80045fc <MX_GPIO_Init+0x118>)
 8004554:	f002 fa30 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_RESET);
 8004558:	2200      	movs	r2, #0
 800455a:	2102      	movs	r1, #2
 800455c:	4828      	ldr	r0, [pc, #160]	@ (8004600 <MX_GPIO_Init+0x11c>)
 800455e:	f002 fa2b 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED1_Pin, GPIO_PIN_RESET);
 8004562:	2200      	movs	r2, #0
 8004564:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8004568:	4826      	ldr	r0, [pc, #152]	@ (8004604 <MX_GPIO_Init+0x120>)
 800456a:	f002 fa25 	bl	80069b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800456e:	23c0      	movs	r3, #192	@ 0xc0
 8004570:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004572:	2301      	movs	r3, #1
 8004574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457e:	f107 030c 	add.w	r3, r7, #12
 8004582:	4619      	mov	r1, r3
 8004584:	481d      	ldr	r0, [pc, #116]	@ (80045fc <MX_GPIO_Init+0x118>)
 8004586:	f001 ff7f 	bl	8006488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTR_Pin;
 800458a:	2302      	movs	r3, #2
 800458c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800458e:	2301      	movs	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CTR_GPIO_Port, &GPIO_InitStruct);
 800459a:	f107 030c 	add.w	r3, r7, #12
 800459e:	4619      	mov	r1, r3
 80045a0:	4817      	ldr	r0, [pc, #92]	@ (8004600 <MX_GPIO_Init+0x11c>)
 80045a2:	f001 ff71 	bl	8006488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Zc_INT_Pin;
 80045a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80045b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Zc_INT_GPIO_Port, &GPIO_InitStruct);
 80045b6:	f107 030c 	add.w	r3, r7, #12
 80045ba:	4619      	mov	r1, r3
 80045bc:	4810      	ldr	r0, [pc, #64]	@ (8004600 <MX_GPIO_Init+0x11c>)
 80045be:	f001 ff63 	bl	8006488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin;
 80045c2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80045c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c8:	2301      	movs	r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	4619      	mov	r1, r3
 80045da:	480a      	ldr	r0, [pc, #40]	@ (8004604 <MX_GPIO_Init+0x120>)
 80045dc:	f001 ff54 	bl	8006488 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80045e0:	2200      	movs	r2, #0
 80045e2:	2105      	movs	r1, #5
 80045e4:	2028      	movs	r0, #40	@ 0x28
 80045e6:	f000 ffd1 	bl	800558c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80045ea:	2028      	movs	r0, #40	@ 0x28
 80045ec:	f000 ffea 	bl	80055c4 <HAL_NVIC_EnableIRQ>

}
 80045f0:	bf00      	nop
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800

08004608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800460e:	f000 fe9f 	bl	8005350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004612:	f000 f889 	bl	8004728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004616:	f7ff ff65 	bl	80044e4 <MX_GPIO_Init>
  MX_DMA_Init();
 800461a:	f7fe fdd5 	bl	80031c8 <MX_DMA_Init>
  MX_TIM13_Init();
 800461e:	f000 fbd5 	bl	8004dcc <MX_TIM13_Init>
  MX_TIM14_Init();
 8004622:	f000 fbf7 	bl	8004e14 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8004626:	f000 fc57 	bl	8004ed8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800462a:	f000 fc7f 	bl	8004f2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	STM_LOG("start dimmer");
 800462e:	4834      	ldr	r0, [pc, #208]	@ (8004700 <main+0xf8>)
 8004630:	f000 f8e4 	bl	80047fc <STM_LOG>

	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 8004634:	f001 fca4 	bl	8005f80 <HAL_FLASH_Unlock>
	/* EEPROM Init */
	STM_LOG("eeprom init start");
 8004638:	4832      	ldr	r0, [pc, #200]	@ (8004704 <main+0xfc>)
 800463a:	f000 f8df 	bl	80047fc <STM_LOG>
	if (EE_Init() != EE_OK) {
 800463e:	f7fe fe09 	bl	8003254 <EE_Init>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <main+0x48>
		STM_LOG("eeprom init fault");
 8004648:	482f      	ldr	r0, [pc, #188]	@ (8004708 <main+0x100>)
 800464a:	f000 f8d7 	bl	80047fc <STM_LOG>
 800464e:	e04f      	b.n	80046f0 <main+0xe8>
	} else {
		// Fill EEPROM variables addresses
		for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 8004650:	4b2e      	ldr	r3, [pc, #184]	@ (800470c <main+0x104>)
 8004652:	2201      	movs	r2, #1
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	e00d      	b.n	8004674 <main+0x6c>
			VirtAddVarTab[VarIndex - 1] = VarIndex;
 8004658:	4b2c      	ldr	r3, [pc, #176]	@ (800470c <main+0x104>)
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	4a2b      	ldr	r2, [pc, #172]	@ (800470c <main+0x104>)
 8004660:	8811      	ldrh	r1, [r2, #0]
 8004662:	4a2b      	ldr	r2, [pc, #172]	@ (8004710 <main+0x108>)
 8004664:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 8004668:	4b28      	ldr	r3, [pc, #160]	@ (800470c <main+0x104>)
 800466a:	881b      	ldrh	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	4b26      	ldr	r3, [pc, #152]	@ (800470c <main+0x104>)
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	4b25      	ldr	r3, [pc, #148]	@ (800470c <main+0x104>)
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	2b20      	cmp	r3, #32
 800467a:	d9ed      	bls.n	8004658 <main+0x50>
		}

		HAL_StatusTypeDef ret;
		ret = eeprom_read(&termo_set);
 800467c:	4825      	ldr	r0, [pc, #148]	@ (8004714 <main+0x10c>)
 800467e:	f000 f8f5 	bl	800486c <eeprom_read>
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]
		if (ret != HAL_OK) {
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d031      	beq.n	80046f0 <main+0xe8>
			STM_LOG("var  not foud in eeprom. wtite default");
 800468c:	4822      	ldr	r0, [pc, #136]	@ (8004718 <main+0x110>)
 800468e:	f000 f8b5 	bl	80047fc <STM_LOG>
			termo_set.setTEMP = SETTEMP;
 8004692:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <main+0x10c>)
 8004694:	4a21      	ldr	r2, [pc, #132]	@ (800471c <main+0x114>)
 8004696:	601a      	str	r2, [r3, #0]
			termo_set.maxTemp = MAXTEMP;
 8004698:	4b1e      	ldr	r3, [pc, #120]	@ (8004714 <main+0x10c>)
 800469a:	4a21      	ldr	r2, [pc, #132]	@ (8004720 <main+0x118>)
 800469c:	605a      	str	r2, [r3, #4]
			termo_set.stepTemp = STEPTEMP;
 800469e:	4b1d      	ldr	r3, [pc, #116]	@ (8004714 <main+0x10c>)
 80046a0:	4a20      	ldr	r2, [pc, #128]	@ (8004724 <main+0x11c>)
 80046a2:	609a      	str	r2, [r3, #8]

			ret = eeprom_write(termo_set);
 80046a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <main+0x10c>)
 80046a6:	edd3 6a00 	vldr	s13, [r3]
 80046aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80046ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80046b2:	eeb0 0a66 	vmov.f32	s0, s13
 80046b6:	eef0 0a47 	vmov.f32	s1, s14
 80046ba:	eeb0 1a67 	vmov.f32	s2, s15
 80046be:	f000 f915 	bl	80048ec <eeprom_write>
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
			if (ret != HAL_OK) {
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <main+0xca>
				eeprom_read(&termo_set);
 80046cc:	4811      	ldr	r0, [pc, #68]	@ (8004714 <main+0x10c>)
 80046ce:	f000 f8cd 	bl	800486c <eeprom_read>
			}
			termo_set.setTEMP = 0;
 80046d2:	4b10      	ldr	r3, [pc, #64]	@ (8004714 <main+0x10c>)
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
			termo_set.maxTemp = 0;
 80046da:	4b0e      	ldr	r3, [pc, #56]	@ (8004714 <main+0x10c>)
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	605a      	str	r2, [r3, #4]
			termo_set.stepTemp = 0;
 80046e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <main+0x10c>)
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	609a      	str	r2, [r3, #8]
			eeprom_read(&termo_set);
 80046ea:	480a      	ldr	r0, [pc, #40]	@ (8004714 <main+0x10c>)
 80046ec:	f000 f8be 	bl	800486c <eeprom_read>

		}

	}
	HAL_FLASH_Lock();
 80046f0:	f001 fc68 	bl	8005fc4 <HAL_FLASH_Lock>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80046f4:	f7ff fa20 	bl	8003b38 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80046f8:	f004 fef8 	bl	80094ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <main+0xf4>
 8004700:	0800f6dc 	.word	0x0800f6dc
 8004704:	0800f6ec 	.word	0x0800f6ec
 8004708:	0800f700 	.word	0x0800f700
 800470c:	20000968 	.word	0x20000968
 8004710:	200008e8 	.word	0x200008e8
 8004714:	200008dc 	.word	0x200008dc
 8004718:	0800f714 	.word	0x0800f714
 800471c:	41f00000 	.word	0x41f00000
 8004720:	42340000 	.word	0x42340000
 8004724:	41700000 	.word	0x41700000

08004728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b094      	sub	sp, #80	@ 0x50
 800472c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800472e:	f107 0320 	add.w	r3, r7, #32
 8004732:	2230      	movs	r2, #48	@ 0x30
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f008 fa9c 	bl	800cc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	605a      	str	r2, [r3, #4]
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	60da      	str	r2, [r3, #12]
 800474a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	4b28      	ldr	r3, [pc, #160]	@ (80047f4 <SystemClock_Config+0xcc>)
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	4a27      	ldr	r2, [pc, #156]	@ (80047f4 <SystemClock_Config+0xcc>)
 8004756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800475a:	6413      	str	r3, [r2, #64]	@ 0x40
 800475c:	4b25      	ldr	r3, [pc, #148]	@ (80047f4 <SystemClock_Config+0xcc>)
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004768:	2300      	movs	r3, #0
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	4b22      	ldr	r3, [pc, #136]	@ (80047f8 <SystemClock_Config+0xd0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a21      	ldr	r2, [pc, #132]	@ (80047f8 <SystemClock_Config+0xd0>)
 8004772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b1f      	ldr	r3, [pc, #124]	@ (80047f8 <SystemClock_Config+0xd0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004784:	2302      	movs	r3, #2
 8004786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004788:	2301      	movs	r3, #1
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800478c:	2310      	movs	r3, #16
 800478e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004790:	2302      	movs	r3, #2
 8004792:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004794:	2300      	movs	r3, #0
 8004796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004798:	2308      	movs	r3, #8
 800479a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800479c:	23a8      	movs	r3, #168	@ 0xa8
 800479e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047a0:	2302      	movs	r3, #2
 80047a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80047a4:	2304      	movs	r3, #4
 80047a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047a8:	f107 0320 	add.w	r3, r7, #32
 80047ac:	4618      	mov	r0, r3
 80047ae:	f002 f94f 	bl	8006a50 <HAL_RCC_OscConfig>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80047b8:	f000 f918 	bl	80049ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047bc:	230f      	movs	r3, #15
 80047be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047c0:	2302      	movs	r3, #2
 80047c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80047cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	2105      	movs	r1, #5
 80047da:	4618      	mov	r0, r3
 80047dc:	f002 fbb0 	bl	8006f40 <HAL_RCC_ClockConfig>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80047e6:	f000 f901 	bl	80049ec <Error_Handler>
  }
}
 80047ea:	bf00      	nop
 80047ec:	3750      	adds	r7, #80	@ 0x50
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40007000 	.word	0x40007000

080047fc <STM_LOG>:

/* USER CODE BEGIN 4 */
uint8_t log_tx_buffer[LOG_TX_BUF_SIZE + 2];

void STM_LOG(const char *format, ...) {
 80047fc:	b40f      	push	{r0, r1, r2, r3}
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
	while (DBG_PORT.gState != HAL_UART_STATE_READY);
 8004804:	bf00      	nop
 8004806:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <STM_LOG+0x68>)
 8004808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b20      	cmp	r3, #32
 8004810:	d1f9      	bne.n	8004806 <STM_LOG+0xa>

	va_list args;
	int size = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]

	va_start(args, format);
 8004816:	f107 0314 	add.w	r3, r7, #20
 800481a:	603b      	str	r3, [r7, #0]
	//vsprintf((char *)log_tx_buffer, format, args);
	size = vsnprintf((char*) log_tx_buffer, LOG_TX_BUF_SIZE, format, args);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004824:	4810      	ldr	r0, [pc, #64]	@ (8004868 <STM_LOG+0x6c>)
 8004826:	f008 fa17 	bl	800cc58 <vsniprintf>
 800482a:	6078      	str	r0, [r7, #4]
	va_end(args);

	// добавить \r
	log_tx_buffer[size] = '\r';
 800482c:	4a0e      	ldr	r2, [pc, #56]	@ (8004868 <STM_LOG+0x6c>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4413      	add	r3, r2
 8004832:	220d      	movs	r2, #13
 8004834:	701a      	strb	r2, [r3, #0]
	log_tx_buffer[size + 1] = 0;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3301      	adds	r3, #1
 800483a:	4a0b      	ldr	r2, [pc, #44]	@ (8004868 <STM_LOG+0x6c>)
 800483c:	2100      	movs	r1, #0
 800483e:	54d1      	strb	r1, [r2, r3]

	HAL_UART_Transmit_DMA(&DBG_PORT, log_tx_buffer,
			strlen((const char*) log_tx_buffer));
 8004840:	4809      	ldr	r0, [pc, #36]	@ (8004868 <STM_LOG+0x6c>)
 8004842:	f7fb fccf 	bl	80001e4 <strlen>
 8004846:	4603      	mov	r3, r0
	HAL_UART_Transmit_DMA(&DBG_PORT, log_tx_buffer,
 8004848:	b29b      	uxth	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	4906      	ldr	r1, [pc, #24]	@ (8004868 <STM_LOG+0x6c>)
 800484e:	4805      	ldr	r0, [pc, #20]	@ (8004864 <STM_LOG+0x68>)
 8004850:	f003 fa5c 	bl	8007d0c <HAL_UART_Transmit_DMA>
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800485e:	b004      	add	sp, #16
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	20002a94 	.word	0x20002a94
 8004868:	2000096c 	.word	0x2000096c

0800486c <eeprom_read>:

uint16_t eeprom_read(trmo_settings *ts) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	 }
	 }

	 *Data = (*(float*) &arr[start_vIndex]);*/

	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <eeprom_read+0x70>)
 8004876:	2200      	movs	r2, #0
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	e021      	b.n	80048c0 <eeprom_read+0x54>
		ret = EE_ReadVariable(VirtAddVarTab[VarIndex], &VarDataTabRead[VarIndex]);
 800487c:	4b17      	ldr	r3, [pc, #92]	@ (80048dc <eeprom_read+0x70>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	4b17      	ldr	r3, [pc, #92]	@ (80048e0 <eeprom_read+0x74>)
 8004884:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004888:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <eeprom_read+0x70>)
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4915      	ldr	r1, [pc, #84]	@ (80048e4 <eeprom_read+0x78>)
 8004890:	440b      	add	r3, r1
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f7fe fee7 	bl	8003668 <EE_ReadVariable>
 800489a:	4603      	mov	r3, r0
 800489c:	81fb      	strh	r3, [r7, #14]
		if (ret != HAL_OK) {
 800489e:	89fb      	ldrh	r3, [r7, #14]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d007      	beq.n	80048b4 <eeprom_read+0x48>
			STM_LOG("fail write eeprom: vindex %d", VarIndex);
 80048a4:	4b0d      	ldr	r3, [pc, #52]	@ (80048dc <eeprom_read+0x70>)
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	480f      	ldr	r0, [pc, #60]	@ (80048e8 <eeprom_read+0x7c>)
 80048ac:	f7ff ffa6 	bl	80047fc <STM_LOG>
			return ret;
 80048b0:	89fb      	ldrh	r3, [r7, #14]
 80048b2:	e00f      	b.n	80048d4 <eeprom_read+0x68>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <eeprom_read+0x70>)
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	4b07      	ldr	r3, [pc, #28]	@ (80048dc <eeprom_read+0x70>)
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <eeprom_read+0x70>)
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	2b1f      	cmp	r3, #31
 80048c6:	d9d9      	bls.n	800487c <eeprom_read+0x10>
		}
	}

	*ts = (*(trmo_settings*) VarDataTabRead);
 80048c8:	4a06      	ldr	r2, [pc, #24]	@ (80048e4 <eeprom_read+0x78>)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80048ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	return ret;
 80048d2:	89fb      	ldrh	r3, [r7, #14]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000968 	.word	0x20000968
 80048e0:	200008e8 	.word	0x200008e8
 80048e4:	20000928 	.word	0x20000928
 80048e8:	0800f73c 	.word	0x0800f73c

080048ec <eeprom_write>:

uint16_t eeprom_write(trmo_settings ts) {
 80048ec:	b590      	push	{r4, r7, lr}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	eef0 6a40 	vmov.f32	s13, s0
 80048f6:	eeb0 7a60 	vmov.f32	s14, s1
 80048fa:	eef0 7a41 	vmov.f32	s15, s2
 80048fe:	edc7 6a01 	vstr	s13, [r7, #4]
 8004902:	ed87 7a02 	vstr	s14, [r7, #8]
 8004906:	edc7 7a03 	vstr	s15, [r7, #12]
	 return ret;
	 }
	 }*/
	//uint16_t *arr = (uint16_t*)(&ts);
	//VarDataTabRead = (uint16_t*)(&ts);
	memcpy(VarDataTabRead, (uint16_t*)(&ts), sizeof(ts));
 800490a:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <eeprom_write+0x8c>)
 800490c:	461c      	mov	r4, r3
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004914:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8004918:	4b18      	ldr	r3, [pc, #96]	@ (800497c <eeprom_write+0x90>)
 800491a:	2200      	movs	r2, #0
 800491c:	801a      	strh	r2, [r3, #0]
 800491e:	e022      	b.n	8004966 <eeprom_write+0x7a>
		ret = EE_WriteVariable(VirtAddVarTab[VarIndex], VarDataTabRead[VarIndex]);
 8004920:	4b16      	ldr	r3, [pc, #88]	@ (800497c <eeprom_write+0x90>)
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	4b16      	ldr	r3, [pc, #88]	@ (8004980 <eeprom_write+0x94>)
 8004928:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800492c:	4a13      	ldr	r2, [pc, #76]	@ (800497c <eeprom_write+0x90>)
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	4611      	mov	r1, r2
 8004932:	4a11      	ldr	r2, [pc, #68]	@ (8004978 <eeprom_write+0x8c>)
 8004934:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fedc 	bl	80036f8 <EE_WriteVariable>
 8004940:	4603      	mov	r3, r0
 8004942:	82fb      	strh	r3, [r7, #22]
		if (ret != HAL_OK) {
 8004944:	8afb      	ldrh	r3, [r7, #22]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <eeprom_write+0x6e>
			STM_LOG("fail write eeprom: vindex %d", VarIndex);
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <eeprom_write+0x90>)
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	4619      	mov	r1, r3
 8004950:	480c      	ldr	r0, [pc, #48]	@ (8004984 <eeprom_write+0x98>)
 8004952:	f7ff ff53 	bl	80047fc <STM_LOG>
			return ret;
 8004956:	8afb      	ldrh	r3, [r7, #22]
 8004958:	e00a      	b.n	8004970 <eeprom_write+0x84>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <eeprom_write+0x90>)
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	4b06      	ldr	r3, [pc, #24]	@ (800497c <eeprom_write+0x90>)
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	4b05      	ldr	r3, [pc, #20]	@ (800497c <eeprom_write+0x90>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	2b1f      	cmp	r3, #31
 800496c:	d9d8      	bls.n	8004920 <eeprom_write+0x34>
		}
	}
	return ret;
 800496e:	8afb      	ldrh	r3, [r7, #22]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}
 8004978:	20000928 	.word	0x20000928
 800497c:	20000968 	.word	0x20000968
 8004980:	200008e8 	.word	0x200008e8
 8004984:	0800f73c 	.word	0x0800f73c

08004988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a10      	ldr	r2, [pc, #64]	@ (80049d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800499a:	f000 fcfb 	bl	8005394 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == htim14.Instance) {
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d112      	bne.n	80049d0 <HAL_TIM_PeriodElapsedCallback+0x48>
		HAL_TIM_Base_Stop_IT(&htim14);
 80049aa:	480c      	ldr	r0, [pc, #48]	@ (80049dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80049ac:	f002 fe02 	bl	80075b4 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(CTR_GPIO_Port, CTR_Pin, GPIO_PIN_SET);
 80049b0:	2201      	movs	r2, #1
 80049b2:	2102      	movs	r1, #2
 80049b4:	480a      	ldr	r0, [pc, #40]	@ (80049e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80049b6:	f001 ffff 	bl	80069b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, GPIO_PIN_SET);
 80049ba:	2201      	movs	r2, #1
 80049bc:	2140      	movs	r1, #64	@ 0x40
 80049be:	4809      	ldr	r0, [pc, #36]	@ (80049e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80049c0:	f001 fffa 	bl	80069b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80049c4:	2201      	movs	r2, #1
 80049c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80049ca:	4807      	ldr	r0, [pc, #28]	@ (80049e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80049cc:	f001 fff4 	bl	80069b8 <HAL_GPIO_WritePin>
	}
  /* USER CODE END Callback 1 */
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40001800 	.word	0x40001800
 80049dc:	20002a04 	.word	0x20002a04
 80049e0:	40020400 	.word	0x40020400
 80049e4:	40020000 	.word	0x40020000
 80049e8:	40020800 	.word	0x40020800

080049ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049f0:	b672      	cpsid	i
}
 80049f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <Error_Handler+0x8>

080049f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <HAL_MspInit+0x54>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	4a11      	ldr	r2, [pc, #68]	@ (8004a4c <HAL_MspInit+0x54>)
 8004a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a4c <HAL_MspInit+0x54>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <HAL_MspInit+0x54>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	4a0a      	ldr	r2, [pc, #40]	@ (8004a4c <HAL_MspInit+0x54>)
 8004a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a2a:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <HAL_MspInit+0x54>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	210f      	movs	r1, #15
 8004a3a:	f06f 0001 	mvn.w	r0, #1
 8004a3e:	f000 fda5 	bl	800558c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800

08004a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b08e      	sub	sp, #56	@ 0x38
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	4b33      	ldr	r3, [pc, #204]	@ (8004b34 <HAL_InitTick+0xe4>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	4a32      	ldr	r2, [pc, #200]	@ (8004b34 <HAL_InitTick+0xe4>)
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a70:	4b30      	ldr	r3, [pc, #192]	@ (8004b34 <HAL_InitTick+0xe4>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a7c:	f107 0210 	add.w	r2, r7, #16
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4611      	mov	r1, r2
 8004a86:	4618      	mov	r0, r3
 8004a88:	f002 fc3a 	bl	8007300 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM12 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004a96:	f002 fc0b 	bl	80072b0 <HAL_RCC_GetPCLK1Freq>
 8004a9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8004a9c:	e004      	b.n	8004aa8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004a9e:	f002 fc07 	bl	80072b0 <HAL_RCC_GetPCLK1Freq>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aaa:	4a23      	ldr	r2, [pc, #140]	@ (8004b38 <HAL_InitTick+0xe8>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	0c9b      	lsrs	r3, r3, #18
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8004ab6:	4b21      	ldr	r3, [pc, #132]	@ (8004b3c <HAL_InitTick+0xec>)
 8004ab8:	4a21      	ldr	r2, [pc, #132]	@ (8004b40 <HAL_InitTick+0xf0>)
 8004aba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8004abc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b3c <HAL_InitTick+0xec>)
 8004abe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004ac2:	60da      	str	r2, [r3, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <HAL_InitTick+0xec>)
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	6053      	str	r3, [r2, #4]
  htim12.Init.ClockDivision = 0;
 8004aca:	4b1c      	ldr	r3, [pc, #112]	@ (8004b3c <HAL_InitTick+0xec>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <HAL_InitTick+0xec>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	609a      	str	r2, [r3, #8]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ad6:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <HAL_InitTick+0xec>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim12);
 8004adc:	4817      	ldr	r0, [pc, #92]	@ (8004b3c <HAL_InitTick+0xec>)
 8004ade:	f002 fc41 	bl	8007364 <HAL_TIM_Base_Init>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004ae8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11b      	bne.n	8004b28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim12);
 8004af0:	4812      	ldr	r0, [pc, #72]	@ (8004b3c <HAL_InitTick+0xec>)
 8004af2:	f002 fcef 	bl	80074d4 <HAL_TIM_Base_Start_IT>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004afc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d111      	bne.n	8004b28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM12 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004b04:	202b      	movs	r0, #43	@ 0x2b
 8004b06:	f000 fd5d 	bl	80055c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b0f      	cmp	r3, #15
 8004b0e:	d808      	bhi.n	8004b22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority, 0U);
 8004b10:	2200      	movs	r2, #0
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	202b      	movs	r0, #43	@ 0x2b
 8004b16:	f000 fd39 	bl	800558c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b44 <HAL_InitTick+0xf4>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	e002      	b.n	8004b28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004b28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3738      	adds	r7, #56	@ 0x38
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40023800 	.word	0x40023800
 8004b38:	431bde83 	.word	0x431bde83
 8004b3c:	20002970 	.word	0x20002970
 8004b40:	40001800 	.word	0x40001800
 8004b44:	20000014 	.word	0x20000014

08004b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <NMI_Handler+0x4>

08004b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b54:	bf00      	nop
 8004b56:	e7fd      	b.n	8004b54 <HardFault_Handler+0x4>

08004b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <MemManage_Handler+0x4>

08004b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b64:	bf00      	nop
 8004b66:	e7fd      	b.n	8004b64 <BusFault_Handler+0x4>

08004b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <UsageFault_Handler+0x4>

08004b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004b84:	4802      	ldr	r0, [pc, #8]	@ (8004b90 <DMA1_Stream5_IRQHandler+0x10>)
 8004b86:	f000 ff2f 	bl	80059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20002b9c 	.word	0x20002b9c

08004b94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004b98:	4802      	ldr	r0, [pc, #8]	@ (8004ba4 <DMA1_Stream6_IRQHandler+0x10>)
 8004b9a:	f000 ff25 	bl	80059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20002bfc 	.word	0x20002bfc

08004ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004bac:	4802      	ldr	r0, [pc, #8]	@ (8004bb8 <USART2_IRQHandler+0x10>)
 8004bae:	f003 fabf 	bl	8008130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20002a94 	.word	0x20002a94

08004bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Zc_INT_Pin);
 8004bc0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004bc4:	f001 ff2c 	bl	8006a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004bd0:	4802      	ldr	r0, [pc, #8]	@ (8004bdc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8004bd2:	f002 fd1e 	bl	8007612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20002970 	.word	0x20002970

08004be0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004be4:	4802      	ldr	r0, [pc, #8]	@ (8004bf0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004be6:	f002 fd14 	bl	8007612 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20002a04 	.word	0x20002a04

08004bf4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004bf8:	4802      	ldr	r0, [pc, #8]	@ (8004c04 <DMA2_Stream2_IRQHandler+0x10>)
 8004bfa:	f000 fef5 	bl	80059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20002adc 	.word	0x20002adc

08004c08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004c0c:	4802      	ldr	r0, [pc, #8]	@ (8004c18 <DMA2_Stream7_IRQHandler+0x10>)
 8004c0e:	f000 feeb 	bl	80059e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20002b3c 	.word	0x20002b3c

08004c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return 1;
 8004c20:	2301      	movs	r3, #1
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_kill>:

int _kill(int pid, int sig)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c36:	f008 f8e3 	bl	800ce00 <__errno>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2216      	movs	r2, #22
 8004c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8004c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <_exit>:

void _exit (int status)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c54:	f04f 31ff 	mov.w	r1, #4294967295
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff ffe7 	bl	8004c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c5e:	bf00      	nop
 8004c60:	e7fd      	b.n	8004c5e <_exit+0x12>

08004c62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e00a      	b.n	8004c8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004c74:	f3af 8000 	nop.w
 8004c78:	4601      	mov	r1, r0
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	60ba      	str	r2, [r7, #8]
 8004c80:	b2ca      	uxtb	r2, r1
 8004c82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3301      	adds	r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	dbf0      	blt.n	8004c74 <_read+0x12>
  }

  return len;
 8004c92:	687b      	ldr	r3, [r7, #4]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e009      	b.n	8004cc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	60ba      	str	r2, [r7, #8]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	dbf1      	blt.n	8004cae <_write+0x12>
  }
  return len;
 8004cca:	687b      	ldr	r3, [r7, #4]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3718      	adds	r7, #24
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <_close>:

int _close(int file)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004cfc:	605a      	str	r2, [r3, #4]
  return 0;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <_isatty>:

int _isatty(int file)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d14:	2301      	movs	r3, #1
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	60f8      	str	r0, [r7, #12]
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d44:	4a14      	ldr	r2, [pc, #80]	@ (8004d98 <_sbrk+0x5c>)
 8004d46:	4b15      	ldr	r3, [pc, #84]	@ (8004d9c <_sbrk+0x60>)
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d50:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <_sbrk+0x64>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d102      	bne.n	8004d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d58:	4b11      	ldr	r3, [pc, #68]	@ (8004da0 <_sbrk+0x64>)
 8004d5a:	4a12      	ldr	r2, [pc, #72]	@ (8004da4 <_sbrk+0x68>)
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d5e:	4b10      	ldr	r3, [pc, #64]	@ (8004da0 <_sbrk+0x64>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d207      	bcs.n	8004d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d6c:	f008 f848 	bl	800ce00 <__errno>
 8004d70:	4603      	mov	r3, r0
 8004d72:	220c      	movs	r2, #12
 8004d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d76:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7a:	e009      	b.n	8004d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d7c:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <_sbrk+0x64>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d82:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <_sbrk+0x64>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	4a05      	ldr	r2, [pc, #20]	@ (8004da0 <_sbrk+0x64>)
 8004d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20020000 	.word	0x20020000
 8004d9c:	00008000 	.word	0x00008000
 8004da0:	200029b8 	.word	0x200029b8
 8004da4:	20008f20 	.word	0x20008f20

08004da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <SystemInit+0x20>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db2:	4a05      	ldr	r2, [pc, #20]	@ (8004dc8 <SystemInit+0x20>)
 8004db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	e000ed00 	.word	0xe000ed00

08004dcc <MX_TIM13_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <MX_TIM13_Init+0x40>)
 8004dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e10 <MX_TIM13_Init+0x44>)
 8004dd4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e0c <MX_TIM13_Init+0x40>)
 8004dd8:	22a7      	movs	r2, #167	@ 0xa7
 8004dda:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <MX_TIM13_Init+0x40>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <MX_TIM13_Init+0x40>)
 8004de4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004de8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dea:	4b08      	ldr	r3, [pc, #32]	@ (8004e0c <MX_TIM13_Init+0x40>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <MX_TIM13_Init+0x40>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004df6:	4805      	ldr	r0, [pc, #20]	@ (8004e0c <MX_TIM13_Init+0x40>)
 8004df8:	f002 fab4 	bl	8007364 <HAL_TIM_Base_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004e02:	f7ff fdf3 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200029bc 	.word	0x200029bc
 8004e10:	40001c00 	.word	0x40001c00

08004e14 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004e18:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <MX_TIM14_Init+0x40>)
 8004e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8004e58 <MX_TIM14_Init+0x44>)
 8004e1c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 168-1;
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <MX_TIM14_Init+0x40>)
 8004e20:	22a7      	movs	r2, #167	@ 0xa7
 8004e22:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <MX_TIM14_Init+0x40>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <MX_TIM14_Init+0x40>)
 8004e2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e30:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e32:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <MX_TIM14_Init+0x40>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <MX_TIM14_Init+0x40>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004e3e:	4805      	ldr	r0, [pc, #20]	@ (8004e54 <MX_TIM14_Init+0x40>)
 8004e40:	f002 fa90 	bl	8007364 <HAL_TIM_Base_Init>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004e4a:	f7ff fdcf 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20002a04 	.word	0x20002a04
 8004e58:	40002000 	.word	0x40002000

08004e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a18      	ldr	r2, [pc, #96]	@ (8004ecc <HAL_TIM_Base_MspInit+0x70>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	4b17      	ldr	r3, [pc, #92]	@ (8004ed0 <HAL_TIM_Base_MspInit+0x74>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	4a16      	ldr	r2, [pc, #88]	@ (8004ed0 <HAL_TIM_Base_MspInit+0x74>)
 8004e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e7e:	4b14      	ldr	r3, [pc, #80]	@ (8004ed0 <HAL_TIM_Base_MspInit+0x74>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8004e8a:	e01a      	b.n	8004ec2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM14)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a10      	ldr	r2, [pc, #64]	@ (8004ed4 <HAL_TIM_Base_MspInit+0x78>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d115      	bne.n	8004ec2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed0 <HAL_TIM_Base_MspInit+0x74>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed0 <HAL_TIM_Base_MspInit+0x74>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed0 <HAL_TIM_Base_MspInit+0x74>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eae:	60bb      	str	r3, [r7, #8]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2105      	movs	r1, #5
 8004eb6:	202d      	movs	r0, #45	@ 0x2d
 8004eb8:	f000 fb68 	bl	800558c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004ebc:	202d      	movs	r0, #45	@ 0x2d
 8004ebe:	f000 fb81 	bl	80055c4 <HAL_NVIC_EnableIRQ>
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40001c00 	.word	0x40001c00
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40002000 	.word	0x40002000

08004ed8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004edc:	4b11      	ldr	r3, [pc, #68]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004ede:	4a12      	ldr	r2, [pc, #72]	@ (8004f28 <MX_USART1_UART_Init+0x50>)
 8004ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ee2:	4b10      	ldr	r3, [pc, #64]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004eea:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004efe:	220c      	movs	r2, #12
 8004f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f02:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f08:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f0e:	4805      	ldr	r0, [pc, #20]	@ (8004f24 <MX_USART1_UART_Init+0x4c>)
 8004f10:	f002 fd58 	bl	80079c4 <HAL_UART_Init>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004f1a:	f7ff fd67 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20002a4c 	.word	0x20002a4c
 8004f28:	40011000 	.word	0x40011000

08004f2c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f30:	4b11      	ldr	r3, [pc, #68]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f32:	4a12      	ldr	r2, [pc, #72]	@ (8004f7c <MX_USART2_UART_Init+0x50>)
 8004f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f44:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f50:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f52:	220c      	movs	r2, #12
 8004f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f56:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f5c:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f62:	4805      	ldr	r0, [pc, #20]	@ (8004f78 <MX_USART2_UART_Init+0x4c>)
 8004f64:	f002 fd2e 	bl	80079c4 <HAL_UART_Init>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004f6e:	f7ff fd3d 	bl	80049ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20002a94 	.word	0x20002a94
 8004f7c:	40004400 	.word	0x40004400

08004f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	@ 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f88:	f107 031c 	add.w	r3, r7, #28
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80050dc <HAL_UART_MspInit+0x15c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f040 80aa 	bne.w	80050f8 <HAL_UART_MspInit+0x178>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80050e0 <HAL_UART_MspInit+0x160>)
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fac:	4a4c      	ldr	r2, [pc, #304]	@ (80050e0 <HAL_UART_MspInit+0x160>)
 8004fae:	f043 0310 	orr.w	r3, r3, #16
 8004fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80050e0 <HAL_UART_MspInit+0x160>)
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	4b46      	ldr	r3, [pc, #280]	@ (80050e0 <HAL_UART_MspInit+0x160>)
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc8:	4a45      	ldr	r2, [pc, #276]	@ (80050e0 <HAL_UART_MspInit+0x160>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fd0:	4b43      	ldr	r3, [pc, #268]	@ (80050e0 <HAL_UART_MspInit+0x160>)
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004fdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fea:	2303      	movs	r3, #3
 8004fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004fee:	2307      	movs	r3, #7
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff2:	f107 031c 	add.w	r3, r7, #28
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	483a      	ldr	r0, [pc, #232]	@ (80050e4 <HAL_UART_MspInit+0x164>)
 8004ffa:	f001 fa45 	bl	8006488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005004:	2302      	movs	r3, #2
 8005006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005008:	2301      	movs	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800500c:	2303      	movs	r3, #3
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005010:	2307      	movs	r3, #7
 8005012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005014:	f107 031c 	add.w	r3, r7, #28
 8005018:	4619      	mov	r1, r3
 800501a:	4832      	ldr	r0, [pc, #200]	@ (80050e4 <HAL_UART_MspInit+0x164>)
 800501c:	f001 fa34 	bl	8006488 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005020:	4b31      	ldr	r3, [pc, #196]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005022:	4a32      	ldr	r2, [pc, #200]	@ (80050ec <HAL_UART_MspInit+0x16c>)
 8005024:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005026:	4b30      	ldr	r3, [pc, #192]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005028:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800502c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800502e:	4b2e      	ldr	r3, [pc, #184]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005030:	2200      	movs	r2, #0
 8005032:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005034:	4b2c      	ldr	r3, [pc, #176]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005036:	2200      	movs	r2, #0
 8005038:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800503a:	4b2b      	ldr	r3, [pc, #172]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 800503c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005040:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005042:	4b29      	ldr	r3, [pc, #164]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005044:	2200      	movs	r2, #0
 8005046:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005048:	4b27      	ldr	r3, [pc, #156]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 800504a:	2200      	movs	r2, #0
 800504c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800504e:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005050:	2200      	movs	r2, #0
 8005052:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005054:	4b24      	ldr	r3, [pc, #144]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005056:	2200      	movs	r2, #0
 8005058:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800505a:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 800505c:	2200      	movs	r2, #0
 800505e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005060:	4821      	ldr	r0, [pc, #132]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005062:	f000 facb 	bl	80055fc <HAL_DMA_Init>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800506c:	f7ff fcbe 	bl	80049ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a1d      	ldr	r2, [pc, #116]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005074:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005076:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <HAL_UART_MspInit+0x168>)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 800507e:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <HAL_UART_MspInit+0x174>)
 8005080:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 8005084:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005088:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800508a:	4b19      	ldr	r3, [pc, #100]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 800508c:	2240      	movs	r2, #64	@ 0x40
 800508e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005090:	4b17      	ldr	r3, [pc, #92]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 8005092:	2200      	movs	r2, #0
 8005094:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005096:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 8005098:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800509c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800509e:	4b14      	ldr	r3, [pc, #80]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050a4:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80050aa:	4b11      	ldr	r3, [pc, #68]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050b0:	4b0f      	ldr	r3, [pc, #60]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050b6:	4b0e      	ldr	r3, [pc, #56]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80050bc:	480c      	ldr	r0, [pc, #48]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050be:	f000 fa9d 	bl	80055fc <HAL_DMA_Init>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <HAL_UART_MspInit+0x14c>
    {
      Error_Handler();
 80050c8:	f7ff fc90 	bl	80049ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80050d2:	4a07      	ldr	r2, [pc, #28]	@ (80050f0 <HAL_UART_MspInit+0x170>)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80050d8:	e0b5      	b.n	8005246 <HAL_UART_MspInit+0x2c6>
 80050da:	bf00      	nop
 80050dc:	40011000 	.word	0x40011000
 80050e0:	40023800 	.word	0x40023800
 80050e4:	40020000 	.word	0x40020000
 80050e8:	20002adc 	.word	0x20002adc
 80050ec:	40026440 	.word	0x40026440
 80050f0:	20002b3c 	.word	0x20002b3c
 80050f4:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a54      	ldr	r2, [pc, #336]	@ (8005250 <HAL_UART_MspInit+0x2d0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	f040 80a1 	bne.w	8005246 <HAL_UART_MspInit+0x2c6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005104:	2300      	movs	r3, #0
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	4b52      	ldr	r3, [pc, #328]	@ (8005254 <HAL_UART_MspInit+0x2d4>)
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	4a51      	ldr	r2, [pc, #324]	@ (8005254 <HAL_UART_MspInit+0x2d4>)
 800510e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005112:	6413      	str	r3, [r2, #64]	@ 0x40
 8005114:	4b4f      	ldr	r3, [pc, #316]	@ (8005254 <HAL_UART_MspInit+0x2d4>)
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	4b4b      	ldr	r3, [pc, #300]	@ (8005254 <HAL_UART_MspInit+0x2d4>)
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	4a4a      	ldr	r2, [pc, #296]	@ (8005254 <HAL_UART_MspInit+0x2d4>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005130:	4b48      	ldr	r3, [pc, #288]	@ (8005254 <HAL_UART_MspInit+0x2d4>)
 8005132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800513c:	2304      	movs	r3, #4
 800513e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005140:	2302      	movs	r3, #2
 8005142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005148:	2303      	movs	r3, #3
 800514a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800514c:	2307      	movs	r3, #7
 800514e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005150:	f107 031c 	add.w	r3, r7, #28
 8005154:	4619      	mov	r1, r3
 8005156:	4840      	ldr	r0, [pc, #256]	@ (8005258 <HAL_UART_MspInit+0x2d8>)
 8005158:	f001 f996 	bl	8006488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800515c:	2308      	movs	r3, #8
 800515e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005160:	2302      	movs	r3, #2
 8005162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005164:	2301      	movs	r3, #1
 8005166:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005168:	2303      	movs	r3, #3
 800516a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800516c:	2307      	movs	r3, #7
 800516e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005170:	f107 031c 	add.w	r3, r7, #28
 8005174:	4619      	mov	r1, r3
 8005176:	4838      	ldr	r0, [pc, #224]	@ (8005258 <HAL_UART_MspInit+0x2d8>)
 8005178:	f001 f986 	bl	8006488 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800517c:	4b37      	ldr	r3, [pc, #220]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 800517e:	4a38      	ldr	r2, [pc, #224]	@ (8005260 <HAL_UART_MspInit+0x2e0>)
 8005180:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005182:	4b36      	ldr	r3, [pc, #216]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 8005184:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005188:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800518a:	4b34      	ldr	r3, [pc, #208]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005190:	4b32      	ldr	r3, [pc, #200]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 8005192:	2200      	movs	r2, #0
 8005194:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005196:	4b31      	ldr	r3, [pc, #196]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 8005198:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800519c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800519e:	4b2f      	ldr	r3, [pc, #188]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051a4:	4b2d      	ldr	r3, [pc, #180]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80051aa:	4b2c      	ldr	r3, [pc, #176]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051b2:	4b2a      	ldr	r3, [pc, #168]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051b8:	4b28      	ldr	r3, [pc, #160]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80051be:	4827      	ldr	r0, [pc, #156]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051c0:	f000 fa1c 	bl	80055fc <HAL_DMA_Init>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_UART_MspInit+0x24e>
      Error_Handler();
 80051ca:	f7ff fc0f 	bl	80049ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a22      	ldr	r2, [pc, #136]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051d4:	4a21      	ldr	r2, [pc, #132]	@ (800525c <HAL_UART_MspInit+0x2dc>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80051da:	4b22      	ldr	r3, [pc, #136]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 80051dc:	4a22      	ldr	r2, [pc, #136]	@ (8005268 <HAL_UART_MspInit+0x2e8>)
 80051de:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80051e0:	4b20      	ldr	r3, [pc, #128]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 80051e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80051e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 80051ea:	2240      	movs	r2, #64	@ 0x40
 80051ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 80051f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051fc:	4b19      	ldr	r3, [pc, #100]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 80051fe:	2200      	movs	r2, #0
 8005200:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005202:	4b18      	ldr	r3, [pc, #96]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005208:	4b16      	ldr	r3, [pc, #88]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 800520a:	2200      	movs	r2, #0
 800520c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800520e:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 8005210:	2200      	movs	r2, #0
 8005212:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005214:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 8005216:	2200      	movs	r2, #0
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800521a:	4812      	ldr	r0, [pc, #72]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 800521c:	f000 f9ee 	bl	80055fc <HAL_DMA_Init>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_UART_MspInit+0x2aa>
      Error_Handler();
 8005226:	f7ff fbe1 	bl	80049ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a0d      	ldr	r2, [pc, #52]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 800522e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005230:	4a0c      	ldr	r2, [pc, #48]	@ (8005264 <HAL_UART_MspInit+0x2e4>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8005236:	2200      	movs	r2, #0
 8005238:	2105      	movs	r1, #5
 800523a:	2026      	movs	r0, #38	@ 0x26
 800523c:	f000 f9a6 	bl	800558c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005240:	2026      	movs	r0, #38	@ 0x26
 8005242:	f000 f9bf 	bl	80055c4 <HAL_NVIC_EnableIRQ>
}
 8005246:	bf00      	nop
 8005248:	3730      	adds	r7, #48	@ 0x30
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40004400 	.word	0x40004400
 8005254:	40023800 	.word	0x40023800
 8005258:	40020000 	.word	0x40020000
 800525c:	20002b9c 	.word	0x20002b9c
 8005260:	40026088 	.word	0x40026088
 8005264:	20002bfc 	.word	0x20002bfc
 8005268:	400260a0 	.word	0x400260a0

0800526c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1c      	ldr	r2, [pc, #112]	@ (80052ec <HAL_UART_MspDeInit+0x80>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d115      	bne.n	80052aa <HAL_UART_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800527e:	4b1c      	ldr	r3, [pc, #112]	@ (80052f0 <HAL_UART_MspDeInit+0x84>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005282:	4a1b      	ldr	r2, [pc, #108]	@ (80052f0 <HAL_UART_MspDeInit+0x84>)
 8005284:	f023 0310 	bic.w	r3, r3, #16
 8005288:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800528a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800528e:	4819      	ldr	r0, [pc, #100]	@ (80052f4 <HAL_UART_MspDeInit+0x88>)
 8005290:	f001 fa96 	bl	80067c0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fa5d 	bl	8005758 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fa58 	bl	8005758 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80052a8:	e01b      	b.n	80052e2 <HAL_UART_MspDeInit+0x76>
  else if(uartHandle->Instance==USART2)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a12      	ldr	r2, [pc, #72]	@ (80052f8 <HAL_UART_MspDeInit+0x8c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d116      	bne.n	80052e2 <HAL_UART_MspDeInit+0x76>
    __HAL_RCC_USART2_CLK_DISABLE();
 80052b4:	4b0e      	ldr	r3, [pc, #56]	@ (80052f0 <HAL_UART_MspDeInit+0x84>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	4a0d      	ldr	r2, [pc, #52]	@ (80052f0 <HAL_UART_MspDeInit+0x84>)
 80052ba:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80052be:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80052c0:	210c      	movs	r1, #12
 80052c2:	480c      	ldr	r0, [pc, #48]	@ (80052f4 <HAL_UART_MspDeInit+0x88>)
 80052c4:	f001 fa7c 	bl	80067c0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fa43 	bl	8005758 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fa3e 	bl	8005758 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80052dc:	2026      	movs	r0, #38	@ 0x26
 80052de:	f000 f97f 	bl	80055e0 <HAL_NVIC_DisableIRQ>
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40011000 	.word	0x40011000
 80052f0:	40023800 	.word	0x40023800
 80052f4:	40020000 	.word	0x40020000
 80052f8:	40004400 	.word	0x40004400

080052fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005334 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005300:	f7ff fd52 	bl	8004da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005304:	480c      	ldr	r0, [pc, #48]	@ (8005338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005306:	490d      	ldr	r1, [pc, #52]	@ (800533c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005308:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800530a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800530c:	e002      	b.n	8005314 <LoopCopyDataInit>

0800530e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800530e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005312:	3304      	adds	r3, #4

08005314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005318:	d3f9      	bcc.n	800530e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531a:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800531c:	4c0a      	ldr	r4, [pc, #40]	@ (8005348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005320:	e001      	b.n	8005326 <LoopFillZerobss>

08005322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005324:	3204      	adds	r2, #4

08005326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005328:	d3fb      	bcc.n	8005322 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800532a:	f007 fd6f 	bl	800ce0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800532e:	f7ff f96b 	bl	8004608 <main>
  bx  lr    
 8005332:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800533c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005340:	0800fb7c 	.word	0x0800fb7c
  ldr r2, =_sbss
 8005344:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005348:	20008f20 	.word	0x20008f20

0800534c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800534c:	e7fe      	b.n	800534c <ADC_IRQHandler>
	...

08005350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005354:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <HAL_Init+0x40>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a0d      	ldr	r2, [pc, #52]	@ (8005390 <HAL_Init+0x40>)
 800535a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800535e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <HAL_Init+0x40>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0a      	ldr	r2, [pc, #40]	@ (8005390 <HAL_Init+0x40>)
 8005366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800536a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800536c:	4b08      	ldr	r3, [pc, #32]	@ (8005390 <HAL_Init+0x40>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a07      	ldr	r2, [pc, #28]	@ (8005390 <HAL_Init+0x40>)
 8005372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005378:	2003      	movs	r0, #3
 800537a:	f000 f8fc 	bl	8005576 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800537e:	200f      	movs	r0, #15
 8005380:	f7ff fb66 	bl	8004a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005384:	f7ff fb38 	bl	80049f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023c00 	.word	0x40023c00

08005394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005398:	4b06      	ldr	r3, [pc, #24]	@ (80053b4 <HAL_IncTick+0x20>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	4b06      	ldr	r3, [pc, #24]	@ (80053b8 <HAL_IncTick+0x24>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4413      	add	r3, r2
 80053a4:	4a04      	ldr	r2, [pc, #16]	@ (80053b8 <HAL_IncTick+0x24>)
 80053a6:	6013      	str	r3, [r2, #0]
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000018 	.word	0x20000018
 80053b8:	20002c5c 	.word	0x20002c5c

080053bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return uwTick;
 80053c0:	4b03      	ldr	r3, [pc, #12]	@ (80053d0 <HAL_GetTick+0x14>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20002c5c 	.word	0x20002c5c

080053d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005418 <__NVIC_SetPriorityGrouping+0x44>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053f0:	4013      	ands	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005406:	4a04      	ldr	r2, [pc, #16]	@ (8005418 <__NVIC_SetPriorityGrouping+0x44>)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	60d3      	str	r3, [r2, #12]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	e000ed00 	.word	0xe000ed00

0800541c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005420:	4b04      	ldr	r3, [pc, #16]	@ (8005434 <__NVIC_GetPriorityGrouping+0x18>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	0a1b      	lsrs	r3, r3, #8
 8005426:	f003 0307 	and.w	r3, r3, #7
}
 800542a:	4618      	mov	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	e000ed00 	.word	0xe000ed00

08005438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	2b00      	cmp	r3, #0
 8005448:	db0b      	blt.n	8005462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	f003 021f 	and.w	r2, r3, #31
 8005450:	4907      	ldr	r1, [pc, #28]	@ (8005470 <__NVIC_EnableIRQ+0x38>)
 8005452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	2001      	movs	r0, #1
 800545a:	fa00 f202 	lsl.w	r2, r0, r2
 800545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e100 	.word	0xe000e100

08005474 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800547e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005482:	2b00      	cmp	r3, #0
 8005484:	db12      	blt.n	80054ac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005486:	79fb      	ldrb	r3, [r7, #7]
 8005488:	f003 021f 	and.w	r2, r3, #31
 800548c:	490a      	ldr	r1, [pc, #40]	@ (80054b8 <__NVIC_DisableIRQ+0x44>)
 800548e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	2001      	movs	r0, #1
 8005496:	fa00 f202 	lsl.w	r2, r0, r2
 800549a:	3320      	adds	r3, #32
 800549c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80054a0:	f3bf 8f4f 	dsb	sy
}
 80054a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80054a6:	f3bf 8f6f 	isb	sy
}
 80054aa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000e100 	.word	0xe000e100

080054bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	6039      	str	r1, [r7, #0]
 80054c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	db0a      	blt.n	80054e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	490c      	ldr	r1, [pc, #48]	@ (8005508 <__NVIC_SetPriority+0x4c>)
 80054d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054da:	0112      	lsls	r2, r2, #4
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	440b      	add	r3, r1
 80054e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054e4:	e00a      	b.n	80054fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	4908      	ldr	r1, [pc, #32]	@ (800550c <__NVIC_SetPriority+0x50>)
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	3b04      	subs	r3, #4
 80054f4:	0112      	lsls	r2, r2, #4
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	440b      	add	r3, r1
 80054fa:	761a      	strb	r2, [r3, #24]
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	e000e100 	.word	0xe000e100
 800550c:	e000ed00 	.word	0xe000ed00

08005510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	@ 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f1c3 0307 	rsb	r3, r3, #7
 800552a:	2b04      	cmp	r3, #4
 800552c:	bf28      	it	cs
 800552e:	2304      	movcs	r3, #4
 8005530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3304      	adds	r3, #4
 8005536:	2b06      	cmp	r3, #6
 8005538:	d902      	bls.n	8005540 <NVIC_EncodePriority+0x30>
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3b03      	subs	r3, #3
 800553e:	e000      	b.n	8005542 <NVIC_EncodePriority+0x32>
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005544:	f04f 32ff 	mov.w	r2, #4294967295
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43da      	mvns	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	401a      	ands	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005558:	f04f 31ff 	mov.w	r1, #4294967295
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	43d9      	mvns	r1, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005568:	4313      	orrs	r3, r2
         );
}
 800556a:	4618      	mov	r0, r3
 800556c:	3724      	adds	r7, #36	@ 0x24
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff ff28 	bl	80053d4 <__NVIC_SetPriorityGrouping>
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800559a:	2300      	movs	r3, #0
 800559c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800559e:	f7ff ff3d 	bl	800541c <__NVIC_GetPriorityGrouping>
 80055a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	6978      	ldr	r0, [r7, #20]
 80055aa:	f7ff ffb1 	bl	8005510 <NVIC_EncodePriority>
 80055ae:	4602      	mov	r2, r0
 80055b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff ff80 	bl	80054bc <__NVIC_SetPriority>
}
 80055bc:	bf00      	nop
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7ff ff30 	bl	8005438 <__NVIC_EnableIRQ>
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff ff40 	bl	8005474 <__NVIC_DisableIRQ>
}
 80055f4:	bf00      	nop
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005608:	f7ff fed8 	bl	80053bc <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e099      	b.n	800574c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005638:	e00f      	b.n	800565a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800563a:	f7ff febf 	bl	80053bc <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b05      	cmp	r3, #5
 8005646:	d908      	bls.n	800565a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2203      	movs	r2, #3
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e078      	b.n	800574c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e8      	bne.n	800563a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4b38      	ldr	r3, [pc, #224]	@ (8005754 <HAL_DMA_Init+0x158>)
 8005674:	4013      	ands	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d107      	bne.n	80056c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056bc:	4313      	orrs	r3, r2
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d117      	bne.n	800571e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00e      	beq.n	800571e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fb6d 	bl	8005de0 <DMA_CheckFifoParam>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2240      	movs	r2, #64	@ 0x40
 8005710:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800571a:	2301      	movs	r3, #1
 800571c:	e016      	b.n	800574c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb24 	bl	8005d74 <DMA_CalcBaseAndBitshift>
 800572c:	4603      	mov	r3, r0
 800572e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005734:	223f      	movs	r2, #63	@ 0x3f
 8005736:	409a      	lsls	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	f010803f 	.word	0xf010803f

08005758 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e050      	b.n	800580c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d101      	bne.n	800577a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005776:	2302      	movs	r3, #2
 8005778:	e048      	b.n	800580c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2200      	movs	r2, #0
 80057a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2200      	movs	r2, #0
 80057a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2221      	movs	r2, #33	@ 0x21
 80057b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fada 	bl	8005d74 <DMA_CalcBaseAndBitshift>
 80057c0:	4603      	mov	r3, r0
 80057c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ec:	223f      	movs	r2, #63	@ 0x3f
 80057ee:	409a      	lsls	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005832:	2b01      	cmp	r3, #1
 8005834:	d101      	bne.n	800583a <HAL_DMA_Start_IT+0x26>
 8005836:	2302      	movs	r3, #2
 8005838:	e040      	b.n	80058bc <HAL_DMA_Start_IT+0xa8>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	d12f      	bne.n	80058ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fa58 	bl	8005d18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	223f      	movs	r2, #63	@ 0x3f
 800586e:	409a      	lsls	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0216 	orr.w	r2, r2, #22
 8005882:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0208 	orr.w	r2, r2, #8
 800589a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e005      	b.n	80058ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80058b6:	2302      	movs	r3, #2
 80058b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058d2:	f7ff fd73 	bl	80053bc <HAL_GetTick>
 80058d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d008      	beq.n	80058f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2280      	movs	r2, #128	@ 0x80
 80058e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e052      	b.n	800599c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0216 	bic.w	r2, r2, #22
 8005904:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005914:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_DMA_Abort+0x62>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0208 	bic.w	r2, r2, #8
 8005934:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005946:	e013      	b.n	8005970 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005948:	f7ff fd38 	bl	80053bc <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b05      	cmp	r3, #5
 8005954:	d90c      	bls.n	8005970 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2220      	movs	r2, #32
 800595a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2203      	movs	r2, #3
 8005960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e015      	b.n	800599c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e4      	bne.n	8005948 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005982:	223f      	movs	r2, #63	@ 0x3f
 8005984:	409a      	lsls	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2280      	movs	r2, #128	@ 0x80
 80059bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e00c      	b.n	80059dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2205      	movs	r2, #5
 80059c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005c30 <HAL_DMA_IRQHandler+0x248>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a8e      	ldr	r2, [pc, #568]	@ (8005c34 <HAL_DMA_IRQHandler+0x24c>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a12:	2208      	movs	r2, #8
 8005a14:	409a      	lsls	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d01a      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d013      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0204 	bic.w	r2, r2, #4
 8005a3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a40:	2208      	movs	r2, #8
 8005a42:	409a      	lsls	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4c:	f043 0201 	orr.w	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a58:	2201      	movs	r2, #1
 8005a5a:	409a      	lsls	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d012      	beq.n	8005a8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	2201      	movs	r2, #1
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a82:	f043 0202 	orr.w	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8e:	2204      	movs	r2, #4
 8005a90:	409a      	lsls	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d012      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	2204      	movs	r2, #4
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab8:	f043 0204 	orr.w	r2, r3, #4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	409a      	lsls	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d043      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d03c      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	409a      	lsls	r2, r3
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d018      	beq.n	8005b2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d108      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d024      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
 8005b16:	e01f      	b.n	8005b58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01b      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
 8005b28:	e016      	b.n	8005b58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d107      	bne.n	8005b48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0208 	bic.w	r2, r2, #8
 8005b46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 808f 	beq.w	8005c88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8087 	beq.w	8005c88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	2220      	movs	r2, #32
 8005b80:	409a      	lsls	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d136      	bne.n	8005c00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0216 	bic.w	r2, r2, #22
 8005ba0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d103      	bne.n	8005bc2 <HAL_DMA_IRQHandler+0x1da>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d007      	beq.n	8005bd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0208 	bic.w	r2, r2, #8
 8005bd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd6:	223f      	movs	r2, #63	@ 0x3f
 8005bd8:	409a      	lsls	r2, r3
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d07e      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
        }
        return;
 8005bfe:	e079      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01d      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10d      	bne.n	8005c38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d031      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
 8005c2c:	e02c      	b.n	8005c88 <HAL_DMA_IRQHandler+0x2a0>
 8005c2e:	bf00      	nop
 8005c30:	20000010 	.word	0x20000010
 8005c34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d023      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	4798      	blx	r3
 8005c48:	e01e      	b.n	8005c88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0210 	bic.w	r2, r2, #16
 8005c66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d032      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d022      	beq.n	8005ce2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2205      	movs	r2, #5
 8005ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d307      	bcc.n	8005cd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f2      	bne.n	8005cb4 <HAL_DMA_IRQHandler+0x2cc>
 8005cce:	e000      	b.n	8005cd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005cd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
 8005cf2:	e000      	b.n	8005cf6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005cf4:	bf00      	nop
    }
  }
}
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d0a:	b2db      	uxtb	r3, r3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005d34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d108      	bne.n	8005d58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d56:	e007      	b.n	8005d68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	60da      	str	r2, [r3, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	3b10      	subs	r3, #16
 8005d84:	4a14      	ldr	r2, [pc, #80]	@ (8005dd8 <DMA_CalcBaseAndBitshift+0x64>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	091b      	lsrs	r3, r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d8e:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <DMA_CalcBaseAndBitshift+0x68>)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d909      	bls.n	8005db6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	1d1a      	adds	r2, r3, #4
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	659a      	str	r2, [r3, #88]	@ 0x58
 8005db4:	e007      	b.n	8005dc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	aaaaaaab 	.word	0xaaaaaaab
 8005ddc:	0800f78c 	.word	0x0800f78c

08005de0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d11f      	bne.n	8005e3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d856      	bhi.n	8005eae <DMA_CheckFifoParam+0xce>
 8005e00:	a201      	add	r2, pc, #4	@ (adr r2, 8005e08 <DMA_CheckFifoParam+0x28>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e2b 	.word	0x08005e2b
 8005e10:	08005e19 	.word	0x08005e19
 8005e14:	08005eaf 	.word	0x08005eaf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d046      	beq.n	8005eb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e28:	e043      	b.n	8005eb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e32:	d140      	bne.n	8005eb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e38:	e03d      	b.n	8005eb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e42:	d121      	bne.n	8005e88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d837      	bhi.n	8005eba <DMA_CheckFifoParam+0xda>
 8005e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e50 <DMA_CheckFifoParam+0x70>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e61 	.word	0x08005e61
 8005e54:	08005e67 	.word	0x08005e67
 8005e58:	08005e61 	.word	0x08005e61
 8005e5c:	08005e79 	.word	0x08005e79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
      break;
 8005e64:	e030      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d025      	beq.n	8005ebe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e76:	e022      	b.n	8005ebe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e80:	d11f      	bne.n	8005ec2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e86:	e01c      	b.n	8005ec2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d903      	bls.n	8005e96 <DMA_CheckFifoParam+0xb6>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d003      	beq.n	8005e9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e94:	e018      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9a:	e015      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00e      	beq.n	8005ec6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005eac:	e00b      	b.n	8005ec6 <DMA_CheckFifoParam+0xe6>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e00a      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e008      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e006      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e004      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      break;   
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <DMA_CheckFifoParam+0xe8>
      break;
 8005ec6:	bf00      	nop
    }
  } 
  
  return status; 
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop

08005ed8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005eea:	4b23      	ldr	r3, [pc, #140]	@ (8005f78 <HAL_FLASH_Program+0xa0>)
 8005eec:	7e1b      	ldrb	r3, [r3, #24]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_FLASH_Program+0x1e>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e03b      	b.n	8005f6e <HAL_FLASH_Program+0x96>
 8005ef6:	4b20      	ldr	r3, [pc, #128]	@ (8005f78 <HAL_FLASH_Program+0xa0>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005efc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005f00:	f000 f870 	bl	8005fe4 <FLASH_WaitForLastOperation>
 8005f04:	4603      	mov	r3, r0
 8005f06:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d12b      	bne.n	8005f66 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005f14:	783b      	ldrb	r3, [r7, #0]
 8005f16:	4619      	mov	r1, r3
 8005f18:	68b8      	ldr	r0, [r7, #8]
 8005f1a:	f000 f91b 	bl	8006154 <FLASH_Program_Byte>
 8005f1e:	e016      	b.n	8005f4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d105      	bne.n	8005f32 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005f26:	883b      	ldrh	r3, [r7, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	68b8      	ldr	r0, [r7, #8]
 8005f2c:	f000 f8ee 	bl	800610c <FLASH_Program_HalfWord>
 8005f30:	e00d      	b.n	8005f4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d105      	bne.n	8005f44 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68b8      	ldr	r0, [r7, #8]
 8005f3e:	f000 f8c3 	bl	80060c8 <FLASH_Program_Word>
 8005f42:	e004      	b.n	8005f4e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f48:	68b8      	ldr	r0, [r7, #8]
 8005f4a:	f000 f88b 	bl	8006064 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f4e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005f52:	f000 f847 	bl	8005fe4 <FLASH_WaitForLastOperation>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005f5a:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <HAL_FLASH_Program+0xa4>)
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	4a07      	ldr	r2, [pc, #28]	@ (8005f7c <HAL_FLASH_Program+0xa4>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f66:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <HAL_FLASH_Program+0xa0>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20002c60 	.word	0x20002c60
 8005f7c:	40023c00 	.word	0x40023c00

08005f80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb8 <HAL_FLASH_Unlock+0x38>)
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	da0b      	bge.n	8005faa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f92:	4b09      	ldr	r3, [pc, #36]	@ (8005fb8 <HAL_FLASH_Unlock+0x38>)
 8005f94:	4a09      	ldr	r2, [pc, #36]	@ (8005fbc <HAL_FLASH_Unlock+0x3c>)
 8005f96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f98:	4b07      	ldr	r3, [pc, #28]	@ (8005fb8 <HAL_FLASH_Unlock+0x38>)
 8005f9a:	4a09      	ldr	r2, [pc, #36]	@ (8005fc0 <HAL_FLASH_Unlock+0x40>)
 8005f9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f9e:	4b06      	ldr	r3, [pc, #24]	@ (8005fb8 <HAL_FLASH_Unlock+0x38>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da01      	bge.n	8005faa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005faa:	79fb      	ldrb	r3, [r7, #7]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40023c00 	.word	0x40023c00
 8005fbc:	45670123 	.word	0x45670123
 8005fc0:	cdef89ab 	.word	0xcdef89ab

08005fc4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005fc8:	4b05      	ldr	r3, [pc, #20]	@ (8005fe0 <HAL_FLASH_Lock+0x1c>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <HAL_FLASH_Lock+0x1c>)
 8005fce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fd2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	40023c00 	.word	0x40023c00

08005fe4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <FLASH_WaitForLastOperation+0x78>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ff6:	f7ff f9e1 	bl	80053bc <HAL_GetTick>
 8005ffa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005ffc:	e010      	b.n	8006020 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006004:	d00c      	beq.n	8006020 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <FLASH_WaitForLastOperation+0x38>
 800600c:	f7ff f9d6 	bl	80053bc <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d201      	bcs.n	8006020 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e019      	b.n	8006054 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006020:	4b0f      	ldr	r3, [pc, #60]	@ (8006060 <FLASH_WaitForLastOperation+0x7c>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e8      	bne.n	8005ffe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800602c:	4b0c      	ldr	r3, [pc, #48]	@ (8006060 <FLASH_WaitForLastOperation+0x7c>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006038:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <FLASH_WaitForLastOperation+0x7c>)
 800603a:	2201      	movs	r2, #1
 800603c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800603e:	4b08      	ldr	r3, [pc, #32]	@ (8006060 <FLASH_WaitForLastOperation+0x7c>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800604a:	f000 f8a5 	bl	8006198 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
  
}  
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20002c60 	.word	0x20002c60
 8006060:	40023c00 	.word	0x40023c00

08006064 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006070:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <FLASH_Program_DoubleWord+0x60>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	4a13      	ldr	r2, [pc, #76]	@ (80060c4 <FLASH_Program_DoubleWord+0x60>)
 8006076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800607a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800607c:	4b11      	ldr	r3, [pc, #68]	@ (80060c4 <FLASH_Program_DoubleWord+0x60>)
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	4a10      	ldr	r2, [pc, #64]	@ (80060c4 <FLASH_Program_DoubleWord+0x60>)
 8006082:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006086:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006088:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <FLASH_Program_DoubleWord+0x60>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	4a0d      	ldr	r2, [pc, #52]	@ (80060c4 <FLASH_Program_DoubleWord+0x60>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800609a:	f3bf 8f6f 	isb	sy
}
 800609e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80060a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	000a      	movs	r2, r1
 80060ae:	2300      	movs	r3, #0
 80060b0:	68f9      	ldr	r1, [r7, #12]
 80060b2:	3104      	adds	r1, #4
 80060b4:	4613      	mov	r3, r2
 80060b6:	600b      	str	r3, [r1, #0]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40023c00 	.word	0x40023c00

080060c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <FLASH_Program_Word+0x40>)
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006108 <FLASH_Program_Word+0x40>)
 80060d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80060de:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <FLASH_Program_Word+0x40>)
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <FLASH_Program_Word+0x40>)
 80060e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060ea:	4b07      	ldr	r3, [pc, #28]	@ (8006108 <FLASH_Program_Word+0x40>)
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	4a06      	ldr	r2, [pc, #24]	@ (8006108 <FLASH_Program_Word+0x40>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	601a      	str	r2, [r3, #0]
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	40023c00 	.word	0x40023c00

0800610c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006118:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <FLASH_Program_HalfWord+0x44>)
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	4a0c      	ldr	r2, [pc, #48]	@ (8006150 <FLASH_Program_HalfWord+0x44>)
 800611e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006124:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <FLASH_Program_HalfWord+0x44>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	4a09      	ldr	r2, [pc, #36]	@ (8006150 <FLASH_Program_HalfWord+0x44>)
 800612a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800612e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006130:	4b07      	ldr	r3, [pc, #28]	@ (8006150 <FLASH_Program_HalfWord+0x44>)
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	4a06      	ldr	r2, [pc, #24]	@ (8006150 <FLASH_Program_HalfWord+0x44>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	887a      	ldrh	r2, [r7, #2]
 8006140:	801a      	strh	r2, [r3, #0]
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40023c00 	.word	0x40023c00

08006154 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006160:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <FLASH_Program_Byte+0x40>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	4a0b      	ldr	r2, [pc, #44]	@ (8006194 <FLASH_Program_Byte+0x40>)
 8006166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800616a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800616c:	4b09      	ldr	r3, [pc, #36]	@ (8006194 <FLASH_Program_Byte+0x40>)
 800616e:	4a09      	ldr	r2, [pc, #36]	@ (8006194 <FLASH_Program_Byte+0x40>)
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006174:	4b07      	ldr	r3, [pc, #28]	@ (8006194 <FLASH_Program_Byte+0x40>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	4a06      	ldr	r2, [pc, #24]	@ (8006194 <FLASH_Program_Byte+0x40>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	78fa      	ldrb	r2, [r7, #3]
 8006184:	701a      	strb	r2, [r3, #0]
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40023c00 	.word	0x40023c00

08006198 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800619c:	4b27      	ldr	r3, [pc, #156]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d008      	beq.n	80061ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80061a8:	4b25      	ldr	r3, [pc, #148]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f043 0310 	orr.w	r3, r3, #16
 80061b0:	4a23      	ldr	r2, [pc, #140]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 80061b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80061b4:	4b21      	ldr	r3, [pc, #132]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 80061b6:	2210      	movs	r2, #16
 80061b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80061ba:	4b20      	ldr	r3, [pc, #128]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80061c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f043 0308 	orr.w	r3, r3, #8
 80061ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 80061d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80061d2:	4b1a      	ldr	r3, [pc, #104]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 80061d4:	2220      	movs	r2, #32
 80061d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80061d8:	4b18      	ldr	r3, [pc, #96]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80061e4:	4b16      	ldr	r3, [pc, #88]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f043 0304 	orr.w	r3, r3, #4
 80061ec:	4a14      	ldr	r2, [pc, #80]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 80061ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80061f0:	4b12      	ldr	r3, [pc, #72]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 80061f2:	2240      	movs	r2, #64	@ 0x40
 80061f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80061f6:	4b11      	ldr	r3, [pc, #68]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006202:	4b0f      	ldr	r3, [pc, #60]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f043 0302 	orr.w	r3, r3, #2
 800620a:	4a0d      	ldr	r2, [pc, #52]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 800620c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800620e:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 8006210:	2280      	movs	r2, #128	@ 0x80
 8006212:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006214:	4b09      	ldr	r3, [pc, #36]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006220:	4b07      	ldr	r3, [pc, #28]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f043 0320 	orr.w	r3, r3, #32
 8006228:	4a05      	ldr	r2, [pc, #20]	@ (8006240 <FLASH_SetErrorCode+0xa8>)
 800622a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800622c:	4b03      	ldr	r3, [pc, #12]	@ (800623c <FLASH_SetErrorCode+0xa4>)
 800622e:	2202      	movs	r2, #2
 8006230:	60da      	str	r2, [r3, #12]
  }
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	40023c00 	.word	0x40023c00
 8006240:	20002c60 	.word	0x20002c60

08006244 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006256:	4b31      	ldr	r3, [pc, #196]	@ (800631c <HAL_FLASHEx_Erase+0xd8>)
 8006258:	7e1b      	ldrb	r3, [r3, #24]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_FLASHEx_Erase+0x1e>
 800625e:	2302      	movs	r3, #2
 8006260:	e058      	b.n	8006314 <HAL_FLASHEx_Erase+0xd0>
 8006262:	4b2e      	ldr	r3, [pc, #184]	@ (800631c <HAL_FLASHEx_Erase+0xd8>)
 8006264:	2201      	movs	r2, #1
 8006266:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006268:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800626c:	f7ff feba 	bl	8005fe4 <FLASH_WaitForLastOperation>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d148      	bne.n	800630c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	f04f 32ff 	mov.w	r2, #4294967295
 8006280:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d115      	bne.n	80062b6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	b2da      	uxtb	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f000 f844 	bl	8006324 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800629c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80062a0:	f7ff fea0 	bl	8005fe4 <FLASH_WaitForLastOperation>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80062a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006320 <HAL_FLASHEx_Erase+0xdc>)
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006320 <HAL_FLASHEx_Erase+0xdc>)
 80062ae:	f023 0304 	bic.w	r3, r3, #4
 80062b2:	6113      	str	r3, [r2, #16]
 80062b4:	e028      	b.n	8006308 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	e01c      	b.n	80062f8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	68b8      	ldr	r0, [r7, #8]
 80062c8:	f000 f850 	bl	800636c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062cc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80062d0:	f7ff fe88 	bl	8005fe4 <FLASH_WaitForLastOperation>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80062d8:	4b11      	ldr	r3, [pc, #68]	@ (8006320 <HAL_FLASHEx_Erase+0xdc>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a10      	ldr	r2, [pc, #64]	@ (8006320 <HAL_FLASHEx_Erase+0xdc>)
 80062de:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80062e2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	601a      	str	r2, [r3, #0]
          break;
 80062f0:	e00a      	b.n	8006308 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4413      	add	r3, r2
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	429a      	cmp	r2, r3
 8006306:	d3da      	bcc.n	80062be <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006308:	f000 f878 	bl	80063fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800630c:	4b03      	ldr	r3, [pc, #12]	@ (800631c <HAL_FLASHEx_Erase+0xd8>)
 800630e:	2200      	movs	r2, #0
 8006310:	761a      	strb	r2, [r3, #24]

  return status;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20002c60 	.word	0x20002c60
 8006320:	40023c00 	.word	0x40023c00

08006324 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006330:	4b0d      	ldr	r3, [pc, #52]	@ (8006368 <FLASH_MassErase+0x44>)
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	4a0c      	ldr	r2, [pc, #48]	@ (8006368 <FLASH_MassErase+0x44>)
 8006336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <FLASH_MassErase+0x44>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	4a09      	ldr	r2, [pc, #36]	@ (8006368 <FLASH_MassErase+0x44>)
 8006342:	f043 0304 	orr.w	r3, r3, #4
 8006346:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006348:	4b07      	ldr	r3, [pc, #28]	@ (8006368 <FLASH_MassErase+0x44>)
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	4313      	orrs	r3, r2
 8006352:	4a05      	ldr	r2, [pc, #20]	@ (8006368 <FLASH_MassErase+0x44>)
 8006354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006358:	6113      	str	r3, [r2, #16]
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40023c00 	.word	0x40023c00

0800636c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e010      	b.n	80063aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d103      	bne.n	8006396 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800638e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e009      	b.n	80063aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d103      	bne.n	80063a4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800639c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e002      	b.n	80063aa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80063a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063a8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	4a12      	ldr	r2, [pc, #72]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80063b6:	4b10      	ldr	r3, [pc, #64]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	490f      	ldr	r1, [pc, #60]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	4a0c      	ldr	r2, [pc, #48]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063c8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80063cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80063ce:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4313      	orrs	r3, r2
 80063d8:	4a07      	ldr	r2, [pc, #28]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063da:	f043 0302 	orr.w	r3, r3, #2
 80063de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80063e0:	4b05      	ldr	r3, [pc, #20]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	4a04      	ldr	r2, [pc, #16]	@ (80063f8 <FLASH_Erase_Sector+0x8c>)
 80063e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ea:	6113      	str	r3, [r2, #16]
}
 80063ec:	bf00      	nop
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40023c00 	.word	0x40023c00

080063fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006400:	4b20      	ldr	r3, [pc, #128]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006408:	2b00      	cmp	r3, #0
 800640a:	d017      	beq.n	800643c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800640c:	4b1d      	ldr	r3, [pc, #116]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1c      	ldr	r2, [pc, #112]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006412:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006416:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006418:	4b1a      	ldr	r3, [pc, #104]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800641e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	4b17      	ldr	r3, [pc, #92]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a16      	ldr	r2, [pc, #88]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800642a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800642e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006430:	4b14      	ldr	r3, [pc, #80]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a13      	ldr	r2, [pc, #76]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800643a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800643c:	4b11      	ldr	r3, [pc, #68]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006444:	2b00      	cmp	r3, #0
 8006446:	d017      	beq.n	8006478 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006448:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0d      	ldr	r2, [pc, #52]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800644e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006452:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006454:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800645a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a07      	ldr	r2, [pc, #28]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800646a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <FLASH_FlushCaches+0x88>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a04      	ldr	r2, [pc, #16]	@ (8006484 <FLASH_FlushCaches+0x88>)
 8006472:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006476:	6013      	str	r3, [r2, #0]
  }
}
 8006478:	bf00      	nop
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40023c00 	.word	0x40023c00

08006488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006488:	b480      	push	{r7}
 800648a:	b089      	sub	sp, #36	@ 0x24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800649a:	2300      	movs	r3, #0
 800649c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	e16b      	b.n	800677c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064a4:	2201      	movs	r2, #1
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4013      	ands	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	429a      	cmp	r2, r3
 80064be:	f040 815a 	bne.w	8006776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d005      	beq.n	80064da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d130      	bne.n	800653c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	2203      	movs	r2, #3
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	43db      	mvns	r3, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4013      	ands	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006510:	2201      	movs	r2, #1
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	43db      	mvns	r3, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	4013      	ands	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 0201 	and.w	r2, r3, #1
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	4313      	orrs	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	2b03      	cmp	r3, #3
 8006546:	d017      	beq.n	8006578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	2203      	movs	r2, #3
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4313      	orrs	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d123      	bne.n	80065cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	08da      	lsrs	r2, r3, #3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3208      	adds	r2, #8
 800658c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	220f      	movs	r2, #15
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	43db      	mvns	r3, r3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4013      	ands	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f003 0307 	and.w	r3, r3, #7
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	08da      	lsrs	r2, r3, #3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3208      	adds	r2, #8
 80065c6:	69b9      	ldr	r1, [r7, #24]
 80065c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	2203      	movs	r2, #3
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	43db      	mvns	r3, r3
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	4013      	ands	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f003 0203 	and.w	r2, r3, #3
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80b4 	beq.w	8006776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	4b60      	ldr	r3, [pc, #384]	@ (8006794 <HAL_GPIO_Init+0x30c>)
 8006614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006616:	4a5f      	ldr	r2, [pc, #380]	@ (8006794 <HAL_GPIO_Init+0x30c>)
 8006618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800661c:	6453      	str	r3, [r2, #68]	@ 0x44
 800661e:	4b5d      	ldr	r3, [pc, #372]	@ (8006794 <HAL_GPIO_Init+0x30c>)
 8006620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800662a:	4a5b      	ldr	r2, [pc, #364]	@ (8006798 <HAL_GPIO_Init+0x310>)
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	089b      	lsrs	r3, r3, #2
 8006630:	3302      	adds	r3, #2
 8006632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	220f      	movs	r2, #15
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	43db      	mvns	r3, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4013      	ands	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a52      	ldr	r2, [pc, #328]	@ (800679c <HAL_GPIO_Init+0x314>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d02b      	beq.n	80066ae <HAL_GPIO_Init+0x226>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a51      	ldr	r2, [pc, #324]	@ (80067a0 <HAL_GPIO_Init+0x318>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d025      	beq.n	80066aa <HAL_GPIO_Init+0x222>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a50      	ldr	r2, [pc, #320]	@ (80067a4 <HAL_GPIO_Init+0x31c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01f      	beq.n	80066a6 <HAL_GPIO_Init+0x21e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a4f      	ldr	r2, [pc, #316]	@ (80067a8 <HAL_GPIO_Init+0x320>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d019      	beq.n	80066a2 <HAL_GPIO_Init+0x21a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a4e      	ldr	r2, [pc, #312]	@ (80067ac <HAL_GPIO_Init+0x324>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <HAL_GPIO_Init+0x216>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a4d      	ldr	r2, [pc, #308]	@ (80067b0 <HAL_GPIO_Init+0x328>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00d      	beq.n	800669a <HAL_GPIO_Init+0x212>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a4c      	ldr	r2, [pc, #304]	@ (80067b4 <HAL_GPIO_Init+0x32c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <HAL_GPIO_Init+0x20e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a4b      	ldr	r2, [pc, #300]	@ (80067b8 <HAL_GPIO_Init+0x330>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_GPIO_Init+0x20a>
 800668e:	2307      	movs	r3, #7
 8006690:	e00e      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 8006692:	2308      	movs	r3, #8
 8006694:	e00c      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 8006696:	2306      	movs	r3, #6
 8006698:	e00a      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 800669a:	2305      	movs	r3, #5
 800669c:	e008      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 800669e:	2304      	movs	r3, #4
 80066a0:	e006      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 80066a2:	2303      	movs	r3, #3
 80066a4:	e004      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e002      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <HAL_GPIO_Init+0x228>
 80066ae:	2300      	movs	r3, #0
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	f002 0203 	and.w	r2, r2, #3
 80066b6:	0092      	lsls	r2, r2, #2
 80066b8:	4093      	lsls	r3, r2
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	4313      	orrs	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066c0:	4935      	ldr	r1, [pc, #212]	@ (8006798 <HAL_GPIO_Init+0x310>)
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	089b      	lsrs	r3, r3, #2
 80066c6:	3302      	adds	r3, #2
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066ce:	4b3b      	ldr	r3, [pc, #236]	@ (80067bc <HAL_GPIO_Init+0x334>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	43db      	mvns	r3, r3
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	4013      	ands	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066f2:	4a32      	ldr	r2, [pc, #200]	@ (80067bc <HAL_GPIO_Init+0x334>)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066f8:	4b30      	ldr	r3, [pc, #192]	@ (80067bc <HAL_GPIO_Init+0x334>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	43db      	mvns	r3, r3
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4013      	ands	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800671c:	4a27      	ldr	r2, [pc, #156]	@ (80067bc <HAL_GPIO_Init+0x334>)
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006722:	4b26      	ldr	r3, [pc, #152]	@ (80067bc <HAL_GPIO_Init+0x334>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	43db      	mvns	r3, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4013      	ands	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006746:	4a1d      	ldr	r2, [pc, #116]	@ (80067bc <HAL_GPIO_Init+0x334>)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800674c:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_GPIO_Init+0x334>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	43db      	mvns	r3, r3
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4013      	ands	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006770:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <HAL_GPIO_Init+0x334>)
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	3301      	adds	r3, #1
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b0f      	cmp	r3, #15
 8006780:	f67f ae90 	bls.w	80064a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	3724      	adds	r7, #36	@ 0x24
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40023800 	.word	0x40023800
 8006798:	40013800 	.word	0x40013800
 800679c:	40020000 	.word	0x40020000
 80067a0:	40020400 	.word	0x40020400
 80067a4:	40020800 	.word	0x40020800
 80067a8:	40020c00 	.word	0x40020c00
 80067ac:	40021000 	.word	0x40021000
 80067b0:	40021400 	.word	0x40021400
 80067b4:	40021800 	.word	0x40021800
 80067b8:	40021c00 	.word	0x40021c00
 80067bc:	40013c00 	.word	0x40013c00

080067c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	e0cd      	b.n	8006978 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067dc:	2201      	movs	r2, #1
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4013      	ands	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	f040 80bd 	bne.w	8006972 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80067f8:	4a65      	ldr	r2, [pc, #404]	@ (8006990 <HAL_GPIO_DeInit+0x1d0>)
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	089b      	lsrs	r3, r3, #2
 80067fe:	3302      	adds	r3, #2
 8006800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006804:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	220f      	movs	r2, #15
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	4013      	ands	r3, r2
 8006818:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a5d      	ldr	r2, [pc, #372]	@ (8006994 <HAL_GPIO_DeInit+0x1d4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d02b      	beq.n	800687a <HAL_GPIO_DeInit+0xba>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a5c      	ldr	r2, [pc, #368]	@ (8006998 <HAL_GPIO_DeInit+0x1d8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d025      	beq.n	8006876 <HAL_GPIO_DeInit+0xb6>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a5b      	ldr	r2, [pc, #364]	@ (800699c <HAL_GPIO_DeInit+0x1dc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01f      	beq.n	8006872 <HAL_GPIO_DeInit+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a5a      	ldr	r2, [pc, #360]	@ (80069a0 <HAL_GPIO_DeInit+0x1e0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d019      	beq.n	800686e <HAL_GPIO_DeInit+0xae>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a59      	ldr	r2, [pc, #356]	@ (80069a4 <HAL_GPIO_DeInit+0x1e4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_GPIO_DeInit+0xaa>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a58      	ldr	r2, [pc, #352]	@ (80069a8 <HAL_GPIO_DeInit+0x1e8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d00d      	beq.n	8006866 <HAL_GPIO_DeInit+0xa6>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a57      	ldr	r2, [pc, #348]	@ (80069ac <HAL_GPIO_DeInit+0x1ec>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d007      	beq.n	8006862 <HAL_GPIO_DeInit+0xa2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a56      	ldr	r2, [pc, #344]	@ (80069b0 <HAL_GPIO_DeInit+0x1f0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d101      	bne.n	800685e <HAL_GPIO_DeInit+0x9e>
 800685a:	2307      	movs	r3, #7
 800685c:	e00e      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 800685e:	2308      	movs	r3, #8
 8006860:	e00c      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 8006862:	2306      	movs	r3, #6
 8006864:	e00a      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 8006866:	2305      	movs	r3, #5
 8006868:	e008      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 800686a:	2304      	movs	r3, #4
 800686c:	e006      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 800686e:	2303      	movs	r3, #3
 8006870:	e004      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 8006872:	2302      	movs	r3, #2
 8006874:	e002      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <HAL_GPIO_DeInit+0xbc>
 800687a:	2300      	movs	r3, #0
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	f002 0203 	and.w	r2, r2, #3
 8006882:	0092      	lsls	r2, r2, #2
 8006884:	4093      	lsls	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d132      	bne.n	80068f2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800688c:	4b49      	ldr	r3, [pc, #292]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	43db      	mvns	r3, r3
 8006894:	4947      	ldr	r1, [pc, #284]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 8006896:	4013      	ands	r3, r2
 8006898:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800689a:	4b46      	ldr	r3, [pc, #280]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	4944      	ldr	r1, [pc, #272]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80068a8:	4b42      	ldr	r3, [pc, #264]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	43db      	mvns	r3, r3
 80068b0:	4940      	ldr	r1, [pc, #256]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80068b6:	4b3f      	ldr	r3, [pc, #252]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 80068b8:	689a      	ldr	r2, [r3, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	43db      	mvns	r3, r3
 80068be:	493d      	ldr	r1, [pc, #244]	@ (80069b4 <HAL_GPIO_DeInit+0x1f4>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	220f      	movs	r2, #15
 80068ce:	fa02 f303 	lsl.w	r3, r2, r3
 80068d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80068d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006990 <HAL_GPIO_DeInit+0x1d0>)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	089b      	lsrs	r3, r3, #2
 80068da:	3302      	adds	r3, #2
 80068dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	43da      	mvns	r2, r3
 80068e4:	482a      	ldr	r0, [pc, #168]	@ (8006990 <HAL_GPIO_DeInit+0x1d0>)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	089b      	lsrs	r3, r3, #2
 80068ea:	400a      	ands	r2, r1
 80068ec:	3302      	adds	r3, #2
 80068ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	2103      	movs	r1, #3
 80068fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006900:	43db      	mvns	r3, r3
 8006902:	401a      	ands	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	08da      	lsrs	r2, r3, #3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3208      	adds	r2, #8
 8006910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	220f      	movs	r2, #15
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43db      	mvns	r3, r3
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	08d2      	lsrs	r2, r2, #3
 8006928:	4019      	ands	r1, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3208      	adds	r2, #8
 800692e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	2103      	movs	r1, #3
 800693c:	fa01 f303 	lsl.w	r3, r1, r3
 8006940:	43db      	mvns	r3, r3
 8006942:	401a      	ands	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	2101      	movs	r1, #1
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	fa01 f303 	lsl.w	r3, r1, r3
 8006954:	43db      	mvns	r3, r3
 8006956:	401a      	ands	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	2103      	movs	r1, #3
 8006966:	fa01 f303 	lsl.w	r3, r1, r3
 800696a:	43db      	mvns	r3, r3
 800696c:	401a      	ands	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	3301      	adds	r3, #1
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2b0f      	cmp	r3, #15
 800697c:	f67f af2e 	bls.w	80067dc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40013800 	.word	0x40013800
 8006994:	40020000 	.word	0x40020000
 8006998:	40020400 	.word	0x40020400
 800699c:	40020800 	.word	0x40020800
 80069a0:	40020c00 	.word	0x40020c00
 80069a4:	40021000 	.word	0x40021000
 80069a8:	40021400 	.word	0x40021400
 80069ac:	40021800 	.word	0x40021800
 80069b0:	40021c00 	.word	0x40021c00
 80069b4:	40013c00 	.word	0x40013c00

080069b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	807b      	strh	r3, [r7, #2]
 80069c4:	4613      	mov	r3, r2
 80069c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069c8:	787b      	ldrb	r3, [r7, #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069d4:	e003      	b.n	80069de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069d6:	887b      	ldrh	r3, [r7, #2]
 80069d8:	041a      	lsls	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	619a      	str	r2, [r3, #24]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80069fc:	887a      	ldrh	r2, [r7, #2]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4013      	ands	r3, r2
 8006a02:	041a      	lsls	r2, r3, #16
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	43d9      	mvns	r1, r3
 8006a08:	887b      	ldrh	r3, [r7, #2]
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	619a      	str	r2, [r3, #24]
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	4603      	mov	r3, r0
 8006a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a2a:	4b08      	ldr	r3, [pc, #32]	@ (8006a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d006      	beq.n	8006a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a36:	4a05      	ldr	r2, [pc, #20]	@ (8006a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fd fa14 	bl	8003e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40013c00 	.word	0x40013c00

08006a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e267      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d075      	beq.n	8006b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a6e:	4b88      	ldr	r3, [pc, #544]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b04      	cmp	r3, #4
 8006a78:	d00c      	beq.n	8006a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7a:	4b85      	ldr	r3, [pc, #532]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d112      	bne.n	8006aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a86:	4b82      	ldr	r3, [pc, #520]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a92:	d10b      	bne.n	8006aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a94:	4b7e      	ldr	r3, [pc, #504]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05b      	beq.n	8006b58 <HAL_RCC_OscConfig+0x108>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d157      	bne.n	8006b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e242      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ab4:	d106      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x74>
 8006ab6:	4b76      	ldr	r3, [pc, #472]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a75      	ldr	r2, [pc, #468]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e01d      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x98>
 8006ace:	4b70      	ldr	r3, [pc, #448]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a6f      	ldr	r2, [pc, #444]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4b6d      	ldr	r3, [pc, #436]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a6c      	ldr	r2, [pc, #432]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0xb0>
 8006ae8:	4b69      	ldr	r3, [pc, #420]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a68      	ldr	r2, [pc, #416]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	4b66      	ldr	r3, [pc, #408]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a65      	ldr	r2, [pc, #404]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b08:	f7fe fc58 	bl	80053bc <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b10:	f7fe fc54 	bl	80053bc <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b64      	cmp	r3, #100	@ 0x64
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e207      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	4b5b      	ldr	r3, [pc, #364]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0xc0>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b30:	f7fe fc44 	bl	80053bc <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b38:	f7fe fc40 	bl	80053bc <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b64      	cmp	r3, #100	@ 0x64
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e1f3      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4a:	4b51      	ldr	r3, [pc, #324]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0xe8>
 8006b56:	e000      	b.n	8006b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d063      	beq.n	8006c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b66:	4b4a      	ldr	r3, [pc, #296]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b72:	4b47      	ldr	r3, [pc, #284]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d11c      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7e:	4b44      	ldr	r3, [pc, #272]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d116      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8a:	4b41      	ldr	r3, [pc, #260]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x152>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d001      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e1c7      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4937      	ldr	r1, [pc, #220]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb6:	e03a      	b.n	8006c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d020      	beq.n	8006c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc0:	4b34      	ldr	r3, [pc, #208]	@ (8006c94 <HAL_RCC_OscConfig+0x244>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc6:	f7fe fbf9 	bl	80053bc <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bce:	f7fe fbf5 	bl	80053bc <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e1a8      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bec:	4b28      	ldr	r3, [pc, #160]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4925      	ldr	r1, [pc, #148]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
 8006c00:	e015      	b.n	8006c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c02:	4b24      	ldr	r3, [pc, #144]	@ (8006c94 <HAL_RCC_OscConfig+0x244>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c08:	f7fe fbd8 	bl	80053bc <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c10:	f7fe fbd4 	bl	80053bc <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e187      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c22:	4b1b      	ldr	r3, [pc, #108]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d036      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c42:	4b15      	ldr	r3, [pc, #84]	@ (8006c98 <HAL_RCC_OscConfig+0x248>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c48:	f7fe fbb8 	bl	80053bc <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c50:	f7fe fbb4 	bl	80053bc <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e167      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c62:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <HAL_RCC_OscConfig+0x240>)
 8006c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x200>
 8006c6e:	e01b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c70:	4b09      	ldr	r3, [pc, #36]	@ (8006c98 <HAL_RCC_OscConfig+0x248>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c76:	f7fe fba1 	bl	80053bc <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c7c:	e00e      	b.n	8006c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7e:	f7fe fb9d 	bl	80053bc <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d907      	bls.n	8006c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e150      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
 8006c90:	40023800 	.word	0x40023800
 8006c94:	42470000 	.word	0x42470000
 8006c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c9c:	4b88      	ldr	r3, [pc, #544]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1ea      	bne.n	8006c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8097 	beq.w	8006de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cba:	4b81      	ldr	r3, [pc, #516]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10f      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	4b7d      	ldr	r3, [pc, #500]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cce:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cde:	60bb      	str	r3, [r7, #8]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce6:	4b77      	ldr	r3, [pc, #476]	@ (8006ec4 <HAL_RCC_OscConfig+0x474>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d118      	bne.n	8006d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf2:	4b74      	ldr	r3, [pc, #464]	@ (8006ec4 <HAL_RCC_OscConfig+0x474>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a73      	ldr	r2, [pc, #460]	@ (8006ec4 <HAL_RCC_OscConfig+0x474>)
 8006cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cfe:	f7fe fb5d 	bl	80053bc <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d04:	e008      	b.n	8006d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d06:	f7fe fb59 	bl	80053bc <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d901      	bls.n	8006d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e10c      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d18:	4b6a      	ldr	r3, [pc, #424]	@ (8006ec4 <HAL_RCC_OscConfig+0x474>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0f0      	beq.n	8006d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d106      	bne.n	8006d3a <HAL_RCC_OscConfig+0x2ea>
 8006d2c:	4b64      	ldr	r3, [pc, #400]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d30:	4a63      	ldr	r2, [pc, #396]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d38:	e01c      	b.n	8006d74 <HAL_RCC_OscConfig+0x324>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b05      	cmp	r3, #5
 8006d40:	d10c      	bne.n	8006d5c <HAL_RCC_OscConfig+0x30c>
 8006d42:	4b5f      	ldr	r3, [pc, #380]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d46:	4a5e      	ldr	r2, [pc, #376]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d48:	f043 0304 	orr.w	r3, r3, #4
 8006d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d52:	4a5b      	ldr	r2, [pc, #364]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d5a:	e00b      	b.n	8006d74 <HAL_RCC_OscConfig+0x324>
 8006d5c:	4b58      	ldr	r3, [pc, #352]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d60:	4a57      	ldr	r2, [pc, #348]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d68:	4b55      	ldr	r3, [pc, #340]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6c:	4a54      	ldr	r2, [pc, #336]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d6e:	f023 0304 	bic.w	r3, r3, #4
 8006d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d015      	beq.n	8006da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7c:	f7fe fb1e 	bl	80053bc <HAL_GetTick>
 8006d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d82:	e00a      	b.n	8006d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d84:	f7fe fb1a 	bl	80053bc <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e0cb      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9a:	4b49      	ldr	r3, [pc, #292]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0ee      	beq.n	8006d84 <HAL_RCC_OscConfig+0x334>
 8006da6:	e014      	b.n	8006dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da8:	f7fe fb08 	bl	80053bc <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db0:	f7fe fb04 	bl	80053bc <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e0b5      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1ee      	bne.n	8006db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d105      	bne.n	8006de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dd8:	4b39      	ldr	r3, [pc, #228]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ddc:	4a38      	ldr	r2, [pc, #224]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a1 	beq.w	8006f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dee:	4b34      	ldr	r3, [pc, #208]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 030c 	and.w	r3, r3, #12
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	d05c      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d141      	bne.n	8006e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e02:	4b31      	ldr	r3, [pc, #196]	@ (8006ec8 <HAL_RCC_OscConfig+0x478>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e08:	f7fe fad8 	bl	80053bc <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fe fad4 	bl	80053bc <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e087      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e22:	4b27      	ldr	r3, [pc, #156]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3c:	019b      	lsls	r3, r3, #6
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	3b01      	subs	r3, #1
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	491b      	ldr	r1, [pc, #108]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006e54:	4313      	orrs	r3, r2
 8006e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <HAL_RCC_OscConfig+0x478>)
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e5e:	f7fe faad 	bl	80053bc <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e66:	f7fe faa9 	bl	80053bc <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e05c      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e78:	4b11      	ldr	r3, [pc, #68]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x416>
 8006e84:	e054      	b.n	8006f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e86:	4b10      	ldr	r3, [pc, #64]	@ (8006ec8 <HAL_RCC_OscConfig+0x478>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fe fa96 	bl	80053bc <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e94:	f7fe fa92 	bl	80053bc <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e045      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea6:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <HAL_RCC_OscConfig+0x470>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x444>
 8006eb2:	e03d      	b.n	8006f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e038      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40007000 	.word	0x40007000
 8006ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f3c <HAL_RCC_OscConfig+0x4ec>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d028      	beq.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d121      	bne.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d11a      	bne.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006efc:	4013      	ands	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d111      	bne.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	3b01      	subs	r3, #1
 8006f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d107      	bne.n	8006f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800

08006f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0cc      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f54:	4b68      	ldr	r3, [pc, #416]	@ (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d90c      	bls.n	8006f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f62:	4b65      	ldr	r3, [pc, #404]	@ (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6a:	4b63      	ldr	r3, [pc, #396]	@ (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0307 	and.w	r3, r3, #7
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0b8      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d020      	beq.n	8006fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f94:	4b59      	ldr	r3, [pc, #356]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4a58      	ldr	r2, [pc, #352]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fac:	4b53      	ldr	r3, [pc, #332]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4a52      	ldr	r2, [pc, #328]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb8:	4b50      	ldr	r3, [pc, #320]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	494d      	ldr	r1, [pc, #308]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d044      	beq.n	8007060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fde:	4b47      	ldr	r3, [pc, #284]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e07f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d107      	bne.n	800700e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e06f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700e:	4b3b      	ldr	r3, [pc, #236]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e067      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800701e:	4b37      	ldr	r3, [pc, #220]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f023 0203 	bic.w	r2, r3, #3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4934      	ldr	r1, [pc, #208]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	4313      	orrs	r3, r2
 800702e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007030:	f7fe f9c4 	bl	80053bc <HAL_GetTick>
 8007034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007036:	e00a      	b.n	800704e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007038:	f7fe f9c0 	bl	80053bc <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e04f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800704e:	4b2b      	ldr	r3, [pc, #172]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 020c 	and.w	r2, r3, #12
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	429a      	cmp	r2, r3
 800705e:	d1eb      	bne.n	8007038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007060:	4b25      	ldr	r3, [pc, #148]	@ (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d20c      	bcs.n	8007088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800706e:	4b22      	ldr	r3, [pc, #136]	@ (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007076:	4b20      	ldr	r3, [pc, #128]	@ (80070f8 <HAL_RCC_ClockConfig+0x1b8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e032      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007094:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4916      	ldr	r1, [pc, #88]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b2:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	490e      	ldr	r1, [pc, #56]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070c6:	f000 f821 	bl	800710c <HAL_RCC_GetSysClockFreq>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	490a      	ldr	r1, [pc, #40]	@ (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 80070d8:	5ccb      	ldrb	r3, [r1, r3]
 80070da:	fa22 f303 	lsr.w	r3, r2, r3
 80070de:	4a09      	ldr	r2, [pc, #36]	@ (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 80070e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070e2:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fd fcb2 	bl	8004a50 <HAL_InitTick>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40023c00 	.word	0x40023c00
 80070fc:	40023800 	.word	0x40023800
 8007100:	0800f774 	.word	0x0800f774
 8007104:	20000010 	.word	0x20000010
 8007108:	20000014 	.word	0x20000014

0800710c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800710c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007110:	b090      	sub	sp, #64	@ 0x40
 8007112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	637b      	str	r3, [r7, #52]	@ 0x34
 8007118:	2300      	movs	r3, #0
 800711a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800711c:	2300      	movs	r3, #0
 800711e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007124:	4b59      	ldr	r3, [pc, #356]	@ (800728c <HAL_RCC_GetSysClockFreq+0x180>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 030c 	and.w	r3, r3, #12
 800712c:	2b08      	cmp	r3, #8
 800712e:	d00d      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x40>
 8007130:	2b08      	cmp	r3, #8
 8007132:	f200 80a1 	bhi.w	8007278 <HAL_RCC_GetSysClockFreq+0x16c>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_RCC_GetSysClockFreq+0x34>
 800713a:	2b04      	cmp	r3, #4
 800713c:	d003      	beq.n	8007146 <HAL_RCC_GetSysClockFreq+0x3a>
 800713e:	e09b      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007140:	4b53      	ldr	r3, [pc, #332]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x184>)
 8007142:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007144:	e09b      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007146:	4b53      	ldr	r3, [pc, #332]	@ (8007294 <HAL_RCC_GetSysClockFreq+0x188>)
 8007148:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800714a:	e098      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800714c:	4b4f      	ldr	r3, [pc, #316]	@ (800728c <HAL_RCC_GetSysClockFreq+0x180>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007154:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007156:	4b4d      	ldr	r3, [pc, #308]	@ (800728c <HAL_RCC_GetSysClockFreq+0x180>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d028      	beq.n	80071b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007162:	4b4a      	ldr	r3, [pc, #296]	@ (800728c <HAL_RCC_GetSysClockFreq+0x180>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	2200      	movs	r2, #0
 800716a:	623b      	str	r3, [r7, #32]
 800716c:	627a      	str	r2, [r7, #36]	@ 0x24
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007174:	2100      	movs	r1, #0
 8007176:	4b47      	ldr	r3, [pc, #284]	@ (8007294 <HAL_RCC_GetSysClockFreq+0x188>)
 8007178:	fb03 f201 	mul.w	r2, r3, r1
 800717c:	2300      	movs	r3, #0
 800717e:	fb00 f303 	mul.w	r3, r0, r3
 8007182:	4413      	add	r3, r2
 8007184:	4a43      	ldr	r2, [pc, #268]	@ (8007294 <HAL_RCC_GetSysClockFreq+0x188>)
 8007186:	fba0 1202 	umull	r1, r2, r0, r2
 800718a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800718c:	460a      	mov	r2, r1
 800718e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007192:	4413      	add	r3, r2
 8007194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007198:	2200      	movs	r2, #0
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	61fa      	str	r2, [r7, #28]
 800719e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80071a6:	f7f9 fd7f 	bl	8000ca8 <__aeabi_uldivmod>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4613      	mov	r3, r2
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071b2:	e053      	b.n	800725c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071b4:	4b35      	ldr	r3, [pc, #212]	@ (800728c <HAL_RCC_GetSysClockFreq+0x180>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	099b      	lsrs	r3, r3, #6
 80071ba:	2200      	movs	r2, #0
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	617a      	str	r2, [r7, #20]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071c6:	f04f 0b00 	mov.w	fp, #0
 80071ca:	4652      	mov	r2, sl
 80071cc:	465b      	mov	r3, fp
 80071ce:	f04f 0000 	mov.w	r0, #0
 80071d2:	f04f 0100 	mov.w	r1, #0
 80071d6:	0159      	lsls	r1, r3, #5
 80071d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071dc:	0150      	lsls	r0, r2, #5
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	ebb2 080a 	subs.w	r8, r2, sl
 80071e6:	eb63 090b 	sbc.w	r9, r3, fp
 80071ea:	f04f 0200 	mov.w	r2, #0
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80071f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80071fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80071fe:	ebb2 0408 	subs.w	r4, r2, r8
 8007202:	eb63 0509 	sbc.w	r5, r3, r9
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	f04f 0300 	mov.w	r3, #0
 800720e:	00eb      	lsls	r3, r5, #3
 8007210:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007214:	00e2      	lsls	r2, r4, #3
 8007216:	4614      	mov	r4, r2
 8007218:	461d      	mov	r5, r3
 800721a:	eb14 030a 	adds.w	r3, r4, sl
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	eb45 030b 	adc.w	r3, r5, fp
 8007224:	607b      	str	r3, [r7, #4]
 8007226:	f04f 0200 	mov.w	r2, #0
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007232:	4629      	mov	r1, r5
 8007234:	028b      	lsls	r3, r1, #10
 8007236:	4621      	mov	r1, r4
 8007238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800723c:	4621      	mov	r1, r4
 800723e:	028a      	lsls	r2, r1, #10
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007246:	2200      	movs	r2, #0
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	60fa      	str	r2, [r7, #12]
 800724c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007250:	f7f9 fd2a 	bl	8000ca8 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4613      	mov	r3, r2
 800725a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800725c:	4b0b      	ldr	r3, [pc, #44]	@ (800728c <HAL_RCC_GetSysClockFreq+0x180>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	3301      	adds	r3, #1
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800726c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007276:	e002      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007278:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x184>)
 800727a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800727c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800727e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007280:	4618      	mov	r0, r3
 8007282:	3740      	adds	r7, #64	@ 0x40
 8007284:	46bd      	mov	sp, r7
 8007286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728a:	bf00      	nop
 800728c:	40023800 	.word	0x40023800
 8007290:	00f42400 	.word	0x00f42400
 8007294:	017d7840 	.word	0x017d7840

08007298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800729c:	4b03      	ldr	r3, [pc, #12]	@ (80072ac <HAL_RCC_GetHCLKFreq+0x14>)
 800729e:	681b      	ldr	r3, [r3, #0]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000010 	.word	0x20000010

080072b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072b4:	f7ff fff0 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 80072b8:	4602      	mov	r2, r0
 80072ba:	4b05      	ldr	r3, [pc, #20]	@ (80072d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	0a9b      	lsrs	r3, r3, #10
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	4903      	ldr	r1, [pc, #12]	@ (80072d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072c6:	5ccb      	ldrb	r3, [r1, r3]
 80072c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	40023800 	.word	0x40023800
 80072d4:	0800f784 	.word	0x0800f784

080072d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072dc:	f7ff ffdc 	bl	8007298 <HAL_RCC_GetHCLKFreq>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0b5b      	lsrs	r3, r3, #13
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4903      	ldr	r1, [pc, #12]	@ (80072fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072ee:	5ccb      	ldrb	r3, [r1, r3]
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40023800 	.word	0x40023800
 80072fc:	0800f784 	.word	0x0800f784

08007300 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	220f      	movs	r2, #15
 800730e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007310:	4b12      	ldr	r3, [pc, #72]	@ (800735c <HAL_RCC_GetClockConfig+0x5c>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0203 	and.w	r2, r3, #3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800731c:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <HAL_RCC_GetClockConfig+0x5c>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007328:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <HAL_RCC_GetClockConfig+0x5c>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007334:	4b09      	ldr	r3, [pc, #36]	@ (800735c <HAL_RCC_GetClockConfig+0x5c>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	08db      	lsrs	r3, r3, #3
 800733a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007342:	4b07      	ldr	r3, [pc, #28]	@ (8007360 <HAL_RCC_GetClockConfig+0x60>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0207 	and.w	r2, r3, #7
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	601a      	str	r2, [r3, #0]
}
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40023800 	.word	0x40023800
 8007360:	40023c00 	.word	0x40023c00

08007364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e041      	b.n	80073fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fd fd66 	bl	8004e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3304      	adds	r3, #4
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f000 fa4e 	bl	8007844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d001      	beq.n	800741c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e046      	b.n	80074aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a23      	ldr	r2, [pc, #140]	@ (80074b8 <HAL_TIM_Base_Start+0xb4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007436:	d01d      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1f      	ldr	r2, [pc, #124]	@ (80074bc <HAL_TIM_Base_Start+0xb8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1e      	ldr	r2, [pc, #120]	@ (80074c0 <HAL_TIM_Base_Start+0xbc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1c      	ldr	r2, [pc, #112]	@ (80074c4 <HAL_TIM_Base_Start+0xc0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1b      	ldr	r2, [pc, #108]	@ (80074c8 <HAL_TIM_Base_Start+0xc4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a19      	ldr	r2, [pc, #100]	@ (80074cc <HAL_TIM_Base_Start+0xc8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a18      	ldr	r2, [pc, #96]	@ (80074d0 <HAL_TIM_Base_Start+0xcc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d111      	bne.n	8007498 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b06      	cmp	r3, #6
 8007484:	d010      	beq.n	80074a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0201 	orr.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007496:	e007      	b.n	80074a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40010000 	.word	0x40010000
 80074bc:	40000400 	.word	0x40000400
 80074c0:	40000800 	.word	0x40000800
 80074c4:	40000c00 	.word	0x40000c00
 80074c8:	40010400 	.word	0x40010400
 80074cc:	40014000 	.word	0x40014000
 80074d0:	40001800 	.word	0x40001800

080074d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d001      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e04e      	b.n	800758a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68da      	ldr	r2, [r3, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0201 	orr.w	r2, r2, #1
 8007502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <HAL_TIM_Base_Start_IT+0xc4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d022      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x80>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007516:	d01d      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x80>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <HAL_TIM_Base_Start_IT+0xc8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d018      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x80>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a1e      	ldr	r2, [pc, #120]	@ (80075a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d013      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x80>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a1c      	ldr	r2, [pc, #112]	@ (80075a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d00e      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x80>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a1b      	ldr	r2, [pc, #108]	@ (80075a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d009      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x80>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a19      	ldr	r2, [pc, #100]	@ (80075ac <HAL_TIM_Base_Start_IT+0xd8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d004      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x80>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d111      	bne.n	8007578 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b06      	cmp	r3, #6
 8007564:	d010      	beq.n	8007588 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0201 	orr.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007576:	e007      	b.n	8007588 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40010000 	.word	0x40010000
 800759c:	40000400 	.word	0x40000400
 80075a0:	40000800 	.word	0x40000800
 80075a4:	40000c00 	.word	0x40000c00
 80075a8:	40010400 	.word	0x40010400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40001800 	.word	0x40001800

080075b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0201 	bic.w	r2, r2, #1
 80075ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6a1a      	ldr	r2, [r3, #32]
 80075d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075d6:	4013      	ands	r3, r2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <HAL_TIM_Base_Stop_IT+0x48>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6a1a      	ldr	r2, [r3, #32]
 80075e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_Base_Stop_IT+0x48>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0201 	bic.w	r2, r2, #1
 80075fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d020      	beq.n	8007676 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d01b      	beq.n	8007676 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f06f 0202 	mvn.w	r2, #2
 8007646:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f003 0303 	and.w	r3, r3, #3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f8d2 	bl	8007806 <HAL_TIM_IC_CaptureCallback>
 8007662:	e005      	b.n	8007670 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f8c4 	bl	80077f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f8d5 	bl	800781a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d020      	beq.n	80076c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01b      	beq.n	80076c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f06f 0204 	mvn.w	r2, #4
 8007692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f8ac 	bl	8007806 <HAL_TIM_IC_CaptureCallback>
 80076ae:	e005      	b.n	80076bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f89e 	bl	80077f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f8af 	bl	800781a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d020      	beq.n	800770e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f003 0308 	and.w	r3, r3, #8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d01b      	beq.n	800770e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f06f 0208 	mvn.w	r2, #8
 80076de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	f003 0303 	and.w	r3, r3, #3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f886 	bl	8007806 <HAL_TIM_IC_CaptureCallback>
 80076fa:	e005      	b.n	8007708 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f878 	bl	80077f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f889 	bl	800781a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b00      	cmp	r3, #0
 8007716:	d020      	beq.n	800775a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0310 	and.w	r3, r3, #16
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01b      	beq.n	800775a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f06f 0210 	mvn.w	r2, #16
 800772a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2208      	movs	r2, #8
 8007730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f860 	bl	8007806 <HAL_TIM_IC_CaptureCallback>
 8007746:	e005      	b.n	8007754 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f852 	bl	80077f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f863 	bl	800781a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00c      	beq.n	800777e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d007      	beq.n	800777e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f06f 0201 	mvn.w	r2, #1
 8007776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fd f905 	bl	8004988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00c      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800779a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f907 	bl	80079b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00c      	beq.n	80077c6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80077be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f834 	bl	800782e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00c      	beq.n	80077ea <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f06f 0220 	mvn.w	r2, #32
 80077e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f8d9 	bl	800799c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800780e:	bf00      	nop
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007836:	bf00      	nop
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a46      	ldr	r2, [pc, #280]	@ (8007970 <TIM_Base_SetConfig+0x12c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d013      	beq.n	8007884 <TIM_Base_SetConfig+0x40>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007862:	d00f      	beq.n	8007884 <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a43      	ldr	r2, [pc, #268]	@ (8007974 <TIM_Base_SetConfig+0x130>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00b      	beq.n	8007884 <TIM_Base_SetConfig+0x40>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a42      	ldr	r2, [pc, #264]	@ (8007978 <TIM_Base_SetConfig+0x134>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d007      	beq.n	8007884 <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a41      	ldr	r2, [pc, #260]	@ (800797c <TIM_Base_SetConfig+0x138>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_Base_SetConfig+0x40>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a40      	ldr	r2, [pc, #256]	@ (8007980 <TIM_Base_SetConfig+0x13c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d108      	bne.n	8007896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a35      	ldr	r2, [pc, #212]	@ (8007970 <TIM_Base_SetConfig+0x12c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d02b      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a4:	d027      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a32      	ldr	r2, [pc, #200]	@ (8007974 <TIM_Base_SetConfig+0x130>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d023      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a31      	ldr	r2, [pc, #196]	@ (8007978 <TIM_Base_SetConfig+0x134>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d01f      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a30      	ldr	r2, [pc, #192]	@ (800797c <TIM_Base_SetConfig+0x138>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d01b      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2f      	ldr	r2, [pc, #188]	@ (8007980 <TIM_Base_SetConfig+0x13c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d017      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007984 <TIM_Base_SetConfig+0x140>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d013      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007988 <TIM_Base_SetConfig+0x144>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00f      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a2c      	ldr	r2, [pc, #176]	@ (800798c <TIM_Base_SetConfig+0x148>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00b      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007990 <TIM_Base_SetConfig+0x14c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007994 <TIM_Base_SetConfig+0x150>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a29      	ldr	r2, [pc, #164]	@ (8007998 <TIM_Base_SetConfig+0x154>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d108      	bne.n	8007908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a10      	ldr	r2, [pc, #64]	@ (8007970 <TIM_Base_SetConfig+0x12c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_Base_SetConfig+0xf8>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a12      	ldr	r2, [pc, #72]	@ (8007980 <TIM_Base_SetConfig+0x13c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d103      	bne.n	8007944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	691a      	ldr	r2, [r3, #16]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d105      	bne.n	8007962 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f023 0201 	bic.w	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	611a      	str	r2, [r3, #16]
  }
}
 8007962:	bf00      	nop
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	40010000 	.word	0x40010000
 8007974:	40000400 	.word	0x40000400
 8007978:	40000800 	.word	0x40000800
 800797c:	40000c00 	.word	0x40000c00
 8007980:	40010400 	.word	0x40010400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800
 8007990:	40001800 	.word	0x40001800
 8007994:	40001c00 	.word	0x40001c00
 8007998:	40002000 	.word	0x40002000

0800799c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e042      	b.n	8007a5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fd fac8 	bl	8004f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2224      	movs	r2, #36	@ 0x24
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f001 fad1 	bl	8008fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e024      	b.n	8007ac0 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2224      	movs	r2, #36	@ 0x24
 8007a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a8c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fd fbec 	bl	800526c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	@ 0x28
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d175      	bne.n	8007bd4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_UART_Transmit+0x2c>
 8007aee:	88fb      	ldrh	r3, [r7, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e06e      	b.n	8007bd6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2221      	movs	r2, #33	@ 0x21
 8007b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b06:	f7fd fc59 	bl	80053bc <HAL_GetTick>
 8007b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	88fa      	ldrh	r2, [r7, #6]
 8007b16:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b20:	d108      	bne.n	8007b34 <HAL_UART_Transmit+0x6c>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	e003      	b.n	8007b3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007b3c:	e02e      	b.n	8007b9c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2200      	movs	r2, #0
 8007b46:	2180      	movs	r1, #128	@ 0x80
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 ff18 	bl	800897e <UART_WaitOnFlagUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e03a      	b.n	8007bd6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10b      	bne.n	8007b7e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	3302      	adds	r3, #2
 8007b7a:	61bb      	str	r3, [r7, #24]
 8007b7c:	e007      	b.n	8007b8e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1cb      	bne.n	8007b3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2200      	movs	r2, #0
 8007bae:	2140      	movs	r1, #64	@ 0x40
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fee4 	bl	800897e <UART_WaitOnFlagUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e006      	b.n	8007bd6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e000      	b.n	8007bd6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007bd4:	2302      	movs	r3, #2
  }
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3720      	adds	r7, #32
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b08a      	sub	sp, #40	@ 0x28
 8007be2:	af02      	add	r7, sp, #8
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	603b      	str	r3, [r7, #0]
 8007bea:	4613      	mov	r3, r2
 8007bec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	f040 8081 	bne.w	8007d02 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <HAL_UART_Receive+0x2e>
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e079      	b.n	8007d04 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2222      	movs	r2, #34	@ 0x22
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c24:	f7fd fbca 	bl	80053bc <HAL_GetTick>
 8007c28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3e:	d108      	bne.n	8007c52 <HAL_UART_Receive+0x74>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	61bb      	str	r3, [r7, #24]
 8007c50:	e003      	b.n	8007c5a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007c5a:	e047      	b.n	8007cec <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2200      	movs	r2, #0
 8007c64:	2120      	movs	r1, #32
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fe89 	bl	800897e <UART_WaitOnFlagUntilTimeout>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e042      	b.n	8007d04 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10c      	bne.n	8007c9e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	3302      	adds	r3, #2
 8007c9a:	61bb      	str	r3, [r7, #24]
 8007c9c:	e01f      	b.n	8007cde <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca6:	d007      	beq.n	8007cb8 <HAL_UART_Receive+0xda>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <HAL_UART_Receive+0xe8>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d106      	bne.n	8007cc6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	e008      	b.n	8007cd8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1b2      	bne.n	8007c5c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e000      	b.n	8007d04 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
  }
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08c      	sub	sp, #48	@ 0x30
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	4613      	mov	r3, r2
 8007d18:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d156      	bne.n	8007dd4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_UART_Transmit_DMA+0x26>
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e04f      	b.n	8007dd6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	88fa      	ldrh	r2, [r7, #6]
 8007d40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	88fa      	ldrh	r2, [r7, #6]
 8007d46:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2221      	movs	r2, #33	@ 0x21
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	4a21      	ldr	r2, [pc, #132]	@ (8007de0 <HAL_UART_Transmit_DMA+0xd4>)
 8007d5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d62:	4a20      	ldr	r2, [pc, #128]	@ (8007de4 <HAL_UART_Transmit_DMA+0xd8>)
 8007d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007de8 <HAL_UART_Transmit_DMA+0xdc>)
 8007d6c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d72:	2200      	movs	r2, #0
 8007d74:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007d76:	f107 0308 	add.w	r3, r7, #8
 8007d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	6819      	ldr	r1, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	f7fd fd41 	bl	8005814 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3314      	adds	r3, #20
 8007da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	617b      	str	r3, [r7, #20]
   return(result);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3314      	adds	r3, #20
 8007dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6a39      	ldr	r1, [r7, #32]
 8007dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e5      	bne.n	8007d9c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e000      	b.n	8007dd6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007dd4:	2302      	movs	r3, #2
  }
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3730      	adds	r7, #48	@ 0x30
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	080086cd 	.word	0x080086cd
 8007de4:	08008767 	.word	0x08008767
 8007de8:	080088eb 	.word	0x080088eb

08007dec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	d112      	bne.n	8007e2c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_UART_Receive_DMA+0x26>
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e00b      	b.n	8007e2e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e1c:	88fb      	ldrh	r3, [r7, #6]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	68b9      	ldr	r1, [r7, #8]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fe04 	bl	8008a30 <UART_Start_Receive_DMA>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	e000      	b.n	8007e2e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007e2c:	2302      	movs	r3, #2
  }
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b08c      	sub	sp, #48	@ 0x30
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d14a      	bne.n	8007ee6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e043      	b.n	8007ee8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007e6c:	88fb      	ldrh	r3, [r7, #6]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fddc 	bl	8008a30 <UART_Start_Receive_DMA>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d12c      	bne.n	8007ee0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d125      	bne.n	8007eda <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	613b      	str	r3, [r7, #16]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f043 0310 	orr.w	r3, r3, #16
 8007eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ec4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6a39      	ldr	r1, [r7, #32]
 8007eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e5      	bne.n	8007ea4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007ed8:	e002      	b.n	8007ee0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ee4:	e000      	b.n	8007ee8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007ee6:	2302      	movs	r3, #2
  }
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3730      	adds	r7, #48	@ 0x30
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (returned value will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return(huart->RxEventType);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b0a2      	sub	sp, #136	@ 0x88
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f28:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8007f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	330c      	adds	r3, #12
 8007f36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e3      	bne.n	8007f16 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3314      	adds	r3, #20
 8007f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3314      	adds	r3, #20
 8007f6c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007f6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f70:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e5      	bne.n	8007f4e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d119      	bne.n	8007fbe <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	330c      	adds	r3, #12
 8007f90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f94:	e853 3f00 	ldrex	r3, [r3]
 8007f98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f9c:	f023 0310 	bic.w	r3, r3, #16
 8007fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007faa:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fb2:	e841 2300 	strex	r3, r2, [r1]
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1e5      	bne.n	8007f8a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00f      	beq.n	8007fe6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd0:	2b80      	cmp	r3, #128	@ 0x80
 8007fd2:	d104      	bne.n	8007fde <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd8:	4a53      	ldr	r2, [pc, #332]	@ (8008128 <HAL_UART_Abort_IT+0x220>)
 8007fda:	651a      	str	r2, [r3, #80]	@ 0x50
 8007fdc:	e003      	b.n	8007fe6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00f      	beq.n	800800e <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff8:	2b40      	cmp	r3, #64	@ 0x40
 8007ffa:	d104      	bne.n	8008006 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008000:	4a4a      	ldr	r2, [pc, #296]	@ (800812c <HAL_UART_Abort_IT+0x224>)
 8008002:	651a      	str	r2, [r3, #80]	@ 0x50
 8008004:	e003      	b.n	800800e <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800a:	2200      	movs	r2, #0
 800800c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008018:	2b80      	cmp	r3, #128	@ 0x80
 800801a:	d12d      	bne.n	8008078 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3314      	adds	r3, #20
 8008022:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	623b      	str	r3, [r7, #32]
   return(result);
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008032:	677b      	str	r3, [r7, #116]	@ 0x74
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	3314      	adds	r3, #20
 800803a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800803c:	633a      	str	r2, [r7, #48]	@ 0x30
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e5      	bne.n	800801c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00f      	beq.n	8008078 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd fca1 	bl	80059a4 <HAL_DMA_Abort_IT>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806c:	2200      	movs	r2, #0
 800806e:	651a      	str	r2, [r3, #80]	@ 0x50
 8008070:	e002      	b.n	8008078 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8008072:	2300      	movs	r3, #0
 8008074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008082:	2b40      	cmp	r3, #64	@ 0x40
 8008084:	d130      	bne.n	80080e8 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3314      	adds	r3, #20
 800808c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	e853 3f00 	ldrex	r3, [r3]
 8008094:	60fb      	str	r3, [r7, #12]
   return(result);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800809c:	673b      	str	r3, [r7, #112]	@ 0x70
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3314      	adds	r3, #20
 80080a4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80080a6:	61fa      	str	r2, [r7, #28]
 80080a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080aa:	69b9      	ldr	r1, [r7, #24]
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	e841 2300 	strex	r3, r2, [r1]
 80080b2:	617b      	str	r3, [r7, #20]
   return(result);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1e5      	bne.n	8008086 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d012      	beq.n	80080e8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fd fc6c 	bl	80059a4 <HAL_DMA_Abort_IT>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d6:	2200      	movs	r2, #0
 80080d8:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80080da:	2301      	movs	r3, #1
 80080dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080e0:	e002      	b.n	80080e8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80080e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d116      	bne.n	800811e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2220      	movs	r2, #32
 8008106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 facd 	bl	80086b8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3788      	adds	r7, #136	@ 0x88
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	08008ca3 	.word	0x08008ca3
 800812c:	08008d03 	.word	0x08008d03

08008130 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b0ba      	sub	sp, #232	@ 0xe8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008156:	2300      	movs	r3, #0
 8008158:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800815c:	2300      	movs	r3, #0
 800815e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800816e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10f      	bne.n	8008196 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b00      	cmp	r3, #0
 8008180:	d009      	beq.n	8008196 <HAL_UART_IRQHandler+0x66>
 8008182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fe4f 	bl	8008e32 <UART_Receive_IT>
      return;
 8008194:	e25b      	b.n	800864e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80de 	beq.w	800835c <HAL_UART_IRQHandler+0x22c>
 80081a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 80d1 	beq.w	800835c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <HAL_UART_IRQHandler+0xae>
 80081c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081d6:	f043 0201 	orr.w	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <HAL_UART_IRQHandler+0xd2>
 80081ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081fa:	f043 0202 	orr.w	r2, r3, #2
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00b      	beq.n	8008226 <HAL_UART_IRQHandler+0xf6>
 800820e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821e:	f043 0204 	orr.w	r2, r3, #4
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d011      	beq.n	8008256 <HAL_UART_IRQHandler+0x126>
 8008232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800823e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d005      	beq.n	8008256 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824e:	f043 0208 	orr.w	r2, r3, #8
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 81f2 	beq.w	8008644 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008264:	f003 0320 	and.w	r3, r3, #32
 8008268:	2b00      	cmp	r3, #0
 800826a:	d008      	beq.n	800827e <HAL_UART_IRQHandler+0x14e>
 800826c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fdda 	bl	8008e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008288:	2b40      	cmp	r3, #64	@ 0x40
 800828a:	bf0c      	ite	eq
 800828c:	2301      	moveq	r3, #1
 800828e:	2300      	movne	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <HAL_UART_IRQHandler+0x17a>
 80082a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d04f      	beq.n	800834a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fc82 	bl	8008bb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ba:	2b40      	cmp	r3, #64	@ 0x40
 80082bc:	d141      	bne.n	8008342 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3314      	adds	r3, #20
 80082c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80082d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3314      	adds	r3, #20
 80082e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80082ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80082ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80082f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1d9      	bne.n	80082be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d013      	beq.n	800833a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008316:	4a7e      	ldr	r2, [pc, #504]	@ (8008510 <HAL_UART_IRQHandler+0x3e0>)
 8008318:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831e:	4618      	mov	r0, r3
 8008320:	f7fd fb40 	bl	80059a4 <HAL_DMA_Abort_IT>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d016      	beq.n	8008358 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800832e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008338:	e00e      	b.n	8008358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f9b2 	bl	80086a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008340:	e00a      	b.n	8008358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9ae 	bl	80086a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008348:	e006      	b.n	8008358 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9aa 	bl	80086a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008356:	e175      	b.n	8008644 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008358:	bf00      	nop
    return;
 800835a:	e173      	b.n	8008644 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008360:	2b01      	cmp	r3, #1
 8008362:	f040 814f 	bne.w	8008604 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800836a:	f003 0310 	and.w	r3, r3, #16
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8148 	beq.w	8008604 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8141 	beq.w	8008604 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008382:	2300      	movs	r3, #0
 8008384:	60bb      	str	r3, [r7, #8]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60bb      	str	r3, [r7, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a2:	2b40      	cmp	r3, #64	@ 0x40
 80083a4:	f040 80b6 	bne.w	8008514 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 8145 	beq.w	8008648 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80083c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083c6:	429a      	cmp	r2, r3
 80083c8:	f080 813e 	bcs.w	8008648 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80083d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083de:	f000 8088 	beq.w	80084f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	330c      	adds	r3, #12
 80083e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80083f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800840e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800841a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1d9      	bne.n	80083e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3314      	adds	r3, #20
 8008434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800843e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008440:	f023 0301 	bic.w	r3, r3, #1
 8008444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3314      	adds	r3, #20
 800844e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008452:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008456:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800845a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e1      	bne.n	800842e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3314      	adds	r3, #20
 8008470:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800847a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800847c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	3314      	adds	r3, #20
 800848a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800848e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008490:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008494:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800849c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e3      	bne.n	800846a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80084c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084c2:	f023 0310 	bic.w	r3, r3, #16
 80084c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	330c      	adds	r3, #12
 80084d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80084d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80084d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80084da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80084e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e3      	bne.n	80084b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fd f9e9 	bl	80058c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008500:	b29b      	uxth	r3, r3
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	b29b      	uxth	r3, r3
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7fb fdfd 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800850e:	e09b      	b.n	8008648 <HAL_UART_IRQHandler+0x518>
 8008510:	08008c7b 	.word	0x08008c7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800851c:	b29b      	uxth	r3, r3
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 808e 	beq.w	800864c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8089 	beq.w	800864c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	330c      	adds	r3, #12
 8008540:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800854a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800854c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008550:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	330c      	adds	r3, #12
 800855a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800855e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008560:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800856c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e3      	bne.n	800853a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3314      	adds	r3, #20
 8008578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	623b      	str	r3, [r7, #32]
   return(result);
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	f023 0301 	bic.w	r3, r3, #1
 8008588:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3314      	adds	r3, #20
 8008592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008596:	633a      	str	r2, [r7, #48]	@ 0x30
 8008598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800859c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e3      	bne.n	8008572 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	330c      	adds	r3, #12
 80085be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0310 	bic.w	r3, r3, #16
 80085ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	330c      	adds	r3, #12
 80085d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80085dc:	61fa      	str	r2, [r7, #28]
 80085de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e3      	bne.n	80085b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f7fb fd83 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008602:	e023      	b.n	800864c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800860c:	2b00      	cmp	r3, #0
 800860e:	d009      	beq.n	8008624 <HAL_UART_IRQHandler+0x4f4>
 8008610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fba0 	bl	8008d62 <UART_Transmit_IT>
    return;
 8008622:	e014      	b.n	800864e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00e      	beq.n	800864e <HAL_UART_IRQHandler+0x51e>
 8008630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d008      	beq.n	800864e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fbe0 	bl	8008e02 <UART_EndTransmit_IT>
    return;
 8008642:	e004      	b.n	800864e <HAL_UART_IRQHandler+0x51e>
    return;
 8008644:	bf00      	nop
 8008646:	e002      	b.n	800864e <HAL_UART_IRQHandler+0x51e>
      return;
 8008648:	bf00      	nop
 800864a:	e000      	b.n	800864e <HAL_UART_IRQHandler+0x51e>
      return;
 800864c:	bf00      	nop
  }
}
 800864e:	37e8      	adds	r7, #232	@ 0xe8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b090      	sub	sp, #64	@ 0x40
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d137      	bne.n	8008758 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80086e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ea:	2200      	movs	r2, #0
 80086ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3314      	adds	r3, #20
 80086f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	623b      	str	r3, [r7, #32]
   return(result);
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008704:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3314      	adds	r3, #20
 800870c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800870e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800871c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e5      	bne.n	80086ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	330c      	adds	r3, #12
 8008728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	60fb      	str	r3, [r7, #12]
   return(result);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
 800873a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008742:	61fa      	str	r2, [r7, #28]
 8008744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	69b9      	ldr	r1, [r7, #24]
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	617b      	str	r3, [r7, #20]
   return(result);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e5      	bne.n	8008722 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008756:	e002      	b.n	800875e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008758:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800875a:	f7ff ff7b 	bl	8008654 <HAL_UART_TxCpltCallback>
}
 800875e:	bf00      	nop
 8008760:	3740      	adds	r7, #64	@ 0x40
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff ff77 	bl	8008668 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b09c      	sub	sp, #112	@ 0x70
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800879a:	2b00      	cmp	r3, #0
 800879c:	d172      	bne.n	8008884 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800879e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087a0:	2200      	movs	r2, #0
 80087a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80087c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80087c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e5      	bne.n	80087a4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3314      	adds	r3, #20
 80087de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ea:	f023 0301 	bic.w	r3, r3, #1
 80087ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80087f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3314      	adds	r3, #20
 80087f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80087f8:	647a      	str	r2, [r7, #68]	@ 0x44
 80087fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e5      	bne.n	80087d8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3314      	adds	r3, #20
 8008812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	e853 3f00 	ldrex	r3, [r3]
 800881a:	623b      	str	r3, [r7, #32]
   return(result);
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008822:	663b      	str	r3, [r7, #96]	@ 0x60
 8008824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3314      	adds	r3, #20
 800882a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800882c:	633a      	str	r2, [r7, #48]	@ 0x30
 800882e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008830:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008832:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008834:	e841 2300 	strex	r3, r2, [r1]
 8008838:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800883a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1e5      	bne.n	800880c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008842:	2220      	movs	r2, #32
 8008844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800884a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800884c:	2b01      	cmp	r3, #1
 800884e:	d119      	bne.n	8008884 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0310 	bic.w	r3, r3, #16
 8008866:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008870:	61fa      	str	r2, [r7, #28]
 8008872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	69b9      	ldr	r1, [r7, #24]
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	617b      	str	r3, [r7, #20]
   return(result);
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e5      	bne.n	8008850 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008886:	2200      	movs	r2, #0
 8008888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800888a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800888c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800888e:	2b01      	cmp	r3, #1
 8008890:	d106      	bne.n	80088a0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008894:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008896:	4619      	mov	r1, r3
 8008898:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800889a:	f7fb fc35 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800889e:	e002      	b.n	80088a6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088a2:	f7ff feeb 	bl	800867c <HAL_UART_RxCpltCallback>
}
 80088a6:	bf00      	nop
 80088a8:	3770      	adds	r7, #112	@ 0x70
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d108      	bne.n	80088dc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088ce:	085b      	lsrs	r3, r3, #1
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7fb fc17 	bl	8004108 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088da:	e002      	b.n	80088e2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f7ff fed7 	bl	8008690 <HAL_UART_RxHalfCpltCallback>
}
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008906:	2b80      	cmp	r3, #128	@ 0x80
 8008908:	bf0c      	ite	eq
 800890a:	2301      	moveq	r3, #1
 800890c:	2300      	movne	r3, #0
 800890e:	b2db      	uxtb	r3, r3
 8008910:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b21      	cmp	r3, #33	@ 0x21
 800891c:	d108      	bne.n	8008930 <UART_DMAError+0x46>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2200      	movs	r2, #0
 8008928:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800892a:	68b8      	ldr	r0, [r7, #8]
 800892c:	f000 f91a 	bl	8008b64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893a:	2b40      	cmp	r3, #64	@ 0x40
 800893c:	bf0c      	ite	eq
 800893e:	2301      	moveq	r3, #1
 8008940:	2300      	movne	r3, #0
 8008942:	b2db      	uxtb	r3, r3
 8008944:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b22      	cmp	r3, #34	@ 0x22
 8008950:	d108      	bne.n	8008964 <UART_DMAError+0x7a>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2200      	movs	r2, #0
 800895c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800895e:	68b8      	ldr	r0, [r7, #8]
 8008960:	f000 f928 	bl	8008bb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008968:	f043 0210 	orr.w	r2, r3, #16
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008970:	68b8      	ldr	r0, [r7, #8]
 8008972:	f7ff fe97 	bl	80086a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	4613      	mov	r3, r2
 800898c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898e:	e03b      	b.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d037      	beq.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008998:	f7fc fd10 	bl	80053bc <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	6a3a      	ldr	r2, [r7, #32]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d302      	bcc.n	80089ae <UART_WaitOnFlagUntilTimeout+0x30>
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e03a      	b.n	8008a28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f003 0304 	and.w	r3, r3, #4
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d023      	beq.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b80      	cmp	r3, #128	@ 0x80
 80089c4:	d020      	beq.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b40      	cmp	r3, #64	@ 0x40
 80089ca:	d01d      	beq.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b08      	cmp	r3, #8
 80089d8:	d116      	bne.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	617b      	str	r3, [r7, #20]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 f8df 	bl	8008bb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2208      	movs	r2, #8
 80089fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e00f      	b.n	8008a28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4013      	ands	r3, r2
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	bf0c      	ite	eq
 8008a18:	2301      	moveq	r3, #1
 8008a1a:	2300      	movne	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d0b4      	beq.n	8008990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b098      	sub	sp, #96	@ 0x60
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2222      	movs	r2, #34	@ 0x22
 8008a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8008b58 <UART_Start_Receive_DMA+0x128>)
 8008a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a64:	4a3d      	ldr	r2, [pc, #244]	@ (8008b5c <UART_Start_Receive_DMA+0x12c>)
 8008a66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8008b60 <UART_Start_Receive_DMA+0x130>)
 8008a6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a74:	2200      	movs	r2, #0
 8008a76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	f7fc fec0 	bl	8005814 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a94:	2300      	movs	r3, #0
 8008a96:	613b      	str	r3, [r7, #16]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	613b      	str	r3, [r7, #16]
 8008aa8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d019      	beq.n	8008ae6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	330c      	adds	r3, #12
 8008ad0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ad2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008ad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e5      	bne.n	8008ab2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3314      	adds	r3, #20
 8008aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af8:	f043 0301 	orr.w	r3, r3, #1
 8008afc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3314      	adds	r3, #20
 8008b04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b06:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e5      	bne.n	8008ae6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3314      	adds	r3, #20
 8008b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	617b      	str	r3, [r7, #20]
   return(result);
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b30:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3314      	adds	r3, #20
 8008b38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	6a39      	ldr	r1, [r7, #32]
 8008b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b42:	e841 2300 	strex	r3, r2, [r1]
 8008b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1e5      	bne.n	8008b1a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3760      	adds	r7, #96	@ 0x60
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	08008783 	.word	0x08008783
 8008b5c:	080088af 	.word	0x080088af
 8008b60:	080088eb 	.word	0x080088eb

08008b64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b089      	sub	sp, #36	@ 0x24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008b82:	61fb      	str	r3, [r7, #28]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	69fa      	ldr	r2, [r7, #28]
 8008b8c:	61ba      	str	r2, [r7, #24]
 8008b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6979      	ldr	r1, [r7, #20]
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	613b      	str	r3, [r7, #16]
   return(result);
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e5      	bne.n	8008b6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008ba8:	bf00      	nop
 8008baa:	3724      	adds	r7, #36	@ 0x24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b095      	sub	sp, #84	@ 0x54
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330c      	adds	r3, #12
 8008bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	330c      	adds	r3, #12
 8008bda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8008bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008be2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e5      	bne.n	8008bbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3314      	adds	r3, #20
 8008bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	e853 3f00 	ldrex	r3, [r3]
 8008bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f023 0301 	bic.w	r3, r3, #1
 8008c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3314      	adds	r3, #20
 8008c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e5      	bne.n	8008bf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d119      	bne.n	8008c60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	330c      	adds	r3, #12
 8008c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f023 0310 	bic.w	r3, r3, #16
 8008c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	330c      	adds	r3, #12
 8008c4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c4c:	61ba      	str	r2, [r7, #24]
 8008c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6979      	ldr	r1, [r7, #20]
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	613b      	str	r3, [r7, #16]
   return(result);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e5      	bne.n	8008c2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c6e:	bf00      	nop
 8008c70:	3754      	adds	r7, #84	@ 0x54
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f7ff fd05 	bl	80086a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cae:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d004      	beq.n	8008cca <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d117      	bne.n	8008cfa <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff fce0 	bl	80086b8 <HAL_UART_AbortCpltCallback>
 8008cf8:	e000      	b.n	8008cfc <UART_DMATxAbortCallback+0x5a>
      return;
 8008cfa:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d14:	2200      	movs	r2, #0
 8008d16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d117      	bne.n	8008d5a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7ff fcb0 	bl	80086b8 <HAL_UART_AbortCpltCallback>
 8008d58:	e000      	b.n	8008d5c <UART_DMARxAbortCallback+0x5a>
      return;
 8008d5a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b085      	sub	sp, #20
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b21      	cmp	r3, #33	@ 0x21
 8008d74:	d13e      	bne.n	8008df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d7e:	d114      	bne.n	8008daa <UART_Transmit_IT+0x48>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d110      	bne.n	8008daa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	1c9a      	adds	r2, r3, #2
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	621a      	str	r2, [r3, #32]
 8008da8:	e008      	b.n	8008dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	1c59      	adds	r1, r3, #1
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6211      	str	r1, [r2, #32]
 8008db4:	781a      	ldrb	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10f      	bne.n	8008df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e000      	b.n	8008df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fc16 	bl	8008654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08c      	sub	sp, #48	@ 0x30
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b22      	cmp	r3, #34	@ 0x22
 8008e44:	f040 80ae 	bne.w	8008fa4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e50:	d117      	bne.n	8008e82 <UART_Receive_IT+0x50>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d113      	bne.n	8008e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e62:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7a:	1c9a      	adds	r2, r3, #2
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e80:	e026      	b.n	8008ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e94:	d007      	beq.n	8008ea6 <UART_Receive_IT+0x74>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <UART_Receive_IT+0x82>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	e008      	b.n	8008ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4619      	mov	r1, r3
 8008ede:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d15d      	bne.n	8008fa0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0220 	bic.w	r2, r2, #32
 8008ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695a      	ldr	r2, [r3, #20]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0201 	bic.w	r2, r2, #1
 8008f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d135      	bne.n	8008f96 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	330c      	adds	r3, #12
 8008f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f023 0310 	bic.w	r3, r3, #16
 8008f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	330c      	adds	r3, #12
 8008f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f50:	623a      	str	r2, [r7, #32]
 8008f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	69f9      	ldr	r1, [r7, #28]
 8008f56:	6a3a      	ldr	r2, [r7, #32]
 8008f58:	e841 2300 	strex	r3, r2, [r1]
 8008f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e5      	bne.n	8008f30 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0310 	and.w	r3, r3, #16
 8008f6e:	2b10      	cmp	r3, #16
 8008f70:	d10a      	bne.n	8008f88 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f72:	2300      	movs	r3, #0
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7fb f8ba 	bl	8004108 <HAL_UARTEx_RxEventCallback>
 8008f94:	e002      	b.n	8008f9c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7ff fb70 	bl	800867c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e002      	b.n	8008fa6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	e000      	b.n	8008fa6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008fa4:	2302      	movs	r3, #2
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3730      	adds	r7, #48	@ 0x30
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fb4:	b0c0      	sub	sp, #256	@ 0x100
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fcc:	68d9      	ldr	r1, [r3, #12]
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	ea40 0301 	orr.w	r3, r0, r1
 8008fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009008:	f021 010c 	bic.w	r1, r1, #12
 800900c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009016:	430b      	orrs	r3, r1
 8009018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800901a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800902a:	6999      	ldr	r1, [r3, #24]
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	ea40 0301 	orr.w	r3, r0, r1
 8009036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	4b8f      	ldr	r3, [pc, #572]	@ (800927c <UART_SetConfig+0x2cc>)
 8009040:	429a      	cmp	r2, r3
 8009042:	d005      	beq.n	8009050 <UART_SetConfig+0xa0>
 8009044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	4b8d      	ldr	r3, [pc, #564]	@ (8009280 <UART_SetConfig+0x2d0>)
 800904c:	429a      	cmp	r2, r3
 800904e:	d104      	bne.n	800905a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009050:	f7fe f942 	bl	80072d8 <HAL_RCC_GetPCLK2Freq>
 8009054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009058:	e003      	b.n	8009062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800905a:	f7fe f929 	bl	80072b0 <HAL_RCC_GetPCLK1Freq>
 800905e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800906c:	f040 810c 	bne.w	8009288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009074:	2200      	movs	r2, #0
 8009076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800907a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800907e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009082:	4622      	mov	r2, r4
 8009084:	462b      	mov	r3, r5
 8009086:	1891      	adds	r1, r2, r2
 8009088:	65b9      	str	r1, [r7, #88]	@ 0x58
 800908a:	415b      	adcs	r3, r3
 800908c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800908e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009092:	4621      	mov	r1, r4
 8009094:	eb12 0801 	adds.w	r8, r2, r1
 8009098:	4629      	mov	r1, r5
 800909a:	eb43 0901 	adc.w	r9, r3, r1
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	f04f 0300 	mov.w	r3, #0
 80090a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090b2:	4690      	mov	r8, r2
 80090b4:	4699      	mov	r9, r3
 80090b6:	4623      	mov	r3, r4
 80090b8:	eb18 0303 	adds.w	r3, r8, r3
 80090bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090c0:	462b      	mov	r3, r5
 80090c2:	eb49 0303 	adc.w	r3, r9, r3
 80090c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80090da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090de:	460b      	mov	r3, r1
 80090e0:	18db      	adds	r3, r3, r3
 80090e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80090e4:	4613      	mov	r3, r2
 80090e6:	eb42 0303 	adc.w	r3, r2, r3
 80090ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80090ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80090f4:	f7f7 fdd8 	bl	8000ca8 <__aeabi_uldivmod>
 80090f8:	4602      	mov	r2, r0
 80090fa:	460b      	mov	r3, r1
 80090fc:	4b61      	ldr	r3, [pc, #388]	@ (8009284 <UART_SetConfig+0x2d4>)
 80090fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009102:	095b      	lsrs	r3, r3, #5
 8009104:	011c      	lsls	r4, r3, #4
 8009106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800910a:	2200      	movs	r2, #0
 800910c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009110:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009118:	4642      	mov	r2, r8
 800911a:	464b      	mov	r3, r9
 800911c:	1891      	adds	r1, r2, r2
 800911e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009120:	415b      	adcs	r3, r3
 8009122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009128:	4641      	mov	r1, r8
 800912a:	eb12 0a01 	adds.w	sl, r2, r1
 800912e:	4649      	mov	r1, r9
 8009130:	eb43 0b01 	adc.w	fp, r3, r1
 8009134:	f04f 0200 	mov.w	r2, #0
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009148:	4692      	mov	sl, r2
 800914a:	469b      	mov	fp, r3
 800914c:	4643      	mov	r3, r8
 800914e:	eb1a 0303 	adds.w	r3, sl, r3
 8009152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009156:	464b      	mov	r3, r9
 8009158:	eb4b 0303 	adc.w	r3, fp, r3
 800915c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800916c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009174:	460b      	mov	r3, r1
 8009176:	18db      	adds	r3, r3, r3
 8009178:	643b      	str	r3, [r7, #64]	@ 0x40
 800917a:	4613      	mov	r3, r2
 800917c:	eb42 0303 	adc.w	r3, r2, r3
 8009180:	647b      	str	r3, [r7, #68]	@ 0x44
 8009182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800918a:	f7f7 fd8d 	bl	8000ca8 <__aeabi_uldivmod>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	4611      	mov	r1, r2
 8009194:	4b3b      	ldr	r3, [pc, #236]	@ (8009284 <UART_SetConfig+0x2d4>)
 8009196:	fba3 2301 	umull	r2, r3, r3, r1
 800919a:	095b      	lsrs	r3, r3, #5
 800919c:	2264      	movs	r2, #100	@ 0x64
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	1acb      	subs	r3, r1, r3
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80091aa:	4b36      	ldr	r3, [pc, #216]	@ (8009284 <UART_SetConfig+0x2d4>)
 80091ac:	fba3 2302 	umull	r2, r3, r3, r2
 80091b0:	095b      	lsrs	r3, r3, #5
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80091b8:	441c      	add	r4, r3
 80091ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80091c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	1891      	adds	r1, r2, r2
 80091d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80091d4:	415b      	adcs	r3, r3
 80091d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80091dc:	4641      	mov	r1, r8
 80091de:	1851      	adds	r1, r2, r1
 80091e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80091e2:	4649      	mov	r1, r9
 80091e4:	414b      	adcs	r3, r1
 80091e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	f04f 0300 	mov.w	r3, #0
 80091f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80091f4:	4659      	mov	r1, fp
 80091f6:	00cb      	lsls	r3, r1, #3
 80091f8:	4651      	mov	r1, sl
 80091fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091fe:	4651      	mov	r1, sl
 8009200:	00ca      	lsls	r2, r1, #3
 8009202:	4610      	mov	r0, r2
 8009204:	4619      	mov	r1, r3
 8009206:	4603      	mov	r3, r0
 8009208:	4642      	mov	r2, r8
 800920a:	189b      	adds	r3, r3, r2
 800920c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009210:	464b      	mov	r3, r9
 8009212:	460a      	mov	r2, r1
 8009214:	eb42 0303 	adc.w	r3, r2, r3
 8009218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009228:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800922c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009230:	460b      	mov	r3, r1
 8009232:	18db      	adds	r3, r3, r3
 8009234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009236:	4613      	mov	r3, r2
 8009238:	eb42 0303 	adc.w	r3, r2, r3
 800923c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800923e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009246:	f7f7 fd2f 	bl	8000ca8 <__aeabi_uldivmod>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	4b0d      	ldr	r3, [pc, #52]	@ (8009284 <UART_SetConfig+0x2d4>)
 8009250:	fba3 1302 	umull	r1, r3, r3, r2
 8009254:	095b      	lsrs	r3, r3, #5
 8009256:	2164      	movs	r1, #100	@ 0x64
 8009258:	fb01 f303 	mul.w	r3, r1, r3
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	3332      	adds	r3, #50	@ 0x32
 8009262:	4a08      	ldr	r2, [pc, #32]	@ (8009284 <UART_SetConfig+0x2d4>)
 8009264:	fba2 2303 	umull	r2, r3, r2, r3
 8009268:	095b      	lsrs	r3, r3, #5
 800926a:	f003 0207 	and.w	r2, r3, #7
 800926e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4422      	add	r2, r4
 8009276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009278:	e106      	b.n	8009488 <UART_SetConfig+0x4d8>
 800927a:	bf00      	nop
 800927c:	40011000 	.word	0x40011000
 8009280:	40011400 	.word	0x40011400
 8009284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800928c:	2200      	movs	r2, #0
 800928e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009292:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800929a:	4642      	mov	r2, r8
 800929c:	464b      	mov	r3, r9
 800929e:	1891      	adds	r1, r2, r2
 80092a0:	6239      	str	r1, [r7, #32]
 80092a2:	415b      	adcs	r3, r3
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80092a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092aa:	4641      	mov	r1, r8
 80092ac:	1854      	adds	r4, r2, r1
 80092ae:	4649      	mov	r1, r9
 80092b0:	eb43 0501 	adc.w	r5, r3, r1
 80092b4:	f04f 0200 	mov.w	r2, #0
 80092b8:	f04f 0300 	mov.w	r3, #0
 80092bc:	00eb      	lsls	r3, r5, #3
 80092be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092c2:	00e2      	lsls	r2, r4, #3
 80092c4:	4614      	mov	r4, r2
 80092c6:	461d      	mov	r5, r3
 80092c8:	4643      	mov	r3, r8
 80092ca:	18e3      	adds	r3, r4, r3
 80092cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092d0:	464b      	mov	r3, r9
 80092d2:	eb45 0303 	adc.w	r3, r5, r3
 80092d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80092f6:	4629      	mov	r1, r5
 80092f8:	008b      	lsls	r3, r1, #2
 80092fa:	4621      	mov	r1, r4
 80092fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009300:	4621      	mov	r1, r4
 8009302:	008a      	lsls	r2, r1, #2
 8009304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009308:	f7f7 fcce 	bl	8000ca8 <__aeabi_uldivmod>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4b60      	ldr	r3, [pc, #384]	@ (8009494 <UART_SetConfig+0x4e4>)
 8009312:	fba3 2302 	umull	r2, r3, r3, r2
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	011c      	lsls	r4, r3, #4
 800931a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800931e:	2200      	movs	r2, #0
 8009320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009324:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800932c:	4642      	mov	r2, r8
 800932e:	464b      	mov	r3, r9
 8009330:	1891      	adds	r1, r2, r2
 8009332:	61b9      	str	r1, [r7, #24]
 8009334:	415b      	adcs	r3, r3
 8009336:	61fb      	str	r3, [r7, #28]
 8009338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800933c:	4641      	mov	r1, r8
 800933e:	1851      	adds	r1, r2, r1
 8009340:	6139      	str	r1, [r7, #16]
 8009342:	4649      	mov	r1, r9
 8009344:	414b      	adcs	r3, r1
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009354:	4659      	mov	r1, fp
 8009356:	00cb      	lsls	r3, r1, #3
 8009358:	4651      	mov	r1, sl
 800935a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800935e:	4651      	mov	r1, sl
 8009360:	00ca      	lsls	r2, r1, #3
 8009362:	4610      	mov	r0, r2
 8009364:	4619      	mov	r1, r3
 8009366:	4603      	mov	r3, r0
 8009368:	4642      	mov	r2, r8
 800936a:	189b      	adds	r3, r3, r2
 800936c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009370:	464b      	mov	r3, r9
 8009372:	460a      	mov	r2, r1
 8009374:	eb42 0303 	adc.w	r3, r2, r3
 8009378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009394:	4649      	mov	r1, r9
 8009396:	008b      	lsls	r3, r1, #2
 8009398:	4641      	mov	r1, r8
 800939a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800939e:	4641      	mov	r1, r8
 80093a0:	008a      	lsls	r2, r1, #2
 80093a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80093a6:	f7f7 fc7f 	bl	8000ca8 <__aeabi_uldivmod>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	4b38      	ldr	r3, [pc, #224]	@ (8009494 <UART_SetConfig+0x4e4>)
 80093b2:	fba3 2301 	umull	r2, r3, r3, r1
 80093b6:	095b      	lsrs	r3, r3, #5
 80093b8:	2264      	movs	r2, #100	@ 0x64
 80093ba:	fb02 f303 	mul.w	r3, r2, r3
 80093be:	1acb      	subs	r3, r1, r3
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	3332      	adds	r3, #50	@ 0x32
 80093c4:	4a33      	ldr	r2, [pc, #204]	@ (8009494 <UART_SetConfig+0x4e4>)
 80093c6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ca:	095b      	lsrs	r3, r3, #5
 80093cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093d0:	441c      	add	r4, r3
 80093d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093d6:	2200      	movs	r2, #0
 80093d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80093da:	677a      	str	r2, [r7, #116]	@ 0x74
 80093dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	1891      	adds	r1, r2, r2
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	415b      	adcs	r3, r3
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093f0:	4641      	mov	r1, r8
 80093f2:	1851      	adds	r1, r2, r1
 80093f4:	6039      	str	r1, [r7, #0]
 80093f6:	4649      	mov	r1, r9
 80093f8:	414b      	adcs	r3, r1
 80093fa:	607b      	str	r3, [r7, #4]
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009408:	4659      	mov	r1, fp
 800940a:	00cb      	lsls	r3, r1, #3
 800940c:	4651      	mov	r1, sl
 800940e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009412:	4651      	mov	r1, sl
 8009414:	00ca      	lsls	r2, r1, #3
 8009416:	4610      	mov	r0, r2
 8009418:	4619      	mov	r1, r3
 800941a:	4603      	mov	r3, r0
 800941c:	4642      	mov	r2, r8
 800941e:	189b      	adds	r3, r3, r2
 8009420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009422:	464b      	mov	r3, r9
 8009424:	460a      	mov	r2, r1
 8009426:	eb42 0303 	adc.w	r3, r2, r3
 800942a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800942c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	663b      	str	r3, [r7, #96]	@ 0x60
 8009436:	667a      	str	r2, [r7, #100]	@ 0x64
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	f04f 0300 	mov.w	r3, #0
 8009440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009444:	4649      	mov	r1, r9
 8009446:	008b      	lsls	r3, r1, #2
 8009448:	4641      	mov	r1, r8
 800944a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800944e:	4641      	mov	r1, r8
 8009450:	008a      	lsls	r2, r1, #2
 8009452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009456:	f7f7 fc27 	bl	8000ca8 <__aeabi_uldivmod>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <UART_SetConfig+0x4e4>)
 8009460:	fba3 1302 	umull	r1, r3, r3, r2
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	2164      	movs	r1, #100	@ 0x64
 8009468:	fb01 f303 	mul.w	r3, r1, r3
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	3332      	adds	r3, #50	@ 0x32
 8009472:	4a08      	ldr	r2, [pc, #32]	@ (8009494 <UART_SetConfig+0x4e4>)
 8009474:	fba2 2303 	umull	r2, r3, r2, r3
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	f003 020f 	and.w	r2, r3, #15
 800947e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4422      	add	r2, r4
 8009486:	609a      	str	r2, [r3, #8]
}
 8009488:	bf00      	nop
 800948a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800948e:	46bd      	mov	sp, r7
 8009490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009494:	51eb851f 	.word	0x51eb851f

08009498 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80094a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094aa:	2b84      	cmp	r3, #132	@ 0x84
 80094ac:	d005      	beq.n	80094ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80094ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	3303      	adds	r3, #3
 80094b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80094ba:	68fb      	ldr	r3, [r7, #12]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094ce:	f3ef 8305 	mrs	r3, IPSR
 80094d2:	607b      	str	r3, [r7, #4]
  return(result);
 80094d4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	bf14      	ite	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	2300      	moveq	r3, #0
 80094de:	b2db      	uxtb	r3, r3
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80094f0:	f001 f9c6 	bl	800a880 <vTaskStartScheduler>
  
  return osOK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	bd80      	pop	{r7, pc}

080094fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80094fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094fc:	b089      	sub	sp, #36	@ 0x24
 80094fe:	af04      	add	r7, sp, #16
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d020      	beq.n	800954e <osThreadCreate+0x54>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01c      	beq.n	800954e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685c      	ldr	r4, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691e      	ldr	r6, [r3, #16]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff ffb6 	bl	8009498 <makeFreeRtosPriority>
 800952c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009536:	9202      	str	r2, [sp, #8]
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	9100      	str	r1, [sp, #0]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	4632      	mov	r2, r6
 8009540:	4629      	mov	r1, r5
 8009542:	4620      	mov	r0, r4
 8009544:	f000 ffb6 	bl	800a4b4 <xTaskCreateStatic>
 8009548:	4603      	mov	r3, r0
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e01c      	b.n	8009588 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685c      	ldr	r4, [r3, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800955a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff ff98 	bl	8009498 <makeFreeRtosPriority>
 8009568:	4602      	mov	r2, r0
 800956a:	f107 030c 	add.w	r3, r7, #12
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	9200      	str	r2, [sp, #0]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	4632      	mov	r2, r6
 8009576:	4629      	mov	r1, r5
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fffb 	bl	800a574 <xTaskCreate>
 800957e:	4603      	mov	r3, r0
 8009580:	2b01      	cmp	r3, #1
 8009582:	d001      	beq.n	8009588 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009584:	2300      	movs	r3, #0
 8009586:	e000      	b.n	800958a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009588:	68fb      	ldr	r3, [r7, #12]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009592 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <osDelay+0x16>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	e000      	b.n	80095aa <osDelay+0x18>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 f932 	bl	800a814 <vTaskDelay>
  
  return osOK;
 80095b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d007      	beq.n	80095da <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	4619      	mov	r1, r3
 80095d0:	2001      	movs	r0, #1
 80095d2:	f000 fb40 	bl	8009c56 <xQueueCreateMutexStatic>
 80095d6:	4603      	mov	r3, r0
 80095d8:	e003      	b.n	80095e2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80095da:	2001      	movs	r0, #1
 80095dc:	f000 fb23 	bl	8009c26 <xQueueCreateMutex>
 80095e0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af02      	add	r7, sp, #8
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00f      	beq.n	800961c <osSemaphoreCreate+0x32>
    if (count == 1) {
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d10a      	bne.n	8009618 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	2203      	movs	r2, #3
 8009608:	9200      	str	r2, [sp, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	2001      	movs	r0, #1
 8009610:	f000 fa18 	bl	8009a44 <xQueueGenericCreateStatic>
 8009614:	4603      	mov	r3, r0
 8009616:	e016      	b.n	8009646 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009618:	2300      	movs	r3, #0
 800961a:	e014      	b.n	8009646 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d110      	bne.n	8009644 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009622:	2203      	movs	r2, #3
 8009624:	2100      	movs	r1, #0
 8009626:	2001      	movs	r0, #1
 8009628:	f000 fa89 	bl	8009b3e <xQueueGenericCreate>
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <osSemaphoreCreate+0x56>
 8009634:	2300      	movs	r3, #0
 8009636:	2200      	movs	r2, #0
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 fb26 	bl	8009c8c <xQueueGenericSend>
      return sema;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	e000      	b.n	8009646 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009644:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009646:	4618      	mov	r0, r3
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800964e:	b590      	push	{r4, r7, lr}
 8009650:	b085      	sub	sp, #20
 8009652:	af02      	add	r7, sp, #8
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d011      	beq.n	8009684 <osMessageCreate+0x36>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00d      	beq.n	8009684 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6859      	ldr	r1, [r3, #4]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689a      	ldr	r2, [r3, #8]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	2400      	movs	r4, #0
 800967a:	9400      	str	r4, [sp, #0]
 800967c:	f000 f9e2 	bl	8009a44 <xQueueGenericCreateStatic>
 8009680:	4603      	mov	r3, r0
 8009682:	e008      	b.n	8009696 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	4619      	mov	r1, r3
 8009690:	f000 fa55 	bl	8009b3e <xQueueGenericCreate>
 8009694:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	bd90      	pop	{r4, r7, pc}
	...

080096a0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <osMessagePut+0x1e>
    ticks = 1;
 80096ba:	2301      	movs	r3, #1
 80096bc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80096be:	f7ff ff03 	bl	80094c8 <inHandlerMode>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d018      	beq.n	80096fa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80096c8:	f107 0210 	add.w	r2, r7, #16
 80096cc:	f107 0108 	add.w	r1, r7, #8
 80096d0:	2300      	movs	r3, #0
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 fbdc 	bl	8009e90 <xQueueGenericSendFromISR>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d001      	beq.n	80096e2 <osMessagePut+0x42>
      return osErrorOS;
 80096de:	23ff      	movs	r3, #255	@ 0xff
 80096e0:	e018      	b.n	8009714 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d014      	beq.n	8009712 <osMessagePut+0x72>
 80096e8:	4b0c      	ldr	r3, [pc, #48]	@ (800971c <osMessagePut+0x7c>)
 80096ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	e00b      	b.n	8009712 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80096fa:	f107 0108 	add.w	r1, r7, #8
 80096fe:	2300      	movs	r3, #0
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fac2 	bl	8009c8c <xQueueGenericSend>
 8009708:	4603      	mov	r3, r0
 800970a:	2b01      	cmp	r3, #1
 800970c:	d001      	beq.n	8009712 <osMessagePut+0x72>
      return osErrorOS;
 800970e:	23ff      	movs	r3, #255	@ 0xff
 8009710:	e000      	b.n	8009714 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	e000ed04 	.word	0xe000ed04

08009720 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b08b      	sub	sp, #44	@ 0x2c
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d10a      	bne.n	8009750 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800973a:	2380      	movs	r3, #128	@ 0x80
 800973c:	617b      	str	r3, [r7, #20]
    return event;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	461c      	mov	r4, r3
 8009742:	f107 0314 	add.w	r3, r7, #20
 8009746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800974a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800974e:	e054      	b.n	80097fa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009750:	2300      	movs	r3, #0
 8009752:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975e:	d103      	bne.n	8009768 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009760:	f04f 33ff 	mov.w	r3, #4294967295
 8009764:	627b      	str	r3, [r7, #36]	@ 0x24
 8009766:	e009      	b.n	800977c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d006      	beq.n	800977c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <osMessageGet+0x5c>
      ticks = 1;
 8009778:	2301      	movs	r3, #1
 800977a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800977c:	f7ff fea4 	bl	80094c8 <inHandlerMode>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d01c      	beq.n	80097c0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009786:	f107 0220 	add.w	r2, r7, #32
 800978a:	f107 0314 	add.w	r3, r7, #20
 800978e:	3304      	adds	r3, #4
 8009790:	4619      	mov	r1, r3
 8009792:	68b8      	ldr	r0, [r7, #8]
 8009794:	f000 fcfc 	bl	800a190 <xQueueReceiveFromISR>
 8009798:	4603      	mov	r3, r0
 800979a:	2b01      	cmp	r3, #1
 800979c:	d102      	bne.n	80097a4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800979e:	2310      	movs	r3, #16
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	e001      	b.n	80097a8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01d      	beq.n	80097ea <osMessageGet+0xca>
 80097ae:	4b15      	ldr	r3, [pc, #84]	@ (8009804 <osMessageGet+0xe4>)
 80097b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	e014      	b.n	80097ea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80097c0:	f107 0314 	add.w	r3, r7, #20
 80097c4:	3304      	adds	r3, #4
 80097c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097c8:	4619      	mov	r1, r3
 80097ca:	68b8      	ldr	r0, [r7, #8]
 80097cc:	f000 fbfe 	bl	8009fcc <xQueueReceive>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d102      	bne.n	80097dc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80097d6:	2310      	movs	r3, #16
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e006      	b.n	80097ea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80097dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <osMessageGet+0xc6>
 80097e2:	2300      	movs	r3, #0
 80097e4:	e000      	b.n	80097e8 <osMessageGet+0xc8>
 80097e6:	2340      	movs	r3, #64	@ 0x40
 80097e8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	461c      	mov	r4, r3
 80097ee:	f107 0314 	add.w	r3, r7, #20
 80097f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	372c      	adds	r7, #44	@ 0x2c
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd90      	pop	{r4, r7, pc}
 8009802:	bf00      	nop
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f103 0208 	add.w	r2, r3, #8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f04f 32ff 	mov.w	r2, #4294967295
 8009820:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f103 0208 	add.w	r2, r3, #8
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f103 0208 	add.w	r2, r3, #8
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009862:	b480      	push	{r7}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689a      	ldr	r2, [r3, #8]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	601a      	str	r2, [r3, #0]
}
 800989e:	bf00      	nop
 80098a0:	3714      	adds	r7, #20
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098aa:	b480      	push	{r7}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c0:	d103      	bne.n	80098ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	60fb      	str	r3, [r7, #12]
 80098c8:	e00c      	b.n	80098e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	3308      	adds	r3, #8
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e002      	b.n	80098d8 <vListInsert+0x2e>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d2f6      	bcs.n	80098d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	601a      	str	r2, [r3, #0]
}
 8009910:	bf00      	nop
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6892      	ldr	r2, [r2, #8]
 8009932:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6852      	ldr	r2, [r2, #4]
 800993c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	429a      	cmp	r2, r3
 8009946:	d103      	bne.n	8009950 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	1e5a      	subs	r2, r3, #1
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10b      	bne.n	800999c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	e7fd      	b.n	8009998 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800999c:	f001 fdcc 	bl	800b538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a8:	68f9      	ldr	r1, [r7, #12]
 80099aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	441a      	add	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099cc:	3b01      	subs	r3, #1
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80099d2:	fb01 f303 	mul.w	r3, r1, r3
 80099d6:	441a      	add	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	22ff      	movs	r2, #255	@ 0xff
 80099e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	22ff      	movs	r2, #255	@ 0xff
 80099e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d114      	bne.n	8009a1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d01a      	beq.n	8009a30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3310      	adds	r3, #16
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 f998 	bl	800ad34 <xTaskRemoveFromEventList>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d012      	beq.n	8009a30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a40 <xQueueGenericReset+0xd0>)
 8009a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a10:	601a      	str	r2, [r3, #0]
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	e009      	b.n	8009a30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3310      	adds	r3, #16
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff fef1 	bl	8009808 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	3324      	adds	r3, #36	@ 0x24
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff feec 	bl	8009808 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a30:	f001 fdb4 	bl	800b59c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a34:	2301      	movs	r3, #1
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	e000ed04 	.word	0xe000ed04

08009a44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08e      	sub	sp, #56	@ 0x38
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10b      	bne.n	8009a70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	e7fd      	b.n	8009a6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10b      	bne.n	8009a8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	e7fd      	b.n	8009a8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <xQueueGenericCreateStatic+0x56>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <xQueueGenericCreateStatic+0x5a>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e000      	b.n	8009aa0 <xQueueGenericCreateStatic+0x5c>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10b      	bne.n	8009abc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	623b      	str	r3, [r7, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d102      	bne.n	8009ac8 <xQueueGenericCreateStatic+0x84>
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <xQueueGenericCreateStatic+0x88>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e000      	b.n	8009ace <xQueueGenericCreateStatic+0x8a>
 8009acc:	2300      	movs	r3, #0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10b      	bne.n	8009aea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	61fb      	str	r3, [r7, #28]
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	e7fd      	b.n	8009ae6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009aea:	2348      	movs	r3, #72	@ 0x48
 8009aec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	2b48      	cmp	r3, #72	@ 0x48
 8009af2:	d00b      	beq.n	8009b0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	61bb      	str	r3, [r7, #24]
}
 8009b06:	bf00      	nop
 8009b08:	bf00      	nop
 8009b0a:	e7fd      	b.n	8009b08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00d      	beq.n	8009b34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4613      	mov	r3, r2
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	68b9      	ldr	r1, [r7, #8]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f840 	bl	8009bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3730      	adds	r7, #48	@ 0x30
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b08a      	sub	sp, #40	@ 0x28
 8009b42:	af02      	add	r7, sp, #8
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10b      	bne.n	8009b6a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	613b      	str	r3, [r7, #16]
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	e7fd      	b.n	8009b66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	fb02 f303 	mul.w	r3, r2, r3
 8009b72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	3348      	adds	r3, #72	@ 0x48
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 fdff 	bl	800b77c <pvPortMalloc>
 8009b7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d011      	beq.n	8009baa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	3348      	adds	r3, #72	@ 0x48
 8009b8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b98:	79fa      	ldrb	r2, [r7, #7]
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	68b9      	ldr	r1, [r7, #8]
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 f805 	bl	8009bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009baa:	69bb      	ldr	r3, [r7, #24]
	}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3720      	adds	r7, #32
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e002      	b.n	8009bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009be2:	2101      	movs	r1, #1
 8009be4:	69b8      	ldr	r0, [r7, #24]
 8009be6:	f7ff fec3 	bl	8009970 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b082      	sub	sp, #8
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00e      	beq.n	8009c1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009c12:	2300      	movs	r3, #0
 8009c14:	2200      	movs	r2, #0
 8009c16:	2100      	movs	r1, #0
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f837 	bl	8009c8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c30:	2301      	movs	r3, #1
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	2300      	movs	r3, #0
 8009c36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	6939      	ldr	r1, [r7, #16]
 8009c3e:	6978      	ldr	r0, [r7, #20]
 8009c40:	f7ff ff7d 	bl	8009b3e <xQueueGenericCreate>
 8009c44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff ffd3 	bl	8009bf2 <prvInitialiseMutex>

		return xNewQueue;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
	}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3718      	adds	r7, #24
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b088      	sub	sp, #32
 8009c5a:	af02      	add	r7, sp, #8
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	6039      	str	r1, [r7, #0]
 8009c60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c62:	2301      	movs	r3, #1
 8009c64:	617b      	str	r3, [r7, #20]
 8009c66:	2300      	movs	r3, #0
 8009c68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c6a:	79fb      	ldrb	r3, [r7, #7]
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2200      	movs	r2, #0
 8009c72:	6939      	ldr	r1, [r7, #16]
 8009c74:	6978      	ldr	r0, [r7, #20]
 8009c76:	f7ff fee5 	bl	8009a44 <xQueueGenericCreateStatic>
 8009c7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff ffb8 	bl	8009bf2 <prvInitialiseMutex>

		return xNewQueue;
 8009c82:	68fb      	ldr	r3, [r7, #12]
	}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3718      	adds	r7, #24
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	@ 0x38
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10b      	bne.n	8009cc0 <xQueueGenericSend+0x34>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
 8009cbe:	e7fd      	b.n	8009cbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d103      	bne.n	8009cce <xQueueGenericSend+0x42>
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <xQueueGenericSend+0x46>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <xQueueGenericSend+0x48>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10b      	bne.n	8009cf0 <xQueueGenericSend+0x64>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009cea:	bf00      	nop
 8009cec:	bf00      	nop
 8009cee:	e7fd      	b.n	8009cec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d103      	bne.n	8009cfe <xQueueGenericSend+0x72>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <xQueueGenericSend+0x76>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e000      	b.n	8009d04 <xQueueGenericSend+0x78>
 8009d02:	2300      	movs	r3, #0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10b      	bne.n	8009d20 <xQueueGenericSend+0x94>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	623b      	str	r3, [r7, #32]
}
 8009d1a:	bf00      	nop
 8009d1c:	bf00      	nop
 8009d1e:	e7fd      	b.n	8009d1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d20:	f001 f9ce 	bl	800b0c0 <xTaskGetSchedulerState>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d102      	bne.n	8009d30 <xQueueGenericSend+0xa4>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <xQueueGenericSend+0xa8>
 8009d30:	2301      	movs	r3, #1
 8009d32:	e000      	b.n	8009d36 <xQueueGenericSend+0xaa>
 8009d34:	2300      	movs	r3, #0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10b      	bne.n	8009d52 <xQueueGenericSend+0xc6>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	61fb      	str	r3, [r7, #28]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d52:	f001 fbf1 	bl	800b538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d302      	bcc.n	8009d68 <xQueueGenericSend+0xdc>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d129      	bne.n	8009dbc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d6e:	f000 fa91 	bl	800a294 <prvCopyDataToQueue>
 8009d72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d010      	beq.n	8009d9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	3324      	adds	r3, #36	@ 0x24
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 ffd7 	bl	800ad34 <xTaskRemoveFromEventList>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d013      	beq.n	8009db4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8009e8c <xQueueGenericSend+0x200>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	e00a      	b.n	8009db4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009da4:	4b39      	ldr	r3, [pc, #228]	@ (8009e8c <xQueueGenericSend+0x200>)
 8009da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009daa:	601a      	str	r2, [r3, #0]
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009db4:	f001 fbf2 	bl	800b59c <vPortExitCritical>
				return pdPASS;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e063      	b.n	8009e84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dc2:	f001 fbeb 	bl	800b59c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e05c      	b.n	8009e84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d106      	bne.n	8009dde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dd0:	f107 0314 	add.w	r3, r7, #20
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 f811 	bl	800adfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dde:	f001 fbdd 	bl	800b59c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009de2:	f000 fdb7 	bl	800a954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009de6:	f001 fba7 	bl	800b538 <vPortEnterCritical>
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df6:	d103      	bne.n	8009e00 <xQueueGenericSend+0x174>
 8009df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e06:	b25b      	sxtb	r3, r3
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0c:	d103      	bne.n	8009e16 <xQueueGenericSend+0x18a>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e16:	f001 fbc1 	bl	800b59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e1a:	1d3a      	adds	r2, r7, #4
 8009e1c:	f107 0314 	add.w	r3, r7, #20
 8009e20:	4611      	mov	r1, r2
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 f800 	bl	800ae28 <xTaskCheckForTimeOut>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d124      	bne.n	8009e78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e30:	f000 fb28 	bl	800a484 <prvIsQueueFull>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d018      	beq.n	8009e6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3c:	3310      	adds	r3, #16
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 ff50 	bl	800ace8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e4a:	f000 fab3 	bl	800a3b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e4e:	f000 fd8f 	bl	800a970 <xTaskResumeAll>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f47f af7c 	bne.w	8009d52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e8c <xQueueGenericSend+0x200>)
 8009e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e60:	601a      	str	r2, [r3, #0]
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	e772      	b.n	8009d52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e6e:	f000 faa1 	bl	800a3b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e72:	f000 fd7d 	bl	800a970 <xTaskResumeAll>
 8009e76:	e76c      	b.n	8009d52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e7a:	f000 fa9b 	bl	800a3b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e7e:	f000 fd77 	bl	800a970 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3738      	adds	r7, #56	@ 0x38
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	e000ed04 	.word	0xe000ed04

08009e90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b090      	sub	sp, #64	@ 0x40
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10b      	bne.n	8009ec0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009eba:	bf00      	nop
 8009ebc:	bf00      	nop
 8009ebe:	e7fd      	b.n	8009ebc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d103      	bne.n	8009ece <xQueueGenericSendFromISR+0x3e>
 8009ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <xQueueGenericSendFromISR+0x42>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <xQueueGenericSendFromISR+0x44>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10b      	bne.n	8009ef0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	e7fd      	b.n	8009eec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d103      	bne.n	8009efe <xQueueGenericSendFromISR+0x6e>
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <xQueueGenericSendFromISR+0x72>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e000      	b.n	8009f04 <xQueueGenericSendFromISR+0x74>
 8009f02:	2300      	movs	r3, #0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10b      	bne.n	8009f20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	623b      	str	r3, [r7, #32]
}
 8009f1a:	bf00      	nop
 8009f1c:	bf00      	nop
 8009f1e:	e7fd      	b.n	8009f1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f20:	f001 fbea 	bl	800b6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f24:	f3ef 8211 	mrs	r2, BASEPRI
 8009f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	61fa      	str	r2, [r7, #28]
 8009f3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d302      	bcc.n	8009f52 <xQueueGenericSendFromISR+0xc2>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d12f      	bne.n	8009fb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	68b9      	ldr	r1, [r7, #8]
 8009f66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f68:	f000 f994 	bl	800a294 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f74:	d112      	bne.n	8009f9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d016      	beq.n	8009fac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	3324      	adds	r3, #36	@ 0x24
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 fed6 	bl	800ad34 <xTaskRemoveFromEventList>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00e      	beq.n	8009fac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00b      	beq.n	8009fac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e007      	b.n	8009fac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	b25a      	sxtb	r2, r3
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009fac:	2301      	movs	r3, #1
 8009fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009fb0:	e001      	b.n	8009fb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3740      	adds	r7, #64	@ 0x40
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08c      	sub	sp, #48	@ 0x30
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10b      	bne.n	8009ffe <xQueueReceive+0x32>
	__asm volatile
 8009fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fea:	f383 8811 	msr	BASEPRI, r3
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	623b      	str	r3, [r7, #32]
}
 8009ff8:	bf00      	nop
 8009ffa:	bf00      	nop
 8009ffc:	e7fd      	b.n	8009ffa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d103      	bne.n	800a00c <xQueueReceive+0x40>
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <xQueueReceive+0x44>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <xQueueReceive+0x46>
 800a010:	2300      	movs	r3, #0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10b      	bne.n	800a02e <xQueueReceive+0x62>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	61fb      	str	r3, [r7, #28]
}
 800a028:	bf00      	nop
 800a02a:	bf00      	nop
 800a02c:	e7fd      	b.n	800a02a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a02e:	f001 f847 	bl	800b0c0 <xTaskGetSchedulerState>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <xQueueReceive+0x72>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <xQueueReceive+0x76>
 800a03e:	2301      	movs	r3, #1
 800a040:	e000      	b.n	800a044 <xQueueReceive+0x78>
 800a042:	2300      	movs	r3, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10b      	bne.n	800a060 <xQueueReceive+0x94>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04c:	f383 8811 	msr	BASEPRI, r3
 800a050:	f3bf 8f6f 	isb	sy
 800a054:	f3bf 8f4f 	dsb	sy
 800a058:	61bb      	str	r3, [r7, #24]
}
 800a05a:	bf00      	nop
 800a05c:	bf00      	nop
 800a05e:	e7fd      	b.n	800a05c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a060:	f001 fa6a 	bl	800b538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d01f      	beq.n	800a0b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a074:	f000 f978 	bl	800a368 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	1e5a      	subs	r2, r3, #1
 800a07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00f      	beq.n	800a0a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a08a:	3310      	adds	r3, #16
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fe51 	bl	800ad34 <xTaskRemoveFromEventList>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d007      	beq.n	800a0a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a098:	4b3c      	ldr	r3, [pc, #240]	@ (800a18c <xQueueReceive+0x1c0>)
 800a09a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0a8:	f001 fa78 	bl	800b59c <vPortExitCritical>
				return pdPASS;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e069      	b.n	800a184 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d103      	bne.n	800a0be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0b6:	f001 fa71 	bl	800b59c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e062      	b.n	800a184 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d106      	bne.n	800a0d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0c4:	f107 0310 	add.w	r3, r7, #16
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 fe97 	bl	800adfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0d2:	f001 fa63 	bl	800b59c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0d6:	f000 fc3d 	bl	800a954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0da:	f001 fa2d 	bl	800b538 <vPortEnterCritical>
 800a0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0e4:	b25b      	sxtb	r3, r3
 800a0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ea:	d103      	bne.n	800a0f4 <xQueueReceive+0x128>
 800a0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0fa:	b25b      	sxtb	r3, r3
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d103      	bne.n	800a10a <xQueueReceive+0x13e>
 800a102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a10a:	f001 fa47 	bl	800b59c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a10e:	1d3a      	adds	r2, r7, #4
 800a110:	f107 0310 	add.w	r3, r7, #16
 800a114:	4611      	mov	r1, r2
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fe86 	bl	800ae28 <xTaskCheckForTimeOut>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d123      	bne.n	800a16a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a124:	f000 f998 	bl	800a458 <prvIsQueueEmpty>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d017      	beq.n	800a15e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a130:	3324      	adds	r3, #36	@ 0x24
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fdd6 	bl	800ace8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a13c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a13e:	f000 f939 	bl	800a3b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a142:	f000 fc15 	bl	800a970 <xTaskResumeAll>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d189      	bne.n	800a060 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a14c:	4b0f      	ldr	r3, [pc, #60]	@ (800a18c <xQueueReceive+0x1c0>)
 800a14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	e780      	b.n	800a060 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a160:	f000 f928 	bl	800a3b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a164:	f000 fc04 	bl	800a970 <xTaskResumeAll>
 800a168:	e77a      	b.n	800a060 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a16a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a16c:	f000 f922 	bl	800a3b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a170:	f000 fbfe 	bl	800a970 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a176:	f000 f96f 	bl	800a458 <prvIsQueueEmpty>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f43f af6f 	beq.w	800a060 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a182:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a184:	4618      	mov	r0, r3
 800a186:	3730      	adds	r7, #48	@ 0x30
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	e000ed04 	.word	0xe000ed04

0800a190 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08e      	sub	sp, #56	@ 0x38
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10b      	bne.n	800a1be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	623b      	str	r3, [r7, #32]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <xQueueReceiveFromISR+0x3c>
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <xQueueReceiveFromISR+0x40>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e000      	b.n	800a1d2 <xQueueReceiveFromISR+0x42>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10b      	bne.n	800a1ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	61fb      	str	r3, [r7, #28]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ee:	f001 fa83 	bl	800b6f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a1f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	61ba      	str	r2, [r7, #24]
 800a208:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a20a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a216:	2b00      	cmp	r3, #0
 800a218:	d02f      	beq.n	800a27a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a228:	f000 f89e 	bl	800a368 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22e:	1e5a      	subs	r2, r3, #1
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a234:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d112      	bne.n	800a264 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d016      	beq.n	800a274 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a248:	3310      	adds	r3, #16
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 fd72 	bl	800ad34 <xTaskRemoveFromEventList>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00e      	beq.n	800a274 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	e007      	b.n	800a274 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a268:	3301      	adds	r3, #1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	b25a      	sxtb	r2, r3
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a274:	2301      	movs	r3, #1
 800a276:	637b      	str	r3, [r7, #52]	@ 0x34
 800a278:	e001      	b.n	800a27e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a27e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a280:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	f383 8811 	msr	BASEPRI, r3
}
 800a288:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3738      	adds	r7, #56	@ 0x38
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10d      	bne.n	800a2ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d14d      	bne.n	800a356 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 ff1c 	bl	800b0fc <xTaskPriorityDisinherit>
 800a2c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	609a      	str	r2, [r3, #8]
 800a2cc:	e043      	b.n	800a356 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d119      	bne.n	800a308 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6858      	ldr	r0, [r3, #4]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2dc:	461a      	mov	r2, r3
 800a2de:	68b9      	ldr	r1, [r7, #8]
 800a2e0:	f002 fdbb 	bl	800ce5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ec:	441a      	add	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d32b      	bcc.n	800a356 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	e026      	b.n	800a356 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	68d8      	ldr	r0, [r3, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a310:	461a      	mov	r2, r3
 800a312:	68b9      	ldr	r1, [r7, #8]
 800a314:	f002 fda1 	bl	800ce5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	68da      	ldr	r2, [r3, #12]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a320:	425b      	negs	r3, r3
 800a322:	441a      	add	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68da      	ldr	r2, [r3, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	429a      	cmp	r2, r3
 800a332:	d207      	bcs.n	800a344 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33c:	425b      	negs	r3, r3
 800a33e:	441a      	add	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b02      	cmp	r3, #2
 800a348:	d105      	bne.n	800a356 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	3b01      	subs	r3, #1
 800a354:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a35e:	697b      	ldr	r3, [r7, #20]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a376:	2b00      	cmp	r3, #0
 800a378:	d018      	beq.n	800a3ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a382:	441a      	add	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	68da      	ldr	r2, [r3, #12]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	429a      	cmp	r2, r3
 800a392:	d303      	bcc.n	800a39c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68d9      	ldr	r1, [r3, #12]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	6838      	ldr	r0, [r7, #0]
 800a3a8:	f002 fd57 	bl	800ce5a <memcpy>
	}
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3bc:	f001 f8bc 	bl	800b538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3c8:	e011      	b.n	800a3ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d012      	beq.n	800a3f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3324      	adds	r3, #36	@ 0x24
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f000 fcac 	bl	800ad34 <xTaskRemoveFromEventList>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a3e2:	f000 fd85 	bl	800aef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	dce9      	bgt.n	800a3ca <prvUnlockQueue+0x16>
 800a3f6:	e000      	b.n	800a3fa <prvUnlockQueue+0x46>
					break;
 800a3f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	22ff      	movs	r2, #255	@ 0xff
 800a3fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a402:	f001 f8cb 	bl	800b59c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a406:	f001 f897 	bl	800b538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a410:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a412:	e011      	b.n	800a438 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d012      	beq.n	800a442 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3310      	adds	r3, #16
 800a420:	4618      	mov	r0, r3
 800a422:	f000 fc87 	bl	800ad34 <xTaskRemoveFromEventList>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a42c:	f000 fd60 	bl	800aef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	3b01      	subs	r3, #1
 800a434:	b2db      	uxtb	r3, r3
 800a436:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	dce9      	bgt.n	800a414 <prvUnlockQueue+0x60>
 800a440:	e000      	b.n	800a444 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a442:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	22ff      	movs	r2, #255	@ 0xff
 800a448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a44c:	f001 f8a6 	bl	800b59c <vPortExitCritical>
}
 800a450:	bf00      	nop
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a460:	f001 f86a 	bl	800b538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d102      	bne.n	800a472 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a46c:	2301      	movs	r3, #1
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e001      	b.n	800a476 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a476:	f001 f891 	bl	800b59c <vPortExitCritical>

	return xReturn;
 800a47a:	68fb      	ldr	r3, [r7, #12]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a48c:	f001 f854 	bl	800b538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a498:	429a      	cmp	r2, r3
 800a49a:	d102      	bne.n	800a4a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a49c:	2301      	movs	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	e001      	b.n	800a4a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4a6:	f001 f879 	bl	800b59c <vPortExitCritical>

	return xReturn;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08e      	sub	sp, #56	@ 0x38
 800a4b8:	af04      	add	r7, sp, #16
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	623b      	str	r3, [r7, #32]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <xTaskCreateStatic+0x4a>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	61fb      	str	r3, [r7, #28]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a4fe:	23a0      	movs	r3, #160	@ 0xa0
 800a500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2ba0      	cmp	r3, #160	@ 0xa0
 800a506:	d00b      	beq.n	800a520 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50c:	f383 8811 	msr	BASEPRI, r3
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	61bb      	str	r3, [r7, #24]
}
 800a51a:	bf00      	nop
 800a51c:	bf00      	nop
 800a51e:	e7fd      	b.n	800a51c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a520:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	2b00      	cmp	r3, #0
 800a526:	d01e      	beq.n	800a566 <xTaskCreateStatic+0xb2>
 800a528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d01b      	beq.n	800a566 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a536:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a540:	2300      	movs	r3, #0
 800a542:	9303      	str	r3, [sp, #12]
 800a544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a546:	9302      	str	r3, [sp, #8]
 800a548:	f107 0314 	add.w	r3, r7, #20
 800a54c:	9301      	str	r3, [sp, #4]
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 f851 	bl	800a600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a55e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a560:	f000 f8ee 	bl	800a740 <prvAddNewTaskToReadyList>
 800a564:	e001      	b.n	800a56a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a56a:	697b      	ldr	r3, [r7, #20]
	}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3728      	adds	r7, #40	@ 0x28
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08c      	sub	sp, #48	@ 0x30
 800a578:	af04      	add	r7, sp, #16
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4613      	mov	r3, r2
 800a582:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a584:	88fb      	ldrh	r3, [r7, #6]
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4618      	mov	r0, r3
 800a58a:	f001 f8f7 	bl	800b77c <pvPortMalloc>
 800a58e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00e      	beq.n	800a5b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a596:	20a0      	movs	r0, #160	@ 0xa0
 800a598:	f001 f8f0 	bl	800b77c <pvPortMalloc>
 800a59c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d003      	beq.n	800a5ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a5aa:	e005      	b.n	800a5b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5ac:	6978      	ldr	r0, [r7, #20]
 800a5ae:	f001 f9b3 	bl	800b918 <vPortFree>
 800a5b2:	e001      	b.n	800a5b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d017      	beq.n	800a5ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5c6:	88fa      	ldrh	r2, [r7, #6]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68b9      	ldr	r1, [r7, #8]
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f000 f80f 	bl	800a600 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5e2:	69f8      	ldr	r0, [r7, #28]
 800a5e4:	f000 f8ac 	bl	800a740 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	e002      	b.n	800a5f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a5f4:	69bb      	ldr	r3, [r7, #24]
	}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3720      	adds	r7, #32
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b088      	sub	sp, #32
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a618:	3b01      	subs	r3, #1
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	f023 0307 	bic.w	r3, r3, #7
 800a626:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00b      	beq.n	800a64a <prvInitialiseNewTask+0x4a>
	__asm volatile
 800a632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	617b      	str	r3, [r7, #20]
}
 800a644:	bf00      	nop
 800a646:	bf00      	nop
 800a648:	e7fd      	b.n	800a646 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d01f      	beq.n	800a690 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
 800a654:	e012      	b.n	800a67c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	4413      	add	r3, r2
 800a65c:	7819      	ldrb	r1, [r3, #0]
 800a65e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	4413      	add	r3, r2
 800a664:	3334      	adds	r3, #52	@ 0x34
 800a666:	460a      	mov	r2, r1
 800a668:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	4413      	add	r3, r2
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d006      	beq.n	800a684 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	3301      	adds	r3, #1
 800a67a:	61fb      	str	r3, [r7, #28]
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	2b0f      	cmp	r3, #15
 800a680:	d9e9      	bls.n	800a656 <prvInitialiseNewTask+0x56>
 800a682:	e000      	b.n	800a686 <prvInitialiseNewTask+0x86>
			{
				break;
 800a684:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a68e:	e003      	b.n	800a698 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69a:	2b06      	cmp	r3, #6
 800a69c:	d901      	bls.n	800a6a2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a69e:	2306      	movs	r3, #6
 800a6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6ac:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff f8c5 	bl	8009848 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	3318      	adds	r3, #24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff f8c0 	bl	8009848 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	f1c3 0207 	rsb	r2, r3, #7
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f0:	334c      	adds	r3, #76	@ 0x4c
 800a6f2:	224c      	movs	r2, #76	@ 0x4c
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f002 fabc 	bl	800cc74 <memset>
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fe:	4a0d      	ldr	r2, [pc, #52]	@ (800a734 <prvInitialiseNewTask+0x134>)
 800a700:	651a      	str	r2, [r3, #80]	@ 0x50
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	4a0c      	ldr	r2, [pc, #48]	@ (800a738 <prvInitialiseNewTask+0x138>)
 800a706:	655a      	str	r2, [r3, #84]	@ 0x54
 800a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70a:	4a0c      	ldr	r2, [pc, #48]	@ (800a73c <prvInitialiseNewTask+0x13c>)
 800a70c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	68f9      	ldr	r1, [r7, #12]
 800a712:	69b8      	ldr	r0, [r7, #24]
 800a714:	f000 fde0 	bl	800b2d8 <pxPortInitialiseStack>
 800a718:	4602      	mov	r2, r0
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a728:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a72a:	bf00      	nop
 800a72c:	3720      	adds	r7, #32
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20008ddc 	.word	0x20008ddc
 800a738:	20008e44 	.word	0x20008e44
 800a73c:	20008eac 	.word	0x20008eac

0800a740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a748:	f000 fef6 	bl	800b538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a74c:	4b2a      	ldr	r3, [pc, #168]	@ (800a7f8 <prvAddNewTaskToReadyList+0xb8>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3301      	adds	r3, #1
 800a752:	4a29      	ldr	r2, [pc, #164]	@ (800a7f8 <prvAddNewTaskToReadyList+0xb8>)
 800a754:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a756:	4b29      	ldr	r3, [pc, #164]	@ (800a7fc <prvAddNewTaskToReadyList+0xbc>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d109      	bne.n	800a772 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a75e:	4a27      	ldr	r2, [pc, #156]	@ (800a7fc <prvAddNewTaskToReadyList+0xbc>)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a764:	4b24      	ldr	r3, [pc, #144]	@ (800a7f8 <prvAddNewTaskToReadyList+0xb8>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d110      	bne.n	800a78e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a76c:	f000 fbe4 	bl	800af38 <prvInitialiseTaskLists>
 800a770:	e00d      	b.n	800a78e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a772:	4b23      	ldr	r3, [pc, #140]	@ (800a800 <prvAddNewTaskToReadyList+0xc0>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d109      	bne.n	800a78e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a77a:	4b20      	ldr	r3, [pc, #128]	@ (800a7fc <prvAddNewTaskToReadyList+0xbc>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a784:	429a      	cmp	r2, r3
 800a786:	d802      	bhi.n	800a78e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a788:	4a1c      	ldr	r2, [pc, #112]	@ (800a7fc <prvAddNewTaskToReadyList+0xbc>)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a78e:	4b1d      	ldr	r3, [pc, #116]	@ (800a804 <prvAddNewTaskToReadyList+0xc4>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	4a1b      	ldr	r2, [pc, #108]	@ (800a804 <prvAddNewTaskToReadyList+0xc4>)
 800a796:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79c:	2201      	movs	r2, #1
 800a79e:	409a      	lsls	r2, r3
 800a7a0:	4b19      	ldr	r3, [pc, #100]	@ (800a808 <prvAddNewTaskToReadyList+0xc8>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	4a18      	ldr	r2, [pc, #96]	@ (800a808 <prvAddNewTaskToReadyList+0xc8>)
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4a15      	ldr	r2, [pc, #84]	@ (800a80c <prvAddNewTaskToReadyList+0xcc>)
 800a7b8:	441a      	add	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	3304      	adds	r3, #4
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f7ff f84e 	bl	8009862 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7c6:	f000 fee9 	bl	800b59c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a800 <prvAddNewTaskToReadyList+0xc0>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00e      	beq.n	800a7f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <prvAddNewTaskToReadyList+0xbc>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d207      	bcs.n	800a7f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a810 <prvAddNewTaskToReadyList+0xd0>)
 800a7e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7f0:	bf00      	nop
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20002d80 	.word	0x20002d80
 800a7fc:	20002c80 	.word	0x20002c80
 800a800:	20002d8c 	.word	0x20002d8c
 800a804:	20002d9c 	.word	0x20002d9c
 800a808:	20002d88 	.word	0x20002d88
 800a80c:	20002c84 	.word	0x20002c84
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d018      	beq.n	800a858 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a826:	4b14      	ldr	r3, [pc, #80]	@ (800a878 <vTaskDelay+0x64>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00b      	beq.n	800a846 <vTaskDelay+0x32>
	__asm volatile
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	60bb      	str	r3, [r7, #8]
}
 800a840:	bf00      	nop
 800a842:	bf00      	nop
 800a844:	e7fd      	b.n	800a842 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a846:	f000 f885 	bl	800a954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a84a:	2100      	movs	r1, #0
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fcdd 	bl	800b20c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a852:	f000 f88d 	bl	800a970 <xTaskResumeAll>
 800a856:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d107      	bne.n	800a86e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a85e:	4b07      	ldr	r3, [pc, #28]	@ (800a87c <vTaskDelay+0x68>)
 800a860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20002da8 	.word	0x20002da8
 800a87c:	e000ed04 	.word	0xe000ed04

0800a880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08a      	sub	sp, #40	@ 0x28
 800a884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a886:	2300      	movs	r3, #0
 800a888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a88e:	463a      	mov	r2, r7
 800a890:	1d39      	adds	r1, r7, #4
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	4618      	mov	r0, r3
 800a898:	f7f9 f934 	bl	8003b04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	9202      	str	r2, [sp, #8]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	460a      	mov	r2, r1
 800a8ae:	4921      	ldr	r1, [pc, #132]	@ (800a934 <vTaskStartScheduler+0xb4>)
 800a8b0:	4821      	ldr	r0, [pc, #132]	@ (800a938 <vTaskStartScheduler+0xb8>)
 800a8b2:	f7ff fdff 	bl	800a4b4 <xTaskCreateStatic>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4a20      	ldr	r2, [pc, #128]	@ (800a93c <vTaskStartScheduler+0xbc>)
 800a8ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8bc:	4b1f      	ldr	r3, [pc, #124]	@ (800a93c <vTaskStartScheduler+0xbc>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d002      	beq.n	800a8ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	e001      	b.n	800a8ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d11b      	bne.n	800a90c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	613b      	str	r3, [r7, #16]
}
 800a8e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8e8:	4b15      	ldr	r3, [pc, #84]	@ (800a940 <vTaskStartScheduler+0xc0>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	334c      	adds	r3, #76	@ 0x4c
 800a8ee:	4a15      	ldr	r2, [pc, #84]	@ (800a944 <vTaskStartScheduler+0xc4>)
 800a8f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8f2:	4b15      	ldr	r3, [pc, #84]	@ (800a948 <vTaskStartScheduler+0xc8>)
 800a8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8fa:	4b14      	ldr	r3, [pc, #80]	@ (800a94c <vTaskStartScheduler+0xcc>)
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a900:	4b13      	ldr	r3, [pc, #76]	@ (800a950 <vTaskStartScheduler+0xd0>)
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a906:	f000 fd73 	bl	800b3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a90a:	e00f      	b.n	800a92c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d10b      	bne.n	800a92c <vTaskStartScheduler+0xac>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	60fb      	str	r3, [r7, #12]
}
 800a926:	bf00      	nop
 800a928:	bf00      	nop
 800a92a:	e7fd      	b.n	800a928 <vTaskStartScheduler+0xa8>
}
 800a92c:	bf00      	nop
 800a92e:	3718      	adds	r7, #24
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	0800f75c 	.word	0x0800f75c
 800a938:	0800af09 	.word	0x0800af09
 800a93c:	20002da4 	.word	0x20002da4
 800a940:	20002c80 	.word	0x20002c80
 800a944:	20000198 	.word	0x20000198
 800a948:	20002da0 	.word	0x20002da0
 800a94c:	20002d8c 	.word	0x20002d8c
 800a950:	20002d84 	.word	0x20002d84

0800a954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a954:	b480      	push	{r7}
 800a956:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a958:	4b04      	ldr	r3, [pc, #16]	@ (800a96c <vTaskSuspendAll+0x18>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3301      	adds	r3, #1
 800a95e:	4a03      	ldr	r2, [pc, #12]	@ (800a96c <vTaskSuspendAll+0x18>)
 800a960:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a962:	bf00      	nop
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	20002da8 	.word	0x20002da8

0800a970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a97e:	4b42      	ldr	r3, [pc, #264]	@ (800aa88 <xTaskResumeAll+0x118>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10b      	bne.n	800a99e <xTaskResumeAll+0x2e>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	603b      	str	r3, [r7, #0]
}
 800a998:	bf00      	nop
 800a99a:	bf00      	nop
 800a99c:	e7fd      	b.n	800a99a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a99e:	f000 fdcb 	bl	800b538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a9a2:	4b39      	ldr	r3, [pc, #228]	@ (800aa88 <xTaskResumeAll+0x118>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	4a37      	ldr	r2, [pc, #220]	@ (800aa88 <xTaskResumeAll+0x118>)
 800a9aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9ac:	4b36      	ldr	r3, [pc, #216]	@ (800aa88 <xTaskResumeAll+0x118>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d161      	bne.n	800aa78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a9b4:	4b35      	ldr	r3, [pc, #212]	@ (800aa8c <xTaskResumeAll+0x11c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d05d      	beq.n	800aa78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9bc:	e02e      	b.n	800aa1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9be:	4b34      	ldr	r3, [pc, #208]	@ (800aa90 <xTaskResumeAll+0x120>)
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	3318      	adds	r3, #24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe ffa6 	bl	800991c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	3304      	adds	r3, #4
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7fe ffa1 	bl	800991c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9de:	2201      	movs	r2, #1
 800a9e0:	409a      	lsls	r2, r3
 800a9e2:	4b2c      	ldr	r3, [pc, #176]	@ (800aa94 <xTaskResumeAll+0x124>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	4a2a      	ldr	r2, [pc, #168]	@ (800aa94 <xTaskResumeAll+0x124>)
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4a27      	ldr	r2, [pc, #156]	@ (800aa98 <xTaskResumeAll+0x128>)
 800a9fa:	441a      	add	r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7fe ff2d 	bl	8009862 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa0c:	4b23      	ldr	r3, [pc, #140]	@ (800aa9c <xTaskResumeAll+0x12c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d302      	bcc.n	800aa1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aa16:	4b22      	ldr	r3, [pc, #136]	@ (800aaa0 <xTaskResumeAll+0x130>)
 800aa18:	2201      	movs	r2, #1
 800aa1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa1c:	4b1c      	ldr	r3, [pc, #112]	@ (800aa90 <xTaskResumeAll+0x120>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1cc      	bne.n	800a9be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa2a:	f000 fb29 	bl	800b080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aa2e:	4b1d      	ldr	r3, [pc, #116]	@ (800aaa4 <xTaskResumeAll+0x134>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d010      	beq.n	800aa5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa3a:	f000 f837 	bl	800aaac <xTaskIncrementTick>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aa44:	4b16      	ldr	r3, [pc, #88]	@ (800aaa0 <xTaskResumeAll+0x130>)
 800aa46:	2201      	movs	r2, #1
 800aa48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1f1      	bne.n	800aa3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa56:	4b13      	ldr	r3, [pc, #76]	@ (800aaa4 <xTaskResumeAll+0x134>)
 800aa58:	2200      	movs	r2, #0
 800aa5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa5c:	4b10      	ldr	r3, [pc, #64]	@ (800aaa0 <xTaskResumeAll+0x130>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d009      	beq.n	800aa78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa64:	2301      	movs	r3, #1
 800aa66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa68:	4b0f      	ldr	r3, [pc, #60]	@ (800aaa8 <xTaskResumeAll+0x138>)
 800aa6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa78:	f000 fd90 	bl	800b59c <vPortExitCritical>

	return xAlreadyYielded;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20002da8 	.word	0x20002da8
 800aa8c:	20002d80 	.word	0x20002d80
 800aa90:	20002d40 	.word	0x20002d40
 800aa94:	20002d88 	.word	0x20002d88
 800aa98:	20002c84 	.word	0x20002c84
 800aa9c:	20002c80 	.word	0x20002c80
 800aaa0:	20002d94 	.word	0x20002d94
 800aaa4:	20002d90 	.word	0x20002d90
 800aaa8:	e000ed04 	.word	0xe000ed04

0800aaac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab6:	4b4f      	ldr	r3, [pc, #316]	@ (800abf4 <xTaskIncrementTick+0x148>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f040 808f 	bne.w	800abde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aac0:	4b4d      	ldr	r3, [pc, #308]	@ (800abf8 <xTaskIncrementTick+0x14c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3301      	adds	r3, #1
 800aac6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aac8:	4a4b      	ldr	r2, [pc, #300]	@ (800abf8 <xTaskIncrementTick+0x14c>)
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d121      	bne.n	800ab18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aad4:	4b49      	ldr	r3, [pc, #292]	@ (800abfc <xTaskIncrementTick+0x150>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00b      	beq.n	800aaf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	603b      	str	r3, [r7, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
 800aaf4:	e7fd      	b.n	800aaf2 <xTaskIncrementTick+0x46>
 800aaf6:	4b41      	ldr	r3, [pc, #260]	@ (800abfc <xTaskIncrementTick+0x150>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	4b40      	ldr	r3, [pc, #256]	@ (800ac00 <xTaskIncrementTick+0x154>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a3e      	ldr	r2, [pc, #248]	@ (800abfc <xTaskIncrementTick+0x150>)
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	4a3e      	ldr	r2, [pc, #248]	@ (800ac00 <xTaskIncrementTick+0x154>)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	4b3e      	ldr	r3, [pc, #248]	@ (800ac04 <xTaskIncrementTick+0x158>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	4a3c      	ldr	r2, [pc, #240]	@ (800ac04 <xTaskIncrementTick+0x158>)
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	f000 fab4 	bl	800b080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab18:	4b3b      	ldr	r3, [pc, #236]	@ (800ac08 <xTaskIncrementTick+0x15c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d348      	bcc.n	800abb4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab22:	4b36      	ldr	r3, [pc, #216]	@ (800abfc <xTaskIncrementTick+0x150>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d104      	bne.n	800ab36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab2c:	4b36      	ldr	r3, [pc, #216]	@ (800ac08 <xTaskIncrementTick+0x15c>)
 800ab2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab32:	601a      	str	r2, [r3, #0]
					break;
 800ab34:	e03e      	b.n	800abb4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab36:	4b31      	ldr	r3, [pc, #196]	@ (800abfc <xTaskIncrementTick+0x150>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d203      	bcs.n	800ab56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab4e:	4a2e      	ldr	r2, [pc, #184]	@ (800ac08 <xTaskIncrementTick+0x15c>)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab54:	e02e      	b.n	800abb4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fede 	bl	800991c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d004      	beq.n	800ab72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	3318      	adds	r3, #24
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe fed5 	bl	800991c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab76:	2201      	movs	r2, #1
 800ab78:	409a      	lsls	r2, r3
 800ab7a:	4b24      	ldr	r3, [pc, #144]	@ (800ac0c <xTaskIncrementTick+0x160>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	4a22      	ldr	r2, [pc, #136]	@ (800ac0c <xTaskIncrementTick+0x160>)
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab88:	4613      	mov	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4a1f      	ldr	r2, [pc, #124]	@ (800ac10 <xTaskIncrementTick+0x164>)
 800ab92:	441a      	add	r2, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	f7fe fe61 	bl	8009862 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba4:	4b1b      	ldr	r3, [pc, #108]	@ (800ac14 <xTaskIncrementTick+0x168>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abaa:	429a      	cmp	r2, r3
 800abac:	d3b9      	bcc.n	800ab22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800abae:	2301      	movs	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abb2:	e7b6      	b.n	800ab22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abb4:	4b17      	ldr	r3, [pc, #92]	@ (800ac14 <xTaskIncrementTick+0x168>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abba:	4915      	ldr	r1, [pc, #84]	@ (800ac10 <xTaskIncrementTick+0x164>)
 800abbc:	4613      	mov	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	440b      	add	r3, r1
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d901      	bls.n	800abd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800abcc:	2301      	movs	r3, #1
 800abce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abd0:	4b11      	ldr	r3, [pc, #68]	@ (800ac18 <xTaskIncrementTick+0x16c>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800abd8:	2301      	movs	r3, #1
 800abda:	617b      	str	r3, [r7, #20]
 800abdc:	e004      	b.n	800abe8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800abde:	4b0f      	ldr	r3, [pc, #60]	@ (800ac1c <xTaskIncrementTick+0x170>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	4a0d      	ldr	r2, [pc, #52]	@ (800ac1c <xTaskIncrementTick+0x170>)
 800abe6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abe8:	697b      	ldr	r3, [r7, #20]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3718      	adds	r7, #24
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20002da8 	.word	0x20002da8
 800abf8:	20002d84 	.word	0x20002d84
 800abfc:	20002d38 	.word	0x20002d38
 800ac00:	20002d3c 	.word	0x20002d3c
 800ac04:	20002d98 	.word	0x20002d98
 800ac08:	20002da0 	.word	0x20002da0
 800ac0c:	20002d88 	.word	0x20002d88
 800ac10:	20002c84 	.word	0x20002c84
 800ac14:	20002c80 	.word	0x20002c80
 800ac18:	20002d94 	.word	0x20002d94
 800ac1c:	20002d90 	.word	0x20002d90

0800ac20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac26:	4b2a      	ldr	r3, [pc, #168]	@ (800acd0 <vTaskSwitchContext+0xb0>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d003      	beq.n	800ac36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac2e:	4b29      	ldr	r3, [pc, #164]	@ (800acd4 <vTaskSwitchContext+0xb4>)
 800ac30:	2201      	movs	r2, #1
 800ac32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac34:	e045      	b.n	800acc2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800ac36:	4b27      	ldr	r3, [pc, #156]	@ (800acd4 <vTaskSwitchContext+0xb4>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac3c:	4b26      	ldr	r3, [pc, #152]	@ (800acd8 <vTaskSwitchContext+0xb8>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	fab3 f383 	clz	r3, r3
 800ac48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	f1c3 031f 	rsb	r3, r3, #31
 800ac50:	617b      	str	r3, [r7, #20]
 800ac52:	4922      	ldr	r1, [pc, #136]	@ (800acdc <vTaskSwitchContext+0xbc>)
 800ac54:	697a      	ldr	r2, [r7, #20]
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d10b      	bne.n	800ac7e <vTaskSwitchContext+0x5e>
	__asm volatile
 800ac66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6a:	f383 8811 	msr	BASEPRI, r3
 800ac6e:	f3bf 8f6f 	isb	sy
 800ac72:	f3bf 8f4f 	dsb	sy
 800ac76:	607b      	str	r3, [r7, #4]
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	e7fd      	b.n	800ac7a <vTaskSwitchContext+0x5a>
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4a14      	ldr	r2, [pc, #80]	@ (800acdc <vTaskSwitchContext+0xbc>)
 800ac8a:	4413      	add	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	605a      	str	r2, [r3, #4]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	685a      	ldr	r2, [r3, #4]
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d104      	bne.n	800acae <vTaskSwitchContext+0x8e>
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	605a      	str	r2, [r3, #4]
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	4a0a      	ldr	r2, [pc, #40]	@ (800ace0 <vTaskSwitchContext+0xc0>)
 800acb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acb8:	4b09      	ldr	r3, [pc, #36]	@ (800ace0 <vTaskSwitchContext+0xc0>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	334c      	adds	r3, #76	@ 0x4c
 800acbe:	4a09      	ldr	r2, [pc, #36]	@ (800ace4 <vTaskSwitchContext+0xc4>)
 800acc0:	6013      	str	r3, [r2, #0]
}
 800acc2:	bf00      	nop
 800acc4:	371c      	adds	r7, #28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20002da8 	.word	0x20002da8
 800acd4:	20002d94 	.word	0x20002d94
 800acd8:	20002d88 	.word	0x20002d88
 800acdc:	20002c84 	.word	0x20002c84
 800ace0:	20002c80 	.word	0x20002c80
 800ace4:	20000198 	.word	0x20000198

0800ace8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10b      	bne.n	800ad10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	60fb      	str	r3, [r7, #12]
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	e7fd      	b.n	800ad0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad10:	4b07      	ldr	r3, [pc, #28]	@ (800ad30 <vTaskPlaceOnEventList+0x48>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3318      	adds	r3, #24
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7fe fdc6 	bl	80098aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad1e:	2101      	movs	r1, #1
 800ad20:	6838      	ldr	r0, [r7, #0]
 800ad22:	f000 fa73 	bl	800b20c <prvAddCurrentTaskToDelayedList>
}
 800ad26:	bf00      	nop
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20002c80 	.word	0x20002c80

0800ad34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10b      	bne.n	800ad62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	60fb      	str	r3, [r7, #12]
}
 800ad5c:	bf00      	nop
 800ad5e:	bf00      	nop
 800ad60:	e7fd      	b.n	800ad5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	3318      	adds	r3, #24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fdd8 	bl	800991c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6c:	4b1d      	ldr	r3, [pc, #116]	@ (800ade4 <xTaskRemoveFromEventList+0xb0>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d11c      	bne.n	800adae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	3304      	adds	r3, #4
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe fdcf 	bl	800991c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	2201      	movs	r2, #1
 800ad84:	409a      	lsls	r2, r3
 800ad86:	4b18      	ldr	r3, [pc, #96]	@ (800ade8 <xTaskRemoveFromEventList+0xb4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	4a16      	ldr	r2, [pc, #88]	@ (800ade8 <xTaskRemoveFromEventList+0xb4>)
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4a13      	ldr	r2, [pc, #76]	@ (800adec <xTaskRemoveFromEventList+0xb8>)
 800ad9e:	441a      	add	r2, r3
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3304      	adds	r3, #4
 800ada4:	4619      	mov	r1, r3
 800ada6:	4610      	mov	r0, r2
 800ada8:	f7fe fd5b 	bl	8009862 <vListInsertEnd>
 800adac:	e005      	b.n	800adba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	3318      	adds	r3, #24
 800adb2:	4619      	mov	r1, r3
 800adb4:	480e      	ldr	r0, [pc, #56]	@ (800adf0 <xTaskRemoveFromEventList+0xbc>)
 800adb6:	f7fe fd54 	bl	8009862 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adbe:	4b0d      	ldr	r3, [pc, #52]	@ (800adf4 <xTaskRemoveFromEventList+0xc0>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d905      	bls.n	800add4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adc8:	2301      	movs	r3, #1
 800adca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adcc:	4b0a      	ldr	r3, [pc, #40]	@ (800adf8 <xTaskRemoveFromEventList+0xc4>)
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]
 800add2:	e001      	b.n	800add8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800add4:	2300      	movs	r3, #0
 800add6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800add8:	697b      	ldr	r3, [r7, #20]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20002da8 	.word	0x20002da8
 800ade8:	20002d88 	.word	0x20002d88
 800adec:	20002c84 	.word	0x20002c84
 800adf0:	20002d40 	.word	0x20002d40
 800adf4:	20002c80 	.word	0x20002c80
 800adf8:	20002d94 	.word	0x20002d94

0800adfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae04:	4b06      	ldr	r3, [pc, #24]	@ (800ae20 <vTaskInternalSetTimeOutState+0x24>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae0c:	4b05      	ldr	r3, [pc, #20]	@ (800ae24 <vTaskInternalSetTimeOutState+0x28>)
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	20002d98 	.word	0x20002d98
 800ae24:	20002d84 	.word	0x20002d84

0800ae28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10b      	bne.n	800ae50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ae38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3c:	f383 8811 	msr	BASEPRI, r3
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	613b      	str	r3, [r7, #16]
}
 800ae4a:	bf00      	nop
 800ae4c:	bf00      	nop
 800ae4e:	e7fd      	b.n	800ae4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10b      	bne.n	800ae6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	60fb      	str	r3, [r7, #12]
}
 800ae68:	bf00      	nop
 800ae6a:	bf00      	nop
 800ae6c:	e7fd      	b.n	800ae6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ae6e:	f000 fb63 	bl	800b538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae72:	4b1d      	ldr	r3, [pc, #116]	@ (800aee8 <xTaskCheckForTimeOut+0xc0>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8a:	d102      	bne.n	800ae92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61fb      	str	r3, [r7, #28]
 800ae90:	e023      	b.n	800aeda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	4b15      	ldr	r3, [pc, #84]	@ (800aeec <xTaskCheckForTimeOut+0xc4>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d007      	beq.n	800aeae <xTaskCheckForTimeOut+0x86>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	69ba      	ldr	r2, [r7, #24]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d302      	bcc.n	800aeae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	e015      	b.n	800aeda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d20b      	bcs.n	800aed0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff ff99 	bl	800adfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeca:	2300      	movs	r3, #0
 800aecc:	61fb      	str	r3, [r7, #28]
 800aece:	e004      	b.n	800aeda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	2200      	movs	r2, #0
 800aed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aed6:	2301      	movs	r3, #1
 800aed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aeda:	f000 fb5f 	bl	800b59c <vPortExitCritical>

	return xReturn;
 800aede:	69fb      	ldr	r3, [r7, #28]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20002d84 	.word	0x20002d84
 800aeec:	20002d98 	.word	0x20002d98

0800aef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aef0:	b480      	push	{r7}
 800aef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aef4:	4b03      	ldr	r3, [pc, #12]	@ (800af04 <vTaskMissedYield+0x14>)
 800aef6:	2201      	movs	r2, #1
 800aef8:	601a      	str	r2, [r3, #0]
}
 800aefa:	bf00      	nop
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	20002d94 	.word	0x20002d94

0800af08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af10:	f000 f852 	bl	800afb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af14:	4b06      	ldr	r3, [pc, #24]	@ (800af30 <prvIdleTask+0x28>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d9f9      	bls.n	800af10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af1c:	4b05      	ldr	r3, [pc, #20]	@ (800af34 <prvIdleTask+0x2c>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af2c:	e7f0      	b.n	800af10 <prvIdleTask+0x8>
 800af2e:	bf00      	nop
 800af30:	20002c84 	.word	0x20002c84
 800af34:	e000ed04 	.word	0xe000ed04

0800af38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af3e:	2300      	movs	r3, #0
 800af40:	607b      	str	r3, [r7, #4]
 800af42:	e00c      	b.n	800af5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4a12      	ldr	r2, [pc, #72]	@ (800af98 <prvInitialiseTaskLists+0x60>)
 800af50:	4413      	add	r3, r2
 800af52:	4618      	mov	r0, r3
 800af54:	f7fe fc58 	bl	8009808 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	3301      	adds	r3, #1
 800af5c:	607b      	str	r3, [r7, #4]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b06      	cmp	r3, #6
 800af62:	d9ef      	bls.n	800af44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af64:	480d      	ldr	r0, [pc, #52]	@ (800af9c <prvInitialiseTaskLists+0x64>)
 800af66:	f7fe fc4f 	bl	8009808 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af6a:	480d      	ldr	r0, [pc, #52]	@ (800afa0 <prvInitialiseTaskLists+0x68>)
 800af6c:	f7fe fc4c 	bl	8009808 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af70:	480c      	ldr	r0, [pc, #48]	@ (800afa4 <prvInitialiseTaskLists+0x6c>)
 800af72:	f7fe fc49 	bl	8009808 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af76:	480c      	ldr	r0, [pc, #48]	@ (800afa8 <prvInitialiseTaskLists+0x70>)
 800af78:	f7fe fc46 	bl	8009808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af7c:	480b      	ldr	r0, [pc, #44]	@ (800afac <prvInitialiseTaskLists+0x74>)
 800af7e:	f7fe fc43 	bl	8009808 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af82:	4b0b      	ldr	r3, [pc, #44]	@ (800afb0 <prvInitialiseTaskLists+0x78>)
 800af84:	4a05      	ldr	r2, [pc, #20]	@ (800af9c <prvInitialiseTaskLists+0x64>)
 800af86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af88:	4b0a      	ldr	r3, [pc, #40]	@ (800afb4 <prvInitialiseTaskLists+0x7c>)
 800af8a:	4a05      	ldr	r2, [pc, #20]	@ (800afa0 <prvInitialiseTaskLists+0x68>)
 800af8c:	601a      	str	r2, [r3, #0]
}
 800af8e:	bf00      	nop
 800af90:	3708      	adds	r7, #8
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	20002c84 	.word	0x20002c84
 800af9c:	20002d10 	.word	0x20002d10
 800afa0:	20002d24 	.word	0x20002d24
 800afa4:	20002d40 	.word	0x20002d40
 800afa8:	20002d54 	.word	0x20002d54
 800afac:	20002d6c 	.word	0x20002d6c
 800afb0:	20002d38 	.word	0x20002d38
 800afb4:	20002d3c 	.word	0x20002d3c

0800afb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afbe:	e019      	b.n	800aff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afc0:	f000 faba 	bl	800b538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc4:	4b10      	ldr	r3, [pc, #64]	@ (800b008 <prvCheckTasksWaitingTermination+0x50>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	3304      	adds	r3, #4
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fe fca3 	bl	800991c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afd6:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <prvCheckTasksWaitingTermination+0x54>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3b01      	subs	r3, #1
 800afdc:	4a0b      	ldr	r2, [pc, #44]	@ (800b00c <prvCheckTasksWaitingTermination+0x54>)
 800afde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afe0:	4b0b      	ldr	r3, [pc, #44]	@ (800b010 <prvCheckTasksWaitingTermination+0x58>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	4a0a      	ldr	r2, [pc, #40]	@ (800b010 <prvCheckTasksWaitingTermination+0x58>)
 800afe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afea:	f000 fad7 	bl	800b59c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f810 	bl	800b014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aff4:	4b06      	ldr	r3, [pc, #24]	@ (800b010 <prvCheckTasksWaitingTermination+0x58>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1e1      	bne.n	800afc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20002d54 	.word	0x20002d54
 800b00c:	20002d80 	.word	0x20002d80
 800b010:	20002d68 	.word	0x20002d68

0800b014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	334c      	adds	r3, #76	@ 0x4c
 800b020:	4618      	mov	r0, r3
 800b022:	f001 fe51 	bl	800ccc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d108      	bne.n	800b042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b034:	4618      	mov	r0, r3
 800b036:	f000 fc6f 	bl	800b918 <vPortFree>
				vPortFree( pxTCB );
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fc6c 	bl	800b918 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b040:	e019      	b.n	800b076 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d103      	bne.n	800b054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fc63 	bl	800b918 <vPortFree>
	}
 800b052:	e010      	b.n	800b076 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d00b      	beq.n	800b076 <prvDeleteTCB+0x62>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	60fb      	str	r3, [r7, #12]
}
 800b070:	bf00      	nop
 800b072:	bf00      	nop
 800b074:	e7fd      	b.n	800b072 <prvDeleteTCB+0x5e>
	}
 800b076:	bf00      	nop
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b086:	4b0c      	ldr	r3, [pc, #48]	@ (800b0b8 <prvResetNextTaskUnblockTime+0x38>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d104      	bne.n	800b09a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b090:	4b0a      	ldr	r3, [pc, #40]	@ (800b0bc <prvResetNextTaskUnblockTime+0x3c>)
 800b092:	f04f 32ff 	mov.w	r2, #4294967295
 800b096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b098:	e008      	b.n	800b0ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b09a:	4b07      	ldr	r3, [pc, #28]	@ (800b0b8 <prvResetNextTaskUnblockTime+0x38>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	4a04      	ldr	r2, [pc, #16]	@ (800b0bc <prvResetNextTaskUnblockTime+0x3c>)
 800b0aa:	6013      	str	r3, [r2, #0]
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	20002d38 	.word	0x20002d38
 800b0bc:	20002da0 	.word	0x20002da0

0800b0c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f4 <xTaskGetSchedulerState+0x34>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d102      	bne.n	800b0d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	607b      	str	r3, [r7, #4]
 800b0d2:	e008      	b.n	800b0e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d4:	4b08      	ldr	r3, [pc, #32]	@ (800b0f8 <xTaskGetSchedulerState+0x38>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d102      	bne.n	800b0e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0dc:	2302      	movs	r3, #2
 800b0de:	607b      	str	r3, [r7, #4]
 800b0e0:	e001      	b.n	800b0e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0e6:	687b      	ldr	r3, [r7, #4]
	}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	20002d8c 	.word	0x20002d8c
 800b0f8:	20002da8 	.word	0x20002da8

0800b0fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b108:	2300      	movs	r3, #0
 800b10a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d070      	beq.n	800b1f4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b112:	4b3b      	ldr	r3, [pc, #236]	@ (800b200 <xTaskPriorityDisinherit+0x104>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d00b      	beq.n	800b134 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	60fb      	str	r3, [r7, #12]
}
 800b12e:	bf00      	nop
 800b130:	bf00      	nop
 800b132:	e7fd      	b.n	800b130 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10b      	bne.n	800b154 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	60bb      	str	r3, [r7, #8]
}
 800b14e:	bf00      	nop
 800b150:	bf00      	nop
 800b152:	e7fd      	b.n	800b150 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b158:	1e5a      	subs	r2, r3, #1
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b166:	429a      	cmp	r2, r3
 800b168:	d044      	beq.n	800b1f4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d140      	bne.n	800b1f4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	3304      	adds	r3, #4
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe fbd0 	bl	800991c <uxListRemove>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d115      	bne.n	800b1ae <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b186:	491f      	ldr	r1, [pc, #124]	@ (800b204 <xTaskPriorityDisinherit+0x108>)
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	440b      	add	r3, r1
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d10a      	bne.n	800b1ae <xTaskPriorityDisinherit+0xb2>
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b19c:	2201      	movs	r2, #1
 800b19e:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a2:	43da      	mvns	r2, r3
 800b1a4:	4b18      	ldr	r3, [pc, #96]	@ (800b208 <xTaskPriorityDisinherit+0x10c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	4a17      	ldr	r2, [pc, #92]	@ (800b208 <xTaskPriorityDisinherit+0x10c>)
 800b1ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ba:	f1c3 0207 	rsb	r2, r3, #7
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	409a      	lsls	r2, r3
 800b1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b208 <xTaskPriorityDisinherit+0x10c>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	4a0d      	ldr	r2, [pc, #52]	@ (800b208 <xTaskPriorityDisinherit+0x10c>)
 800b1d2:	6013      	str	r3, [r2, #0]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4a08      	ldr	r2, [pc, #32]	@ (800b204 <xTaskPriorityDisinherit+0x108>)
 800b1e2:	441a      	add	r2, r3
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	3304      	adds	r3, #4
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	f7fe fb39 	bl	8009862 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1f4:	697b      	ldr	r3, [r7, #20]
	}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	20002c80 	.word	0x20002c80
 800b204:	20002c84 	.word	0x20002c84
 800b208:	20002d88 	.word	0x20002d88

0800b20c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b216:	4b29      	ldr	r3, [pc, #164]	@ (800b2bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b21c:	4b28      	ldr	r3, [pc, #160]	@ (800b2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3304      	adds	r3, #4
 800b222:	4618      	mov	r0, r3
 800b224:	f7fe fb7a 	bl	800991c <uxListRemove>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10b      	bne.n	800b246 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b22e:	4b24      	ldr	r3, [pc, #144]	@ (800b2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b234:	2201      	movs	r2, #1
 800b236:	fa02 f303 	lsl.w	r3, r2, r3
 800b23a:	43da      	mvns	r2, r3
 800b23c:	4b21      	ldr	r3, [pc, #132]	@ (800b2c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4013      	ands	r3, r2
 800b242:	4a20      	ldr	r2, [pc, #128]	@ (800b2c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b244:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24c:	d10a      	bne.n	800b264 <prvAddCurrentTaskToDelayedList+0x58>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d007      	beq.n	800b264 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b254:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3304      	adds	r3, #4
 800b25a:	4619      	mov	r1, r3
 800b25c:	481a      	ldr	r0, [pc, #104]	@ (800b2c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b25e:	f7fe fb00 	bl	8009862 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b262:	e026      	b.n	800b2b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4413      	add	r3, r2
 800b26a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b26c:	4b14      	ldr	r3, [pc, #80]	@ (800b2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d209      	bcs.n	800b290 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b27c:	4b13      	ldr	r3, [pc, #76]	@ (800b2cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3304      	adds	r3, #4
 800b286:	4619      	mov	r1, r3
 800b288:	4610      	mov	r0, r2
 800b28a:	f7fe fb0e 	bl	80098aa <vListInsert>
}
 800b28e:	e010      	b.n	800b2b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b290:	4b0f      	ldr	r3, [pc, #60]	@ (800b2d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3304      	adds	r3, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f7fe fb04 	bl	80098aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d202      	bcs.n	800b2b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b2ac:	4a09      	ldr	r2, [pc, #36]	@ (800b2d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6013      	str	r3, [r2, #0]
}
 800b2b2:	bf00      	nop
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20002d84 	.word	0x20002d84
 800b2c0:	20002c80 	.word	0x20002c80
 800b2c4:	20002d88 	.word	0x20002d88
 800b2c8:	20002d6c 	.word	0x20002d6c
 800b2cc:	20002d3c 	.word	0x20002d3c
 800b2d0:	20002d38 	.word	0x20002d38
 800b2d4:	20002da0 	.word	0x20002da0

0800b2d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3b04      	subs	r3, #4
 800b2e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b2f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3b04      	subs	r3, #4
 800b2f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f023 0201 	bic.w	r2, r3, #1
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	3b04      	subs	r3, #4
 800b306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b308:	4a0c      	ldr	r2, [pc, #48]	@ (800b33c <pxPortInitialiseStack+0x64>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3b14      	subs	r3, #20
 800b312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3b04      	subs	r3, #4
 800b31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f06f 0202 	mvn.w	r2, #2
 800b326:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	3b20      	subs	r3, #32
 800b32c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b32e:	68fb      	ldr	r3, [r7, #12]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	0800b341 	.word	0x0800b341

0800b340 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b34a:	4b13      	ldr	r3, [pc, #76]	@ (800b398 <prvTaskExitError+0x58>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b352:	d00b      	beq.n	800b36c <prvTaskExitError+0x2c>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	60fb      	str	r3, [r7, #12]
}
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	e7fd      	b.n	800b368 <prvTaskExitError+0x28>
	__asm volatile
 800b36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b370:	f383 8811 	msr	BASEPRI, r3
 800b374:	f3bf 8f6f 	isb	sy
 800b378:	f3bf 8f4f 	dsb	sy
 800b37c:	60bb      	str	r3, [r7, #8]
}
 800b37e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b380:	bf00      	nop
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d0fc      	beq.n	800b382 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	2000001c 	.word	0x2000001c
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3a0:	4b07      	ldr	r3, [pc, #28]	@ (800b3c0 <pxCurrentTCBConst2>)
 800b3a2:	6819      	ldr	r1, [r3, #0]
 800b3a4:	6808      	ldr	r0, [r1, #0]
 800b3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3aa:	f380 8809 	msr	PSP, r0
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f04f 0000 	mov.w	r0, #0
 800b3b6:	f380 8811 	msr	BASEPRI, r0
 800b3ba:	4770      	bx	lr
 800b3bc:	f3af 8000 	nop.w

0800b3c0 <pxCurrentTCBConst2>:
 800b3c0:	20002c80 	.word	0x20002c80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop

0800b3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3c8:	4808      	ldr	r0, [pc, #32]	@ (800b3ec <prvPortStartFirstTask+0x24>)
 800b3ca:	6800      	ldr	r0, [r0, #0]
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f380 8808 	msr	MSP, r0
 800b3d2:	f04f 0000 	mov.w	r0, #0
 800b3d6:	f380 8814 	msr	CONTROL, r0
 800b3da:	b662      	cpsie	i
 800b3dc:	b661      	cpsie	f
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	df00      	svc	0
 800b3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3ea:	bf00      	nop
 800b3ec:	e000ed08 	.word	0xe000ed08

0800b3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3f6:	4b47      	ldr	r3, [pc, #284]	@ (800b514 <xPortStartScheduler+0x124>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a47      	ldr	r2, [pc, #284]	@ (800b518 <xPortStartScheduler+0x128>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d10b      	bne.n	800b418 <xPortStartScheduler+0x28>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	613b      	str	r3, [r7, #16]
}
 800b412:	bf00      	nop
 800b414:	bf00      	nop
 800b416:	e7fd      	b.n	800b414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b418:	4b3e      	ldr	r3, [pc, #248]	@ (800b514 <xPortStartScheduler+0x124>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a3f      	ldr	r2, [pc, #252]	@ (800b51c <xPortStartScheduler+0x12c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d10b      	bne.n	800b43a <xPortStartScheduler+0x4a>
	__asm volatile
 800b422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	60fb      	str	r3, [r7, #12]
}
 800b434:	bf00      	nop
 800b436:	bf00      	nop
 800b438:	e7fd      	b.n	800b436 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b43a:	4b39      	ldr	r3, [pc, #228]	@ (800b520 <xPortStartScheduler+0x130>)
 800b43c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b2db      	uxtb	r3, r3
 800b444:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	22ff      	movs	r2, #255	@ 0xff
 800b44a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	b2db      	uxtb	r3, r3
 800b452:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b454:	78fb      	ldrb	r3, [r7, #3]
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	4b31      	ldr	r3, [pc, #196]	@ (800b524 <xPortStartScheduler+0x134>)
 800b460:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b462:	4b31      	ldr	r3, [pc, #196]	@ (800b528 <xPortStartScheduler+0x138>)
 800b464:	2207      	movs	r2, #7
 800b466:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b468:	e009      	b.n	800b47e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b46a:	4b2f      	ldr	r3, [pc, #188]	@ (800b528 <xPortStartScheduler+0x138>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3b01      	subs	r3, #1
 800b470:	4a2d      	ldr	r2, [pc, #180]	@ (800b528 <xPortStartScheduler+0x138>)
 800b472:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	b2db      	uxtb	r3, r3
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b47e:	78fb      	ldrb	r3, [r7, #3]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b486:	2b80      	cmp	r3, #128	@ 0x80
 800b488:	d0ef      	beq.n	800b46a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b48a:	4b27      	ldr	r3, [pc, #156]	@ (800b528 <xPortStartScheduler+0x138>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f1c3 0307 	rsb	r3, r3, #7
 800b492:	2b04      	cmp	r3, #4
 800b494:	d00b      	beq.n	800b4ae <xPortStartScheduler+0xbe>
	__asm volatile
 800b496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	60bb      	str	r3, [r7, #8]
}
 800b4a8:	bf00      	nop
 800b4aa:	bf00      	nop
 800b4ac:	e7fd      	b.n	800b4aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4ae:	4b1e      	ldr	r3, [pc, #120]	@ (800b528 <xPortStartScheduler+0x138>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b528 <xPortStartScheduler+0x138>)
 800b4b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4b8:	4b1b      	ldr	r3, [pc, #108]	@ (800b528 <xPortStartScheduler+0x138>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4c0:	4a19      	ldr	r2, [pc, #100]	@ (800b528 <xPortStartScheduler+0x138>)
 800b4c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4cc:	4b17      	ldr	r3, [pc, #92]	@ (800b52c <xPortStartScheduler+0x13c>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a16      	ldr	r2, [pc, #88]	@ (800b52c <xPortStartScheduler+0x13c>)
 800b4d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b4d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4d8:	4b14      	ldr	r3, [pc, #80]	@ (800b52c <xPortStartScheduler+0x13c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a13      	ldr	r2, [pc, #76]	@ (800b52c <xPortStartScheduler+0x13c>)
 800b4de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b4e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4e4:	f000 f8da 	bl	800b69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4e8:	4b11      	ldr	r3, [pc, #68]	@ (800b530 <xPortStartScheduler+0x140>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4ee:	f000 f8f9 	bl	800b6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4f2:	4b10      	ldr	r3, [pc, #64]	@ (800b534 <xPortStartScheduler+0x144>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a0f      	ldr	r2, [pc, #60]	@ (800b534 <xPortStartScheduler+0x144>)
 800b4f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b4fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4fe:	f7ff ff63 	bl	800b3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b502:	f7ff fb8d 	bl	800ac20 <vTaskSwitchContext>
	prvTaskExitError();
 800b506:	f7ff ff1b 	bl	800b340 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	e000ed00 	.word	0xe000ed00
 800b518:	410fc271 	.word	0x410fc271
 800b51c:	410fc270 	.word	0x410fc270
 800b520:	e000e400 	.word	0xe000e400
 800b524:	20002dac 	.word	0x20002dac
 800b528:	20002db0 	.word	0x20002db0
 800b52c:	e000ed20 	.word	0xe000ed20
 800b530:	2000001c 	.word	0x2000001c
 800b534:	e000ef34 	.word	0xe000ef34

0800b538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	607b      	str	r3, [r7, #4]
}
 800b550:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b552:	4b10      	ldr	r3, [pc, #64]	@ (800b594 <vPortEnterCritical+0x5c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3301      	adds	r3, #1
 800b558:	4a0e      	ldr	r2, [pc, #56]	@ (800b594 <vPortEnterCritical+0x5c>)
 800b55a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b55c:	4b0d      	ldr	r3, [pc, #52]	@ (800b594 <vPortEnterCritical+0x5c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d110      	bne.n	800b586 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b564:	4b0c      	ldr	r3, [pc, #48]	@ (800b598 <vPortEnterCritical+0x60>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00b      	beq.n	800b586 <vPortEnterCritical+0x4e>
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	603b      	str	r3, [r7, #0]
}
 800b580:	bf00      	nop
 800b582:	bf00      	nop
 800b584:	e7fd      	b.n	800b582 <vPortEnterCritical+0x4a>
	}
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	2000001c 	.word	0x2000001c
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5a2:	4b12      	ldr	r3, [pc, #72]	@ (800b5ec <vPortExitCritical+0x50>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10b      	bne.n	800b5c2 <vPortExitCritical+0x26>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	607b      	str	r3, [r7, #4]
}
 800b5bc:	bf00      	nop
 800b5be:	bf00      	nop
 800b5c0:	e7fd      	b.n	800b5be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5ec <vPortExitCritical+0x50>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	4a08      	ldr	r2, [pc, #32]	@ (800b5ec <vPortExitCritical+0x50>)
 800b5ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5cc:	4b07      	ldr	r3, [pc, #28]	@ (800b5ec <vPortExitCritical+0x50>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d105      	bne.n	800b5e0 <vPortExitCritical+0x44>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	f383 8811 	msr	BASEPRI, r3
}
 800b5de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	2000001c 	.word	0x2000001c

0800b5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5f0:	f3ef 8009 	mrs	r0, PSP
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	4b15      	ldr	r3, [pc, #84]	@ (800b650 <pxCurrentTCBConst>)
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	f01e 0f10 	tst.w	lr, #16
 800b600:	bf08      	it	eq
 800b602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	6010      	str	r0, [r2, #0]
 800b60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b610:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b614:	f380 8811 	msr	BASEPRI, r0
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f7ff fafe 	bl	800ac20 <vTaskSwitchContext>
 800b624:	f04f 0000 	mov.w	r0, #0
 800b628:	f380 8811 	msr	BASEPRI, r0
 800b62c:	bc09      	pop	{r0, r3}
 800b62e:	6819      	ldr	r1, [r3, #0]
 800b630:	6808      	ldr	r0, [r1, #0]
 800b632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b636:	f01e 0f10 	tst.w	lr, #16
 800b63a:	bf08      	it	eq
 800b63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b640:	f380 8809 	msr	PSP, r0
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	f3af 8000 	nop.w

0800b650 <pxCurrentTCBConst>:
 800b650:	20002c80 	.word	0x20002c80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop

0800b658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	607b      	str	r3, [r7, #4]
}
 800b670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b672:	f7ff fa1b 	bl	800aaac <xTaskIncrementTick>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b67c:	4b06      	ldr	r3, [pc, #24]	@ (800b698 <SysTick_Handler+0x40>)
 800b67e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	2300      	movs	r3, #0
 800b686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	f383 8811 	msr	BASEPRI, r3
}
 800b68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b690:	bf00      	nop
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	e000ed04 	.word	0xe000ed04

0800b69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b69c:	b480      	push	{r7}
 800b69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d0 <vPortSetupTimerInterrupt+0x34>)
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d4 <vPortSetupTimerInterrupt+0x38>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d8 <vPortSetupTimerInterrupt+0x3c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a0a      	ldr	r2, [pc, #40]	@ (800b6dc <vPortSetupTimerInterrupt+0x40>)
 800b6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b6:	099b      	lsrs	r3, r3, #6
 800b6b8:	4a09      	ldr	r2, [pc, #36]	@ (800b6e0 <vPortSetupTimerInterrupt+0x44>)
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6be:	4b04      	ldr	r3, [pc, #16]	@ (800b6d0 <vPortSetupTimerInterrupt+0x34>)
 800b6c0:	2207      	movs	r2, #7
 800b6c2:	601a      	str	r2, [r3, #0]
}
 800b6c4:	bf00      	nop
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	e000e010 	.word	0xe000e010
 800b6d4:	e000e018 	.word	0xe000e018
 800b6d8:	20000010 	.word	0x20000010
 800b6dc:	10624dd3 	.word	0x10624dd3
 800b6e0:	e000e014 	.word	0xe000e014

0800b6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b6f4 <vPortEnableVFP+0x10>
 800b6e8:	6801      	ldr	r1, [r0, #0]
 800b6ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b6ee:	6001      	str	r1, [r0, #0]
 800b6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6f2:	bf00      	nop
 800b6f4:	e000ed88 	.word	0xe000ed88

0800b6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6fe:	f3ef 8305 	mrs	r3, IPSR
 800b702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b0f      	cmp	r3, #15
 800b708:	d915      	bls.n	800b736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b70a:	4a18      	ldr	r2, [pc, #96]	@ (800b76c <vPortValidateInterruptPriority+0x74>)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4413      	add	r3, r2
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b714:	4b16      	ldr	r3, [pc, #88]	@ (800b770 <vPortValidateInterruptPriority+0x78>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	7afa      	ldrb	r2, [r7, #11]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d20b      	bcs.n	800b736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	607b      	str	r3, [r7, #4]
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	e7fd      	b.n	800b732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b736:	4b0f      	ldr	r3, [pc, #60]	@ (800b774 <vPortValidateInterruptPriority+0x7c>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b73e:	4b0e      	ldr	r3, [pc, #56]	@ (800b778 <vPortValidateInterruptPriority+0x80>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d90b      	bls.n	800b75e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b74a:	f383 8811 	msr	BASEPRI, r3
 800b74e:	f3bf 8f6f 	isb	sy
 800b752:	f3bf 8f4f 	dsb	sy
 800b756:	603b      	str	r3, [r7, #0]
}
 800b758:	bf00      	nop
 800b75a:	bf00      	nop
 800b75c:	e7fd      	b.n	800b75a <vPortValidateInterruptPriority+0x62>
	}
 800b75e:	bf00      	nop
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	e000e3f0 	.word	0xe000e3f0
 800b770:	20002dac 	.word	0x20002dac
 800b774:	e000ed0c 	.word	0xe000ed0c
 800b778:	20002db0 	.word	0x20002db0

0800b77c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b08a      	sub	sp, #40	@ 0x28
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b784:	2300      	movs	r3, #0
 800b786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b788:	f7ff f8e4 	bl	800a954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b78c:	4b5c      	ldr	r3, [pc, #368]	@ (800b900 <pvPortMalloc+0x184>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b794:	f000 f924 	bl	800b9e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b798:	4b5a      	ldr	r3, [pc, #360]	@ (800b904 <pvPortMalloc+0x188>)
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4013      	ands	r3, r2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f040 8095 	bne.w	800b8d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d01e      	beq.n	800b7ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b7ac:	2208      	movs	r2, #8
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f003 0307 	and.w	r3, r3, #7
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d015      	beq.n	800b7ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f023 0307 	bic.w	r3, r3, #7
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f003 0307 	and.w	r3, r3, #7
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00b      	beq.n	800b7ea <pvPortMalloc+0x6e>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	617b      	str	r3, [r7, #20]
}
 800b7e4:	bf00      	nop
 800b7e6:	bf00      	nop
 800b7e8:	e7fd      	b.n	800b7e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d06f      	beq.n	800b8d0 <pvPortMalloc+0x154>
 800b7f0:	4b45      	ldr	r3, [pc, #276]	@ (800b908 <pvPortMalloc+0x18c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d86a      	bhi.n	800b8d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7fa:	4b44      	ldr	r3, [pc, #272]	@ (800b90c <pvPortMalloc+0x190>)
 800b7fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7fe:	4b43      	ldr	r3, [pc, #268]	@ (800b90c <pvPortMalloc+0x190>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b804:	e004      	b.n	800b810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	429a      	cmp	r2, r3
 800b818:	d903      	bls.n	800b822 <pvPortMalloc+0xa6>
 800b81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1f1      	bne.n	800b806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b822:	4b37      	ldr	r3, [pc, #220]	@ (800b900 <pvPortMalloc+0x184>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b828:	429a      	cmp	r2, r3
 800b82a:	d051      	beq.n	800b8d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2208      	movs	r2, #8
 800b832:	4413      	add	r3, r2
 800b834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	1ad2      	subs	r2, r2, r3
 800b846:	2308      	movs	r3, #8
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d920      	bls.n	800b890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b84e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4413      	add	r3, r2
 800b854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	f003 0307 	and.w	r3, r3, #7
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <pvPortMalloc+0xfc>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	613b      	str	r3, [r7, #16]
}
 800b872:	bf00      	nop
 800b874:	bf00      	nop
 800b876:	e7fd      	b.n	800b874 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b88a:	69b8      	ldr	r0, [r7, #24]
 800b88c:	f000 f90a 	bl	800baa4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b890:	4b1d      	ldr	r3, [pc, #116]	@ (800b908 <pvPortMalloc+0x18c>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	4a1b      	ldr	r2, [pc, #108]	@ (800b908 <pvPortMalloc+0x18c>)
 800b89c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b89e:	4b1a      	ldr	r3, [pc, #104]	@ (800b908 <pvPortMalloc+0x18c>)
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b910 <pvPortMalloc+0x194>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d203      	bcs.n	800b8b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8aa:	4b17      	ldr	r3, [pc, #92]	@ (800b908 <pvPortMalloc+0x18c>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a18      	ldr	r2, [pc, #96]	@ (800b910 <pvPortMalloc+0x194>)
 800b8b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	4b13      	ldr	r3, [pc, #76]	@ (800b904 <pvPortMalloc+0x188>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	431a      	orrs	r2, r3
 800b8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8c6:	4b13      	ldr	r3, [pc, #76]	@ (800b914 <pvPortMalloc+0x198>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	4a11      	ldr	r2, [pc, #68]	@ (800b914 <pvPortMalloc+0x198>)
 800b8ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8d0:	f7ff f84e 	bl	800a970 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f003 0307 	and.w	r3, r3, #7
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d00b      	beq.n	800b8f6 <pvPortMalloc+0x17a>
	__asm volatile
 800b8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e2:	f383 8811 	msr	BASEPRI, r3
 800b8e6:	f3bf 8f6f 	isb	sy
 800b8ea:	f3bf 8f4f 	dsb	sy
 800b8ee:	60fb      	str	r3, [r7, #12]
}
 800b8f0:	bf00      	nop
 800b8f2:	bf00      	nop
 800b8f4:	e7fd      	b.n	800b8f2 <pvPortMalloc+0x176>
	return pvReturn;
 800b8f6:	69fb      	ldr	r3, [r7, #28]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3728      	adds	r7, #40	@ 0x28
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20008dbc 	.word	0x20008dbc
 800b904:	20008dd0 	.word	0x20008dd0
 800b908:	20008dc0 	.word	0x20008dc0
 800b90c:	20008db4 	.word	0x20008db4
 800b910:	20008dc4 	.word	0x20008dc4
 800b914:	20008dc8 	.word	0x20008dc8

0800b918 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d04f      	beq.n	800b9ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b92a:	2308      	movs	r3, #8
 800b92c:	425b      	negs	r3, r3
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4413      	add	r3, r2
 800b932:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	4b25      	ldr	r3, [pc, #148]	@ (800b9d4 <vPortFree+0xbc>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4013      	ands	r3, r2
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10b      	bne.n	800b95e <vPortFree+0x46>
	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	60fb      	str	r3, [r7, #12]
}
 800b958:	bf00      	nop
 800b95a:	bf00      	nop
 800b95c:	e7fd      	b.n	800b95a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00b      	beq.n	800b97e <vPortFree+0x66>
	__asm volatile
 800b966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	60bb      	str	r3, [r7, #8]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	4b14      	ldr	r3, [pc, #80]	@ (800b9d4 <vPortFree+0xbc>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4013      	ands	r3, r2
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01e      	beq.n	800b9ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d11a      	bne.n	800b9ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	685a      	ldr	r2, [r3, #4]
 800b998:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d4 <vPortFree+0xbc>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	43db      	mvns	r3, r3
 800b99e:	401a      	ands	r2, r3
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9a4:	f7fe ffd6 	bl	800a954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d8 <vPortFree+0xc0>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	4a09      	ldr	r2, [pc, #36]	@ (800b9d8 <vPortFree+0xc0>)
 800b9b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9b6:	6938      	ldr	r0, [r7, #16]
 800b9b8:	f000 f874 	bl	800baa4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9bc:	4b07      	ldr	r3, [pc, #28]	@ (800b9dc <vPortFree+0xc4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	4a06      	ldr	r2, [pc, #24]	@ (800b9dc <vPortFree+0xc4>)
 800b9c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9c6:	f7fe ffd3 	bl	800a970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9ca:	bf00      	nop
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20008dd0 	.word	0x20008dd0
 800b9d8:	20008dc0 	.word	0x20008dc0
 800b9dc:	20008dcc 	.word	0x20008dcc

0800b9e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9e6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800b9ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9ec:	4b27      	ldr	r3, [pc, #156]	@ (800ba8c <prvHeapInit+0xac>)
 800b9ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00c      	beq.n	800ba14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3307      	adds	r3, #7
 800b9fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f023 0307 	bic.w	r3, r3, #7
 800ba06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	4a1f      	ldr	r2, [pc, #124]	@ (800ba8c <prvHeapInit+0xac>)
 800ba10:	4413      	add	r3, r2
 800ba12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba18:	4a1d      	ldr	r2, [pc, #116]	@ (800ba90 <prvHeapInit+0xb0>)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ba90 <prvHeapInit+0xb0>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	4413      	add	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba2c:	2208      	movs	r2, #8
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	1a9b      	subs	r3, r3, r2
 800ba32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f023 0307 	bic.w	r3, r3, #7
 800ba3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	4a15      	ldr	r2, [pc, #84]	@ (800ba94 <prvHeapInit+0xb4>)
 800ba40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba42:	4b14      	ldr	r3, [pc, #80]	@ (800ba94 <prvHeapInit+0xb4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2200      	movs	r2, #0
 800ba48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba4a:	4b12      	ldr	r3, [pc, #72]	@ (800ba94 <prvHeapInit+0xb4>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	1ad2      	subs	r2, r2, r3
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba60:	4b0c      	ldr	r3, [pc, #48]	@ (800ba94 <prvHeapInit+0xb4>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	4a0a      	ldr	r2, [pc, #40]	@ (800ba98 <prvHeapInit+0xb8>)
 800ba6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	4a09      	ldr	r2, [pc, #36]	@ (800ba9c <prvHeapInit+0xbc>)
 800ba76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba78:	4b09      	ldr	r3, [pc, #36]	@ (800baa0 <prvHeapInit+0xc0>)
 800ba7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ba7e:	601a      	str	r2, [r3, #0]
}
 800ba80:	bf00      	nop
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	20002db4 	.word	0x20002db4
 800ba90:	20008db4 	.word	0x20008db4
 800ba94:	20008dbc 	.word	0x20008dbc
 800ba98:	20008dc4 	.word	0x20008dc4
 800ba9c:	20008dc0 	.word	0x20008dc0
 800baa0:	20008dd0 	.word	0x20008dd0

0800baa4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800baac:	4b28      	ldr	r3, [pc, #160]	@ (800bb50 <prvInsertBlockIntoFreeList+0xac>)
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	e002      	b.n	800bab8 <prvInsertBlockIntoFreeList+0x14>
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	60fb      	str	r3, [r7, #12]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d8f7      	bhi.n	800bab2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	4413      	add	r3, r2
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d108      	bne.n	800bae6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	685a      	ldr	r2, [r3, #4]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	441a      	add	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	441a      	add	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d118      	bne.n	800bb2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	4b15      	ldr	r3, [pc, #84]	@ (800bb54 <prvInsertBlockIntoFreeList+0xb0>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d00d      	beq.n	800bb22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	441a      	add	r2, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	e008      	b.n	800bb34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb22:	4b0c      	ldr	r3, [pc, #48]	@ (800bb54 <prvInsertBlockIntoFreeList+0xb0>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	e003      	b.n	800bb34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d002      	beq.n	800bb42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb42:	bf00      	nop
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	20008db4 	.word	0x20008db4
 800bb54:	20008dbc 	.word	0x20008dbc

0800bb58 <malloc>:
 800bb58:	4b02      	ldr	r3, [pc, #8]	@ (800bb64 <malloc+0xc>)
 800bb5a:	4601      	mov	r1, r0
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	f000 b82d 	b.w	800bbbc <_malloc_r>
 800bb62:	bf00      	nop
 800bb64:	20000198 	.word	0x20000198

0800bb68 <free>:
 800bb68:	4b02      	ldr	r3, [pc, #8]	@ (800bb74 <free+0xc>)
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	f001 b98b 	b.w	800ce88 <_free_r>
 800bb72:	bf00      	nop
 800bb74:	20000198 	.word	0x20000198

0800bb78 <sbrk_aligned>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	4e0f      	ldr	r6, [pc, #60]	@ (800bbb8 <sbrk_aligned+0x40>)
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	6831      	ldr	r1, [r6, #0]
 800bb80:	4605      	mov	r5, r0
 800bb82:	b911      	cbnz	r1, 800bb8a <sbrk_aligned+0x12>
 800bb84:	f001 f91a 	bl	800cdbc <_sbrk_r>
 800bb88:	6030      	str	r0, [r6, #0]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f001 f915 	bl	800cdbc <_sbrk_r>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	d103      	bne.n	800bb9e <sbrk_aligned+0x26>
 800bb96:	f04f 34ff 	mov.w	r4, #4294967295
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	bd70      	pop	{r4, r5, r6, pc}
 800bb9e:	1cc4      	adds	r4, r0, #3
 800bba0:	f024 0403 	bic.w	r4, r4, #3
 800bba4:	42a0      	cmp	r0, r4
 800bba6:	d0f8      	beq.n	800bb9a <sbrk_aligned+0x22>
 800bba8:	1a21      	subs	r1, r4, r0
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f001 f906 	bl	800cdbc <_sbrk_r>
 800bbb0:	3001      	adds	r0, #1
 800bbb2:	d1f2      	bne.n	800bb9a <sbrk_aligned+0x22>
 800bbb4:	e7ef      	b.n	800bb96 <sbrk_aligned+0x1e>
 800bbb6:	bf00      	nop
 800bbb8:	20008dd4 	.word	0x20008dd4

0800bbbc <_malloc_r>:
 800bbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbc0:	1ccd      	adds	r5, r1, #3
 800bbc2:	f025 0503 	bic.w	r5, r5, #3
 800bbc6:	3508      	adds	r5, #8
 800bbc8:	2d0c      	cmp	r5, #12
 800bbca:	bf38      	it	cc
 800bbcc:	250c      	movcc	r5, #12
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	4606      	mov	r6, r0
 800bbd2:	db01      	blt.n	800bbd8 <_malloc_r+0x1c>
 800bbd4:	42a9      	cmp	r1, r5
 800bbd6:	d904      	bls.n	800bbe2 <_malloc_r+0x26>
 800bbd8:	230c      	movs	r3, #12
 800bbda:	6033      	str	r3, [r6, #0]
 800bbdc:	2000      	movs	r0, #0
 800bbde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bcb8 <_malloc_r+0xfc>
 800bbe6:	f000 f869 	bl	800bcbc <__malloc_lock>
 800bbea:	f8d8 3000 	ldr.w	r3, [r8]
 800bbee:	461c      	mov	r4, r3
 800bbf0:	bb44      	cbnz	r4, 800bc44 <_malloc_r+0x88>
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f7ff ffbf 	bl	800bb78 <sbrk_aligned>
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	d158      	bne.n	800bcb2 <_malloc_r+0xf6>
 800bc00:	f8d8 4000 	ldr.w	r4, [r8]
 800bc04:	4627      	mov	r7, r4
 800bc06:	2f00      	cmp	r7, #0
 800bc08:	d143      	bne.n	800bc92 <_malloc_r+0xd6>
 800bc0a:	2c00      	cmp	r4, #0
 800bc0c:	d04b      	beq.n	800bca6 <_malloc_r+0xea>
 800bc0e:	6823      	ldr	r3, [r4, #0]
 800bc10:	4639      	mov	r1, r7
 800bc12:	4630      	mov	r0, r6
 800bc14:	eb04 0903 	add.w	r9, r4, r3
 800bc18:	f001 f8d0 	bl	800cdbc <_sbrk_r>
 800bc1c:	4581      	cmp	r9, r0
 800bc1e:	d142      	bne.n	800bca6 <_malloc_r+0xea>
 800bc20:	6821      	ldr	r1, [r4, #0]
 800bc22:	1a6d      	subs	r5, r5, r1
 800bc24:	4629      	mov	r1, r5
 800bc26:	4630      	mov	r0, r6
 800bc28:	f7ff ffa6 	bl	800bb78 <sbrk_aligned>
 800bc2c:	3001      	adds	r0, #1
 800bc2e:	d03a      	beq.n	800bca6 <_malloc_r+0xea>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	442b      	add	r3, r5
 800bc34:	6023      	str	r3, [r4, #0]
 800bc36:	f8d8 3000 	ldr.w	r3, [r8]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	bb62      	cbnz	r2, 800bc98 <_malloc_r+0xdc>
 800bc3e:	f8c8 7000 	str.w	r7, [r8]
 800bc42:	e00f      	b.n	800bc64 <_malloc_r+0xa8>
 800bc44:	6822      	ldr	r2, [r4, #0]
 800bc46:	1b52      	subs	r2, r2, r5
 800bc48:	d420      	bmi.n	800bc8c <_malloc_r+0xd0>
 800bc4a:	2a0b      	cmp	r2, #11
 800bc4c:	d917      	bls.n	800bc7e <_malloc_r+0xc2>
 800bc4e:	1961      	adds	r1, r4, r5
 800bc50:	42a3      	cmp	r3, r4
 800bc52:	6025      	str	r5, [r4, #0]
 800bc54:	bf18      	it	ne
 800bc56:	6059      	strne	r1, [r3, #4]
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	bf08      	it	eq
 800bc5c:	f8c8 1000 	streq.w	r1, [r8]
 800bc60:	5162      	str	r2, [r4, r5]
 800bc62:	604b      	str	r3, [r1, #4]
 800bc64:	4630      	mov	r0, r6
 800bc66:	f000 f82f 	bl	800bcc8 <__malloc_unlock>
 800bc6a:	f104 000b 	add.w	r0, r4, #11
 800bc6e:	1d23      	adds	r3, r4, #4
 800bc70:	f020 0007 	bic.w	r0, r0, #7
 800bc74:	1ac2      	subs	r2, r0, r3
 800bc76:	bf1c      	itt	ne
 800bc78:	1a1b      	subne	r3, r3, r0
 800bc7a:	50a3      	strne	r3, [r4, r2]
 800bc7c:	e7af      	b.n	800bbde <_malloc_r+0x22>
 800bc7e:	6862      	ldr	r2, [r4, #4]
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	bf0c      	ite	eq
 800bc84:	f8c8 2000 	streq.w	r2, [r8]
 800bc88:	605a      	strne	r2, [r3, #4]
 800bc8a:	e7eb      	b.n	800bc64 <_malloc_r+0xa8>
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	6864      	ldr	r4, [r4, #4]
 800bc90:	e7ae      	b.n	800bbf0 <_malloc_r+0x34>
 800bc92:	463c      	mov	r4, r7
 800bc94:	687f      	ldr	r7, [r7, #4]
 800bc96:	e7b6      	b.n	800bc06 <_malloc_r+0x4a>
 800bc98:	461a      	mov	r2, r3
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	42a3      	cmp	r3, r4
 800bc9e:	d1fb      	bne.n	800bc98 <_malloc_r+0xdc>
 800bca0:	2300      	movs	r3, #0
 800bca2:	6053      	str	r3, [r2, #4]
 800bca4:	e7de      	b.n	800bc64 <_malloc_r+0xa8>
 800bca6:	230c      	movs	r3, #12
 800bca8:	6033      	str	r3, [r6, #0]
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f000 f80c 	bl	800bcc8 <__malloc_unlock>
 800bcb0:	e794      	b.n	800bbdc <_malloc_r+0x20>
 800bcb2:	6005      	str	r5, [r0, #0]
 800bcb4:	e7d6      	b.n	800bc64 <_malloc_r+0xa8>
 800bcb6:	bf00      	nop
 800bcb8:	20008dd8 	.word	0x20008dd8

0800bcbc <__malloc_lock>:
 800bcbc:	4801      	ldr	r0, [pc, #4]	@ (800bcc4 <__malloc_lock+0x8>)
 800bcbe:	f001 b8ca 	b.w	800ce56 <__retarget_lock_acquire_recursive>
 800bcc2:	bf00      	nop
 800bcc4:	20008f1c 	.word	0x20008f1c

0800bcc8 <__malloc_unlock>:
 800bcc8:	4801      	ldr	r0, [pc, #4]	@ (800bcd0 <__malloc_unlock+0x8>)
 800bcca:	f001 b8c5 	b.w	800ce58 <__retarget_lock_release_recursive>
 800bcce:	bf00      	nop
 800bcd0:	20008f1c 	.word	0x20008f1c

0800bcd4 <realloc>:
 800bcd4:	4b02      	ldr	r3, [pc, #8]	@ (800bce0 <realloc+0xc>)
 800bcd6:	460a      	mov	r2, r1
 800bcd8:	4601      	mov	r1, r0
 800bcda:	6818      	ldr	r0, [r3, #0]
 800bcdc:	f000 b802 	b.w	800bce4 <_realloc_r>
 800bce0:	20000198 	.word	0x20000198

0800bce4 <_realloc_r>:
 800bce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce8:	4680      	mov	r8, r0
 800bcea:	4615      	mov	r5, r2
 800bcec:	460c      	mov	r4, r1
 800bcee:	b921      	cbnz	r1, 800bcfa <_realloc_r+0x16>
 800bcf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	f7ff bf61 	b.w	800bbbc <_malloc_r>
 800bcfa:	b92a      	cbnz	r2, 800bd08 <_realloc_r+0x24>
 800bcfc:	f001 f8c4 	bl	800ce88 <_free_r>
 800bd00:	2400      	movs	r4, #0
 800bd02:	4620      	mov	r0, r4
 800bd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd08:	f002 f906 	bl	800df18 <_malloc_usable_size_r>
 800bd0c:	4285      	cmp	r5, r0
 800bd0e:	4606      	mov	r6, r0
 800bd10:	d802      	bhi.n	800bd18 <_realloc_r+0x34>
 800bd12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd16:	d8f4      	bhi.n	800bd02 <_realloc_r+0x1e>
 800bd18:	4629      	mov	r1, r5
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	f7ff ff4e 	bl	800bbbc <_malloc_r>
 800bd20:	4607      	mov	r7, r0
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0ec      	beq.n	800bd00 <_realloc_r+0x1c>
 800bd26:	42b5      	cmp	r5, r6
 800bd28:	462a      	mov	r2, r5
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	bf28      	it	cs
 800bd2e:	4632      	movcs	r2, r6
 800bd30:	f001 f893 	bl	800ce5a <memcpy>
 800bd34:	4621      	mov	r1, r4
 800bd36:	4640      	mov	r0, r8
 800bd38:	f001 f8a6 	bl	800ce88 <_free_r>
 800bd3c:	463c      	mov	r4, r7
 800bd3e:	e7e0      	b.n	800bd02 <_realloc_r+0x1e>

0800bd40 <sulp>:
 800bd40:	b570      	push	{r4, r5, r6, lr}
 800bd42:	4604      	mov	r4, r0
 800bd44:	460d      	mov	r5, r1
 800bd46:	ec45 4b10 	vmov	d0, r4, r5
 800bd4a:	4616      	mov	r6, r2
 800bd4c:	f001 ffa6 	bl	800dc9c <__ulp>
 800bd50:	ec51 0b10 	vmov	r0, r1, d0
 800bd54:	b17e      	cbz	r6, 800bd76 <sulp+0x36>
 800bd56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dd09      	ble.n	800bd76 <sulp+0x36>
 800bd62:	051b      	lsls	r3, r3, #20
 800bd64:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bd68:	2400      	movs	r4, #0
 800bd6a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bd6e:	4622      	mov	r2, r4
 800bd70:	462b      	mov	r3, r5
 800bd72:	f7f4 fc51 	bl	8000618 <__aeabi_dmul>
 800bd76:	ec41 0b10 	vmov	d0, r0, r1
 800bd7a:	bd70      	pop	{r4, r5, r6, pc}
 800bd7c:	0000      	movs	r0, r0
	...

0800bd80 <_strtod_l>:
 800bd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd84:	b09f      	sub	sp, #124	@ 0x7c
 800bd86:	460c      	mov	r4, r1
 800bd88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800bd8e:	9005      	str	r0, [sp, #20]
 800bd90:	f04f 0a00 	mov.w	sl, #0
 800bd94:	f04f 0b00 	mov.w	fp, #0
 800bd98:	460a      	mov	r2, r1
 800bd9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd9c:	7811      	ldrb	r1, [r2, #0]
 800bd9e:	292b      	cmp	r1, #43	@ 0x2b
 800bda0:	d04a      	beq.n	800be38 <_strtod_l+0xb8>
 800bda2:	d838      	bhi.n	800be16 <_strtod_l+0x96>
 800bda4:	290d      	cmp	r1, #13
 800bda6:	d832      	bhi.n	800be0e <_strtod_l+0x8e>
 800bda8:	2908      	cmp	r1, #8
 800bdaa:	d832      	bhi.n	800be12 <_strtod_l+0x92>
 800bdac:	2900      	cmp	r1, #0
 800bdae:	d03b      	beq.n	800be28 <_strtod_l+0xa8>
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bdb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bdb6:	782a      	ldrb	r2, [r5, #0]
 800bdb8:	2a30      	cmp	r2, #48	@ 0x30
 800bdba:	f040 80b3 	bne.w	800bf24 <_strtod_l+0x1a4>
 800bdbe:	786a      	ldrb	r2, [r5, #1]
 800bdc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bdc4:	2a58      	cmp	r2, #88	@ 0x58
 800bdc6:	d16e      	bne.n	800bea6 <_strtod_l+0x126>
 800bdc8:	9302      	str	r3, [sp, #8]
 800bdca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	ab1a      	add	r3, sp, #104	@ 0x68
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	4a8e      	ldr	r2, [pc, #568]	@ (800c00c <_strtod_l+0x28c>)
 800bdd4:	9805      	ldr	r0, [sp, #20]
 800bdd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bdd8:	a919      	add	r1, sp, #100	@ 0x64
 800bdda:	f001 f907 	bl	800cfec <__gethex>
 800bdde:	f010 060f 	ands.w	r6, r0, #15
 800bde2:	4604      	mov	r4, r0
 800bde4:	d005      	beq.n	800bdf2 <_strtod_l+0x72>
 800bde6:	2e06      	cmp	r6, #6
 800bde8:	d128      	bne.n	800be3c <_strtod_l+0xbc>
 800bdea:	3501      	adds	r5, #1
 800bdec:	2300      	movs	r3, #0
 800bdee:	9519      	str	r5, [sp, #100]	@ 0x64
 800bdf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f040 858e 	bne.w	800c916 <_strtod_l+0xb96>
 800bdfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdfc:	b1cb      	cbz	r3, 800be32 <_strtod_l+0xb2>
 800bdfe:	4652      	mov	r2, sl
 800be00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800be04:	ec43 2b10 	vmov	d0, r2, r3
 800be08:	b01f      	add	sp, #124	@ 0x7c
 800be0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0e:	2920      	cmp	r1, #32
 800be10:	d1ce      	bne.n	800bdb0 <_strtod_l+0x30>
 800be12:	3201      	adds	r2, #1
 800be14:	e7c1      	b.n	800bd9a <_strtod_l+0x1a>
 800be16:	292d      	cmp	r1, #45	@ 0x2d
 800be18:	d1ca      	bne.n	800bdb0 <_strtod_l+0x30>
 800be1a:	2101      	movs	r1, #1
 800be1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800be1e:	1c51      	adds	r1, r2, #1
 800be20:	9119      	str	r1, [sp, #100]	@ 0x64
 800be22:	7852      	ldrb	r2, [r2, #1]
 800be24:	2a00      	cmp	r2, #0
 800be26:	d1c5      	bne.n	800bdb4 <_strtod_l+0x34>
 800be28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800be2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f040 8570 	bne.w	800c912 <_strtod_l+0xb92>
 800be32:	4652      	mov	r2, sl
 800be34:	465b      	mov	r3, fp
 800be36:	e7e5      	b.n	800be04 <_strtod_l+0x84>
 800be38:	2100      	movs	r1, #0
 800be3a:	e7ef      	b.n	800be1c <_strtod_l+0x9c>
 800be3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be3e:	b13a      	cbz	r2, 800be50 <_strtod_l+0xd0>
 800be40:	2135      	movs	r1, #53	@ 0x35
 800be42:	a81c      	add	r0, sp, #112	@ 0x70
 800be44:	f002 f824 	bl	800de90 <__copybits>
 800be48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be4a:	9805      	ldr	r0, [sp, #20]
 800be4c:	f001 fbf2 	bl	800d634 <_Bfree>
 800be50:	3e01      	subs	r6, #1
 800be52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800be54:	2e04      	cmp	r6, #4
 800be56:	d806      	bhi.n	800be66 <_strtod_l+0xe6>
 800be58:	e8df f006 	tbb	[pc, r6]
 800be5c:	201d0314 	.word	0x201d0314
 800be60:	14          	.byte	0x14
 800be61:	00          	.byte	0x00
 800be62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800be66:	05e1      	lsls	r1, r4, #23
 800be68:	bf48      	it	mi
 800be6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800be6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be72:	0d1b      	lsrs	r3, r3, #20
 800be74:	051b      	lsls	r3, r3, #20
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1bb      	bne.n	800bdf2 <_strtod_l+0x72>
 800be7a:	f000 ffc1 	bl	800ce00 <__errno>
 800be7e:	2322      	movs	r3, #34	@ 0x22
 800be80:	6003      	str	r3, [r0, #0]
 800be82:	e7b6      	b.n	800bdf2 <_strtod_l+0x72>
 800be84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800be88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800be8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800be90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be94:	e7e7      	b.n	800be66 <_strtod_l+0xe6>
 800be96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c014 <_strtod_l+0x294>
 800be9a:	e7e4      	b.n	800be66 <_strtod_l+0xe6>
 800be9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bea0:	f04f 3aff 	mov.w	sl, #4294967295
 800bea4:	e7df      	b.n	800be66 <_strtod_l+0xe6>
 800bea6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bea8:	1c5a      	adds	r2, r3, #1
 800beaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800beac:	785b      	ldrb	r3, [r3, #1]
 800beae:	2b30      	cmp	r3, #48	@ 0x30
 800beb0:	d0f9      	beq.n	800bea6 <_strtod_l+0x126>
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d09d      	beq.n	800bdf2 <_strtod_l+0x72>
 800beb6:	2301      	movs	r3, #1
 800beb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bebc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bebe:	2300      	movs	r3, #0
 800bec0:	9308      	str	r3, [sp, #32]
 800bec2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bec4:	461f      	mov	r7, r3
 800bec6:	220a      	movs	r2, #10
 800bec8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800beca:	7805      	ldrb	r5, [r0, #0]
 800becc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bed0:	b2d9      	uxtb	r1, r3
 800bed2:	2909      	cmp	r1, #9
 800bed4:	d928      	bls.n	800bf28 <_strtod_l+0x1a8>
 800bed6:	494e      	ldr	r1, [pc, #312]	@ (800c010 <_strtod_l+0x290>)
 800bed8:	2201      	movs	r2, #1
 800beda:	f000 fed3 	bl	800cc84 <strncmp>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d032      	beq.n	800bf48 <_strtod_l+0x1c8>
 800bee2:	2000      	movs	r0, #0
 800bee4:	462a      	mov	r2, r5
 800bee6:	4681      	mov	r9, r0
 800bee8:	463d      	mov	r5, r7
 800beea:	4603      	mov	r3, r0
 800beec:	2a65      	cmp	r2, #101	@ 0x65
 800beee:	d001      	beq.n	800bef4 <_strtod_l+0x174>
 800bef0:	2a45      	cmp	r2, #69	@ 0x45
 800bef2:	d114      	bne.n	800bf1e <_strtod_l+0x19e>
 800bef4:	b91d      	cbnz	r5, 800befe <_strtod_l+0x17e>
 800bef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bef8:	4302      	orrs	r2, r0
 800befa:	d095      	beq.n	800be28 <_strtod_l+0xa8>
 800befc:	2500      	movs	r5, #0
 800befe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bf00:	1c62      	adds	r2, r4, #1
 800bf02:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf04:	7862      	ldrb	r2, [r4, #1]
 800bf06:	2a2b      	cmp	r2, #43	@ 0x2b
 800bf08:	d077      	beq.n	800bffa <_strtod_l+0x27a>
 800bf0a:	2a2d      	cmp	r2, #45	@ 0x2d
 800bf0c:	d07b      	beq.n	800c006 <_strtod_l+0x286>
 800bf0e:	f04f 0c00 	mov.w	ip, #0
 800bf12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bf16:	2909      	cmp	r1, #9
 800bf18:	f240 8082 	bls.w	800c020 <_strtod_l+0x2a0>
 800bf1c:	9419      	str	r4, [sp, #100]	@ 0x64
 800bf1e:	f04f 0800 	mov.w	r8, #0
 800bf22:	e0a2      	b.n	800c06a <_strtod_l+0x2ea>
 800bf24:	2300      	movs	r3, #0
 800bf26:	e7c7      	b.n	800beb8 <_strtod_l+0x138>
 800bf28:	2f08      	cmp	r7, #8
 800bf2a:	bfd5      	itete	le
 800bf2c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bf2e:	9908      	ldrgt	r1, [sp, #32]
 800bf30:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf34:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bf38:	f100 0001 	add.w	r0, r0, #1
 800bf3c:	bfd4      	ite	le
 800bf3e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bf40:	9308      	strgt	r3, [sp, #32]
 800bf42:	3701      	adds	r7, #1
 800bf44:	9019      	str	r0, [sp, #100]	@ 0x64
 800bf46:	e7bf      	b.n	800bec8 <_strtod_l+0x148>
 800bf48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf4e:	785a      	ldrb	r2, [r3, #1]
 800bf50:	b37f      	cbz	r7, 800bfb2 <_strtod_l+0x232>
 800bf52:	4681      	mov	r9, r0
 800bf54:	463d      	mov	r5, r7
 800bf56:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bf5a:	2b09      	cmp	r3, #9
 800bf5c:	d912      	bls.n	800bf84 <_strtod_l+0x204>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e7c4      	b.n	800beec <_strtod_l+0x16c>
 800bf62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf68:	785a      	ldrb	r2, [r3, #1]
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	2a30      	cmp	r2, #48	@ 0x30
 800bf6e:	d0f8      	beq.n	800bf62 <_strtod_l+0x1e2>
 800bf70:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bf74:	2b08      	cmp	r3, #8
 800bf76:	f200 84d3 	bhi.w	800c920 <_strtod_l+0xba0>
 800bf7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf7c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf7e:	4681      	mov	r9, r0
 800bf80:	2000      	movs	r0, #0
 800bf82:	4605      	mov	r5, r0
 800bf84:	3a30      	subs	r2, #48	@ 0x30
 800bf86:	f100 0301 	add.w	r3, r0, #1
 800bf8a:	d02a      	beq.n	800bfe2 <_strtod_l+0x262>
 800bf8c:	4499      	add	r9, r3
 800bf8e:	eb00 0c05 	add.w	ip, r0, r5
 800bf92:	462b      	mov	r3, r5
 800bf94:	210a      	movs	r1, #10
 800bf96:	4563      	cmp	r3, ip
 800bf98:	d10d      	bne.n	800bfb6 <_strtod_l+0x236>
 800bf9a:	1c69      	adds	r1, r5, #1
 800bf9c:	4401      	add	r1, r0
 800bf9e:	4428      	add	r0, r5
 800bfa0:	2808      	cmp	r0, #8
 800bfa2:	dc16      	bgt.n	800bfd2 <_strtod_l+0x252>
 800bfa4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bfa6:	230a      	movs	r3, #10
 800bfa8:	fb03 2300 	mla	r3, r3, r0, r2
 800bfac:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfae:	2300      	movs	r3, #0
 800bfb0:	e018      	b.n	800bfe4 <_strtod_l+0x264>
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	e7da      	b.n	800bf6c <_strtod_l+0x1ec>
 800bfb6:	2b08      	cmp	r3, #8
 800bfb8:	f103 0301 	add.w	r3, r3, #1
 800bfbc:	dc03      	bgt.n	800bfc6 <_strtod_l+0x246>
 800bfbe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bfc0:	434e      	muls	r6, r1
 800bfc2:	960a      	str	r6, [sp, #40]	@ 0x28
 800bfc4:	e7e7      	b.n	800bf96 <_strtod_l+0x216>
 800bfc6:	2b10      	cmp	r3, #16
 800bfc8:	bfde      	ittt	le
 800bfca:	9e08      	ldrle	r6, [sp, #32]
 800bfcc:	434e      	mulle	r6, r1
 800bfce:	9608      	strle	r6, [sp, #32]
 800bfd0:	e7e1      	b.n	800bf96 <_strtod_l+0x216>
 800bfd2:	280f      	cmp	r0, #15
 800bfd4:	dceb      	bgt.n	800bfae <_strtod_l+0x22e>
 800bfd6:	9808      	ldr	r0, [sp, #32]
 800bfd8:	230a      	movs	r3, #10
 800bfda:	fb03 2300 	mla	r3, r3, r0, r2
 800bfde:	9308      	str	r3, [sp, #32]
 800bfe0:	e7e5      	b.n	800bfae <_strtod_l+0x22e>
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bfe6:	1c50      	adds	r0, r2, #1
 800bfe8:	9019      	str	r0, [sp, #100]	@ 0x64
 800bfea:	7852      	ldrb	r2, [r2, #1]
 800bfec:	4618      	mov	r0, r3
 800bfee:	460d      	mov	r5, r1
 800bff0:	e7b1      	b.n	800bf56 <_strtod_l+0x1d6>
 800bff2:	f04f 0900 	mov.w	r9, #0
 800bff6:	2301      	movs	r3, #1
 800bff8:	e77d      	b.n	800bef6 <_strtod_l+0x176>
 800bffa:	f04f 0c00 	mov.w	ip, #0
 800bffe:	1ca2      	adds	r2, r4, #2
 800c000:	9219      	str	r2, [sp, #100]	@ 0x64
 800c002:	78a2      	ldrb	r2, [r4, #2]
 800c004:	e785      	b.n	800bf12 <_strtod_l+0x192>
 800c006:	f04f 0c01 	mov.w	ip, #1
 800c00a:	e7f8      	b.n	800bffe <_strtod_l+0x27e>
 800c00c:	0800f7b8 	.word	0x0800f7b8
 800c010:	0800f794 	.word	0x0800f794
 800c014:	7ff00000 	.word	0x7ff00000
 800c018:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c01a:	1c51      	adds	r1, r2, #1
 800c01c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c01e:	7852      	ldrb	r2, [r2, #1]
 800c020:	2a30      	cmp	r2, #48	@ 0x30
 800c022:	d0f9      	beq.n	800c018 <_strtod_l+0x298>
 800c024:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c028:	2908      	cmp	r1, #8
 800c02a:	f63f af78 	bhi.w	800bf1e <_strtod_l+0x19e>
 800c02e:	3a30      	subs	r2, #48	@ 0x30
 800c030:	920e      	str	r2, [sp, #56]	@ 0x38
 800c032:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c034:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c036:	f04f 080a 	mov.w	r8, #10
 800c03a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c03c:	1c56      	adds	r6, r2, #1
 800c03e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c040:	7852      	ldrb	r2, [r2, #1]
 800c042:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c046:	f1be 0f09 	cmp.w	lr, #9
 800c04a:	d939      	bls.n	800c0c0 <_strtod_l+0x340>
 800c04c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c04e:	1a76      	subs	r6, r6, r1
 800c050:	2e08      	cmp	r6, #8
 800c052:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c056:	dc03      	bgt.n	800c060 <_strtod_l+0x2e0>
 800c058:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c05a:	4588      	cmp	r8, r1
 800c05c:	bfa8      	it	ge
 800c05e:	4688      	movge	r8, r1
 800c060:	f1bc 0f00 	cmp.w	ip, #0
 800c064:	d001      	beq.n	800c06a <_strtod_l+0x2ea>
 800c066:	f1c8 0800 	rsb	r8, r8, #0
 800c06a:	2d00      	cmp	r5, #0
 800c06c:	d14e      	bne.n	800c10c <_strtod_l+0x38c>
 800c06e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c070:	4308      	orrs	r0, r1
 800c072:	f47f aebe 	bne.w	800bdf2 <_strtod_l+0x72>
 800c076:	2b00      	cmp	r3, #0
 800c078:	f47f aed6 	bne.w	800be28 <_strtod_l+0xa8>
 800c07c:	2a69      	cmp	r2, #105	@ 0x69
 800c07e:	d028      	beq.n	800c0d2 <_strtod_l+0x352>
 800c080:	dc25      	bgt.n	800c0ce <_strtod_l+0x34e>
 800c082:	2a49      	cmp	r2, #73	@ 0x49
 800c084:	d025      	beq.n	800c0d2 <_strtod_l+0x352>
 800c086:	2a4e      	cmp	r2, #78	@ 0x4e
 800c088:	f47f aece 	bne.w	800be28 <_strtod_l+0xa8>
 800c08c:	499b      	ldr	r1, [pc, #620]	@ (800c2fc <_strtod_l+0x57c>)
 800c08e:	a819      	add	r0, sp, #100	@ 0x64
 800c090:	f001 f9ce 	bl	800d430 <__match>
 800c094:	2800      	cmp	r0, #0
 800c096:	f43f aec7 	beq.w	800be28 <_strtod_l+0xa8>
 800c09a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2b28      	cmp	r3, #40	@ 0x28
 800c0a0:	d12e      	bne.n	800c100 <_strtod_l+0x380>
 800c0a2:	4997      	ldr	r1, [pc, #604]	@ (800c300 <_strtod_l+0x580>)
 800c0a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800c0a6:	a819      	add	r0, sp, #100	@ 0x64
 800c0a8:	f001 f9d6 	bl	800d458 <__hexnan>
 800c0ac:	2805      	cmp	r0, #5
 800c0ae:	d127      	bne.n	800c100 <_strtod_l+0x380>
 800c0b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c0b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c0b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c0ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c0be:	e698      	b.n	800bdf2 <_strtod_l+0x72>
 800c0c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c0c2:	fb08 2101 	mla	r1, r8, r1, r2
 800c0c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c0ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800c0cc:	e7b5      	b.n	800c03a <_strtod_l+0x2ba>
 800c0ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800c0d0:	e7da      	b.n	800c088 <_strtod_l+0x308>
 800c0d2:	498c      	ldr	r1, [pc, #560]	@ (800c304 <_strtod_l+0x584>)
 800c0d4:	a819      	add	r0, sp, #100	@ 0x64
 800c0d6:	f001 f9ab 	bl	800d430 <__match>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	f43f aea4 	beq.w	800be28 <_strtod_l+0xa8>
 800c0e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0e2:	4989      	ldr	r1, [pc, #548]	@ (800c308 <_strtod_l+0x588>)
 800c0e4:	3b01      	subs	r3, #1
 800c0e6:	a819      	add	r0, sp, #100	@ 0x64
 800c0e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c0ea:	f001 f9a1 	bl	800d430 <__match>
 800c0ee:	b910      	cbnz	r0, 800c0f6 <_strtod_l+0x376>
 800c0f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c0f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c318 <_strtod_l+0x598>
 800c0fa:	f04f 0a00 	mov.w	sl, #0
 800c0fe:	e678      	b.n	800bdf2 <_strtod_l+0x72>
 800c100:	4882      	ldr	r0, [pc, #520]	@ (800c30c <_strtod_l+0x58c>)
 800c102:	f000 feb9 	bl	800ce78 <nan>
 800c106:	ec5b ab10 	vmov	sl, fp, d0
 800c10a:	e672      	b.n	800bdf2 <_strtod_l+0x72>
 800c10c:	eba8 0309 	sub.w	r3, r8, r9
 800c110:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c112:	9309      	str	r3, [sp, #36]	@ 0x24
 800c114:	2f00      	cmp	r7, #0
 800c116:	bf08      	it	eq
 800c118:	462f      	moveq	r7, r5
 800c11a:	2d10      	cmp	r5, #16
 800c11c:	462c      	mov	r4, r5
 800c11e:	bfa8      	it	ge
 800c120:	2410      	movge	r4, #16
 800c122:	f7f4 f9ff 	bl	8000524 <__aeabi_ui2d>
 800c126:	2d09      	cmp	r5, #9
 800c128:	4682      	mov	sl, r0
 800c12a:	468b      	mov	fp, r1
 800c12c:	dc13      	bgt.n	800c156 <_strtod_l+0x3d6>
 800c12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c130:	2b00      	cmp	r3, #0
 800c132:	f43f ae5e 	beq.w	800bdf2 <_strtod_l+0x72>
 800c136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c138:	dd78      	ble.n	800c22c <_strtod_l+0x4ac>
 800c13a:	2b16      	cmp	r3, #22
 800c13c:	dc5f      	bgt.n	800c1fe <_strtod_l+0x47e>
 800c13e:	4974      	ldr	r1, [pc, #464]	@ (800c310 <_strtod_l+0x590>)
 800c140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c144:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c148:	4652      	mov	r2, sl
 800c14a:	465b      	mov	r3, fp
 800c14c:	f7f4 fa64 	bl	8000618 <__aeabi_dmul>
 800c150:	4682      	mov	sl, r0
 800c152:	468b      	mov	fp, r1
 800c154:	e64d      	b.n	800bdf2 <_strtod_l+0x72>
 800c156:	4b6e      	ldr	r3, [pc, #440]	@ (800c310 <_strtod_l+0x590>)
 800c158:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c15c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c160:	f7f4 fa5a 	bl	8000618 <__aeabi_dmul>
 800c164:	4682      	mov	sl, r0
 800c166:	9808      	ldr	r0, [sp, #32]
 800c168:	468b      	mov	fp, r1
 800c16a:	f7f4 f9db 	bl	8000524 <__aeabi_ui2d>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	4650      	mov	r0, sl
 800c174:	4659      	mov	r1, fp
 800c176:	f7f4 f899 	bl	80002ac <__adddf3>
 800c17a:	2d0f      	cmp	r5, #15
 800c17c:	4682      	mov	sl, r0
 800c17e:	468b      	mov	fp, r1
 800c180:	ddd5      	ble.n	800c12e <_strtod_l+0x3ae>
 800c182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c184:	1b2c      	subs	r4, r5, r4
 800c186:	441c      	add	r4, r3
 800c188:	2c00      	cmp	r4, #0
 800c18a:	f340 8096 	ble.w	800c2ba <_strtod_l+0x53a>
 800c18e:	f014 030f 	ands.w	r3, r4, #15
 800c192:	d00a      	beq.n	800c1aa <_strtod_l+0x42a>
 800c194:	495e      	ldr	r1, [pc, #376]	@ (800c310 <_strtod_l+0x590>)
 800c196:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c19a:	4652      	mov	r2, sl
 800c19c:	465b      	mov	r3, fp
 800c19e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1a2:	f7f4 fa39 	bl	8000618 <__aeabi_dmul>
 800c1a6:	4682      	mov	sl, r0
 800c1a8:	468b      	mov	fp, r1
 800c1aa:	f034 040f 	bics.w	r4, r4, #15
 800c1ae:	d073      	beq.n	800c298 <_strtod_l+0x518>
 800c1b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c1b4:	dd48      	ble.n	800c248 <_strtod_l+0x4c8>
 800c1b6:	2400      	movs	r4, #0
 800c1b8:	46a0      	mov	r8, r4
 800c1ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800c1bc:	46a1      	mov	r9, r4
 800c1be:	9a05      	ldr	r2, [sp, #20]
 800c1c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c318 <_strtod_l+0x598>
 800c1c4:	2322      	movs	r3, #34	@ 0x22
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	f04f 0a00 	mov.w	sl, #0
 800c1cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f43f ae0f 	beq.w	800bdf2 <_strtod_l+0x72>
 800c1d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c1d6:	9805      	ldr	r0, [sp, #20]
 800c1d8:	f001 fa2c 	bl	800d634 <_Bfree>
 800c1dc:	9805      	ldr	r0, [sp, #20]
 800c1de:	4649      	mov	r1, r9
 800c1e0:	f001 fa28 	bl	800d634 <_Bfree>
 800c1e4:	9805      	ldr	r0, [sp, #20]
 800c1e6:	4641      	mov	r1, r8
 800c1e8:	f001 fa24 	bl	800d634 <_Bfree>
 800c1ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c1ee:	9805      	ldr	r0, [sp, #20]
 800c1f0:	f001 fa20 	bl	800d634 <_Bfree>
 800c1f4:	9805      	ldr	r0, [sp, #20]
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	f001 fa1c 	bl	800d634 <_Bfree>
 800c1fc:	e5f9      	b.n	800bdf2 <_strtod_l+0x72>
 800c1fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c200:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c204:	4293      	cmp	r3, r2
 800c206:	dbbc      	blt.n	800c182 <_strtod_l+0x402>
 800c208:	4c41      	ldr	r4, [pc, #260]	@ (800c310 <_strtod_l+0x590>)
 800c20a:	f1c5 050f 	rsb	r5, r5, #15
 800c20e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c212:	4652      	mov	r2, sl
 800c214:	465b      	mov	r3, fp
 800c216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c21a:	f7f4 f9fd 	bl	8000618 <__aeabi_dmul>
 800c21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c220:	1b5d      	subs	r5, r3, r5
 800c222:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c226:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c22a:	e78f      	b.n	800c14c <_strtod_l+0x3cc>
 800c22c:	3316      	adds	r3, #22
 800c22e:	dba8      	blt.n	800c182 <_strtod_l+0x402>
 800c230:	4b37      	ldr	r3, [pc, #220]	@ (800c310 <_strtod_l+0x590>)
 800c232:	eba9 0808 	sub.w	r8, r9, r8
 800c236:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c23a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c23e:	4650      	mov	r0, sl
 800c240:	4659      	mov	r1, fp
 800c242:	f7f4 fb13 	bl	800086c <__aeabi_ddiv>
 800c246:	e783      	b.n	800c150 <_strtod_l+0x3d0>
 800c248:	4b32      	ldr	r3, [pc, #200]	@ (800c314 <_strtod_l+0x594>)
 800c24a:	9308      	str	r3, [sp, #32]
 800c24c:	2300      	movs	r3, #0
 800c24e:	1124      	asrs	r4, r4, #4
 800c250:	4650      	mov	r0, sl
 800c252:	4659      	mov	r1, fp
 800c254:	461e      	mov	r6, r3
 800c256:	2c01      	cmp	r4, #1
 800c258:	dc21      	bgt.n	800c29e <_strtod_l+0x51e>
 800c25a:	b10b      	cbz	r3, 800c260 <_strtod_l+0x4e0>
 800c25c:	4682      	mov	sl, r0
 800c25e:	468b      	mov	fp, r1
 800c260:	492c      	ldr	r1, [pc, #176]	@ (800c314 <_strtod_l+0x594>)
 800c262:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c266:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c26a:	4652      	mov	r2, sl
 800c26c:	465b      	mov	r3, fp
 800c26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c272:	f7f4 f9d1 	bl	8000618 <__aeabi_dmul>
 800c276:	4b28      	ldr	r3, [pc, #160]	@ (800c318 <_strtod_l+0x598>)
 800c278:	460a      	mov	r2, r1
 800c27a:	400b      	ands	r3, r1
 800c27c:	4927      	ldr	r1, [pc, #156]	@ (800c31c <_strtod_l+0x59c>)
 800c27e:	428b      	cmp	r3, r1
 800c280:	4682      	mov	sl, r0
 800c282:	d898      	bhi.n	800c1b6 <_strtod_l+0x436>
 800c284:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c288:	428b      	cmp	r3, r1
 800c28a:	bf86      	itte	hi
 800c28c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c320 <_strtod_l+0x5a0>
 800c290:	f04f 3aff 	movhi.w	sl, #4294967295
 800c294:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c298:	2300      	movs	r3, #0
 800c29a:	9308      	str	r3, [sp, #32]
 800c29c:	e07a      	b.n	800c394 <_strtod_l+0x614>
 800c29e:	07e2      	lsls	r2, r4, #31
 800c2a0:	d505      	bpl.n	800c2ae <_strtod_l+0x52e>
 800c2a2:	9b08      	ldr	r3, [sp, #32]
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f7f4 f9b6 	bl	8000618 <__aeabi_dmul>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	9a08      	ldr	r2, [sp, #32]
 800c2b0:	3208      	adds	r2, #8
 800c2b2:	3601      	adds	r6, #1
 800c2b4:	1064      	asrs	r4, r4, #1
 800c2b6:	9208      	str	r2, [sp, #32]
 800c2b8:	e7cd      	b.n	800c256 <_strtod_l+0x4d6>
 800c2ba:	d0ed      	beq.n	800c298 <_strtod_l+0x518>
 800c2bc:	4264      	negs	r4, r4
 800c2be:	f014 020f 	ands.w	r2, r4, #15
 800c2c2:	d00a      	beq.n	800c2da <_strtod_l+0x55a>
 800c2c4:	4b12      	ldr	r3, [pc, #72]	@ (800c310 <_strtod_l+0x590>)
 800c2c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2ca:	4650      	mov	r0, sl
 800c2cc:	4659      	mov	r1, fp
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	f7f4 facb 	bl	800086c <__aeabi_ddiv>
 800c2d6:	4682      	mov	sl, r0
 800c2d8:	468b      	mov	fp, r1
 800c2da:	1124      	asrs	r4, r4, #4
 800c2dc:	d0dc      	beq.n	800c298 <_strtod_l+0x518>
 800c2de:	2c1f      	cmp	r4, #31
 800c2e0:	dd20      	ble.n	800c324 <_strtod_l+0x5a4>
 800c2e2:	2400      	movs	r4, #0
 800c2e4:	46a0      	mov	r8, r4
 800c2e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800c2e8:	46a1      	mov	r9, r4
 800c2ea:	9a05      	ldr	r2, [sp, #20]
 800c2ec:	2322      	movs	r3, #34	@ 0x22
 800c2ee:	f04f 0a00 	mov.w	sl, #0
 800c2f2:	f04f 0b00 	mov.w	fp, #0
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	e768      	b.n	800c1cc <_strtod_l+0x44c>
 800c2fa:	bf00      	nop
 800c2fc:	0800f79f 	.word	0x0800f79f
 800c300:	0800f7a4 	.word	0x0800f7a4
 800c304:	0800f796 	.word	0x0800f796
 800c308:	0800f799 	.word	0x0800f799
 800c30c:	0800fb69 	.word	0x0800fb69
 800c310:	0800fa18 	.word	0x0800fa18
 800c314:	0800f9f0 	.word	0x0800f9f0
 800c318:	7ff00000 	.word	0x7ff00000
 800c31c:	7ca00000 	.word	0x7ca00000
 800c320:	7fefffff 	.word	0x7fefffff
 800c324:	f014 0310 	ands.w	r3, r4, #16
 800c328:	bf18      	it	ne
 800c32a:	236a      	movne	r3, #106	@ 0x6a
 800c32c:	4ea9      	ldr	r6, [pc, #676]	@ (800c5d4 <_strtod_l+0x854>)
 800c32e:	9308      	str	r3, [sp, #32]
 800c330:	4650      	mov	r0, sl
 800c332:	4659      	mov	r1, fp
 800c334:	2300      	movs	r3, #0
 800c336:	07e2      	lsls	r2, r4, #31
 800c338:	d504      	bpl.n	800c344 <_strtod_l+0x5c4>
 800c33a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c33e:	f7f4 f96b 	bl	8000618 <__aeabi_dmul>
 800c342:	2301      	movs	r3, #1
 800c344:	1064      	asrs	r4, r4, #1
 800c346:	f106 0608 	add.w	r6, r6, #8
 800c34a:	d1f4      	bne.n	800c336 <_strtod_l+0x5b6>
 800c34c:	b10b      	cbz	r3, 800c352 <_strtod_l+0x5d2>
 800c34e:	4682      	mov	sl, r0
 800c350:	468b      	mov	fp, r1
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	b1b3      	cbz	r3, 800c384 <_strtod_l+0x604>
 800c356:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c35a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c35e:	2b00      	cmp	r3, #0
 800c360:	4659      	mov	r1, fp
 800c362:	dd0f      	ble.n	800c384 <_strtod_l+0x604>
 800c364:	2b1f      	cmp	r3, #31
 800c366:	dd55      	ble.n	800c414 <_strtod_l+0x694>
 800c368:	2b34      	cmp	r3, #52	@ 0x34
 800c36a:	bfde      	ittt	le
 800c36c:	f04f 33ff 	movle.w	r3, #4294967295
 800c370:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c374:	4093      	lslle	r3, r2
 800c376:	f04f 0a00 	mov.w	sl, #0
 800c37a:	bfcc      	ite	gt
 800c37c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c380:	ea03 0b01 	andle.w	fp, r3, r1
 800c384:	2200      	movs	r2, #0
 800c386:	2300      	movs	r3, #0
 800c388:	4650      	mov	r0, sl
 800c38a:	4659      	mov	r1, fp
 800c38c:	f7f4 fbac 	bl	8000ae8 <__aeabi_dcmpeq>
 800c390:	2800      	cmp	r0, #0
 800c392:	d1a6      	bne.n	800c2e2 <_strtod_l+0x562>
 800c394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c39a:	9805      	ldr	r0, [sp, #20]
 800c39c:	462b      	mov	r3, r5
 800c39e:	463a      	mov	r2, r7
 800c3a0:	f001 f9b0 	bl	800d704 <__s2b>
 800c3a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f43f af05 	beq.w	800c1b6 <_strtod_l+0x436>
 800c3ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3ae:	2a00      	cmp	r2, #0
 800c3b0:	eba9 0308 	sub.w	r3, r9, r8
 800c3b4:	bfa8      	it	ge
 800c3b6:	2300      	movge	r3, #0
 800c3b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800c3ba:	2400      	movs	r4, #0
 800c3bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c3c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800c3c2:	46a0      	mov	r8, r4
 800c3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3c6:	9805      	ldr	r0, [sp, #20]
 800c3c8:	6859      	ldr	r1, [r3, #4]
 800c3ca:	f001 f8f3 	bl	800d5b4 <_Balloc>
 800c3ce:	4681      	mov	r9, r0
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	f43f aef4 	beq.w	800c1be <_strtod_l+0x43e>
 800c3d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3d8:	691a      	ldr	r2, [r3, #16]
 800c3da:	3202      	adds	r2, #2
 800c3dc:	f103 010c 	add.w	r1, r3, #12
 800c3e0:	0092      	lsls	r2, r2, #2
 800c3e2:	300c      	adds	r0, #12
 800c3e4:	f000 fd39 	bl	800ce5a <memcpy>
 800c3e8:	ec4b ab10 	vmov	d0, sl, fp
 800c3ec:	9805      	ldr	r0, [sp, #20]
 800c3ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800c3f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800c3f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c3f6:	f001 fcc1 	bl	800dd7c <__d2b>
 800c3fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	f43f aede 	beq.w	800c1be <_strtod_l+0x43e>
 800c402:	9805      	ldr	r0, [sp, #20]
 800c404:	2101      	movs	r1, #1
 800c406:	f001 fa13 	bl	800d830 <__i2b>
 800c40a:	4680      	mov	r8, r0
 800c40c:	b948      	cbnz	r0, 800c422 <_strtod_l+0x6a2>
 800c40e:	f04f 0800 	mov.w	r8, #0
 800c412:	e6d4      	b.n	800c1be <_strtod_l+0x43e>
 800c414:	f04f 32ff 	mov.w	r2, #4294967295
 800c418:	fa02 f303 	lsl.w	r3, r2, r3
 800c41c:	ea03 0a0a 	and.w	sl, r3, sl
 800c420:	e7b0      	b.n	800c384 <_strtod_l+0x604>
 800c422:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c424:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c426:	2d00      	cmp	r5, #0
 800c428:	bfab      	itete	ge
 800c42a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c42c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c42e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c430:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c432:	bfac      	ite	ge
 800c434:	18ef      	addge	r7, r5, r3
 800c436:	1b5e      	sublt	r6, r3, r5
 800c438:	9b08      	ldr	r3, [sp, #32]
 800c43a:	1aed      	subs	r5, r5, r3
 800c43c:	4415      	add	r5, r2
 800c43e:	4b66      	ldr	r3, [pc, #408]	@ (800c5d8 <_strtod_l+0x858>)
 800c440:	3d01      	subs	r5, #1
 800c442:	429d      	cmp	r5, r3
 800c444:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c448:	da50      	bge.n	800c4ec <_strtod_l+0x76c>
 800c44a:	1b5b      	subs	r3, r3, r5
 800c44c:	2b1f      	cmp	r3, #31
 800c44e:	eba2 0203 	sub.w	r2, r2, r3
 800c452:	f04f 0101 	mov.w	r1, #1
 800c456:	dc3d      	bgt.n	800c4d4 <_strtod_l+0x754>
 800c458:	fa01 f303 	lsl.w	r3, r1, r3
 800c45c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c45e:	2300      	movs	r3, #0
 800c460:	9310      	str	r3, [sp, #64]	@ 0x40
 800c462:	18bd      	adds	r5, r7, r2
 800c464:	9b08      	ldr	r3, [sp, #32]
 800c466:	42af      	cmp	r7, r5
 800c468:	4416      	add	r6, r2
 800c46a:	441e      	add	r6, r3
 800c46c:	463b      	mov	r3, r7
 800c46e:	bfa8      	it	ge
 800c470:	462b      	movge	r3, r5
 800c472:	42b3      	cmp	r3, r6
 800c474:	bfa8      	it	ge
 800c476:	4633      	movge	r3, r6
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bfc2      	ittt	gt
 800c47c:	1aed      	subgt	r5, r5, r3
 800c47e:	1af6      	subgt	r6, r6, r3
 800c480:	1aff      	subgt	r7, r7, r3
 800c482:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c484:	2b00      	cmp	r3, #0
 800c486:	dd16      	ble.n	800c4b6 <_strtod_l+0x736>
 800c488:	4641      	mov	r1, r8
 800c48a:	9805      	ldr	r0, [sp, #20]
 800c48c:	461a      	mov	r2, r3
 800c48e:	f001 fa8f 	bl	800d9b0 <__pow5mult>
 800c492:	4680      	mov	r8, r0
 800c494:	2800      	cmp	r0, #0
 800c496:	d0ba      	beq.n	800c40e <_strtod_l+0x68e>
 800c498:	4601      	mov	r1, r0
 800c49a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c49c:	9805      	ldr	r0, [sp, #20]
 800c49e:	f001 f9dd 	bl	800d85c <__multiply>
 800c4a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	f43f ae8a 	beq.w	800c1be <_strtod_l+0x43e>
 800c4aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4ac:	9805      	ldr	r0, [sp, #20]
 800c4ae:	f001 f8c1 	bl	800d634 <_Bfree>
 800c4b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	dc1d      	bgt.n	800c4f6 <_strtod_l+0x776>
 800c4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dd23      	ble.n	800c508 <_strtod_l+0x788>
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c4c4:	9805      	ldr	r0, [sp, #20]
 800c4c6:	f001 fa73 	bl	800d9b0 <__pow5mult>
 800c4ca:	4681      	mov	r9, r0
 800c4cc:	b9e0      	cbnz	r0, 800c508 <_strtod_l+0x788>
 800c4ce:	f04f 0900 	mov.w	r9, #0
 800c4d2:	e674      	b.n	800c1be <_strtod_l+0x43e>
 800c4d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c4d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c4dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c4e0:	35e2      	adds	r5, #226	@ 0xe2
 800c4e2:	fa01 f305 	lsl.w	r3, r1, r5
 800c4e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c4ea:	e7ba      	b.n	800c462 <_strtod_l+0x6e2>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c4f4:	e7b5      	b.n	800c462 <_strtod_l+0x6e2>
 800c4f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c4f8:	9805      	ldr	r0, [sp, #20]
 800c4fa:	462a      	mov	r2, r5
 800c4fc:	f001 fab2 	bl	800da64 <__lshift>
 800c500:	901a      	str	r0, [sp, #104]	@ 0x68
 800c502:	2800      	cmp	r0, #0
 800c504:	d1d9      	bne.n	800c4ba <_strtod_l+0x73a>
 800c506:	e65a      	b.n	800c1be <_strtod_l+0x43e>
 800c508:	2e00      	cmp	r6, #0
 800c50a:	dd07      	ble.n	800c51c <_strtod_l+0x79c>
 800c50c:	4649      	mov	r1, r9
 800c50e:	9805      	ldr	r0, [sp, #20]
 800c510:	4632      	mov	r2, r6
 800c512:	f001 faa7 	bl	800da64 <__lshift>
 800c516:	4681      	mov	r9, r0
 800c518:	2800      	cmp	r0, #0
 800c51a:	d0d8      	beq.n	800c4ce <_strtod_l+0x74e>
 800c51c:	2f00      	cmp	r7, #0
 800c51e:	dd08      	ble.n	800c532 <_strtod_l+0x7b2>
 800c520:	4641      	mov	r1, r8
 800c522:	9805      	ldr	r0, [sp, #20]
 800c524:	463a      	mov	r2, r7
 800c526:	f001 fa9d 	bl	800da64 <__lshift>
 800c52a:	4680      	mov	r8, r0
 800c52c:	2800      	cmp	r0, #0
 800c52e:	f43f ae46 	beq.w	800c1be <_strtod_l+0x43e>
 800c532:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c534:	9805      	ldr	r0, [sp, #20]
 800c536:	464a      	mov	r2, r9
 800c538:	f001 fb1c 	bl	800db74 <__mdiff>
 800c53c:	4604      	mov	r4, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	f43f ae3d 	beq.w	800c1be <_strtod_l+0x43e>
 800c544:	68c3      	ldr	r3, [r0, #12]
 800c546:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c548:	2300      	movs	r3, #0
 800c54a:	60c3      	str	r3, [r0, #12]
 800c54c:	4641      	mov	r1, r8
 800c54e:	f001 faf5 	bl	800db3c <__mcmp>
 800c552:	2800      	cmp	r0, #0
 800c554:	da46      	bge.n	800c5e4 <_strtod_l+0x864>
 800c556:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c558:	ea53 030a 	orrs.w	r3, r3, sl
 800c55c:	d16c      	bne.n	800c638 <_strtod_l+0x8b8>
 800c55e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c562:	2b00      	cmp	r3, #0
 800c564:	d168      	bne.n	800c638 <_strtod_l+0x8b8>
 800c566:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c56a:	0d1b      	lsrs	r3, r3, #20
 800c56c:	051b      	lsls	r3, r3, #20
 800c56e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c572:	d961      	bls.n	800c638 <_strtod_l+0x8b8>
 800c574:	6963      	ldr	r3, [r4, #20]
 800c576:	b913      	cbnz	r3, 800c57e <_strtod_l+0x7fe>
 800c578:	6923      	ldr	r3, [r4, #16]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	dd5c      	ble.n	800c638 <_strtod_l+0x8b8>
 800c57e:	4621      	mov	r1, r4
 800c580:	2201      	movs	r2, #1
 800c582:	9805      	ldr	r0, [sp, #20]
 800c584:	f001 fa6e 	bl	800da64 <__lshift>
 800c588:	4641      	mov	r1, r8
 800c58a:	4604      	mov	r4, r0
 800c58c:	f001 fad6 	bl	800db3c <__mcmp>
 800c590:	2800      	cmp	r0, #0
 800c592:	dd51      	ble.n	800c638 <_strtod_l+0x8b8>
 800c594:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c598:	9a08      	ldr	r2, [sp, #32]
 800c59a:	0d1b      	lsrs	r3, r3, #20
 800c59c:	051b      	lsls	r3, r3, #20
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	d06b      	beq.n	800c67a <_strtod_l+0x8fa>
 800c5a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c5a6:	d868      	bhi.n	800c67a <_strtod_l+0x8fa>
 800c5a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c5ac:	f67f ae9d 	bls.w	800c2ea <_strtod_l+0x56a>
 800c5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <_strtod_l+0x85c>)
 800c5b2:	4650      	mov	r0, sl
 800c5b4:	4659      	mov	r1, fp
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f7f4 f82e 	bl	8000618 <__aeabi_dmul>
 800c5bc:	4b08      	ldr	r3, [pc, #32]	@ (800c5e0 <_strtod_l+0x860>)
 800c5be:	400b      	ands	r3, r1
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	468b      	mov	fp, r1
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f47f ae05 	bne.w	800c1d4 <_strtod_l+0x454>
 800c5ca:	9a05      	ldr	r2, [sp, #20]
 800c5cc:	2322      	movs	r3, #34	@ 0x22
 800c5ce:	6013      	str	r3, [r2, #0]
 800c5d0:	e600      	b.n	800c1d4 <_strtod_l+0x454>
 800c5d2:	bf00      	nop
 800c5d4:	0800f7d0 	.word	0x0800f7d0
 800c5d8:	fffffc02 	.word	0xfffffc02
 800c5dc:	39500000 	.word	0x39500000
 800c5e0:	7ff00000 	.word	0x7ff00000
 800c5e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c5e8:	d165      	bne.n	800c6b6 <_strtod_l+0x936>
 800c5ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c5ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5f0:	b35a      	cbz	r2, 800c64a <_strtod_l+0x8ca>
 800c5f2:	4a9f      	ldr	r2, [pc, #636]	@ (800c870 <_strtod_l+0xaf0>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d12b      	bne.n	800c650 <_strtod_l+0x8d0>
 800c5f8:	9b08      	ldr	r3, [sp, #32]
 800c5fa:	4651      	mov	r1, sl
 800c5fc:	b303      	cbz	r3, 800c640 <_strtod_l+0x8c0>
 800c5fe:	4b9d      	ldr	r3, [pc, #628]	@ (800c874 <_strtod_l+0xaf4>)
 800c600:	465a      	mov	r2, fp
 800c602:	4013      	ands	r3, r2
 800c604:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c608:	f04f 32ff 	mov.w	r2, #4294967295
 800c60c:	d81b      	bhi.n	800c646 <_strtod_l+0x8c6>
 800c60e:	0d1b      	lsrs	r3, r3, #20
 800c610:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c614:	fa02 f303 	lsl.w	r3, r2, r3
 800c618:	4299      	cmp	r1, r3
 800c61a:	d119      	bne.n	800c650 <_strtod_l+0x8d0>
 800c61c:	4b96      	ldr	r3, [pc, #600]	@ (800c878 <_strtod_l+0xaf8>)
 800c61e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c620:	429a      	cmp	r2, r3
 800c622:	d102      	bne.n	800c62a <_strtod_l+0x8aa>
 800c624:	3101      	adds	r1, #1
 800c626:	f43f adca 	beq.w	800c1be <_strtod_l+0x43e>
 800c62a:	4b92      	ldr	r3, [pc, #584]	@ (800c874 <_strtod_l+0xaf4>)
 800c62c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c62e:	401a      	ands	r2, r3
 800c630:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c634:	f04f 0a00 	mov.w	sl, #0
 800c638:	9b08      	ldr	r3, [sp, #32]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1b8      	bne.n	800c5b0 <_strtod_l+0x830>
 800c63e:	e5c9      	b.n	800c1d4 <_strtod_l+0x454>
 800c640:	f04f 33ff 	mov.w	r3, #4294967295
 800c644:	e7e8      	b.n	800c618 <_strtod_l+0x898>
 800c646:	4613      	mov	r3, r2
 800c648:	e7e6      	b.n	800c618 <_strtod_l+0x898>
 800c64a:	ea53 030a 	orrs.w	r3, r3, sl
 800c64e:	d0a1      	beq.n	800c594 <_strtod_l+0x814>
 800c650:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c652:	b1db      	cbz	r3, 800c68c <_strtod_l+0x90c>
 800c654:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c656:	4213      	tst	r3, r2
 800c658:	d0ee      	beq.n	800c638 <_strtod_l+0x8b8>
 800c65a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c65c:	9a08      	ldr	r2, [sp, #32]
 800c65e:	4650      	mov	r0, sl
 800c660:	4659      	mov	r1, fp
 800c662:	b1bb      	cbz	r3, 800c694 <_strtod_l+0x914>
 800c664:	f7ff fb6c 	bl	800bd40 <sulp>
 800c668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c66c:	ec53 2b10 	vmov	r2, r3, d0
 800c670:	f7f3 fe1c 	bl	80002ac <__adddf3>
 800c674:	4682      	mov	sl, r0
 800c676:	468b      	mov	fp, r1
 800c678:	e7de      	b.n	800c638 <_strtod_l+0x8b8>
 800c67a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c67e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c682:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c686:	f04f 3aff 	mov.w	sl, #4294967295
 800c68a:	e7d5      	b.n	800c638 <_strtod_l+0x8b8>
 800c68c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c68e:	ea13 0f0a 	tst.w	r3, sl
 800c692:	e7e1      	b.n	800c658 <_strtod_l+0x8d8>
 800c694:	f7ff fb54 	bl	800bd40 <sulp>
 800c698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c69c:	ec53 2b10 	vmov	r2, r3, d0
 800c6a0:	f7f3 fe02 	bl	80002a8 <__aeabi_dsub>
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	4682      	mov	sl, r0
 800c6aa:	468b      	mov	fp, r1
 800c6ac:	f7f4 fa1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d0c1      	beq.n	800c638 <_strtod_l+0x8b8>
 800c6b4:	e619      	b.n	800c2ea <_strtod_l+0x56a>
 800c6b6:	4641      	mov	r1, r8
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f001 fbb7 	bl	800de2c <__ratio>
 800c6be:	ec57 6b10 	vmov	r6, r7, d0
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	4639      	mov	r1, r7
 800c6cc:	f7f4 fa20 	bl	8000b10 <__aeabi_dcmple>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d06f      	beq.n	800c7b4 <_strtod_l+0xa34>
 800c6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d17a      	bne.n	800c7d0 <_strtod_l+0xa50>
 800c6da:	f1ba 0f00 	cmp.w	sl, #0
 800c6de:	d158      	bne.n	800c792 <_strtod_l+0xa12>
 800c6e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d15a      	bne.n	800c7a0 <_strtod_l+0xa20>
 800c6ea:	4b64      	ldr	r3, [pc, #400]	@ (800c87c <_strtod_l+0xafc>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	4639      	mov	r1, r7
 800c6f2:	f7f4 fa03 	bl	8000afc <__aeabi_dcmplt>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d159      	bne.n	800c7ae <_strtod_l+0xa2e>
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	4b60      	ldr	r3, [pc, #384]	@ (800c880 <_strtod_l+0xb00>)
 800c700:	2200      	movs	r2, #0
 800c702:	f7f3 ff89 	bl	8000618 <__aeabi_dmul>
 800c706:	4606      	mov	r6, r0
 800c708:	460f      	mov	r7, r1
 800c70a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c70e:	9606      	str	r6, [sp, #24]
 800c710:	9307      	str	r3, [sp, #28]
 800c712:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c716:	4d57      	ldr	r5, [pc, #348]	@ (800c874 <_strtod_l+0xaf4>)
 800c718:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c71c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c71e:	401d      	ands	r5, r3
 800c720:	4b58      	ldr	r3, [pc, #352]	@ (800c884 <_strtod_l+0xb04>)
 800c722:	429d      	cmp	r5, r3
 800c724:	f040 80b2 	bne.w	800c88c <_strtod_l+0xb0c>
 800c728:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c72a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c72e:	ec4b ab10 	vmov	d0, sl, fp
 800c732:	f001 fab3 	bl	800dc9c <__ulp>
 800c736:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c73a:	ec51 0b10 	vmov	r0, r1, d0
 800c73e:	f7f3 ff6b 	bl	8000618 <__aeabi_dmul>
 800c742:	4652      	mov	r2, sl
 800c744:	465b      	mov	r3, fp
 800c746:	f7f3 fdb1 	bl	80002ac <__adddf3>
 800c74a:	460b      	mov	r3, r1
 800c74c:	4949      	ldr	r1, [pc, #292]	@ (800c874 <_strtod_l+0xaf4>)
 800c74e:	4a4e      	ldr	r2, [pc, #312]	@ (800c888 <_strtod_l+0xb08>)
 800c750:	4019      	ands	r1, r3
 800c752:	4291      	cmp	r1, r2
 800c754:	4682      	mov	sl, r0
 800c756:	d942      	bls.n	800c7de <_strtod_l+0xa5e>
 800c758:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c75a:	4b47      	ldr	r3, [pc, #284]	@ (800c878 <_strtod_l+0xaf8>)
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d103      	bne.n	800c768 <_strtod_l+0x9e8>
 800c760:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c762:	3301      	adds	r3, #1
 800c764:	f43f ad2b 	beq.w	800c1be <_strtod_l+0x43e>
 800c768:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c878 <_strtod_l+0xaf8>
 800c76c:	f04f 3aff 	mov.w	sl, #4294967295
 800c770:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c772:	9805      	ldr	r0, [sp, #20]
 800c774:	f000 ff5e 	bl	800d634 <_Bfree>
 800c778:	9805      	ldr	r0, [sp, #20]
 800c77a:	4649      	mov	r1, r9
 800c77c:	f000 ff5a 	bl	800d634 <_Bfree>
 800c780:	9805      	ldr	r0, [sp, #20]
 800c782:	4641      	mov	r1, r8
 800c784:	f000 ff56 	bl	800d634 <_Bfree>
 800c788:	9805      	ldr	r0, [sp, #20]
 800c78a:	4621      	mov	r1, r4
 800c78c:	f000 ff52 	bl	800d634 <_Bfree>
 800c790:	e618      	b.n	800c3c4 <_strtod_l+0x644>
 800c792:	f1ba 0f01 	cmp.w	sl, #1
 800c796:	d103      	bne.n	800c7a0 <_strtod_l+0xa20>
 800c798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f43f ada5 	beq.w	800c2ea <_strtod_l+0x56a>
 800c7a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c850 <_strtod_l+0xad0>
 800c7a4:	4f35      	ldr	r7, [pc, #212]	@ (800c87c <_strtod_l+0xafc>)
 800c7a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c7aa:	2600      	movs	r6, #0
 800c7ac:	e7b1      	b.n	800c712 <_strtod_l+0x992>
 800c7ae:	4f34      	ldr	r7, [pc, #208]	@ (800c880 <_strtod_l+0xb00>)
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	e7aa      	b.n	800c70a <_strtod_l+0x98a>
 800c7b4:	4b32      	ldr	r3, [pc, #200]	@ (800c880 <_strtod_l+0xb00>)
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f7f3 ff2c 	bl	8000618 <__aeabi_dmul>
 800c7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	460f      	mov	r7, r1
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d09f      	beq.n	800c70a <_strtod_l+0x98a>
 800c7ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c7ce:	e7a0      	b.n	800c712 <_strtod_l+0x992>
 800c7d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c858 <_strtod_l+0xad8>
 800c7d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c7d8:	ec57 6b17 	vmov	r6, r7, d7
 800c7dc:	e799      	b.n	800c712 <_strtod_l+0x992>
 800c7de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c7e2:	9b08      	ldr	r3, [sp, #32]
 800c7e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1c1      	bne.n	800c770 <_strtod_l+0x9f0>
 800c7ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c7f0:	0d1b      	lsrs	r3, r3, #20
 800c7f2:	051b      	lsls	r3, r3, #20
 800c7f4:	429d      	cmp	r5, r3
 800c7f6:	d1bb      	bne.n	800c770 <_strtod_l+0x9f0>
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f4 fa6c 	bl	8000cd8 <__aeabi_d2lz>
 800c800:	f7f3 fedc 	bl	80005bc <__aeabi_l2d>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f3 fd4c 	bl	80002a8 <__aeabi_dsub>
 800c810:	460b      	mov	r3, r1
 800c812:	4602      	mov	r2, r0
 800c814:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c818:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c81e:	ea46 060a 	orr.w	r6, r6, sl
 800c822:	431e      	orrs	r6, r3
 800c824:	d06f      	beq.n	800c906 <_strtod_l+0xb86>
 800c826:	a30e      	add	r3, pc, #56	@ (adr r3, 800c860 <_strtod_l+0xae0>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f7f4 f966 	bl	8000afc <__aeabi_dcmplt>
 800c830:	2800      	cmp	r0, #0
 800c832:	f47f accf 	bne.w	800c1d4 <_strtod_l+0x454>
 800c836:	a30c      	add	r3, pc, #48	@ (adr r3, 800c868 <_strtod_l+0xae8>)
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c840:	f7f4 f97a 	bl	8000b38 <__aeabi_dcmpgt>
 800c844:	2800      	cmp	r0, #0
 800c846:	d093      	beq.n	800c770 <_strtod_l+0x9f0>
 800c848:	e4c4      	b.n	800c1d4 <_strtod_l+0x454>
 800c84a:	bf00      	nop
 800c84c:	f3af 8000 	nop.w
 800c850:	00000000 	.word	0x00000000
 800c854:	bff00000 	.word	0xbff00000
 800c858:	00000000 	.word	0x00000000
 800c85c:	3ff00000 	.word	0x3ff00000
 800c860:	94a03595 	.word	0x94a03595
 800c864:	3fdfffff 	.word	0x3fdfffff
 800c868:	35afe535 	.word	0x35afe535
 800c86c:	3fe00000 	.word	0x3fe00000
 800c870:	000fffff 	.word	0x000fffff
 800c874:	7ff00000 	.word	0x7ff00000
 800c878:	7fefffff 	.word	0x7fefffff
 800c87c:	3ff00000 	.word	0x3ff00000
 800c880:	3fe00000 	.word	0x3fe00000
 800c884:	7fe00000 	.word	0x7fe00000
 800c888:	7c9fffff 	.word	0x7c9fffff
 800c88c:	9b08      	ldr	r3, [sp, #32]
 800c88e:	b323      	cbz	r3, 800c8da <_strtod_l+0xb5a>
 800c890:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c894:	d821      	bhi.n	800c8da <_strtod_l+0xb5a>
 800c896:	a328      	add	r3, pc, #160	@ (adr r3, 800c938 <_strtod_l+0xbb8>)
 800c898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89c:	4630      	mov	r0, r6
 800c89e:	4639      	mov	r1, r7
 800c8a0:	f7f4 f936 	bl	8000b10 <__aeabi_dcmple>
 800c8a4:	b1a0      	cbz	r0, 800c8d0 <_strtod_l+0xb50>
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	f7f4 f98d 	bl	8000bc8 <__aeabi_d2uiz>
 800c8ae:	2801      	cmp	r0, #1
 800c8b0:	bf38      	it	cc
 800c8b2:	2001      	movcc	r0, #1
 800c8b4:	f7f3 fe36 	bl	8000524 <__aeabi_ui2d>
 800c8b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	b9fb      	cbnz	r3, 800c900 <_strtod_l+0xb80>
 800c8c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800c8c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800c8c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c8cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c8d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c8d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c8d6:	1b5b      	subs	r3, r3, r5
 800c8d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800c8da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c8de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c8e2:	f001 f9db 	bl	800dc9c <__ulp>
 800c8e6:	4650      	mov	r0, sl
 800c8e8:	ec53 2b10 	vmov	r2, r3, d0
 800c8ec:	4659      	mov	r1, fp
 800c8ee:	f7f3 fe93 	bl	8000618 <__aeabi_dmul>
 800c8f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c8f6:	f7f3 fcd9 	bl	80002ac <__adddf3>
 800c8fa:	4682      	mov	sl, r0
 800c8fc:	468b      	mov	fp, r1
 800c8fe:	e770      	b.n	800c7e2 <_strtod_l+0xa62>
 800c900:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c904:	e7e0      	b.n	800c8c8 <_strtod_l+0xb48>
 800c906:	a30e      	add	r3, pc, #56	@ (adr r3, 800c940 <_strtod_l+0xbc0>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	f7f4 f8f6 	bl	8000afc <__aeabi_dcmplt>
 800c910:	e798      	b.n	800c844 <_strtod_l+0xac4>
 800c912:	2300      	movs	r3, #0
 800c914:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c916:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c918:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c91a:	6013      	str	r3, [r2, #0]
 800c91c:	f7ff ba6d 	b.w	800bdfa <_strtod_l+0x7a>
 800c920:	2a65      	cmp	r2, #101	@ 0x65
 800c922:	f43f ab66 	beq.w	800bff2 <_strtod_l+0x272>
 800c926:	2a45      	cmp	r2, #69	@ 0x45
 800c928:	f43f ab63 	beq.w	800bff2 <_strtod_l+0x272>
 800c92c:	2301      	movs	r3, #1
 800c92e:	f7ff bb9e 	b.w	800c06e <_strtod_l+0x2ee>
 800c932:	bf00      	nop
 800c934:	f3af 8000 	nop.w
 800c938:	ffc00000 	.word	0xffc00000
 800c93c:	41dfffff 	.word	0x41dfffff
 800c940:	94a03595 	.word	0x94a03595
 800c944:	3fcfffff 	.word	0x3fcfffff

0800c948 <strtod>:
 800c948:	460a      	mov	r2, r1
 800c94a:	4601      	mov	r1, r0
 800c94c:	4802      	ldr	r0, [pc, #8]	@ (800c958 <strtod+0x10>)
 800c94e:	4b03      	ldr	r3, [pc, #12]	@ (800c95c <strtod+0x14>)
 800c950:	6800      	ldr	r0, [r0, #0]
 800c952:	f7ff ba15 	b.w	800bd80 <_strtod_l>
 800c956:	bf00      	nop
 800c958:	20000198 	.word	0x20000198
 800c95c:	2000002c 	.word	0x2000002c

0800c960 <std>:
 800c960:	2300      	movs	r3, #0
 800c962:	b510      	push	{r4, lr}
 800c964:	4604      	mov	r4, r0
 800c966:	e9c0 3300 	strd	r3, r3, [r0]
 800c96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c96e:	6083      	str	r3, [r0, #8]
 800c970:	8181      	strh	r1, [r0, #12]
 800c972:	6643      	str	r3, [r0, #100]	@ 0x64
 800c974:	81c2      	strh	r2, [r0, #14]
 800c976:	6183      	str	r3, [r0, #24]
 800c978:	4619      	mov	r1, r3
 800c97a:	2208      	movs	r2, #8
 800c97c:	305c      	adds	r0, #92	@ 0x5c
 800c97e:	f000 f979 	bl	800cc74 <memset>
 800c982:	4b0d      	ldr	r3, [pc, #52]	@ (800c9b8 <std+0x58>)
 800c984:	6263      	str	r3, [r4, #36]	@ 0x24
 800c986:	4b0d      	ldr	r3, [pc, #52]	@ (800c9bc <std+0x5c>)
 800c988:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c98a:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c0 <std+0x60>)
 800c98c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c98e:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c4 <std+0x64>)
 800c990:	6323      	str	r3, [r4, #48]	@ 0x30
 800c992:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c8 <std+0x68>)
 800c994:	6224      	str	r4, [r4, #32]
 800c996:	429c      	cmp	r4, r3
 800c998:	d006      	beq.n	800c9a8 <std+0x48>
 800c99a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c99e:	4294      	cmp	r4, r2
 800c9a0:	d002      	beq.n	800c9a8 <std+0x48>
 800c9a2:	33d0      	adds	r3, #208	@ 0xd0
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d105      	bne.n	800c9b4 <std+0x54>
 800c9a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9b0:	f000 ba50 	b.w	800ce54 <__retarget_lock_init_recursive>
 800c9b4:	bd10      	pop	{r4, pc}
 800c9b6:	bf00      	nop
 800c9b8:	0800cb79 	.word	0x0800cb79
 800c9bc:	0800cb9f 	.word	0x0800cb9f
 800c9c0:	0800cbd7 	.word	0x0800cbd7
 800c9c4:	0800cbfb 	.word	0x0800cbfb
 800c9c8:	20008ddc 	.word	0x20008ddc

0800c9cc <stdio_exit_handler>:
 800c9cc:	4a02      	ldr	r2, [pc, #8]	@ (800c9d8 <stdio_exit_handler+0xc>)
 800c9ce:	4903      	ldr	r1, [pc, #12]	@ (800c9dc <stdio_exit_handler+0x10>)
 800c9d0:	4803      	ldr	r0, [pc, #12]	@ (800c9e0 <stdio_exit_handler+0x14>)
 800c9d2:	f000 b869 	b.w	800caa8 <_fwalk_sglue>
 800c9d6:	bf00      	nop
 800c9d8:	20000020 	.word	0x20000020
 800c9dc:	0800ec49 	.word	0x0800ec49
 800c9e0:	2000019c 	.word	0x2000019c

0800c9e4 <cleanup_stdio>:
 800c9e4:	6841      	ldr	r1, [r0, #4]
 800c9e6:	4b0c      	ldr	r3, [pc, #48]	@ (800ca18 <cleanup_stdio+0x34>)
 800c9e8:	4299      	cmp	r1, r3
 800c9ea:	b510      	push	{r4, lr}
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	d001      	beq.n	800c9f4 <cleanup_stdio+0x10>
 800c9f0:	f002 f92a 	bl	800ec48 <_fflush_r>
 800c9f4:	68a1      	ldr	r1, [r4, #8]
 800c9f6:	4b09      	ldr	r3, [pc, #36]	@ (800ca1c <cleanup_stdio+0x38>)
 800c9f8:	4299      	cmp	r1, r3
 800c9fa:	d002      	beq.n	800ca02 <cleanup_stdio+0x1e>
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f002 f923 	bl	800ec48 <_fflush_r>
 800ca02:	68e1      	ldr	r1, [r4, #12]
 800ca04:	4b06      	ldr	r3, [pc, #24]	@ (800ca20 <cleanup_stdio+0x3c>)
 800ca06:	4299      	cmp	r1, r3
 800ca08:	d004      	beq.n	800ca14 <cleanup_stdio+0x30>
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca10:	f002 b91a 	b.w	800ec48 <_fflush_r>
 800ca14:	bd10      	pop	{r4, pc}
 800ca16:	bf00      	nop
 800ca18:	20008ddc 	.word	0x20008ddc
 800ca1c:	20008e44 	.word	0x20008e44
 800ca20:	20008eac 	.word	0x20008eac

0800ca24 <global_stdio_init.part.0>:
 800ca24:	b510      	push	{r4, lr}
 800ca26:	4b0b      	ldr	r3, [pc, #44]	@ (800ca54 <global_stdio_init.part.0+0x30>)
 800ca28:	4c0b      	ldr	r4, [pc, #44]	@ (800ca58 <global_stdio_init.part.0+0x34>)
 800ca2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ca5c <global_stdio_init.part.0+0x38>)
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	2200      	movs	r2, #0
 800ca32:	2104      	movs	r1, #4
 800ca34:	f7ff ff94 	bl	800c960 <std>
 800ca38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	2109      	movs	r1, #9
 800ca40:	f7ff ff8e 	bl	800c960 <std>
 800ca44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca48:	2202      	movs	r2, #2
 800ca4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca4e:	2112      	movs	r1, #18
 800ca50:	f7ff bf86 	b.w	800c960 <std>
 800ca54:	20008f14 	.word	0x20008f14
 800ca58:	20008ddc 	.word	0x20008ddc
 800ca5c:	0800c9cd 	.word	0x0800c9cd

0800ca60 <__sfp_lock_acquire>:
 800ca60:	4801      	ldr	r0, [pc, #4]	@ (800ca68 <__sfp_lock_acquire+0x8>)
 800ca62:	f000 b9f8 	b.w	800ce56 <__retarget_lock_acquire_recursive>
 800ca66:	bf00      	nop
 800ca68:	20008f1d 	.word	0x20008f1d

0800ca6c <__sfp_lock_release>:
 800ca6c:	4801      	ldr	r0, [pc, #4]	@ (800ca74 <__sfp_lock_release+0x8>)
 800ca6e:	f000 b9f3 	b.w	800ce58 <__retarget_lock_release_recursive>
 800ca72:	bf00      	nop
 800ca74:	20008f1d 	.word	0x20008f1d

0800ca78 <__sinit>:
 800ca78:	b510      	push	{r4, lr}
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	f7ff fff0 	bl	800ca60 <__sfp_lock_acquire>
 800ca80:	6a23      	ldr	r3, [r4, #32]
 800ca82:	b11b      	cbz	r3, 800ca8c <__sinit+0x14>
 800ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca88:	f7ff bff0 	b.w	800ca6c <__sfp_lock_release>
 800ca8c:	4b04      	ldr	r3, [pc, #16]	@ (800caa0 <__sinit+0x28>)
 800ca8e:	6223      	str	r3, [r4, #32]
 800ca90:	4b04      	ldr	r3, [pc, #16]	@ (800caa4 <__sinit+0x2c>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1f5      	bne.n	800ca84 <__sinit+0xc>
 800ca98:	f7ff ffc4 	bl	800ca24 <global_stdio_init.part.0>
 800ca9c:	e7f2      	b.n	800ca84 <__sinit+0xc>
 800ca9e:	bf00      	nop
 800caa0:	0800c9e5 	.word	0x0800c9e5
 800caa4:	20008f14 	.word	0x20008f14

0800caa8 <_fwalk_sglue>:
 800caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caac:	4607      	mov	r7, r0
 800caae:	4688      	mov	r8, r1
 800cab0:	4614      	mov	r4, r2
 800cab2:	2600      	movs	r6, #0
 800cab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cab8:	f1b9 0901 	subs.w	r9, r9, #1
 800cabc:	d505      	bpl.n	800caca <_fwalk_sglue+0x22>
 800cabe:	6824      	ldr	r4, [r4, #0]
 800cac0:	2c00      	cmp	r4, #0
 800cac2:	d1f7      	bne.n	800cab4 <_fwalk_sglue+0xc>
 800cac4:	4630      	mov	r0, r6
 800cac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caca:	89ab      	ldrh	r3, [r5, #12]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d907      	bls.n	800cae0 <_fwalk_sglue+0x38>
 800cad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cad4:	3301      	adds	r3, #1
 800cad6:	d003      	beq.n	800cae0 <_fwalk_sglue+0x38>
 800cad8:	4629      	mov	r1, r5
 800cada:	4638      	mov	r0, r7
 800cadc:	47c0      	blx	r8
 800cade:	4306      	orrs	r6, r0
 800cae0:	3568      	adds	r5, #104	@ 0x68
 800cae2:	e7e9      	b.n	800cab8 <_fwalk_sglue+0x10>

0800cae4 <siprintf>:
 800cae4:	b40e      	push	{r1, r2, r3}
 800cae6:	b500      	push	{lr}
 800cae8:	b09c      	sub	sp, #112	@ 0x70
 800caea:	ab1d      	add	r3, sp, #116	@ 0x74
 800caec:	9002      	str	r0, [sp, #8]
 800caee:	9006      	str	r0, [sp, #24]
 800caf0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800caf4:	4809      	ldr	r0, [pc, #36]	@ (800cb1c <siprintf+0x38>)
 800caf6:	9107      	str	r1, [sp, #28]
 800caf8:	9104      	str	r1, [sp, #16]
 800cafa:	4909      	ldr	r1, [pc, #36]	@ (800cb20 <siprintf+0x3c>)
 800cafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb00:	9105      	str	r1, [sp, #20]
 800cb02:	6800      	ldr	r0, [r0, #0]
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	a902      	add	r1, sp, #8
 800cb08:	f001 fa76 	bl	800dff8 <_svfiprintf_r>
 800cb0c:	9b02      	ldr	r3, [sp, #8]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	b01c      	add	sp, #112	@ 0x70
 800cb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb18:	b003      	add	sp, #12
 800cb1a:	4770      	bx	lr
 800cb1c:	20000198 	.word	0x20000198
 800cb20:	ffff0208 	.word	0xffff0208

0800cb24 <siscanf>:
 800cb24:	b40e      	push	{r1, r2, r3}
 800cb26:	b530      	push	{r4, r5, lr}
 800cb28:	b09c      	sub	sp, #112	@ 0x70
 800cb2a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800cb2c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800cb30:	f854 5b04 	ldr.w	r5, [r4], #4
 800cb34:	f8ad 2014 	strh.w	r2, [sp, #20]
 800cb38:	9002      	str	r0, [sp, #8]
 800cb3a:	9006      	str	r0, [sp, #24]
 800cb3c:	f7f3 fb52 	bl	80001e4 <strlen>
 800cb40:	4b0b      	ldr	r3, [pc, #44]	@ (800cb70 <siscanf+0x4c>)
 800cb42:	9003      	str	r0, [sp, #12]
 800cb44:	9007      	str	r0, [sp, #28]
 800cb46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb48:	480a      	ldr	r0, [pc, #40]	@ (800cb74 <siscanf+0x50>)
 800cb4a:	9401      	str	r4, [sp, #4]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb50:	9314      	str	r3, [sp, #80]	@ 0x50
 800cb52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cb56:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb5a:	462a      	mov	r2, r5
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	a902      	add	r1, sp, #8
 800cb60:	6800      	ldr	r0, [r0, #0]
 800cb62:	f001 fb9d 	bl	800e2a0 <__ssvfiscanf_r>
 800cb66:	b01c      	add	sp, #112	@ 0x70
 800cb68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb6c:	b003      	add	sp, #12
 800cb6e:	4770      	bx	lr
 800cb70:	0800cb9b 	.word	0x0800cb9b
 800cb74:	20000198 	.word	0x20000198

0800cb78 <__sread>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb80:	f000 f90a 	bl	800cd98 <_read_r>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	bfab      	itete	ge
 800cb88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cb8a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb8c:	181b      	addge	r3, r3, r0
 800cb8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cb92:	bfac      	ite	ge
 800cb94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cb96:	81a3      	strhlt	r3, [r4, #12]
 800cb98:	bd10      	pop	{r4, pc}

0800cb9a <__seofread>:
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	4770      	bx	lr

0800cb9e <__swrite>:
 800cb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba2:	461f      	mov	r7, r3
 800cba4:	898b      	ldrh	r3, [r1, #12]
 800cba6:	05db      	lsls	r3, r3, #23
 800cba8:	4605      	mov	r5, r0
 800cbaa:	460c      	mov	r4, r1
 800cbac:	4616      	mov	r6, r2
 800cbae:	d505      	bpl.n	800cbbc <__swrite+0x1e>
 800cbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb4:	2302      	movs	r3, #2
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f000 f8dc 	bl	800cd74 <_lseek_r>
 800cbbc:	89a3      	ldrh	r3, [r4, #12]
 800cbbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cbc6:	81a3      	strh	r3, [r4, #12]
 800cbc8:	4632      	mov	r2, r6
 800cbca:	463b      	mov	r3, r7
 800cbcc:	4628      	mov	r0, r5
 800cbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd2:	f000 b903 	b.w	800cddc <_write_r>

0800cbd6 <__sseek>:
 800cbd6:	b510      	push	{r4, lr}
 800cbd8:	460c      	mov	r4, r1
 800cbda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbde:	f000 f8c9 	bl	800cd74 <_lseek_r>
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	89a3      	ldrh	r3, [r4, #12]
 800cbe6:	bf15      	itete	ne
 800cbe8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cbea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cbee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cbf2:	81a3      	strheq	r3, [r4, #12]
 800cbf4:	bf18      	it	ne
 800cbf6:	81a3      	strhne	r3, [r4, #12]
 800cbf8:	bd10      	pop	{r4, pc}

0800cbfa <__sclose>:
 800cbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbfe:	f000 b853 	b.w	800cca8 <_close_r>

0800cc02 <_vsniprintf_r>:
 800cc02:	b530      	push	{r4, r5, lr}
 800cc04:	4614      	mov	r4, r2
 800cc06:	2c00      	cmp	r4, #0
 800cc08:	b09b      	sub	sp, #108	@ 0x6c
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	da05      	bge.n	800cc1c <_vsniprintf_r+0x1a>
 800cc10:	238b      	movs	r3, #139	@ 0x8b
 800cc12:	6003      	str	r3, [r0, #0]
 800cc14:	f04f 30ff 	mov.w	r0, #4294967295
 800cc18:	b01b      	add	sp, #108	@ 0x6c
 800cc1a:	bd30      	pop	{r4, r5, pc}
 800cc1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cc20:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cc24:	bf14      	ite	ne
 800cc26:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc2a:	4623      	moveq	r3, r4
 800cc2c:	9302      	str	r3, [sp, #8]
 800cc2e:	9305      	str	r3, [sp, #20]
 800cc30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc34:	9100      	str	r1, [sp, #0]
 800cc36:	9104      	str	r1, [sp, #16]
 800cc38:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cc3c:	4669      	mov	r1, sp
 800cc3e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cc40:	f001 f9da 	bl	800dff8 <_svfiprintf_r>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	bfbc      	itt	lt
 800cc48:	238b      	movlt	r3, #139	@ 0x8b
 800cc4a:	602b      	strlt	r3, [r5, #0]
 800cc4c:	2c00      	cmp	r4, #0
 800cc4e:	d0e3      	beq.n	800cc18 <_vsniprintf_r+0x16>
 800cc50:	9b00      	ldr	r3, [sp, #0]
 800cc52:	2200      	movs	r2, #0
 800cc54:	701a      	strb	r2, [r3, #0]
 800cc56:	e7df      	b.n	800cc18 <_vsniprintf_r+0x16>

0800cc58 <vsniprintf>:
 800cc58:	b507      	push	{r0, r1, r2, lr}
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	460a      	mov	r2, r1
 800cc60:	4601      	mov	r1, r0
 800cc62:	4803      	ldr	r0, [pc, #12]	@ (800cc70 <vsniprintf+0x18>)
 800cc64:	6800      	ldr	r0, [r0, #0]
 800cc66:	f7ff ffcc 	bl	800cc02 <_vsniprintf_r>
 800cc6a:	b003      	add	sp, #12
 800cc6c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc70:	20000198 	.word	0x20000198

0800cc74 <memset>:
 800cc74:	4402      	add	r2, r0
 800cc76:	4603      	mov	r3, r0
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d100      	bne.n	800cc7e <memset+0xa>
 800cc7c:	4770      	bx	lr
 800cc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc82:	e7f9      	b.n	800cc78 <memset+0x4>

0800cc84 <strncmp>:
 800cc84:	b510      	push	{r4, lr}
 800cc86:	b16a      	cbz	r2, 800cca4 <strncmp+0x20>
 800cc88:	3901      	subs	r1, #1
 800cc8a:	1884      	adds	r4, r0, r2
 800cc8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d103      	bne.n	800cca0 <strncmp+0x1c>
 800cc98:	42a0      	cmp	r0, r4
 800cc9a:	d001      	beq.n	800cca0 <strncmp+0x1c>
 800cc9c:	2a00      	cmp	r2, #0
 800cc9e:	d1f5      	bne.n	800cc8c <strncmp+0x8>
 800cca0:	1ad0      	subs	r0, r2, r3
 800cca2:	bd10      	pop	{r4, pc}
 800cca4:	4610      	mov	r0, r2
 800cca6:	e7fc      	b.n	800cca2 <strncmp+0x1e>

0800cca8 <_close_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d06      	ldr	r5, [pc, #24]	@ (800ccc4 <_close_r+0x1c>)
 800ccac:	2300      	movs	r3, #0
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	602b      	str	r3, [r5, #0]
 800ccb4:	f7f8 f80e 	bl	8004cd4 <_close>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	d102      	bne.n	800ccc2 <_close_r+0x1a>
 800ccbc:	682b      	ldr	r3, [r5, #0]
 800ccbe:	b103      	cbz	r3, 800ccc2 <_close_r+0x1a>
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	bd38      	pop	{r3, r4, r5, pc}
 800ccc4:	20008f18 	.word	0x20008f18

0800ccc8 <_reclaim_reent>:
 800ccc8:	4b29      	ldr	r3, [pc, #164]	@ (800cd70 <_reclaim_reent+0xa8>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4283      	cmp	r3, r0
 800ccce:	b570      	push	{r4, r5, r6, lr}
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	d04b      	beq.n	800cd6c <_reclaim_reent+0xa4>
 800ccd4:	69c3      	ldr	r3, [r0, #28]
 800ccd6:	b1ab      	cbz	r3, 800cd04 <_reclaim_reent+0x3c>
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	b16b      	cbz	r3, 800ccf8 <_reclaim_reent+0x30>
 800ccdc:	2500      	movs	r5, #0
 800ccde:	69e3      	ldr	r3, [r4, #28]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	5959      	ldr	r1, [r3, r5]
 800cce4:	2900      	cmp	r1, #0
 800cce6:	d13b      	bne.n	800cd60 <_reclaim_reent+0x98>
 800cce8:	3504      	adds	r5, #4
 800ccea:	2d80      	cmp	r5, #128	@ 0x80
 800ccec:	d1f7      	bne.n	800ccde <_reclaim_reent+0x16>
 800ccee:	69e3      	ldr	r3, [r4, #28]
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	68d9      	ldr	r1, [r3, #12]
 800ccf4:	f000 f8c8 	bl	800ce88 <_free_r>
 800ccf8:	69e3      	ldr	r3, [r4, #28]
 800ccfa:	6819      	ldr	r1, [r3, #0]
 800ccfc:	b111      	cbz	r1, 800cd04 <_reclaim_reent+0x3c>
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f000 f8c2 	bl	800ce88 <_free_r>
 800cd04:	6961      	ldr	r1, [r4, #20]
 800cd06:	b111      	cbz	r1, 800cd0e <_reclaim_reent+0x46>
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 f8bd 	bl	800ce88 <_free_r>
 800cd0e:	69e1      	ldr	r1, [r4, #28]
 800cd10:	b111      	cbz	r1, 800cd18 <_reclaim_reent+0x50>
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 f8b8 	bl	800ce88 <_free_r>
 800cd18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cd1a:	b111      	cbz	r1, 800cd22 <_reclaim_reent+0x5a>
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f000 f8b3 	bl	800ce88 <_free_r>
 800cd22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd24:	b111      	cbz	r1, 800cd2c <_reclaim_reent+0x64>
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 f8ae 	bl	800ce88 <_free_r>
 800cd2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cd2e:	b111      	cbz	r1, 800cd36 <_reclaim_reent+0x6e>
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 f8a9 	bl	800ce88 <_free_r>
 800cd36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cd38:	b111      	cbz	r1, 800cd40 <_reclaim_reent+0x78>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 f8a4 	bl	800ce88 <_free_r>
 800cd40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cd42:	b111      	cbz	r1, 800cd4a <_reclaim_reent+0x82>
 800cd44:	4620      	mov	r0, r4
 800cd46:	f000 f89f 	bl	800ce88 <_free_r>
 800cd4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cd4c:	b111      	cbz	r1, 800cd54 <_reclaim_reent+0x8c>
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f000 f89a 	bl	800ce88 <_free_r>
 800cd54:	6a23      	ldr	r3, [r4, #32]
 800cd56:	b14b      	cbz	r3, 800cd6c <_reclaim_reent+0xa4>
 800cd58:	4620      	mov	r0, r4
 800cd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd5e:	4718      	bx	r3
 800cd60:	680e      	ldr	r6, [r1, #0]
 800cd62:	4620      	mov	r0, r4
 800cd64:	f000 f890 	bl	800ce88 <_free_r>
 800cd68:	4631      	mov	r1, r6
 800cd6a:	e7bb      	b.n	800cce4 <_reclaim_reent+0x1c>
 800cd6c:	bd70      	pop	{r4, r5, r6, pc}
 800cd6e:	bf00      	nop
 800cd70:	20000198 	.word	0x20000198

0800cd74 <_lseek_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d07      	ldr	r5, [pc, #28]	@ (800cd94 <_lseek_r+0x20>)
 800cd78:	4604      	mov	r4, r0
 800cd7a:	4608      	mov	r0, r1
 800cd7c:	4611      	mov	r1, r2
 800cd7e:	2200      	movs	r2, #0
 800cd80:	602a      	str	r2, [r5, #0]
 800cd82:	461a      	mov	r2, r3
 800cd84:	f7f7 ffcd 	bl	8004d22 <_lseek>
 800cd88:	1c43      	adds	r3, r0, #1
 800cd8a:	d102      	bne.n	800cd92 <_lseek_r+0x1e>
 800cd8c:	682b      	ldr	r3, [r5, #0]
 800cd8e:	b103      	cbz	r3, 800cd92 <_lseek_r+0x1e>
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	bd38      	pop	{r3, r4, r5, pc}
 800cd94:	20008f18 	.word	0x20008f18

0800cd98 <_read_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	@ (800cdb8 <_read_r+0x20>)
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	4608      	mov	r0, r1
 800cda0:	4611      	mov	r1, r2
 800cda2:	2200      	movs	r2, #0
 800cda4:	602a      	str	r2, [r5, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	f7f7 ff5b 	bl	8004c62 <_read>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_read_r+0x1e>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_read_r+0x1e>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	20008f18 	.word	0x20008f18

0800cdbc <_sbrk_r>:
 800cdbc:	b538      	push	{r3, r4, r5, lr}
 800cdbe:	4d06      	ldr	r5, [pc, #24]	@ (800cdd8 <_sbrk_r+0x1c>)
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	4608      	mov	r0, r1
 800cdc6:	602b      	str	r3, [r5, #0]
 800cdc8:	f7f7 ffb8 	bl	8004d3c <_sbrk>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	d102      	bne.n	800cdd6 <_sbrk_r+0x1a>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	b103      	cbz	r3, 800cdd6 <_sbrk_r+0x1a>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	20008f18 	.word	0x20008f18

0800cddc <_write_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d07      	ldr	r5, [pc, #28]	@ (800cdfc <_write_r+0x20>)
 800cde0:	4604      	mov	r4, r0
 800cde2:	4608      	mov	r0, r1
 800cde4:	4611      	mov	r1, r2
 800cde6:	2200      	movs	r2, #0
 800cde8:	602a      	str	r2, [r5, #0]
 800cdea:	461a      	mov	r2, r3
 800cdec:	f7f7 ff56 	bl	8004c9c <_write>
 800cdf0:	1c43      	adds	r3, r0, #1
 800cdf2:	d102      	bne.n	800cdfa <_write_r+0x1e>
 800cdf4:	682b      	ldr	r3, [r5, #0]
 800cdf6:	b103      	cbz	r3, 800cdfa <_write_r+0x1e>
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	bd38      	pop	{r3, r4, r5, pc}
 800cdfc:	20008f18 	.word	0x20008f18

0800ce00 <__errno>:
 800ce00:	4b01      	ldr	r3, [pc, #4]	@ (800ce08 <__errno+0x8>)
 800ce02:	6818      	ldr	r0, [r3, #0]
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	20000198 	.word	0x20000198

0800ce0c <__libc_init_array>:
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	4d0d      	ldr	r5, [pc, #52]	@ (800ce44 <__libc_init_array+0x38>)
 800ce10:	4c0d      	ldr	r4, [pc, #52]	@ (800ce48 <__libc_init_array+0x3c>)
 800ce12:	1b64      	subs	r4, r4, r5
 800ce14:	10a4      	asrs	r4, r4, #2
 800ce16:	2600      	movs	r6, #0
 800ce18:	42a6      	cmp	r6, r4
 800ce1a:	d109      	bne.n	800ce30 <__libc_init_array+0x24>
 800ce1c:	4d0b      	ldr	r5, [pc, #44]	@ (800ce4c <__libc_init_array+0x40>)
 800ce1e:	4c0c      	ldr	r4, [pc, #48]	@ (800ce50 <__libc_init_array+0x44>)
 800ce20:	f002 fb9c 	bl	800f55c <_init>
 800ce24:	1b64      	subs	r4, r4, r5
 800ce26:	10a4      	asrs	r4, r4, #2
 800ce28:	2600      	movs	r6, #0
 800ce2a:	42a6      	cmp	r6, r4
 800ce2c:	d105      	bne.n	800ce3a <__libc_init_array+0x2e>
 800ce2e:	bd70      	pop	{r4, r5, r6, pc}
 800ce30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce34:	4798      	blx	r3
 800ce36:	3601      	adds	r6, #1
 800ce38:	e7ee      	b.n	800ce18 <__libc_init_array+0xc>
 800ce3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce3e:	4798      	blx	r3
 800ce40:	3601      	adds	r6, #1
 800ce42:	e7f2      	b.n	800ce2a <__libc_init_array+0x1e>
 800ce44:	0800fb74 	.word	0x0800fb74
 800ce48:	0800fb74 	.word	0x0800fb74
 800ce4c:	0800fb74 	.word	0x0800fb74
 800ce50:	0800fb78 	.word	0x0800fb78

0800ce54 <__retarget_lock_init_recursive>:
 800ce54:	4770      	bx	lr

0800ce56 <__retarget_lock_acquire_recursive>:
 800ce56:	4770      	bx	lr

0800ce58 <__retarget_lock_release_recursive>:
 800ce58:	4770      	bx	lr

0800ce5a <memcpy>:
 800ce5a:	440a      	add	r2, r1
 800ce5c:	4291      	cmp	r1, r2
 800ce5e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce62:	d100      	bne.n	800ce66 <memcpy+0xc>
 800ce64:	4770      	bx	lr
 800ce66:	b510      	push	{r4, lr}
 800ce68:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce70:	4291      	cmp	r1, r2
 800ce72:	d1f9      	bne.n	800ce68 <memcpy+0xe>
 800ce74:	bd10      	pop	{r4, pc}
	...

0800ce78 <nan>:
 800ce78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce80 <nan+0x8>
 800ce7c:	4770      	bx	lr
 800ce7e:	bf00      	nop
 800ce80:	00000000 	.word	0x00000000
 800ce84:	7ff80000 	.word	0x7ff80000

0800ce88 <_free_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	2900      	cmp	r1, #0
 800ce8e:	d041      	beq.n	800cf14 <_free_r+0x8c>
 800ce90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce94:	1f0c      	subs	r4, r1, #4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	bfb8      	it	lt
 800ce9a:	18e4      	addlt	r4, r4, r3
 800ce9c:	f7fe ff0e 	bl	800bcbc <__malloc_lock>
 800cea0:	4a1d      	ldr	r2, [pc, #116]	@ (800cf18 <_free_r+0x90>)
 800cea2:	6813      	ldr	r3, [r2, #0]
 800cea4:	b933      	cbnz	r3, 800ceb4 <_free_r+0x2c>
 800cea6:	6063      	str	r3, [r4, #4]
 800cea8:	6014      	str	r4, [r2, #0]
 800ceaa:	4628      	mov	r0, r5
 800ceac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceb0:	f7fe bf0a 	b.w	800bcc8 <__malloc_unlock>
 800ceb4:	42a3      	cmp	r3, r4
 800ceb6:	d908      	bls.n	800ceca <_free_r+0x42>
 800ceb8:	6820      	ldr	r0, [r4, #0]
 800ceba:	1821      	adds	r1, r4, r0
 800cebc:	428b      	cmp	r3, r1
 800cebe:	bf01      	itttt	eq
 800cec0:	6819      	ldreq	r1, [r3, #0]
 800cec2:	685b      	ldreq	r3, [r3, #4]
 800cec4:	1809      	addeq	r1, r1, r0
 800cec6:	6021      	streq	r1, [r4, #0]
 800cec8:	e7ed      	b.n	800cea6 <_free_r+0x1e>
 800ceca:	461a      	mov	r2, r3
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	b10b      	cbz	r3, 800ced4 <_free_r+0x4c>
 800ced0:	42a3      	cmp	r3, r4
 800ced2:	d9fa      	bls.n	800ceca <_free_r+0x42>
 800ced4:	6811      	ldr	r1, [r2, #0]
 800ced6:	1850      	adds	r0, r2, r1
 800ced8:	42a0      	cmp	r0, r4
 800ceda:	d10b      	bne.n	800cef4 <_free_r+0x6c>
 800cedc:	6820      	ldr	r0, [r4, #0]
 800cede:	4401      	add	r1, r0
 800cee0:	1850      	adds	r0, r2, r1
 800cee2:	4283      	cmp	r3, r0
 800cee4:	6011      	str	r1, [r2, #0]
 800cee6:	d1e0      	bne.n	800ceaa <_free_r+0x22>
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	6053      	str	r3, [r2, #4]
 800ceee:	4408      	add	r0, r1
 800cef0:	6010      	str	r0, [r2, #0]
 800cef2:	e7da      	b.n	800ceaa <_free_r+0x22>
 800cef4:	d902      	bls.n	800cefc <_free_r+0x74>
 800cef6:	230c      	movs	r3, #12
 800cef8:	602b      	str	r3, [r5, #0]
 800cefa:	e7d6      	b.n	800ceaa <_free_r+0x22>
 800cefc:	6820      	ldr	r0, [r4, #0]
 800cefe:	1821      	adds	r1, r4, r0
 800cf00:	428b      	cmp	r3, r1
 800cf02:	bf04      	itt	eq
 800cf04:	6819      	ldreq	r1, [r3, #0]
 800cf06:	685b      	ldreq	r3, [r3, #4]
 800cf08:	6063      	str	r3, [r4, #4]
 800cf0a:	bf04      	itt	eq
 800cf0c:	1809      	addeq	r1, r1, r0
 800cf0e:	6021      	streq	r1, [r4, #0]
 800cf10:	6054      	str	r4, [r2, #4]
 800cf12:	e7ca      	b.n	800ceaa <_free_r+0x22>
 800cf14:	bd38      	pop	{r3, r4, r5, pc}
 800cf16:	bf00      	nop
 800cf18:	20008dd8 	.word	0x20008dd8

0800cf1c <rshift>:
 800cf1c:	6903      	ldr	r3, [r0, #16]
 800cf1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf2a:	f100 0414 	add.w	r4, r0, #20
 800cf2e:	dd45      	ble.n	800cfbc <rshift+0xa0>
 800cf30:	f011 011f 	ands.w	r1, r1, #31
 800cf34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf3c:	d10c      	bne.n	800cf58 <rshift+0x3c>
 800cf3e:	f100 0710 	add.w	r7, r0, #16
 800cf42:	4629      	mov	r1, r5
 800cf44:	42b1      	cmp	r1, r6
 800cf46:	d334      	bcc.n	800cfb2 <rshift+0x96>
 800cf48:	1a9b      	subs	r3, r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	1eea      	subs	r2, r5, #3
 800cf4e:	4296      	cmp	r6, r2
 800cf50:	bf38      	it	cc
 800cf52:	2300      	movcc	r3, #0
 800cf54:	4423      	add	r3, r4
 800cf56:	e015      	b.n	800cf84 <rshift+0x68>
 800cf58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf5c:	f1c1 0820 	rsb	r8, r1, #32
 800cf60:	40cf      	lsrs	r7, r1
 800cf62:	f105 0e04 	add.w	lr, r5, #4
 800cf66:	46a1      	mov	r9, r4
 800cf68:	4576      	cmp	r6, lr
 800cf6a:	46f4      	mov	ip, lr
 800cf6c:	d815      	bhi.n	800cf9a <rshift+0x7e>
 800cf6e:	1a9a      	subs	r2, r3, r2
 800cf70:	0092      	lsls	r2, r2, #2
 800cf72:	3a04      	subs	r2, #4
 800cf74:	3501      	adds	r5, #1
 800cf76:	42ae      	cmp	r6, r5
 800cf78:	bf38      	it	cc
 800cf7a:	2200      	movcc	r2, #0
 800cf7c:	18a3      	adds	r3, r4, r2
 800cf7e:	50a7      	str	r7, [r4, r2]
 800cf80:	b107      	cbz	r7, 800cf84 <rshift+0x68>
 800cf82:	3304      	adds	r3, #4
 800cf84:	1b1a      	subs	r2, r3, r4
 800cf86:	42a3      	cmp	r3, r4
 800cf88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf8c:	bf08      	it	eq
 800cf8e:	2300      	moveq	r3, #0
 800cf90:	6102      	str	r2, [r0, #16]
 800cf92:	bf08      	it	eq
 800cf94:	6143      	streq	r3, [r0, #20]
 800cf96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf9a:	f8dc c000 	ldr.w	ip, [ip]
 800cf9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cfa2:	ea4c 0707 	orr.w	r7, ip, r7
 800cfa6:	f849 7b04 	str.w	r7, [r9], #4
 800cfaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfae:	40cf      	lsrs	r7, r1
 800cfb0:	e7da      	b.n	800cf68 <rshift+0x4c>
 800cfb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800cfb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800cfba:	e7c3      	b.n	800cf44 <rshift+0x28>
 800cfbc:	4623      	mov	r3, r4
 800cfbe:	e7e1      	b.n	800cf84 <rshift+0x68>

0800cfc0 <__hexdig_fun>:
 800cfc0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cfc4:	2b09      	cmp	r3, #9
 800cfc6:	d802      	bhi.n	800cfce <__hexdig_fun+0xe>
 800cfc8:	3820      	subs	r0, #32
 800cfca:	b2c0      	uxtb	r0, r0
 800cfcc:	4770      	bx	lr
 800cfce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cfd2:	2b05      	cmp	r3, #5
 800cfd4:	d801      	bhi.n	800cfda <__hexdig_fun+0x1a>
 800cfd6:	3847      	subs	r0, #71	@ 0x47
 800cfd8:	e7f7      	b.n	800cfca <__hexdig_fun+0xa>
 800cfda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cfde:	2b05      	cmp	r3, #5
 800cfe0:	d801      	bhi.n	800cfe6 <__hexdig_fun+0x26>
 800cfe2:	3827      	subs	r0, #39	@ 0x27
 800cfe4:	e7f1      	b.n	800cfca <__hexdig_fun+0xa>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	4770      	bx	lr
	...

0800cfec <__gethex>:
 800cfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	b085      	sub	sp, #20
 800cff2:	468a      	mov	sl, r1
 800cff4:	9302      	str	r3, [sp, #8]
 800cff6:	680b      	ldr	r3, [r1, #0]
 800cff8:	9001      	str	r0, [sp, #4]
 800cffa:	4690      	mov	r8, r2
 800cffc:	1c9c      	adds	r4, r3, #2
 800cffe:	46a1      	mov	r9, r4
 800d000:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d004:	2830      	cmp	r0, #48	@ 0x30
 800d006:	d0fa      	beq.n	800cffe <__gethex+0x12>
 800d008:	eba9 0303 	sub.w	r3, r9, r3
 800d00c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d010:	f7ff ffd6 	bl	800cfc0 <__hexdig_fun>
 800d014:	4605      	mov	r5, r0
 800d016:	2800      	cmp	r0, #0
 800d018:	d168      	bne.n	800d0ec <__gethex+0x100>
 800d01a:	49a0      	ldr	r1, [pc, #640]	@ (800d29c <__gethex+0x2b0>)
 800d01c:	2201      	movs	r2, #1
 800d01e:	4648      	mov	r0, r9
 800d020:	f7ff fe30 	bl	800cc84 <strncmp>
 800d024:	4607      	mov	r7, r0
 800d026:	2800      	cmp	r0, #0
 800d028:	d167      	bne.n	800d0fa <__gethex+0x10e>
 800d02a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d02e:	4626      	mov	r6, r4
 800d030:	f7ff ffc6 	bl	800cfc0 <__hexdig_fun>
 800d034:	2800      	cmp	r0, #0
 800d036:	d062      	beq.n	800d0fe <__gethex+0x112>
 800d038:	4623      	mov	r3, r4
 800d03a:	7818      	ldrb	r0, [r3, #0]
 800d03c:	2830      	cmp	r0, #48	@ 0x30
 800d03e:	4699      	mov	r9, r3
 800d040:	f103 0301 	add.w	r3, r3, #1
 800d044:	d0f9      	beq.n	800d03a <__gethex+0x4e>
 800d046:	f7ff ffbb 	bl	800cfc0 <__hexdig_fun>
 800d04a:	fab0 f580 	clz	r5, r0
 800d04e:	096d      	lsrs	r5, r5, #5
 800d050:	f04f 0b01 	mov.w	fp, #1
 800d054:	464a      	mov	r2, r9
 800d056:	4616      	mov	r6, r2
 800d058:	3201      	adds	r2, #1
 800d05a:	7830      	ldrb	r0, [r6, #0]
 800d05c:	f7ff ffb0 	bl	800cfc0 <__hexdig_fun>
 800d060:	2800      	cmp	r0, #0
 800d062:	d1f8      	bne.n	800d056 <__gethex+0x6a>
 800d064:	498d      	ldr	r1, [pc, #564]	@ (800d29c <__gethex+0x2b0>)
 800d066:	2201      	movs	r2, #1
 800d068:	4630      	mov	r0, r6
 800d06a:	f7ff fe0b 	bl	800cc84 <strncmp>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d13f      	bne.n	800d0f2 <__gethex+0x106>
 800d072:	b944      	cbnz	r4, 800d086 <__gethex+0x9a>
 800d074:	1c74      	adds	r4, r6, #1
 800d076:	4622      	mov	r2, r4
 800d078:	4616      	mov	r6, r2
 800d07a:	3201      	adds	r2, #1
 800d07c:	7830      	ldrb	r0, [r6, #0]
 800d07e:	f7ff ff9f 	bl	800cfc0 <__hexdig_fun>
 800d082:	2800      	cmp	r0, #0
 800d084:	d1f8      	bne.n	800d078 <__gethex+0x8c>
 800d086:	1ba4      	subs	r4, r4, r6
 800d088:	00a7      	lsls	r7, r4, #2
 800d08a:	7833      	ldrb	r3, [r6, #0]
 800d08c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d090:	2b50      	cmp	r3, #80	@ 0x50
 800d092:	d13e      	bne.n	800d112 <__gethex+0x126>
 800d094:	7873      	ldrb	r3, [r6, #1]
 800d096:	2b2b      	cmp	r3, #43	@ 0x2b
 800d098:	d033      	beq.n	800d102 <__gethex+0x116>
 800d09a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d09c:	d034      	beq.n	800d108 <__gethex+0x11c>
 800d09e:	1c71      	adds	r1, r6, #1
 800d0a0:	2400      	movs	r4, #0
 800d0a2:	7808      	ldrb	r0, [r1, #0]
 800d0a4:	f7ff ff8c 	bl	800cfc0 <__hexdig_fun>
 800d0a8:	1e43      	subs	r3, r0, #1
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b18      	cmp	r3, #24
 800d0ae:	d830      	bhi.n	800d112 <__gethex+0x126>
 800d0b0:	f1a0 0210 	sub.w	r2, r0, #16
 800d0b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d0b8:	f7ff ff82 	bl	800cfc0 <__hexdig_fun>
 800d0bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800d0c0:	fa5f fc8c 	uxtb.w	ip, ip
 800d0c4:	f1bc 0f18 	cmp.w	ip, #24
 800d0c8:	f04f 030a 	mov.w	r3, #10
 800d0cc:	d91e      	bls.n	800d10c <__gethex+0x120>
 800d0ce:	b104      	cbz	r4, 800d0d2 <__gethex+0xe6>
 800d0d0:	4252      	negs	r2, r2
 800d0d2:	4417      	add	r7, r2
 800d0d4:	f8ca 1000 	str.w	r1, [sl]
 800d0d8:	b1ed      	cbz	r5, 800d116 <__gethex+0x12a>
 800d0da:	f1bb 0f00 	cmp.w	fp, #0
 800d0de:	bf0c      	ite	eq
 800d0e0:	2506      	moveq	r5, #6
 800d0e2:	2500      	movne	r5, #0
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	b005      	add	sp, #20
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	2500      	movs	r5, #0
 800d0ee:	462c      	mov	r4, r5
 800d0f0:	e7b0      	b.n	800d054 <__gethex+0x68>
 800d0f2:	2c00      	cmp	r4, #0
 800d0f4:	d1c7      	bne.n	800d086 <__gethex+0x9a>
 800d0f6:	4627      	mov	r7, r4
 800d0f8:	e7c7      	b.n	800d08a <__gethex+0x9e>
 800d0fa:	464e      	mov	r6, r9
 800d0fc:	462f      	mov	r7, r5
 800d0fe:	2501      	movs	r5, #1
 800d100:	e7c3      	b.n	800d08a <__gethex+0x9e>
 800d102:	2400      	movs	r4, #0
 800d104:	1cb1      	adds	r1, r6, #2
 800d106:	e7cc      	b.n	800d0a2 <__gethex+0xb6>
 800d108:	2401      	movs	r4, #1
 800d10a:	e7fb      	b.n	800d104 <__gethex+0x118>
 800d10c:	fb03 0002 	mla	r0, r3, r2, r0
 800d110:	e7ce      	b.n	800d0b0 <__gethex+0xc4>
 800d112:	4631      	mov	r1, r6
 800d114:	e7de      	b.n	800d0d4 <__gethex+0xe8>
 800d116:	eba6 0309 	sub.w	r3, r6, r9
 800d11a:	3b01      	subs	r3, #1
 800d11c:	4629      	mov	r1, r5
 800d11e:	2b07      	cmp	r3, #7
 800d120:	dc0a      	bgt.n	800d138 <__gethex+0x14c>
 800d122:	9801      	ldr	r0, [sp, #4]
 800d124:	f000 fa46 	bl	800d5b4 <_Balloc>
 800d128:	4604      	mov	r4, r0
 800d12a:	b940      	cbnz	r0, 800d13e <__gethex+0x152>
 800d12c:	4b5c      	ldr	r3, [pc, #368]	@ (800d2a0 <__gethex+0x2b4>)
 800d12e:	4602      	mov	r2, r0
 800d130:	21e4      	movs	r1, #228	@ 0xe4
 800d132:	485c      	ldr	r0, [pc, #368]	@ (800d2a4 <__gethex+0x2b8>)
 800d134:	f001 fe3e 	bl	800edb4 <__assert_func>
 800d138:	3101      	adds	r1, #1
 800d13a:	105b      	asrs	r3, r3, #1
 800d13c:	e7ef      	b.n	800d11e <__gethex+0x132>
 800d13e:	f100 0a14 	add.w	sl, r0, #20
 800d142:	2300      	movs	r3, #0
 800d144:	4655      	mov	r5, sl
 800d146:	469b      	mov	fp, r3
 800d148:	45b1      	cmp	r9, r6
 800d14a:	d337      	bcc.n	800d1bc <__gethex+0x1d0>
 800d14c:	f845 bb04 	str.w	fp, [r5], #4
 800d150:	eba5 050a 	sub.w	r5, r5, sl
 800d154:	10ad      	asrs	r5, r5, #2
 800d156:	6125      	str	r5, [r4, #16]
 800d158:	4658      	mov	r0, fp
 800d15a:	f000 fb1d 	bl	800d798 <__hi0bits>
 800d15e:	016d      	lsls	r5, r5, #5
 800d160:	f8d8 6000 	ldr.w	r6, [r8]
 800d164:	1a2d      	subs	r5, r5, r0
 800d166:	42b5      	cmp	r5, r6
 800d168:	dd54      	ble.n	800d214 <__gethex+0x228>
 800d16a:	1bad      	subs	r5, r5, r6
 800d16c:	4629      	mov	r1, r5
 800d16e:	4620      	mov	r0, r4
 800d170:	f000 feb1 	bl	800ded6 <__any_on>
 800d174:	4681      	mov	r9, r0
 800d176:	b178      	cbz	r0, 800d198 <__gethex+0x1ac>
 800d178:	1e6b      	subs	r3, r5, #1
 800d17a:	1159      	asrs	r1, r3, #5
 800d17c:	f003 021f 	and.w	r2, r3, #31
 800d180:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d184:	f04f 0901 	mov.w	r9, #1
 800d188:	fa09 f202 	lsl.w	r2, r9, r2
 800d18c:	420a      	tst	r2, r1
 800d18e:	d003      	beq.n	800d198 <__gethex+0x1ac>
 800d190:	454b      	cmp	r3, r9
 800d192:	dc36      	bgt.n	800d202 <__gethex+0x216>
 800d194:	f04f 0902 	mov.w	r9, #2
 800d198:	4629      	mov	r1, r5
 800d19a:	4620      	mov	r0, r4
 800d19c:	f7ff febe 	bl	800cf1c <rshift>
 800d1a0:	442f      	add	r7, r5
 800d1a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1a6:	42bb      	cmp	r3, r7
 800d1a8:	da42      	bge.n	800d230 <__gethex+0x244>
 800d1aa:	9801      	ldr	r0, [sp, #4]
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	f000 fa41 	bl	800d634 <_Bfree>
 800d1b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	6013      	str	r3, [r2, #0]
 800d1b8:	25a3      	movs	r5, #163	@ 0xa3
 800d1ba:	e793      	b.n	800d0e4 <__gethex+0xf8>
 800d1bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d1c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800d1c2:	d012      	beq.n	800d1ea <__gethex+0x1fe>
 800d1c4:	2b20      	cmp	r3, #32
 800d1c6:	d104      	bne.n	800d1d2 <__gethex+0x1e6>
 800d1c8:	f845 bb04 	str.w	fp, [r5], #4
 800d1cc:	f04f 0b00 	mov.w	fp, #0
 800d1d0:	465b      	mov	r3, fp
 800d1d2:	7830      	ldrb	r0, [r6, #0]
 800d1d4:	9303      	str	r3, [sp, #12]
 800d1d6:	f7ff fef3 	bl	800cfc0 <__hexdig_fun>
 800d1da:	9b03      	ldr	r3, [sp, #12]
 800d1dc:	f000 000f 	and.w	r0, r0, #15
 800d1e0:	4098      	lsls	r0, r3
 800d1e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	e7ae      	b.n	800d148 <__gethex+0x15c>
 800d1ea:	45b1      	cmp	r9, r6
 800d1ec:	d8ea      	bhi.n	800d1c4 <__gethex+0x1d8>
 800d1ee:	492b      	ldr	r1, [pc, #172]	@ (800d29c <__gethex+0x2b0>)
 800d1f0:	9303      	str	r3, [sp, #12]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7ff fd45 	bl	800cc84 <strncmp>
 800d1fa:	9b03      	ldr	r3, [sp, #12]
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d1e1      	bne.n	800d1c4 <__gethex+0x1d8>
 800d200:	e7a2      	b.n	800d148 <__gethex+0x15c>
 800d202:	1ea9      	subs	r1, r5, #2
 800d204:	4620      	mov	r0, r4
 800d206:	f000 fe66 	bl	800ded6 <__any_on>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d0c2      	beq.n	800d194 <__gethex+0x1a8>
 800d20e:	f04f 0903 	mov.w	r9, #3
 800d212:	e7c1      	b.n	800d198 <__gethex+0x1ac>
 800d214:	da09      	bge.n	800d22a <__gethex+0x23e>
 800d216:	1b75      	subs	r5, r6, r5
 800d218:	4621      	mov	r1, r4
 800d21a:	9801      	ldr	r0, [sp, #4]
 800d21c:	462a      	mov	r2, r5
 800d21e:	f000 fc21 	bl	800da64 <__lshift>
 800d222:	1b7f      	subs	r7, r7, r5
 800d224:	4604      	mov	r4, r0
 800d226:	f100 0a14 	add.w	sl, r0, #20
 800d22a:	f04f 0900 	mov.w	r9, #0
 800d22e:	e7b8      	b.n	800d1a2 <__gethex+0x1b6>
 800d230:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d234:	42bd      	cmp	r5, r7
 800d236:	dd6f      	ble.n	800d318 <__gethex+0x32c>
 800d238:	1bed      	subs	r5, r5, r7
 800d23a:	42ae      	cmp	r6, r5
 800d23c:	dc34      	bgt.n	800d2a8 <__gethex+0x2bc>
 800d23e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d242:	2b02      	cmp	r3, #2
 800d244:	d022      	beq.n	800d28c <__gethex+0x2a0>
 800d246:	2b03      	cmp	r3, #3
 800d248:	d024      	beq.n	800d294 <__gethex+0x2a8>
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d115      	bne.n	800d27a <__gethex+0x28e>
 800d24e:	42ae      	cmp	r6, r5
 800d250:	d113      	bne.n	800d27a <__gethex+0x28e>
 800d252:	2e01      	cmp	r6, #1
 800d254:	d10b      	bne.n	800d26e <__gethex+0x282>
 800d256:	9a02      	ldr	r2, [sp, #8]
 800d258:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	2301      	movs	r3, #1
 800d260:	6123      	str	r3, [r4, #16]
 800d262:	f8ca 3000 	str.w	r3, [sl]
 800d266:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d268:	2562      	movs	r5, #98	@ 0x62
 800d26a:	601c      	str	r4, [r3, #0]
 800d26c:	e73a      	b.n	800d0e4 <__gethex+0xf8>
 800d26e:	1e71      	subs	r1, r6, #1
 800d270:	4620      	mov	r0, r4
 800d272:	f000 fe30 	bl	800ded6 <__any_on>
 800d276:	2800      	cmp	r0, #0
 800d278:	d1ed      	bne.n	800d256 <__gethex+0x26a>
 800d27a:	9801      	ldr	r0, [sp, #4]
 800d27c:	4621      	mov	r1, r4
 800d27e:	f000 f9d9 	bl	800d634 <_Bfree>
 800d282:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d284:	2300      	movs	r3, #0
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	2550      	movs	r5, #80	@ 0x50
 800d28a:	e72b      	b.n	800d0e4 <__gethex+0xf8>
 800d28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d1f3      	bne.n	800d27a <__gethex+0x28e>
 800d292:	e7e0      	b.n	800d256 <__gethex+0x26a>
 800d294:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1dd      	bne.n	800d256 <__gethex+0x26a>
 800d29a:	e7ee      	b.n	800d27a <__gethex+0x28e>
 800d29c:	0800f794 	.word	0x0800f794
 800d2a0:	0800f901 	.word	0x0800f901
 800d2a4:	0800f912 	.word	0x0800f912
 800d2a8:	1e6f      	subs	r7, r5, #1
 800d2aa:	f1b9 0f00 	cmp.w	r9, #0
 800d2ae:	d130      	bne.n	800d312 <__gethex+0x326>
 800d2b0:	b127      	cbz	r7, 800d2bc <__gethex+0x2d0>
 800d2b2:	4639      	mov	r1, r7
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f000 fe0e 	bl	800ded6 <__any_on>
 800d2ba:	4681      	mov	r9, r0
 800d2bc:	117a      	asrs	r2, r7, #5
 800d2be:	2301      	movs	r3, #1
 800d2c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d2c4:	f007 071f 	and.w	r7, r7, #31
 800d2c8:	40bb      	lsls	r3, r7
 800d2ca:	4213      	tst	r3, r2
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	bf18      	it	ne
 800d2d2:	f049 0902 	orrne.w	r9, r9, #2
 800d2d6:	f7ff fe21 	bl	800cf1c <rshift>
 800d2da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d2de:	1b76      	subs	r6, r6, r5
 800d2e0:	2502      	movs	r5, #2
 800d2e2:	f1b9 0f00 	cmp.w	r9, #0
 800d2e6:	d047      	beq.n	800d378 <__gethex+0x38c>
 800d2e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2ec:	2b02      	cmp	r3, #2
 800d2ee:	d015      	beq.n	800d31c <__gethex+0x330>
 800d2f0:	2b03      	cmp	r3, #3
 800d2f2:	d017      	beq.n	800d324 <__gethex+0x338>
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d109      	bne.n	800d30c <__gethex+0x320>
 800d2f8:	f019 0f02 	tst.w	r9, #2
 800d2fc:	d006      	beq.n	800d30c <__gethex+0x320>
 800d2fe:	f8da 3000 	ldr.w	r3, [sl]
 800d302:	ea49 0903 	orr.w	r9, r9, r3
 800d306:	f019 0f01 	tst.w	r9, #1
 800d30a:	d10e      	bne.n	800d32a <__gethex+0x33e>
 800d30c:	f045 0510 	orr.w	r5, r5, #16
 800d310:	e032      	b.n	800d378 <__gethex+0x38c>
 800d312:	f04f 0901 	mov.w	r9, #1
 800d316:	e7d1      	b.n	800d2bc <__gethex+0x2d0>
 800d318:	2501      	movs	r5, #1
 800d31a:	e7e2      	b.n	800d2e2 <__gethex+0x2f6>
 800d31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d31e:	f1c3 0301 	rsb	r3, r3, #1
 800d322:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0f0      	beq.n	800d30c <__gethex+0x320>
 800d32a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d32e:	f104 0314 	add.w	r3, r4, #20
 800d332:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d336:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d33a:	f04f 0c00 	mov.w	ip, #0
 800d33e:	4618      	mov	r0, r3
 800d340:	f853 2b04 	ldr.w	r2, [r3], #4
 800d344:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d348:	d01b      	beq.n	800d382 <__gethex+0x396>
 800d34a:	3201      	adds	r2, #1
 800d34c:	6002      	str	r2, [r0, #0]
 800d34e:	2d02      	cmp	r5, #2
 800d350:	f104 0314 	add.w	r3, r4, #20
 800d354:	d13c      	bne.n	800d3d0 <__gethex+0x3e4>
 800d356:	f8d8 2000 	ldr.w	r2, [r8]
 800d35a:	3a01      	subs	r2, #1
 800d35c:	42b2      	cmp	r2, r6
 800d35e:	d109      	bne.n	800d374 <__gethex+0x388>
 800d360:	1171      	asrs	r1, r6, #5
 800d362:	2201      	movs	r2, #1
 800d364:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d368:	f006 061f 	and.w	r6, r6, #31
 800d36c:	fa02 f606 	lsl.w	r6, r2, r6
 800d370:	421e      	tst	r6, r3
 800d372:	d13a      	bne.n	800d3ea <__gethex+0x3fe>
 800d374:	f045 0520 	orr.w	r5, r5, #32
 800d378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d37a:	601c      	str	r4, [r3, #0]
 800d37c:	9b02      	ldr	r3, [sp, #8]
 800d37e:	601f      	str	r7, [r3, #0]
 800d380:	e6b0      	b.n	800d0e4 <__gethex+0xf8>
 800d382:	4299      	cmp	r1, r3
 800d384:	f843 cc04 	str.w	ip, [r3, #-4]
 800d388:	d8d9      	bhi.n	800d33e <__gethex+0x352>
 800d38a:	68a3      	ldr	r3, [r4, #8]
 800d38c:	459b      	cmp	fp, r3
 800d38e:	db17      	blt.n	800d3c0 <__gethex+0x3d4>
 800d390:	6861      	ldr	r1, [r4, #4]
 800d392:	9801      	ldr	r0, [sp, #4]
 800d394:	3101      	adds	r1, #1
 800d396:	f000 f90d 	bl	800d5b4 <_Balloc>
 800d39a:	4681      	mov	r9, r0
 800d39c:	b918      	cbnz	r0, 800d3a6 <__gethex+0x3ba>
 800d39e:	4b1a      	ldr	r3, [pc, #104]	@ (800d408 <__gethex+0x41c>)
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	2184      	movs	r1, #132	@ 0x84
 800d3a4:	e6c5      	b.n	800d132 <__gethex+0x146>
 800d3a6:	6922      	ldr	r2, [r4, #16]
 800d3a8:	3202      	adds	r2, #2
 800d3aa:	f104 010c 	add.w	r1, r4, #12
 800d3ae:	0092      	lsls	r2, r2, #2
 800d3b0:	300c      	adds	r0, #12
 800d3b2:	f7ff fd52 	bl	800ce5a <memcpy>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	9801      	ldr	r0, [sp, #4]
 800d3ba:	f000 f93b 	bl	800d634 <_Bfree>
 800d3be:	464c      	mov	r4, r9
 800d3c0:	6923      	ldr	r3, [r4, #16]
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d3c8:	6122      	str	r2, [r4, #16]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	615a      	str	r2, [r3, #20]
 800d3ce:	e7be      	b.n	800d34e <__gethex+0x362>
 800d3d0:	6922      	ldr	r2, [r4, #16]
 800d3d2:	455a      	cmp	r2, fp
 800d3d4:	dd0b      	ble.n	800d3ee <__gethex+0x402>
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f7ff fd9f 	bl	800cf1c <rshift>
 800d3de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3e2:	3701      	adds	r7, #1
 800d3e4:	42bb      	cmp	r3, r7
 800d3e6:	f6ff aee0 	blt.w	800d1aa <__gethex+0x1be>
 800d3ea:	2501      	movs	r5, #1
 800d3ec:	e7c2      	b.n	800d374 <__gethex+0x388>
 800d3ee:	f016 061f 	ands.w	r6, r6, #31
 800d3f2:	d0fa      	beq.n	800d3ea <__gethex+0x3fe>
 800d3f4:	4453      	add	r3, sl
 800d3f6:	f1c6 0620 	rsb	r6, r6, #32
 800d3fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3fe:	f000 f9cb 	bl	800d798 <__hi0bits>
 800d402:	42b0      	cmp	r0, r6
 800d404:	dbe7      	blt.n	800d3d6 <__gethex+0x3ea>
 800d406:	e7f0      	b.n	800d3ea <__gethex+0x3fe>
 800d408:	0800f901 	.word	0x0800f901

0800d40c <L_shift>:
 800d40c:	f1c2 0208 	rsb	r2, r2, #8
 800d410:	0092      	lsls	r2, r2, #2
 800d412:	b570      	push	{r4, r5, r6, lr}
 800d414:	f1c2 0620 	rsb	r6, r2, #32
 800d418:	6843      	ldr	r3, [r0, #4]
 800d41a:	6804      	ldr	r4, [r0, #0]
 800d41c:	fa03 f506 	lsl.w	r5, r3, r6
 800d420:	432c      	orrs	r4, r5
 800d422:	40d3      	lsrs	r3, r2
 800d424:	6004      	str	r4, [r0, #0]
 800d426:	f840 3f04 	str.w	r3, [r0, #4]!
 800d42a:	4288      	cmp	r0, r1
 800d42c:	d3f4      	bcc.n	800d418 <L_shift+0xc>
 800d42e:	bd70      	pop	{r4, r5, r6, pc}

0800d430 <__match>:
 800d430:	b530      	push	{r4, r5, lr}
 800d432:	6803      	ldr	r3, [r0, #0]
 800d434:	3301      	adds	r3, #1
 800d436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d43a:	b914      	cbnz	r4, 800d442 <__match+0x12>
 800d43c:	6003      	str	r3, [r0, #0]
 800d43e:	2001      	movs	r0, #1
 800d440:	bd30      	pop	{r4, r5, pc}
 800d442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d446:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d44a:	2d19      	cmp	r5, #25
 800d44c:	bf98      	it	ls
 800d44e:	3220      	addls	r2, #32
 800d450:	42a2      	cmp	r2, r4
 800d452:	d0f0      	beq.n	800d436 <__match+0x6>
 800d454:	2000      	movs	r0, #0
 800d456:	e7f3      	b.n	800d440 <__match+0x10>

0800d458 <__hexnan>:
 800d458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45c:	680b      	ldr	r3, [r1, #0]
 800d45e:	6801      	ldr	r1, [r0, #0]
 800d460:	115e      	asrs	r6, r3, #5
 800d462:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d466:	f013 031f 	ands.w	r3, r3, #31
 800d46a:	b087      	sub	sp, #28
 800d46c:	bf18      	it	ne
 800d46e:	3604      	addne	r6, #4
 800d470:	2500      	movs	r5, #0
 800d472:	1f37      	subs	r7, r6, #4
 800d474:	4682      	mov	sl, r0
 800d476:	4690      	mov	r8, r2
 800d478:	9301      	str	r3, [sp, #4]
 800d47a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d47e:	46b9      	mov	r9, r7
 800d480:	463c      	mov	r4, r7
 800d482:	9502      	str	r5, [sp, #8]
 800d484:	46ab      	mov	fp, r5
 800d486:	784a      	ldrb	r2, [r1, #1]
 800d488:	1c4b      	adds	r3, r1, #1
 800d48a:	9303      	str	r3, [sp, #12]
 800d48c:	b342      	cbz	r2, 800d4e0 <__hexnan+0x88>
 800d48e:	4610      	mov	r0, r2
 800d490:	9105      	str	r1, [sp, #20]
 800d492:	9204      	str	r2, [sp, #16]
 800d494:	f7ff fd94 	bl	800cfc0 <__hexdig_fun>
 800d498:	2800      	cmp	r0, #0
 800d49a:	d151      	bne.n	800d540 <__hexnan+0xe8>
 800d49c:	9a04      	ldr	r2, [sp, #16]
 800d49e:	9905      	ldr	r1, [sp, #20]
 800d4a0:	2a20      	cmp	r2, #32
 800d4a2:	d818      	bhi.n	800d4d6 <__hexnan+0x7e>
 800d4a4:	9b02      	ldr	r3, [sp, #8]
 800d4a6:	459b      	cmp	fp, r3
 800d4a8:	dd13      	ble.n	800d4d2 <__hexnan+0x7a>
 800d4aa:	454c      	cmp	r4, r9
 800d4ac:	d206      	bcs.n	800d4bc <__hexnan+0x64>
 800d4ae:	2d07      	cmp	r5, #7
 800d4b0:	dc04      	bgt.n	800d4bc <__hexnan+0x64>
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f7ff ffa8 	bl	800d40c <L_shift>
 800d4bc:	4544      	cmp	r4, r8
 800d4be:	d952      	bls.n	800d566 <__hexnan+0x10e>
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f1a4 0904 	sub.w	r9, r4, #4
 800d4c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4ca:	f8cd b008 	str.w	fp, [sp, #8]
 800d4ce:	464c      	mov	r4, r9
 800d4d0:	461d      	mov	r5, r3
 800d4d2:	9903      	ldr	r1, [sp, #12]
 800d4d4:	e7d7      	b.n	800d486 <__hexnan+0x2e>
 800d4d6:	2a29      	cmp	r2, #41	@ 0x29
 800d4d8:	d157      	bne.n	800d58a <__hexnan+0x132>
 800d4da:	3102      	adds	r1, #2
 800d4dc:	f8ca 1000 	str.w	r1, [sl]
 800d4e0:	f1bb 0f00 	cmp.w	fp, #0
 800d4e4:	d051      	beq.n	800d58a <__hexnan+0x132>
 800d4e6:	454c      	cmp	r4, r9
 800d4e8:	d206      	bcs.n	800d4f8 <__hexnan+0xa0>
 800d4ea:	2d07      	cmp	r5, #7
 800d4ec:	dc04      	bgt.n	800d4f8 <__hexnan+0xa0>
 800d4ee:	462a      	mov	r2, r5
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f7ff ff8a 	bl	800d40c <L_shift>
 800d4f8:	4544      	cmp	r4, r8
 800d4fa:	d936      	bls.n	800d56a <__hexnan+0x112>
 800d4fc:	f1a8 0204 	sub.w	r2, r8, #4
 800d500:	4623      	mov	r3, r4
 800d502:	f853 1b04 	ldr.w	r1, [r3], #4
 800d506:	f842 1f04 	str.w	r1, [r2, #4]!
 800d50a:	429f      	cmp	r7, r3
 800d50c:	d2f9      	bcs.n	800d502 <__hexnan+0xaa>
 800d50e:	1b3b      	subs	r3, r7, r4
 800d510:	f023 0303 	bic.w	r3, r3, #3
 800d514:	3304      	adds	r3, #4
 800d516:	3401      	adds	r4, #1
 800d518:	3e03      	subs	r6, #3
 800d51a:	42b4      	cmp	r4, r6
 800d51c:	bf88      	it	hi
 800d51e:	2304      	movhi	r3, #4
 800d520:	4443      	add	r3, r8
 800d522:	2200      	movs	r2, #0
 800d524:	f843 2b04 	str.w	r2, [r3], #4
 800d528:	429f      	cmp	r7, r3
 800d52a:	d2fb      	bcs.n	800d524 <__hexnan+0xcc>
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	b91b      	cbnz	r3, 800d538 <__hexnan+0xe0>
 800d530:	4547      	cmp	r7, r8
 800d532:	d128      	bne.n	800d586 <__hexnan+0x12e>
 800d534:	2301      	movs	r3, #1
 800d536:	603b      	str	r3, [r7, #0]
 800d538:	2005      	movs	r0, #5
 800d53a:	b007      	add	sp, #28
 800d53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d540:	3501      	adds	r5, #1
 800d542:	2d08      	cmp	r5, #8
 800d544:	f10b 0b01 	add.w	fp, fp, #1
 800d548:	dd06      	ble.n	800d558 <__hexnan+0x100>
 800d54a:	4544      	cmp	r4, r8
 800d54c:	d9c1      	bls.n	800d4d2 <__hexnan+0x7a>
 800d54e:	2300      	movs	r3, #0
 800d550:	f844 3c04 	str.w	r3, [r4, #-4]
 800d554:	2501      	movs	r5, #1
 800d556:	3c04      	subs	r4, #4
 800d558:	6822      	ldr	r2, [r4, #0]
 800d55a:	f000 000f 	and.w	r0, r0, #15
 800d55e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d562:	6020      	str	r0, [r4, #0]
 800d564:	e7b5      	b.n	800d4d2 <__hexnan+0x7a>
 800d566:	2508      	movs	r5, #8
 800d568:	e7b3      	b.n	800d4d2 <__hexnan+0x7a>
 800d56a:	9b01      	ldr	r3, [sp, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d0dd      	beq.n	800d52c <__hexnan+0xd4>
 800d570:	f1c3 0320 	rsb	r3, r3, #32
 800d574:	f04f 32ff 	mov.w	r2, #4294967295
 800d578:	40da      	lsrs	r2, r3
 800d57a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d57e:	4013      	ands	r3, r2
 800d580:	f846 3c04 	str.w	r3, [r6, #-4]
 800d584:	e7d2      	b.n	800d52c <__hexnan+0xd4>
 800d586:	3f04      	subs	r7, #4
 800d588:	e7d0      	b.n	800d52c <__hexnan+0xd4>
 800d58a:	2004      	movs	r0, #4
 800d58c:	e7d5      	b.n	800d53a <__hexnan+0xe2>

0800d58e <__ascii_mbtowc>:
 800d58e:	b082      	sub	sp, #8
 800d590:	b901      	cbnz	r1, 800d594 <__ascii_mbtowc+0x6>
 800d592:	a901      	add	r1, sp, #4
 800d594:	b142      	cbz	r2, 800d5a8 <__ascii_mbtowc+0x1a>
 800d596:	b14b      	cbz	r3, 800d5ac <__ascii_mbtowc+0x1e>
 800d598:	7813      	ldrb	r3, [r2, #0]
 800d59a:	600b      	str	r3, [r1, #0]
 800d59c:	7812      	ldrb	r2, [r2, #0]
 800d59e:	1e10      	subs	r0, r2, #0
 800d5a0:	bf18      	it	ne
 800d5a2:	2001      	movne	r0, #1
 800d5a4:	b002      	add	sp, #8
 800d5a6:	4770      	bx	lr
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	e7fb      	b.n	800d5a4 <__ascii_mbtowc+0x16>
 800d5ac:	f06f 0001 	mvn.w	r0, #1
 800d5b0:	e7f8      	b.n	800d5a4 <__ascii_mbtowc+0x16>
	...

0800d5b4 <_Balloc>:
 800d5b4:	b570      	push	{r4, r5, r6, lr}
 800d5b6:	69c6      	ldr	r6, [r0, #28]
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	460d      	mov	r5, r1
 800d5bc:	b976      	cbnz	r6, 800d5dc <_Balloc+0x28>
 800d5be:	2010      	movs	r0, #16
 800d5c0:	f7fe faca 	bl	800bb58 <malloc>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	61e0      	str	r0, [r4, #28]
 800d5c8:	b920      	cbnz	r0, 800d5d4 <_Balloc+0x20>
 800d5ca:	4b18      	ldr	r3, [pc, #96]	@ (800d62c <_Balloc+0x78>)
 800d5cc:	4818      	ldr	r0, [pc, #96]	@ (800d630 <_Balloc+0x7c>)
 800d5ce:	216b      	movs	r1, #107	@ 0x6b
 800d5d0:	f001 fbf0 	bl	800edb4 <__assert_func>
 800d5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5d8:	6006      	str	r6, [r0, #0]
 800d5da:	60c6      	str	r6, [r0, #12]
 800d5dc:	69e6      	ldr	r6, [r4, #28]
 800d5de:	68f3      	ldr	r3, [r6, #12]
 800d5e0:	b183      	cbz	r3, 800d604 <_Balloc+0x50>
 800d5e2:	69e3      	ldr	r3, [r4, #28]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5ea:	b9b8      	cbnz	r0, 800d61c <_Balloc+0x68>
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	fa01 f605 	lsl.w	r6, r1, r5
 800d5f2:	1d72      	adds	r2, r6, #5
 800d5f4:	0092      	lsls	r2, r2, #2
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f001 fbfa 	bl	800edf0 <_calloc_r>
 800d5fc:	b160      	cbz	r0, 800d618 <_Balloc+0x64>
 800d5fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d602:	e00e      	b.n	800d622 <_Balloc+0x6e>
 800d604:	2221      	movs	r2, #33	@ 0x21
 800d606:	2104      	movs	r1, #4
 800d608:	4620      	mov	r0, r4
 800d60a:	f001 fbf1 	bl	800edf0 <_calloc_r>
 800d60e:	69e3      	ldr	r3, [r4, #28]
 800d610:	60f0      	str	r0, [r6, #12]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1e4      	bne.n	800d5e2 <_Balloc+0x2e>
 800d618:	2000      	movs	r0, #0
 800d61a:	bd70      	pop	{r4, r5, r6, pc}
 800d61c:	6802      	ldr	r2, [r0, #0]
 800d61e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d622:	2300      	movs	r3, #0
 800d624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d628:	e7f7      	b.n	800d61a <_Balloc+0x66>
 800d62a:	bf00      	nop
 800d62c:	0800f972 	.word	0x0800f972
 800d630:	0800f989 	.word	0x0800f989

0800d634 <_Bfree>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	69c6      	ldr	r6, [r0, #28]
 800d638:	4605      	mov	r5, r0
 800d63a:	460c      	mov	r4, r1
 800d63c:	b976      	cbnz	r6, 800d65c <_Bfree+0x28>
 800d63e:	2010      	movs	r0, #16
 800d640:	f7fe fa8a 	bl	800bb58 <malloc>
 800d644:	4602      	mov	r2, r0
 800d646:	61e8      	str	r0, [r5, #28]
 800d648:	b920      	cbnz	r0, 800d654 <_Bfree+0x20>
 800d64a:	4b09      	ldr	r3, [pc, #36]	@ (800d670 <_Bfree+0x3c>)
 800d64c:	4809      	ldr	r0, [pc, #36]	@ (800d674 <_Bfree+0x40>)
 800d64e:	218f      	movs	r1, #143	@ 0x8f
 800d650:	f001 fbb0 	bl	800edb4 <__assert_func>
 800d654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d658:	6006      	str	r6, [r0, #0]
 800d65a:	60c6      	str	r6, [r0, #12]
 800d65c:	b13c      	cbz	r4, 800d66e <_Bfree+0x3a>
 800d65e:	69eb      	ldr	r3, [r5, #28]
 800d660:	6862      	ldr	r2, [r4, #4]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d668:	6021      	str	r1, [r4, #0]
 800d66a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d66e:	bd70      	pop	{r4, r5, r6, pc}
 800d670:	0800f972 	.word	0x0800f972
 800d674:	0800f989 	.word	0x0800f989

0800d678 <__multadd>:
 800d678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d67c:	690d      	ldr	r5, [r1, #16]
 800d67e:	4607      	mov	r7, r0
 800d680:	460c      	mov	r4, r1
 800d682:	461e      	mov	r6, r3
 800d684:	f101 0c14 	add.w	ip, r1, #20
 800d688:	2000      	movs	r0, #0
 800d68a:	f8dc 3000 	ldr.w	r3, [ip]
 800d68e:	b299      	uxth	r1, r3
 800d690:	fb02 6101 	mla	r1, r2, r1, r6
 800d694:	0c1e      	lsrs	r6, r3, #16
 800d696:	0c0b      	lsrs	r3, r1, #16
 800d698:	fb02 3306 	mla	r3, r2, r6, r3
 800d69c:	b289      	uxth	r1, r1
 800d69e:	3001      	adds	r0, #1
 800d6a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6a4:	4285      	cmp	r5, r0
 800d6a6:	f84c 1b04 	str.w	r1, [ip], #4
 800d6aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6ae:	dcec      	bgt.n	800d68a <__multadd+0x12>
 800d6b0:	b30e      	cbz	r6, 800d6f6 <__multadd+0x7e>
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	42ab      	cmp	r3, r5
 800d6b6:	dc19      	bgt.n	800d6ec <__multadd+0x74>
 800d6b8:	6861      	ldr	r1, [r4, #4]
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	3101      	adds	r1, #1
 800d6be:	f7ff ff79 	bl	800d5b4 <_Balloc>
 800d6c2:	4680      	mov	r8, r0
 800d6c4:	b928      	cbnz	r0, 800d6d2 <__multadd+0x5a>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	4b0c      	ldr	r3, [pc, #48]	@ (800d6fc <__multadd+0x84>)
 800d6ca:	480d      	ldr	r0, [pc, #52]	@ (800d700 <__multadd+0x88>)
 800d6cc:	21ba      	movs	r1, #186	@ 0xba
 800d6ce:	f001 fb71 	bl	800edb4 <__assert_func>
 800d6d2:	6922      	ldr	r2, [r4, #16]
 800d6d4:	3202      	adds	r2, #2
 800d6d6:	f104 010c 	add.w	r1, r4, #12
 800d6da:	0092      	lsls	r2, r2, #2
 800d6dc:	300c      	adds	r0, #12
 800d6de:	f7ff fbbc 	bl	800ce5a <memcpy>
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	f7ff ffa5 	bl	800d634 <_Bfree>
 800d6ea:	4644      	mov	r4, r8
 800d6ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6f0:	3501      	adds	r5, #1
 800d6f2:	615e      	str	r6, [r3, #20]
 800d6f4:	6125      	str	r5, [r4, #16]
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fc:	0800f901 	.word	0x0800f901
 800d700:	0800f989 	.word	0x0800f989

0800d704 <__s2b>:
 800d704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d708:	460c      	mov	r4, r1
 800d70a:	4615      	mov	r5, r2
 800d70c:	461f      	mov	r7, r3
 800d70e:	2209      	movs	r2, #9
 800d710:	3308      	adds	r3, #8
 800d712:	4606      	mov	r6, r0
 800d714:	fb93 f3f2 	sdiv	r3, r3, r2
 800d718:	2100      	movs	r1, #0
 800d71a:	2201      	movs	r2, #1
 800d71c:	429a      	cmp	r2, r3
 800d71e:	db09      	blt.n	800d734 <__s2b+0x30>
 800d720:	4630      	mov	r0, r6
 800d722:	f7ff ff47 	bl	800d5b4 <_Balloc>
 800d726:	b940      	cbnz	r0, 800d73a <__s2b+0x36>
 800d728:	4602      	mov	r2, r0
 800d72a:	4b19      	ldr	r3, [pc, #100]	@ (800d790 <__s2b+0x8c>)
 800d72c:	4819      	ldr	r0, [pc, #100]	@ (800d794 <__s2b+0x90>)
 800d72e:	21d3      	movs	r1, #211	@ 0xd3
 800d730:	f001 fb40 	bl	800edb4 <__assert_func>
 800d734:	0052      	lsls	r2, r2, #1
 800d736:	3101      	adds	r1, #1
 800d738:	e7f0      	b.n	800d71c <__s2b+0x18>
 800d73a:	9b08      	ldr	r3, [sp, #32]
 800d73c:	6143      	str	r3, [r0, #20]
 800d73e:	2d09      	cmp	r5, #9
 800d740:	f04f 0301 	mov.w	r3, #1
 800d744:	6103      	str	r3, [r0, #16]
 800d746:	dd16      	ble.n	800d776 <__s2b+0x72>
 800d748:	f104 0909 	add.w	r9, r4, #9
 800d74c:	46c8      	mov	r8, r9
 800d74e:	442c      	add	r4, r5
 800d750:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d754:	4601      	mov	r1, r0
 800d756:	3b30      	subs	r3, #48	@ 0x30
 800d758:	220a      	movs	r2, #10
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7ff ff8c 	bl	800d678 <__multadd>
 800d760:	45a0      	cmp	r8, r4
 800d762:	d1f5      	bne.n	800d750 <__s2b+0x4c>
 800d764:	f1a5 0408 	sub.w	r4, r5, #8
 800d768:	444c      	add	r4, r9
 800d76a:	1b2d      	subs	r5, r5, r4
 800d76c:	1963      	adds	r3, r4, r5
 800d76e:	42bb      	cmp	r3, r7
 800d770:	db04      	blt.n	800d77c <__s2b+0x78>
 800d772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d776:	340a      	adds	r4, #10
 800d778:	2509      	movs	r5, #9
 800d77a:	e7f6      	b.n	800d76a <__s2b+0x66>
 800d77c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d780:	4601      	mov	r1, r0
 800d782:	3b30      	subs	r3, #48	@ 0x30
 800d784:	220a      	movs	r2, #10
 800d786:	4630      	mov	r0, r6
 800d788:	f7ff ff76 	bl	800d678 <__multadd>
 800d78c:	e7ee      	b.n	800d76c <__s2b+0x68>
 800d78e:	bf00      	nop
 800d790:	0800f901 	.word	0x0800f901
 800d794:	0800f989 	.word	0x0800f989

0800d798 <__hi0bits>:
 800d798:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d79c:	4603      	mov	r3, r0
 800d79e:	bf36      	itet	cc
 800d7a0:	0403      	lslcc	r3, r0, #16
 800d7a2:	2000      	movcs	r0, #0
 800d7a4:	2010      	movcc	r0, #16
 800d7a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d7aa:	bf3c      	itt	cc
 800d7ac:	021b      	lslcc	r3, r3, #8
 800d7ae:	3008      	addcc	r0, #8
 800d7b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7b4:	bf3c      	itt	cc
 800d7b6:	011b      	lslcc	r3, r3, #4
 800d7b8:	3004      	addcc	r0, #4
 800d7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7be:	bf3c      	itt	cc
 800d7c0:	009b      	lslcc	r3, r3, #2
 800d7c2:	3002      	addcc	r0, #2
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	db05      	blt.n	800d7d4 <__hi0bits+0x3c>
 800d7c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d7cc:	f100 0001 	add.w	r0, r0, #1
 800d7d0:	bf08      	it	eq
 800d7d2:	2020      	moveq	r0, #32
 800d7d4:	4770      	bx	lr

0800d7d6 <__lo0bits>:
 800d7d6:	6803      	ldr	r3, [r0, #0]
 800d7d8:	4602      	mov	r2, r0
 800d7da:	f013 0007 	ands.w	r0, r3, #7
 800d7de:	d00b      	beq.n	800d7f8 <__lo0bits+0x22>
 800d7e0:	07d9      	lsls	r1, r3, #31
 800d7e2:	d421      	bmi.n	800d828 <__lo0bits+0x52>
 800d7e4:	0798      	lsls	r0, r3, #30
 800d7e6:	bf49      	itett	mi
 800d7e8:	085b      	lsrmi	r3, r3, #1
 800d7ea:	089b      	lsrpl	r3, r3, #2
 800d7ec:	2001      	movmi	r0, #1
 800d7ee:	6013      	strmi	r3, [r2, #0]
 800d7f0:	bf5c      	itt	pl
 800d7f2:	6013      	strpl	r3, [r2, #0]
 800d7f4:	2002      	movpl	r0, #2
 800d7f6:	4770      	bx	lr
 800d7f8:	b299      	uxth	r1, r3
 800d7fa:	b909      	cbnz	r1, 800d800 <__lo0bits+0x2a>
 800d7fc:	0c1b      	lsrs	r3, r3, #16
 800d7fe:	2010      	movs	r0, #16
 800d800:	b2d9      	uxtb	r1, r3
 800d802:	b909      	cbnz	r1, 800d808 <__lo0bits+0x32>
 800d804:	3008      	adds	r0, #8
 800d806:	0a1b      	lsrs	r3, r3, #8
 800d808:	0719      	lsls	r1, r3, #28
 800d80a:	bf04      	itt	eq
 800d80c:	091b      	lsreq	r3, r3, #4
 800d80e:	3004      	addeq	r0, #4
 800d810:	0799      	lsls	r1, r3, #30
 800d812:	bf04      	itt	eq
 800d814:	089b      	lsreq	r3, r3, #2
 800d816:	3002      	addeq	r0, #2
 800d818:	07d9      	lsls	r1, r3, #31
 800d81a:	d403      	bmi.n	800d824 <__lo0bits+0x4e>
 800d81c:	085b      	lsrs	r3, r3, #1
 800d81e:	f100 0001 	add.w	r0, r0, #1
 800d822:	d003      	beq.n	800d82c <__lo0bits+0x56>
 800d824:	6013      	str	r3, [r2, #0]
 800d826:	4770      	bx	lr
 800d828:	2000      	movs	r0, #0
 800d82a:	4770      	bx	lr
 800d82c:	2020      	movs	r0, #32
 800d82e:	4770      	bx	lr

0800d830 <__i2b>:
 800d830:	b510      	push	{r4, lr}
 800d832:	460c      	mov	r4, r1
 800d834:	2101      	movs	r1, #1
 800d836:	f7ff febd 	bl	800d5b4 <_Balloc>
 800d83a:	4602      	mov	r2, r0
 800d83c:	b928      	cbnz	r0, 800d84a <__i2b+0x1a>
 800d83e:	4b05      	ldr	r3, [pc, #20]	@ (800d854 <__i2b+0x24>)
 800d840:	4805      	ldr	r0, [pc, #20]	@ (800d858 <__i2b+0x28>)
 800d842:	f240 1145 	movw	r1, #325	@ 0x145
 800d846:	f001 fab5 	bl	800edb4 <__assert_func>
 800d84a:	2301      	movs	r3, #1
 800d84c:	6144      	str	r4, [r0, #20]
 800d84e:	6103      	str	r3, [r0, #16]
 800d850:	bd10      	pop	{r4, pc}
 800d852:	bf00      	nop
 800d854:	0800f901 	.word	0x0800f901
 800d858:	0800f989 	.word	0x0800f989

0800d85c <__multiply>:
 800d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	4614      	mov	r4, r2
 800d862:	690a      	ldr	r2, [r1, #16]
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	429a      	cmp	r2, r3
 800d868:	bfa8      	it	ge
 800d86a:	4623      	movge	r3, r4
 800d86c:	460f      	mov	r7, r1
 800d86e:	bfa4      	itt	ge
 800d870:	460c      	movge	r4, r1
 800d872:	461f      	movge	r7, r3
 800d874:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d878:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d87c:	68a3      	ldr	r3, [r4, #8]
 800d87e:	6861      	ldr	r1, [r4, #4]
 800d880:	eb0a 0609 	add.w	r6, sl, r9
 800d884:	42b3      	cmp	r3, r6
 800d886:	b085      	sub	sp, #20
 800d888:	bfb8      	it	lt
 800d88a:	3101      	addlt	r1, #1
 800d88c:	f7ff fe92 	bl	800d5b4 <_Balloc>
 800d890:	b930      	cbnz	r0, 800d8a0 <__multiply+0x44>
 800d892:	4602      	mov	r2, r0
 800d894:	4b44      	ldr	r3, [pc, #272]	@ (800d9a8 <__multiply+0x14c>)
 800d896:	4845      	ldr	r0, [pc, #276]	@ (800d9ac <__multiply+0x150>)
 800d898:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d89c:	f001 fa8a 	bl	800edb4 <__assert_func>
 800d8a0:	f100 0514 	add.w	r5, r0, #20
 800d8a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8a8:	462b      	mov	r3, r5
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	4543      	cmp	r3, r8
 800d8ae:	d321      	bcc.n	800d8f4 <__multiply+0x98>
 800d8b0:	f107 0114 	add.w	r1, r7, #20
 800d8b4:	f104 0214 	add.w	r2, r4, #20
 800d8b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d8bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d8c0:	9302      	str	r3, [sp, #8]
 800d8c2:	1b13      	subs	r3, r2, r4
 800d8c4:	3b15      	subs	r3, #21
 800d8c6:	f023 0303 	bic.w	r3, r3, #3
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	f104 0715 	add.w	r7, r4, #21
 800d8d0:	42ba      	cmp	r2, r7
 800d8d2:	bf38      	it	cc
 800d8d4:	2304      	movcc	r3, #4
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	9b02      	ldr	r3, [sp, #8]
 800d8da:	9103      	str	r1, [sp, #12]
 800d8dc:	428b      	cmp	r3, r1
 800d8de:	d80c      	bhi.n	800d8fa <__multiply+0x9e>
 800d8e0:	2e00      	cmp	r6, #0
 800d8e2:	dd03      	ble.n	800d8ec <__multiply+0x90>
 800d8e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d05b      	beq.n	800d9a4 <__multiply+0x148>
 800d8ec:	6106      	str	r6, [r0, #16]
 800d8ee:	b005      	add	sp, #20
 800d8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f4:	f843 2b04 	str.w	r2, [r3], #4
 800d8f8:	e7d8      	b.n	800d8ac <__multiply+0x50>
 800d8fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8fe:	f1ba 0f00 	cmp.w	sl, #0
 800d902:	d024      	beq.n	800d94e <__multiply+0xf2>
 800d904:	f104 0e14 	add.w	lr, r4, #20
 800d908:	46a9      	mov	r9, r5
 800d90a:	f04f 0c00 	mov.w	ip, #0
 800d90e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d912:	f8d9 3000 	ldr.w	r3, [r9]
 800d916:	fa1f fb87 	uxth.w	fp, r7
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d920:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d924:	f8d9 7000 	ldr.w	r7, [r9]
 800d928:	4463      	add	r3, ip
 800d92a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d92e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d932:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d936:	b29b      	uxth	r3, r3
 800d938:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d93c:	4572      	cmp	r2, lr
 800d93e:	f849 3b04 	str.w	r3, [r9], #4
 800d942:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d946:	d8e2      	bhi.n	800d90e <__multiply+0xb2>
 800d948:	9b01      	ldr	r3, [sp, #4]
 800d94a:	f845 c003 	str.w	ip, [r5, r3]
 800d94e:	9b03      	ldr	r3, [sp, #12]
 800d950:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d954:	3104      	adds	r1, #4
 800d956:	f1b9 0f00 	cmp.w	r9, #0
 800d95a:	d021      	beq.n	800d9a0 <__multiply+0x144>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	f104 0c14 	add.w	ip, r4, #20
 800d962:	46ae      	mov	lr, r5
 800d964:	f04f 0a00 	mov.w	sl, #0
 800d968:	f8bc b000 	ldrh.w	fp, [ip]
 800d96c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d970:	fb09 770b 	mla	r7, r9, fp, r7
 800d974:	4457      	add	r7, sl
 800d976:	b29b      	uxth	r3, r3
 800d978:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d97c:	f84e 3b04 	str.w	r3, [lr], #4
 800d980:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d988:	f8be 3000 	ldrh.w	r3, [lr]
 800d98c:	fb09 330a 	mla	r3, r9, sl, r3
 800d990:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d994:	4562      	cmp	r2, ip
 800d996:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d99a:	d8e5      	bhi.n	800d968 <__multiply+0x10c>
 800d99c:	9f01      	ldr	r7, [sp, #4]
 800d99e:	51eb      	str	r3, [r5, r7]
 800d9a0:	3504      	adds	r5, #4
 800d9a2:	e799      	b.n	800d8d8 <__multiply+0x7c>
 800d9a4:	3e01      	subs	r6, #1
 800d9a6:	e79b      	b.n	800d8e0 <__multiply+0x84>
 800d9a8:	0800f901 	.word	0x0800f901
 800d9ac:	0800f989 	.word	0x0800f989

0800d9b0 <__pow5mult>:
 800d9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9b4:	4615      	mov	r5, r2
 800d9b6:	f012 0203 	ands.w	r2, r2, #3
 800d9ba:	4607      	mov	r7, r0
 800d9bc:	460e      	mov	r6, r1
 800d9be:	d007      	beq.n	800d9d0 <__pow5mult+0x20>
 800d9c0:	4c25      	ldr	r4, [pc, #148]	@ (800da58 <__pow5mult+0xa8>)
 800d9c2:	3a01      	subs	r2, #1
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9ca:	f7ff fe55 	bl	800d678 <__multadd>
 800d9ce:	4606      	mov	r6, r0
 800d9d0:	10ad      	asrs	r5, r5, #2
 800d9d2:	d03d      	beq.n	800da50 <__pow5mult+0xa0>
 800d9d4:	69fc      	ldr	r4, [r7, #28]
 800d9d6:	b97c      	cbnz	r4, 800d9f8 <__pow5mult+0x48>
 800d9d8:	2010      	movs	r0, #16
 800d9da:	f7fe f8bd 	bl	800bb58 <malloc>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	61f8      	str	r0, [r7, #28]
 800d9e2:	b928      	cbnz	r0, 800d9f0 <__pow5mult+0x40>
 800d9e4:	4b1d      	ldr	r3, [pc, #116]	@ (800da5c <__pow5mult+0xac>)
 800d9e6:	481e      	ldr	r0, [pc, #120]	@ (800da60 <__pow5mult+0xb0>)
 800d9e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d9ec:	f001 f9e2 	bl	800edb4 <__assert_func>
 800d9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9f4:	6004      	str	r4, [r0, #0]
 800d9f6:	60c4      	str	r4, [r0, #12]
 800d9f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da00:	b94c      	cbnz	r4, 800da16 <__pow5mult+0x66>
 800da02:	f240 2171 	movw	r1, #625	@ 0x271
 800da06:	4638      	mov	r0, r7
 800da08:	f7ff ff12 	bl	800d830 <__i2b>
 800da0c:	2300      	movs	r3, #0
 800da0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800da12:	4604      	mov	r4, r0
 800da14:	6003      	str	r3, [r0, #0]
 800da16:	f04f 0900 	mov.w	r9, #0
 800da1a:	07eb      	lsls	r3, r5, #31
 800da1c:	d50a      	bpl.n	800da34 <__pow5mult+0x84>
 800da1e:	4631      	mov	r1, r6
 800da20:	4622      	mov	r2, r4
 800da22:	4638      	mov	r0, r7
 800da24:	f7ff ff1a 	bl	800d85c <__multiply>
 800da28:	4631      	mov	r1, r6
 800da2a:	4680      	mov	r8, r0
 800da2c:	4638      	mov	r0, r7
 800da2e:	f7ff fe01 	bl	800d634 <_Bfree>
 800da32:	4646      	mov	r6, r8
 800da34:	106d      	asrs	r5, r5, #1
 800da36:	d00b      	beq.n	800da50 <__pow5mult+0xa0>
 800da38:	6820      	ldr	r0, [r4, #0]
 800da3a:	b938      	cbnz	r0, 800da4c <__pow5mult+0x9c>
 800da3c:	4622      	mov	r2, r4
 800da3e:	4621      	mov	r1, r4
 800da40:	4638      	mov	r0, r7
 800da42:	f7ff ff0b 	bl	800d85c <__multiply>
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	f8c0 9000 	str.w	r9, [r0]
 800da4c:	4604      	mov	r4, r0
 800da4e:	e7e4      	b.n	800da1a <__pow5mult+0x6a>
 800da50:	4630      	mov	r0, r6
 800da52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da56:	bf00      	nop
 800da58:	0800f9e4 	.word	0x0800f9e4
 800da5c:	0800f972 	.word	0x0800f972
 800da60:	0800f989 	.word	0x0800f989

0800da64 <__lshift>:
 800da64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da68:	460c      	mov	r4, r1
 800da6a:	6849      	ldr	r1, [r1, #4]
 800da6c:	6923      	ldr	r3, [r4, #16]
 800da6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da72:	68a3      	ldr	r3, [r4, #8]
 800da74:	4607      	mov	r7, r0
 800da76:	4691      	mov	r9, r2
 800da78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da7c:	f108 0601 	add.w	r6, r8, #1
 800da80:	42b3      	cmp	r3, r6
 800da82:	db0b      	blt.n	800da9c <__lshift+0x38>
 800da84:	4638      	mov	r0, r7
 800da86:	f7ff fd95 	bl	800d5b4 <_Balloc>
 800da8a:	4605      	mov	r5, r0
 800da8c:	b948      	cbnz	r0, 800daa2 <__lshift+0x3e>
 800da8e:	4602      	mov	r2, r0
 800da90:	4b28      	ldr	r3, [pc, #160]	@ (800db34 <__lshift+0xd0>)
 800da92:	4829      	ldr	r0, [pc, #164]	@ (800db38 <__lshift+0xd4>)
 800da94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da98:	f001 f98c 	bl	800edb4 <__assert_func>
 800da9c:	3101      	adds	r1, #1
 800da9e:	005b      	lsls	r3, r3, #1
 800daa0:	e7ee      	b.n	800da80 <__lshift+0x1c>
 800daa2:	2300      	movs	r3, #0
 800daa4:	f100 0114 	add.w	r1, r0, #20
 800daa8:	f100 0210 	add.w	r2, r0, #16
 800daac:	4618      	mov	r0, r3
 800daae:	4553      	cmp	r3, sl
 800dab0:	db33      	blt.n	800db1a <__lshift+0xb6>
 800dab2:	6920      	ldr	r0, [r4, #16]
 800dab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dab8:	f104 0314 	add.w	r3, r4, #20
 800dabc:	f019 091f 	ands.w	r9, r9, #31
 800dac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dac8:	d02b      	beq.n	800db22 <__lshift+0xbe>
 800daca:	f1c9 0e20 	rsb	lr, r9, #32
 800dace:	468a      	mov	sl, r1
 800dad0:	2200      	movs	r2, #0
 800dad2:	6818      	ldr	r0, [r3, #0]
 800dad4:	fa00 f009 	lsl.w	r0, r0, r9
 800dad8:	4310      	orrs	r0, r2
 800dada:	f84a 0b04 	str.w	r0, [sl], #4
 800dade:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae2:	459c      	cmp	ip, r3
 800dae4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dae8:	d8f3      	bhi.n	800dad2 <__lshift+0x6e>
 800daea:	ebac 0304 	sub.w	r3, ip, r4
 800daee:	3b15      	subs	r3, #21
 800daf0:	f023 0303 	bic.w	r3, r3, #3
 800daf4:	3304      	adds	r3, #4
 800daf6:	f104 0015 	add.w	r0, r4, #21
 800dafa:	4584      	cmp	ip, r0
 800dafc:	bf38      	it	cc
 800dafe:	2304      	movcc	r3, #4
 800db00:	50ca      	str	r2, [r1, r3]
 800db02:	b10a      	cbz	r2, 800db08 <__lshift+0xa4>
 800db04:	f108 0602 	add.w	r6, r8, #2
 800db08:	3e01      	subs	r6, #1
 800db0a:	4638      	mov	r0, r7
 800db0c:	612e      	str	r6, [r5, #16]
 800db0e:	4621      	mov	r1, r4
 800db10:	f7ff fd90 	bl	800d634 <_Bfree>
 800db14:	4628      	mov	r0, r5
 800db16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800db1e:	3301      	adds	r3, #1
 800db20:	e7c5      	b.n	800daae <__lshift+0x4a>
 800db22:	3904      	subs	r1, #4
 800db24:	f853 2b04 	ldr.w	r2, [r3], #4
 800db28:	f841 2f04 	str.w	r2, [r1, #4]!
 800db2c:	459c      	cmp	ip, r3
 800db2e:	d8f9      	bhi.n	800db24 <__lshift+0xc0>
 800db30:	e7ea      	b.n	800db08 <__lshift+0xa4>
 800db32:	bf00      	nop
 800db34:	0800f901 	.word	0x0800f901
 800db38:	0800f989 	.word	0x0800f989

0800db3c <__mcmp>:
 800db3c:	690a      	ldr	r2, [r1, #16]
 800db3e:	4603      	mov	r3, r0
 800db40:	6900      	ldr	r0, [r0, #16]
 800db42:	1a80      	subs	r0, r0, r2
 800db44:	b530      	push	{r4, r5, lr}
 800db46:	d10e      	bne.n	800db66 <__mcmp+0x2a>
 800db48:	3314      	adds	r3, #20
 800db4a:	3114      	adds	r1, #20
 800db4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db5c:	4295      	cmp	r5, r2
 800db5e:	d003      	beq.n	800db68 <__mcmp+0x2c>
 800db60:	d205      	bcs.n	800db6e <__mcmp+0x32>
 800db62:	f04f 30ff 	mov.w	r0, #4294967295
 800db66:	bd30      	pop	{r4, r5, pc}
 800db68:	42a3      	cmp	r3, r4
 800db6a:	d3f3      	bcc.n	800db54 <__mcmp+0x18>
 800db6c:	e7fb      	b.n	800db66 <__mcmp+0x2a>
 800db6e:	2001      	movs	r0, #1
 800db70:	e7f9      	b.n	800db66 <__mcmp+0x2a>
	...

0800db74 <__mdiff>:
 800db74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db78:	4689      	mov	r9, r1
 800db7a:	4606      	mov	r6, r0
 800db7c:	4611      	mov	r1, r2
 800db7e:	4648      	mov	r0, r9
 800db80:	4614      	mov	r4, r2
 800db82:	f7ff ffdb 	bl	800db3c <__mcmp>
 800db86:	1e05      	subs	r5, r0, #0
 800db88:	d112      	bne.n	800dbb0 <__mdiff+0x3c>
 800db8a:	4629      	mov	r1, r5
 800db8c:	4630      	mov	r0, r6
 800db8e:	f7ff fd11 	bl	800d5b4 <_Balloc>
 800db92:	4602      	mov	r2, r0
 800db94:	b928      	cbnz	r0, 800dba2 <__mdiff+0x2e>
 800db96:	4b3f      	ldr	r3, [pc, #252]	@ (800dc94 <__mdiff+0x120>)
 800db98:	f240 2137 	movw	r1, #567	@ 0x237
 800db9c:	483e      	ldr	r0, [pc, #248]	@ (800dc98 <__mdiff+0x124>)
 800db9e:	f001 f909 	bl	800edb4 <__assert_func>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dba8:	4610      	mov	r0, r2
 800dbaa:	b003      	add	sp, #12
 800dbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb0:	bfbc      	itt	lt
 800dbb2:	464b      	movlt	r3, r9
 800dbb4:	46a1      	movlt	r9, r4
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dbbc:	bfba      	itte	lt
 800dbbe:	461c      	movlt	r4, r3
 800dbc0:	2501      	movlt	r5, #1
 800dbc2:	2500      	movge	r5, #0
 800dbc4:	f7ff fcf6 	bl	800d5b4 <_Balloc>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	b918      	cbnz	r0, 800dbd4 <__mdiff+0x60>
 800dbcc:	4b31      	ldr	r3, [pc, #196]	@ (800dc94 <__mdiff+0x120>)
 800dbce:	f240 2145 	movw	r1, #581	@ 0x245
 800dbd2:	e7e3      	b.n	800db9c <__mdiff+0x28>
 800dbd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dbd8:	6926      	ldr	r6, [r4, #16]
 800dbda:	60c5      	str	r5, [r0, #12]
 800dbdc:	f109 0310 	add.w	r3, r9, #16
 800dbe0:	f109 0514 	add.w	r5, r9, #20
 800dbe4:	f104 0e14 	add.w	lr, r4, #20
 800dbe8:	f100 0b14 	add.w	fp, r0, #20
 800dbec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dbf0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	46d9      	mov	r9, fp
 800dbf8:	f04f 0c00 	mov.w	ip, #0
 800dbfc:	9b01      	ldr	r3, [sp, #4]
 800dbfe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc02:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc06:	9301      	str	r3, [sp, #4]
 800dc08:	fa1f f38a 	uxth.w	r3, sl
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	b283      	uxth	r3, r0
 800dc10:	1acb      	subs	r3, r1, r3
 800dc12:	0c00      	lsrs	r0, r0, #16
 800dc14:	4463      	add	r3, ip
 800dc16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc24:	4576      	cmp	r6, lr
 800dc26:	f849 3b04 	str.w	r3, [r9], #4
 800dc2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc2e:	d8e5      	bhi.n	800dbfc <__mdiff+0x88>
 800dc30:	1b33      	subs	r3, r6, r4
 800dc32:	3b15      	subs	r3, #21
 800dc34:	f023 0303 	bic.w	r3, r3, #3
 800dc38:	3415      	adds	r4, #21
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	42a6      	cmp	r6, r4
 800dc3e:	bf38      	it	cc
 800dc40:	2304      	movcc	r3, #4
 800dc42:	441d      	add	r5, r3
 800dc44:	445b      	add	r3, fp
 800dc46:	461e      	mov	r6, r3
 800dc48:	462c      	mov	r4, r5
 800dc4a:	4544      	cmp	r4, r8
 800dc4c:	d30e      	bcc.n	800dc6c <__mdiff+0xf8>
 800dc4e:	f108 0103 	add.w	r1, r8, #3
 800dc52:	1b49      	subs	r1, r1, r5
 800dc54:	f021 0103 	bic.w	r1, r1, #3
 800dc58:	3d03      	subs	r5, #3
 800dc5a:	45a8      	cmp	r8, r5
 800dc5c:	bf38      	it	cc
 800dc5e:	2100      	movcc	r1, #0
 800dc60:	440b      	add	r3, r1
 800dc62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc66:	b191      	cbz	r1, 800dc8e <__mdiff+0x11a>
 800dc68:	6117      	str	r7, [r2, #16]
 800dc6a:	e79d      	b.n	800dba8 <__mdiff+0x34>
 800dc6c:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc70:	46e6      	mov	lr, ip
 800dc72:	0c08      	lsrs	r0, r1, #16
 800dc74:	fa1c fc81 	uxtah	ip, ip, r1
 800dc78:	4471      	add	r1, lr
 800dc7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc7e:	b289      	uxth	r1, r1
 800dc80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc84:	f846 1b04 	str.w	r1, [r6], #4
 800dc88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc8c:	e7dd      	b.n	800dc4a <__mdiff+0xd6>
 800dc8e:	3f01      	subs	r7, #1
 800dc90:	e7e7      	b.n	800dc62 <__mdiff+0xee>
 800dc92:	bf00      	nop
 800dc94:	0800f901 	.word	0x0800f901
 800dc98:	0800f989 	.word	0x0800f989

0800dc9c <__ulp>:
 800dc9c:	b082      	sub	sp, #8
 800dc9e:	ed8d 0b00 	vstr	d0, [sp]
 800dca2:	9a01      	ldr	r2, [sp, #4]
 800dca4:	4b0f      	ldr	r3, [pc, #60]	@ (800dce4 <__ulp+0x48>)
 800dca6:	4013      	ands	r3, r2
 800dca8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	dc08      	bgt.n	800dcc2 <__ulp+0x26>
 800dcb0:	425b      	negs	r3, r3
 800dcb2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dcb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dcba:	da04      	bge.n	800dcc6 <__ulp+0x2a>
 800dcbc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dcc0:	4113      	asrs	r3, r2
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	e008      	b.n	800dcd8 <__ulp+0x3c>
 800dcc6:	f1a2 0314 	sub.w	r3, r2, #20
 800dcca:	2b1e      	cmp	r3, #30
 800dccc:	bfda      	itte	le
 800dcce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dcd2:	40da      	lsrle	r2, r3
 800dcd4:	2201      	movgt	r2, #1
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	4619      	mov	r1, r3
 800dcda:	4610      	mov	r0, r2
 800dcdc:	ec41 0b10 	vmov	d0, r0, r1
 800dce0:	b002      	add	sp, #8
 800dce2:	4770      	bx	lr
 800dce4:	7ff00000 	.word	0x7ff00000

0800dce8 <__b2d>:
 800dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcec:	6906      	ldr	r6, [r0, #16]
 800dcee:	f100 0814 	add.w	r8, r0, #20
 800dcf2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dcf6:	1f37      	subs	r7, r6, #4
 800dcf8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	f7ff fd4b 	bl	800d798 <__hi0bits>
 800dd02:	f1c0 0320 	rsb	r3, r0, #32
 800dd06:	280a      	cmp	r0, #10
 800dd08:	600b      	str	r3, [r1, #0]
 800dd0a:	491b      	ldr	r1, [pc, #108]	@ (800dd78 <__b2d+0x90>)
 800dd0c:	dc15      	bgt.n	800dd3a <__b2d+0x52>
 800dd0e:	f1c0 0c0b 	rsb	ip, r0, #11
 800dd12:	fa22 f30c 	lsr.w	r3, r2, ip
 800dd16:	45b8      	cmp	r8, r7
 800dd18:	ea43 0501 	orr.w	r5, r3, r1
 800dd1c:	bf34      	ite	cc
 800dd1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dd22:	2300      	movcs	r3, #0
 800dd24:	3015      	adds	r0, #21
 800dd26:	fa02 f000 	lsl.w	r0, r2, r0
 800dd2a:	fa23 f30c 	lsr.w	r3, r3, ip
 800dd2e:	4303      	orrs	r3, r0
 800dd30:	461c      	mov	r4, r3
 800dd32:	ec45 4b10 	vmov	d0, r4, r5
 800dd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd3a:	45b8      	cmp	r8, r7
 800dd3c:	bf3a      	itte	cc
 800dd3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dd42:	f1a6 0708 	subcc.w	r7, r6, #8
 800dd46:	2300      	movcs	r3, #0
 800dd48:	380b      	subs	r0, #11
 800dd4a:	d012      	beq.n	800dd72 <__b2d+0x8a>
 800dd4c:	f1c0 0120 	rsb	r1, r0, #32
 800dd50:	fa23 f401 	lsr.w	r4, r3, r1
 800dd54:	4082      	lsls	r2, r0
 800dd56:	4322      	orrs	r2, r4
 800dd58:	4547      	cmp	r7, r8
 800dd5a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dd5e:	bf8c      	ite	hi
 800dd60:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dd64:	2200      	movls	r2, #0
 800dd66:	4083      	lsls	r3, r0
 800dd68:	40ca      	lsrs	r2, r1
 800dd6a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	e7de      	b.n	800dd30 <__b2d+0x48>
 800dd72:	ea42 0501 	orr.w	r5, r2, r1
 800dd76:	e7db      	b.n	800dd30 <__b2d+0x48>
 800dd78:	3ff00000 	.word	0x3ff00000

0800dd7c <__d2b>:
 800dd7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd80:	460f      	mov	r7, r1
 800dd82:	2101      	movs	r1, #1
 800dd84:	ec59 8b10 	vmov	r8, r9, d0
 800dd88:	4616      	mov	r6, r2
 800dd8a:	f7ff fc13 	bl	800d5b4 <_Balloc>
 800dd8e:	4604      	mov	r4, r0
 800dd90:	b930      	cbnz	r0, 800dda0 <__d2b+0x24>
 800dd92:	4602      	mov	r2, r0
 800dd94:	4b23      	ldr	r3, [pc, #140]	@ (800de24 <__d2b+0xa8>)
 800dd96:	4824      	ldr	r0, [pc, #144]	@ (800de28 <__d2b+0xac>)
 800dd98:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd9c:	f001 f80a 	bl	800edb4 <__assert_func>
 800dda0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dda4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dda8:	b10d      	cbz	r5, 800ddae <__d2b+0x32>
 800ddaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ddae:	9301      	str	r3, [sp, #4]
 800ddb0:	f1b8 0300 	subs.w	r3, r8, #0
 800ddb4:	d023      	beq.n	800ddfe <__d2b+0x82>
 800ddb6:	4668      	mov	r0, sp
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	f7ff fd0c 	bl	800d7d6 <__lo0bits>
 800ddbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ddc2:	b1d0      	cbz	r0, 800ddfa <__d2b+0x7e>
 800ddc4:	f1c0 0320 	rsb	r3, r0, #32
 800ddc8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddcc:	430b      	orrs	r3, r1
 800ddce:	40c2      	lsrs	r2, r0
 800ddd0:	6163      	str	r3, [r4, #20]
 800ddd2:	9201      	str	r2, [sp, #4]
 800ddd4:	9b01      	ldr	r3, [sp, #4]
 800ddd6:	61a3      	str	r3, [r4, #24]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	bf0c      	ite	eq
 800dddc:	2201      	moveq	r2, #1
 800ddde:	2202      	movne	r2, #2
 800dde0:	6122      	str	r2, [r4, #16]
 800dde2:	b1a5      	cbz	r5, 800de0e <__d2b+0x92>
 800dde4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dde8:	4405      	add	r5, r0
 800ddea:	603d      	str	r5, [r7, #0]
 800ddec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ddf0:	6030      	str	r0, [r6, #0]
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	b003      	add	sp, #12
 800ddf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddfa:	6161      	str	r1, [r4, #20]
 800ddfc:	e7ea      	b.n	800ddd4 <__d2b+0x58>
 800ddfe:	a801      	add	r0, sp, #4
 800de00:	f7ff fce9 	bl	800d7d6 <__lo0bits>
 800de04:	9b01      	ldr	r3, [sp, #4]
 800de06:	6163      	str	r3, [r4, #20]
 800de08:	3020      	adds	r0, #32
 800de0a:	2201      	movs	r2, #1
 800de0c:	e7e8      	b.n	800dde0 <__d2b+0x64>
 800de0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de12:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800de16:	6038      	str	r0, [r7, #0]
 800de18:	6918      	ldr	r0, [r3, #16]
 800de1a:	f7ff fcbd 	bl	800d798 <__hi0bits>
 800de1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de22:	e7e5      	b.n	800ddf0 <__d2b+0x74>
 800de24:	0800f901 	.word	0x0800f901
 800de28:	0800f989 	.word	0x0800f989

0800de2c <__ratio>:
 800de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de30:	b085      	sub	sp, #20
 800de32:	e9cd 1000 	strd	r1, r0, [sp]
 800de36:	a902      	add	r1, sp, #8
 800de38:	f7ff ff56 	bl	800dce8 <__b2d>
 800de3c:	9800      	ldr	r0, [sp, #0]
 800de3e:	a903      	add	r1, sp, #12
 800de40:	ec55 4b10 	vmov	r4, r5, d0
 800de44:	f7ff ff50 	bl	800dce8 <__b2d>
 800de48:	9b01      	ldr	r3, [sp, #4]
 800de4a:	6919      	ldr	r1, [r3, #16]
 800de4c:	9b00      	ldr	r3, [sp, #0]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	1ac9      	subs	r1, r1, r3
 800de52:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800de56:	1a9b      	subs	r3, r3, r2
 800de58:	ec5b ab10 	vmov	sl, fp, d0
 800de5c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800de60:	2b00      	cmp	r3, #0
 800de62:	bfce      	itee	gt
 800de64:	462a      	movgt	r2, r5
 800de66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de6a:	465a      	movle	r2, fp
 800de6c:	462f      	mov	r7, r5
 800de6e:	46d9      	mov	r9, fp
 800de70:	bfcc      	ite	gt
 800de72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de76:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800de7a:	464b      	mov	r3, r9
 800de7c:	4652      	mov	r2, sl
 800de7e:	4620      	mov	r0, r4
 800de80:	4639      	mov	r1, r7
 800de82:	f7f2 fcf3 	bl	800086c <__aeabi_ddiv>
 800de86:	ec41 0b10 	vmov	d0, r0, r1
 800de8a:	b005      	add	sp, #20
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de90 <__copybits>:
 800de90:	3901      	subs	r1, #1
 800de92:	b570      	push	{r4, r5, r6, lr}
 800de94:	1149      	asrs	r1, r1, #5
 800de96:	6914      	ldr	r4, [r2, #16]
 800de98:	3101      	adds	r1, #1
 800de9a:	f102 0314 	add.w	r3, r2, #20
 800de9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dea2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dea6:	1f05      	subs	r5, r0, #4
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	d30c      	bcc.n	800dec6 <__copybits+0x36>
 800deac:	1aa3      	subs	r3, r4, r2
 800deae:	3b11      	subs	r3, #17
 800deb0:	f023 0303 	bic.w	r3, r3, #3
 800deb4:	3211      	adds	r2, #17
 800deb6:	42a2      	cmp	r2, r4
 800deb8:	bf88      	it	hi
 800deba:	2300      	movhi	r3, #0
 800debc:	4418      	add	r0, r3
 800debe:	2300      	movs	r3, #0
 800dec0:	4288      	cmp	r0, r1
 800dec2:	d305      	bcc.n	800ded0 <__copybits+0x40>
 800dec4:	bd70      	pop	{r4, r5, r6, pc}
 800dec6:	f853 6b04 	ldr.w	r6, [r3], #4
 800deca:	f845 6f04 	str.w	r6, [r5, #4]!
 800dece:	e7eb      	b.n	800dea8 <__copybits+0x18>
 800ded0:	f840 3b04 	str.w	r3, [r0], #4
 800ded4:	e7f4      	b.n	800dec0 <__copybits+0x30>

0800ded6 <__any_on>:
 800ded6:	f100 0214 	add.w	r2, r0, #20
 800deda:	6900      	ldr	r0, [r0, #16]
 800dedc:	114b      	asrs	r3, r1, #5
 800dede:	4298      	cmp	r0, r3
 800dee0:	b510      	push	{r4, lr}
 800dee2:	db11      	blt.n	800df08 <__any_on+0x32>
 800dee4:	dd0a      	ble.n	800defc <__any_on+0x26>
 800dee6:	f011 011f 	ands.w	r1, r1, #31
 800deea:	d007      	beq.n	800defc <__any_on+0x26>
 800deec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800def0:	fa24 f001 	lsr.w	r0, r4, r1
 800def4:	fa00 f101 	lsl.w	r1, r0, r1
 800def8:	428c      	cmp	r4, r1
 800defa:	d10b      	bne.n	800df14 <__any_on+0x3e>
 800defc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df00:	4293      	cmp	r3, r2
 800df02:	d803      	bhi.n	800df0c <__any_on+0x36>
 800df04:	2000      	movs	r0, #0
 800df06:	bd10      	pop	{r4, pc}
 800df08:	4603      	mov	r3, r0
 800df0a:	e7f7      	b.n	800defc <__any_on+0x26>
 800df0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df10:	2900      	cmp	r1, #0
 800df12:	d0f5      	beq.n	800df00 <__any_on+0x2a>
 800df14:	2001      	movs	r0, #1
 800df16:	e7f6      	b.n	800df06 <__any_on+0x30>

0800df18 <_malloc_usable_size_r>:
 800df18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df1c:	1f18      	subs	r0, r3, #4
 800df1e:	2b00      	cmp	r3, #0
 800df20:	bfbc      	itt	lt
 800df22:	580b      	ldrlt	r3, [r1, r0]
 800df24:	18c0      	addlt	r0, r0, r3
 800df26:	4770      	bx	lr

0800df28 <__ascii_wctomb>:
 800df28:	4603      	mov	r3, r0
 800df2a:	4608      	mov	r0, r1
 800df2c:	b141      	cbz	r1, 800df40 <__ascii_wctomb+0x18>
 800df2e:	2aff      	cmp	r2, #255	@ 0xff
 800df30:	d904      	bls.n	800df3c <__ascii_wctomb+0x14>
 800df32:	228a      	movs	r2, #138	@ 0x8a
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	f04f 30ff 	mov.w	r0, #4294967295
 800df3a:	4770      	bx	lr
 800df3c:	700a      	strb	r2, [r1, #0]
 800df3e:	2001      	movs	r0, #1
 800df40:	4770      	bx	lr

0800df42 <__ssputs_r>:
 800df42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df46:	688e      	ldr	r6, [r1, #8]
 800df48:	461f      	mov	r7, r3
 800df4a:	42be      	cmp	r6, r7
 800df4c:	680b      	ldr	r3, [r1, #0]
 800df4e:	4682      	mov	sl, r0
 800df50:	460c      	mov	r4, r1
 800df52:	4690      	mov	r8, r2
 800df54:	d82d      	bhi.n	800dfb2 <__ssputs_r+0x70>
 800df56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df5a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df5e:	d026      	beq.n	800dfae <__ssputs_r+0x6c>
 800df60:	6965      	ldr	r5, [r4, #20]
 800df62:	6909      	ldr	r1, [r1, #16]
 800df64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df68:	eba3 0901 	sub.w	r9, r3, r1
 800df6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df70:	1c7b      	adds	r3, r7, #1
 800df72:	444b      	add	r3, r9
 800df74:	106d      	asrs	r5, r5, #1
 800df76:	429d      	cmp	r5, r3
 800df78:	bf38      	it	cc
 800df7a:	461d      	movcc	r5, r3
 800df7c:	0553      	lsls	r3, r2, #21
 800df7e:	d527      	bpl.n	800dfd0 <__ssputs_r+0x8e>
 800df80:	4629      	mov	r1, r5
 800df82:	f7fd fe1b 	bl	800bbbc <_malloc_r>
 800df86:	4606      	mov	r6, r0
 800df88:	b360      	cbz	r0, 800dfe4 <__ssputs_r+0xa2>
 800df8a:	6921      	ldr	r1, [r4, #16]
 800df8c:	464a      	mov	r2, r9
 800df8e:	f7fe ff64 	bl	800ce5a <memcpy>
 800df92:	89a3      	ldrh	r3, [r4, #12]
 800df94:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df9c:	81a3      	strh	r3, [r4, #12]
 800df9e:	6126      	str	r6, [r4, #16]
 800dfa0:	6165      	str	r5, [r4, #20]
 800dfa2:	444e      	add	r6, r9
 800dfa4:	eba5 0509 	sub.w	r5, r5, r9
 800dfa8:	6026      	str	r6, [r4, #0]
 800dfaa:	60a5      	str	r5, [r4, #8]
 800dfac:	463e      	mov	r6, r7
 800dfae:	42be      	cmp	r6, r7
 800dfb0:	d900      	bls.n	800dfb4 <__ssputs_r+0x72>
 800dfb2:	463e      	mov	r6, r7
 800dfb4:	6820      	ldr	r0, [r4, #0]
 800dfb6:	4632      	mov	r2, r6
 800dfb8:	4641      	mov	r1, r8
 800dfba:	f000 fee0 	bl	800ed7e <memmove>
 800dfbe:	68a3      	ldr	r3, [r4, #8]
 800dfc0:	1b9b      	subs	r3, r3, r6
 800dfc2:	60a3      	str	r3, [r4, #8]
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	4433      	add	r3, r6
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	2000      	movs	r0, #0
 800dfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd0:	462a      	mov	r2, r5
 800dfd2:	f7fd fe87 	bl	800bce4 <_realloc_r>
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d1e0      	bne.n	800df9e <__ssputs_r+0x5c>
 800dfdc:	6921      	ldr	r1, [r4, #16]
 800dfde:	4650      	mov	r0, sl
 800dfe0:	f7fe ff52 	bl	800ce88 <_free_r>
 800dfe4:	230c      	movs	r3, #12
 800dfe6:	f8ca 3000 	str.w	r3, [sl]
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dff0:	81a3      	strh	r3, [r4, #12]
 800dff2:	f04f 30ff 	mov.w	r0, #4294967295
 800dff6:	e7e9      	b.n	800dfcc <__ssputs_r+0x8a>

0800dff8 <_svfiprintf_r>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	4698      	mov	r8, r3
 800dffe:	898b      	ldrh	r3, [r1, #12]
 800e000:	061b      	lsls	r3, r3, #24
 800e002:	b09d      	sub	sp, #116	@ 0x74
 800e004:	4607      	mov	r7, r0
 800e006:	460d      	mov	r5, r1
 800e008:	4614      	mov	r4, r2
 800e00a:	d510      	bpl.n	800e02e <_svfiprintf_r+0x36>
 800e00c:	690b      	ldr	r3, [r1, #16]
 800e00e:	b973      	cbnz	r3, 800e02e <_svfiprintf_r+0x36>
 800e010:	2140      	movs	r1, #64	@ 0x40
 800e012:	f7fd fdd3 	bl	800bbbc <_malloc_r>
 800e016:	6028      	str	r0, [r5, #0]
 800e018:	6128      	str	r0, [r5, #16]
 800e01a:	b930      	cbnz	r0, 800e02a <_svfiprintf_r+0x32>
 800e01c:	230c      	movs	r3, #12
 800e01e:	603b      	str	r3, [r7, #0]
 800e020:	f04f 30ff 	mov.w	r0, #4294967295
 800e024:	b01d      	add	sp, #116	@ 0x74
 800e026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e02a:	2340      	movs	r3, #64	@ 0x40
 800e02c:	616b      	str	r3, [r5, #20]
 800e02e:	2300      	movs	r3, #0
 800e030:	9309      	str	r3, [sp, #36]	@ 0x24
 800e032:	2320      	movs	r3, #32
 800e034:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e038:	f8cd 800c 	str.w	r8, [sp, #12]
 800e03c:	2330      	movs	r3, #48	@ 0x30
 800e03e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e1dc <_svfiprintf_r+0x1e4>
 800e042:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e046:	f04f 0901 	mov.w	r9, #1
 800e04a:	4623      	mov	r3, r4
 800e04c:	469a      	mov	sl, r3
 800e04e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e052:	b10a      	cbz	r2, 800e058 <_svfiprintf_r+0x60>
 800e054:	2a25      	cmp	r2, #37	@ 0x25
 800e056:	d1f9      	bne.n	800e04c <_svfiprintf_r+0x54>
 800e058:	ebba 0b04 	subs.w	fp, sl, r4
 800e05c:	d00b      	beq.n	800e076 <_svfiprintf_r+0x7e>
 800e05e:	465b      	mov	r3, fp
 800e060:	4622      	mov	r2, r4
 800e062:	4629      	mov	r1, r5
 800e064:	4638      	mov	r0, r7
 800e066:	f7ff ff6c 	bl	800df42 <__ssputs_r>
 800e06a:	3001      	adds	r0, #1
 800e06c:	f000 80a7 	beq.w	800e1be <_svfiprintf_r+0x1c6>
 800e070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e072:	445a      	add	r2, fp
 800e074:	9209      	str	r2, [sp, #36]	@ 0x24
 800e076:	f89a 3000 	ldrb.w	r3, [sl]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 809f 	beq.w	800e1be <_svfiprintf_r+0x1c6>
 800e080:	2300      	movs	r3, #0
 800e082:	f04f 32ff 	mov.w	r2, #4294967295
 800e086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e08a:	f10a 0a01 	add.w	sl, sl, #1
 800e08e:	9304      	str	r3, [sp, #16]
 800e090:	9307      	str	r3, [sp, #28]
 800e092:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e096:	931a      	str	r3, [sp, #104]	@ 0x68
 800e098:	4654      	mov	r4, sl
 800e09a:	2205      	movs	r2, #5
 800e09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a0:	484e      	ldr	r0, [pc, #312]	@ (800e1dc <_svfiprintf_r+0x1e4>)
 800e0a2:	f7f2 f8ad 	bl	8000200 <memchr>
 800e0a6:	9a04      	ldr	r2, [sp, #16]
 800e0a8:	b9d8      	cbnz	r0, 800e0e2 <_svfiprintf_r+0xea>
 800e0aa:	06d0      	lsls	r0, r2, #27
 800e0ac:	bf44      	itt	mi
 800e0ae:	2320      	movmi	r3, #32
 800e0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0b4:	0711      	lsls	r1, r2, #28
 800e0b6:	bf44      	itt	mi
 800e0b8:	232b      	movmi	r3, #43	@ 0x2b
 800e0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e0be:	f89a 3000 	ldrb.w	r3, [sl]
 800e0c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0c4:	d015      	beq.n	800e0f2 <_svfiprintf_r+0xfa>
 800e0c6:	9a07      	ldr	r2, [sp, #28]
 800e0c8:	4654      	mov	r4, sl
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	f04f 0c0a 	mov.w	ip, #10
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0d6:	3b30      	subs	r3, #48	@ 0x30
 800e0d8:	2b09      	cmp	r3, #9
 800e0da:	d94b      	bls.n	800e174 <_svfiprintf_r+0x17c>
 800e0dc:	b1b0      	cbz	r0, 800e10c <_svfiprintf_r+0x114>
 800e0de:	9207      	str	r2, [sp, #28]
 800e0e0:	e014      	b.n	800e10c <_svfiprintf_r+0x114>
 800e0e2:	eba0 0308 	sub.w	r3, r0, r8
 800e0e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	9304      	str	r3, [sp, #16]
 800e0ee:	46a2      	mov	sl, r4
 800e0f0:	e7d2      	b.n	800e098 <_svfiprintf_r+0xa0>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	1d19      	adds	r1, r3, #4
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	9103      	str	r1, [sp, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bfbb      	ittet	lt
 800e0fe:	425b      	neglt	r3, r3
 800e100:	f042 0202 	orrlt.w	r2, r2, #2
 800e104:	9307      	strge	r3, [sp, #28]
 800e106:	9307      	strlt	r3, [sp, #28]
 800e108:	bfb8      	it	lt
 800e10a:	9204      	strlt	r2, [sp, #16]
 800e10c:	7823      	ldrb	r3, [r4, #0]
 800e10e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e110:	d10a      	bne.n	800e128 <_svfiprintf_r+0x130>
 800e112:	7863      	ldrb	r3, [r4, #1]
 800e114:	2b2a      	cmp	r3, #42	@ 0x2a
 800e116:	d132      	bne.n	800e17e <_svfiprintf_r+0x186>
 800e118:	9b03      	ldr	r3, [sp, #12]
 800e11a:	1d1a      	adds	r2, r3, #4
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	9203      	str	r2, [sp, #12]
 800e120:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e124:	3402      	adds	r4, #2
 800e126:	9305      	str	r3, [sp, #20]
 800e128:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e1ec <_svfiprintf_r+0x1f4>
 800e12c:	7821      	ldrb	r1, [r4, #0]
 800e12e:	2203      	movs	r2, #3
 800e130:	4650      	mov	r0, sl
 800e132:	f7f2 f865 	bl	8000200 <memchr>
 800e136:	b138      	cbz	r0, 800e148 <_svfiprintf_r+0x150>
 800e138:	9b04      	ldr	r3, [sp, #16]
 800e13a:	eba0 000a 	sub.w	r0, r0, sl
 800e13e:	2240      	movs	r2, #64	@ 0x40
 800e140:	4082      	lsls	r2, r0
 800e142:	4313      	orrs	r3, r2
 800e144:	3401      	adds	r4, #1
 800e146:	9304      	str	r3, [sp, #16]
 800e148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e14c:	4824      	ldr	r0, [pc, #144]	@ (800e1e0 <_svfiprintf_r+0x1e8>)
 800e14e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e152:	2206      	movs	r2, #6
 800e154:	f7f2 f854 	bl	8000200 <memchr>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d036      	beq.n	800e1ca <_svfiprintf_r+0x1d2>
 800e15c:	4b21      	ldr	r3, [pc, #132]	@ (800e1e4 <_svfiprintf_r+0x1ec>)
 800e15e:	bb1b      	cbnz	r3, 800e1a8 <_svfiprintf_r+0x1b0>
 800e160:	9b03      	ldr	r3, [sp, #12]
 800e162:	3307      	adds	r3, #7
 800e164:	f023 0307 	bic.w	r3, r3, #7
 800e168:	3308      	adds	r3, #8
 800e16a:	9303      	str	r3, [sp, #12]
 800e16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e16e:	4433      	add	r3, r6
 800e170:	9309      	str	r3, [sp, #36]	@ 0x24
 800e172:	e76a      	b.n	800e04a <_svfiprintf_r+0x52>
 800e174:	fb0c 3202 	mla	r2, ip, r2, r3
 800e178:	460c      	mov	r4, r1
 800e17a:	2001      	movs	r0, #1
 800e17c:	e7a8      	b.n	800e0d0 <_svfiprintf_r+0xd8>
 800e17e:	2300      	movs	r3, #0
 800e180:	3401      	adds	r4, #1
 800e182:	9305      	str	r3, [sp, #20]
 800e184:	4619      	mov	r1, r3
 800e186:	f04f 0c0a 	mov.w	ip, #10
 800e18a:	4620      	mov	r0, r4
 800e18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e190:	3a30      	subs	r2, #48	@ 0x30
 800e192:	2a09      	cmp	r2, #9
 800e194:	d903      	bls.n	800e19e <_svfiprintf_r+0x1a6>
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0c6      	beq.n	800e128 <_svfiprintf_r+0x130>
 800e19a:	9105      	str	r1, [sp, #20]
 800e19c:	e7c4      	b.n	800e128 <_svfiprintf_r+0x130>
 800e19e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e7f0      	b.n	800e18a <_svfiprintf_r+0x192>
 800e1a8:	ab03      	add	r3, sp, #12
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	462a      	mov	r2, r5
 800e1ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e1e8 <_svfiprintf_r+0x1f0>)
 800e1b0:	a904      	add	r1, sp, #16
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	f3af 8000 	nop.w
 800e1b8:	1c42      	adds	r2, r0, #1
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	d1d6      	bne.n	800e16c <_svfiprintf_r+0x174>
 800e1be:	89ab      	ldrh	r3, [r5, #12]
 800e1c0:	065b      	lsls	r3, r3, #25
 800e1c2:	f53f af2d 	bmi.w	800e020 <_svfiprintf_r+0x28>
 800e1c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1c8:	e72c      	b.n	800e024 <_svfiprintf_r+0x2c>
 800e1ca:	ab03      	add	r3, sp, #12
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	462a      	mov	r2, r5
 800e1d0:	4b05      	ldr	r3, [pc, #20]	@ (800e1e8 <_svfiprintf_r+0x1f0>)
 800e1d2:	a904      	add	r1, sp, #16
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f000 fa45 	bl	800e664 <_printf_i>
 800e1da:	e7ed      	b.n	800e1b8 <_svfiprintf_r+0x1c0>
 800e1dc:	0800fae0 	.word	0x0800fae0
 800e1e0:	0800faea 	.word	0x0800faea
 800e1e4:	00000000 	.word	0x00000000
 800e1e8:	0800df43 	.word	0x0800df43
 800e1ec:	0800fae6 	.word	0x0800fae6

0800e1f0 <_sungetc_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	1c4b      	adds	r3, r1, #1
 800e1f4:	4614      	mov	r4, r2
 800e1f6:	d103      	bne.n	800e200 <_sungetc_r+0x10>
 800e1f8:	f04f 35ff 	mov.w	r5, #4294967295
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	bd38      	pop	{r3, r4, r5, pc}
 800e200:	8993      	ldrh	r3, [r2, #12]
 800e202:	f023 0320 	bic.w	r3, r3, #32
 800e206:	8193      	strh	r3, [r2, #12]
 800e208:	6853      	ldr	r3, [r2, #4]
 800e20a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e20c:	b2cd      	uxtb	r5, r1
 800e20e:	b18a      	cbz	r2, 800e234 <_sungetc_r+0x44>
 800e210:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e212:	429a      	cmp	r2, r3
 800e214:	dd08      	ble.n	800e228 <_sungetc_r+0x38>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	1e5a      	subs	r2, r3, #1
 800e21a:	6022      	str	r2, [r4, #0]
 800e21c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e220:	6863      	ldr	r3, [r4, #4]
 800e222:	3301      	adds	r3, #1
 800e224:	6063      	str	r3, [r4, #4]
 800e226:	e7e9      	b.n	800e1fc <_sungetc_r+0xc>
 800e228:	4621      	mov	r1, r4
 800e22a:	f000 fd6e 	bl	800ed0a <__submore>
 800e22e:	2800      	cmp	r0, #0
 800e230:	d0f1      	beq.n	800e216 <_sungetc_r+0x26>
 800e232:	e7e1      	b.n	800e1f8 <_sungetc_r+0x8>
 800e234:	6921      	ldr	r1, [r4, #16]
 800e236:	6822      	ldr	r2, [r4, #0]
 800e238:	b141      	cbz	r1, 800e24c <_sungetc_r+0x5c>
 800e23a:	4291      	cmp	r1, r2
 800e23c:	d206      	bcs.n	800e24c <_sungetc_r+0x5c>
 800e23e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800e242:	42a9      	cmp	r1, r5
 800e244:	d102      	bne.n	800e24c <_sungetc_r+0x5c>
 800e246:	3a01      	subs	r2, #1
 800e248:	6022      	str	r2, [r4, #0]
 800e24a:	e7ea      	b.n	800e222 <_sungetc_r+0x32>
 800e24c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800e250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e254:	6363      	str	r3, [r4, #52]	@ 0x34
 800e256:	2303      	movs	r3, #3
 800e258:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e25a:	4623      	mov	r3, r4
 800e25c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	2301      	movs	r3, #1
 800e264:	e7de      	b.n	800e224 <_sungetc_r+0x34>

0800e266 <__ssrefill_r>:
 800e266:	b510      	push	{r4, lr}
 800e268:	460c      	mov	r4, r1
 800e26a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e26c:	b169      	cbz	r1, 800e28a <__ssrefill_r+0x24>
 800e26e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e272:	4299      	cmp	r1, r3
 800e274:	d001      	beq.n	800e27a <__ssrefill_r+0x14>
 800e276:	f7fe fe07 	bl	800ce88 <_free_r>
 800e27a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e27c:	6063      	str	r3, [r4, #4]
 800e27e:	2000      	movs	r0, #0
 800e280:	6360      	str	r0, [r4, #52]	@ 0x34
 800e282:	b113      	cbz	r3, 800e28a <__ssrefill_r+0x24>
 800e284:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e286:	6023      	str	r3, [r4, #0]
 800e288:	bd10      	pop	{r4, pc}
 800e28a:	6923      	ldr	r3, [r4, #16]
 800e28c:	6023      	str	r3, [r4, #0]
 800e28e:	2300      	movs	r3, #0
 800e290:	6063      	str	r3, [r4, #4]
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	f043 0320 	orr.w	r3, r3, #32
 800e298:	81a3      	strh	r3, [r4, #12]
 800e29a:	f04f 30ff 	mov.w	r0, #4294967295
 800e29e:	e7f3      	b.n	800e288 <__ssrefill_r+0x22>

0800e2a0 <__ssvfiscanf_r>:
 800e2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a4:	460c      	mov	r4, r1
 800e2a6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e2b0:	49a5      	ldr	r1, [pc, #660]	@ (800e548 <__ssvfiscanf_r+0x2a8>)
 800e2b2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e2b4:	f10d 0804 	add.w	r8, sp, #4
 800e2b8:	49a4      	ldr	r1, [pc, #656]	@ (800e54c <__ssvfiscanf_r+0x2ac>)
 800e2ba:	4fa5      	ldr	r7, [pc, #660]	@ (800e550 <__ssvfiscanf_r+0x2b0>)
 800e2bc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	7813      	ldrb	r3, [r2, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f000 8158 	beq.w	800e57e <__ssvfiscanf_r+0x2de>
 800e2ce:	5cf9      	ldrb	r1, [r7, r3]
 800e2d0:	f011 0108 	ands.w	r1, r1, #8
 800e2d4:	f102 0501 	add.w	r5, r2, #1
 800e2d8:	d019      	beq.n	800e30e <__ssvfiscanf_r+0x6e>
 800e2da:	6863      	ldr	r3, [r4, #4]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	dd0f      	ble.n	800e300 <__ssvfiscanf_r+0x60>
 800e2e0:	6823      	ldr	r3, [r4, #0]
 800e2e2:	781a      	ldrb	r2, [r3, #0]
 800e2e4:	5cba      	ldrb	r2, [r7, r2]
 800e2e6:	0712      	lsls	r2, r2, #28
 800e2e8:	d401      	bmi.n	800e2ee <__ssvfiscanf_r+0x4e>
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	e7eb      	b.n	800e2c6 <__ssvfiscanf_r+0x26>
 800e2ee:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e2f0:	3201      	adds	r2, #1
 800e2f2:	9245      	str	r2, [sp, #276]	@ 0x114
 800e2f4:	6862      	ldr	r2, [r4, #4]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	3a01      	subs	r2, #1
 800e2fa:	6062      	str	r2, [r4, #4]
 800e2fc:	6023      	str	r3, [r4, #0]
 800e2fe:	e7ec      	b.n	800e2da <__ssvfiscanf_r+0x3a>
 800e300:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e302:	4621      	mov	r1, r4
 800e304:	4630      	mov	r0, r6
 800e306:	4798      	blx	r3
 800e308:	2800      	cmp	r0, #0
 800e30a:	d0e9      	beq.n	800e2e0 <__ssvfiscanf_r+0x40>
 800e30c:	e7ed      	b.n	800e2ea <__ssvfiscanf_r+0x4a>
 800e30e:	2b25      	cmp	r3, #37	@ 0x25
 800e310:	d012      	beq.n	800e338 <__ssvfiscanf_r+0x98>
 800e312:	4699      	mov	r9, r3
 800e314:	6863      	ldr	r3, [r4, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	f340 8093 	ble.w	800e442 <__ssvfiscanf_r+0x1a2>
 800e31c:	6822      	ldr	r2, [r4, #0]
 800e31e:	7813      	ldrb	r3, [r2, #0]
 800e320:	454b      	cmp	r3, r9
 800e322:	f040 812c 	bne.w	800e57e <__ssvfiscanf_r+0x2de>
 800e326:	6863      	ldr	r3, [r4, #4]
 800e328:	3b01      	subs	r3, #1
 800e32a:	6063      	str	r3, [r4, #4]
 800e32c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e32e:	3201      	adds	r2, #1
 800e330:	3301      	adds	r3, #1
 800e332:	6022      	str	r2, [r4, #0]
 800e334:	9345      	str	r3, [sp, #276]	@ 0x114
 800e336:	e7d8      	b.n	800e2ea <__ssvfiscanf_r+0x4a>
 800e338:	9141      	str	r1, [sp, #260]	@ 0x104
 800e33a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e33c:	7853      	ldrb	r3, [r2, #1]
 800e33e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e340:	bf02      	ittt	eq
 800e342:	2310      	moveq	r3, #16
 800e344:	1c95      	addeq	r5, r2, #2
 800e346:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e348:	220a      	movs	r2, #10
 800e34a:	46a9      	mov	r9, r5
 800e34c:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e350:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e354:	2b09      	cmp	r3, #9
 800e356:	d91e      	bls.n	800e396 <__ssvfiscanf_r+0xf6>
 800e358:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e554 <__ssvfiscanf_r+0x2b4>
 800e35c:	2203      	movs	r2, #3
 800e35e:	4650      	mov	r0, sl
 800e360:	f7f1 ff4e 	bl	8000200 <memchr>
 800e364:	b138      	cbz	r0, 800e376 <__ssvfiscanf_r+0xd6>
 800e366:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e368:	eba0 000a 	sub.w	r0, r0, sl
 800e36c:	2301      	movs	r3, #1
 800e36e:	4083      	lsls	r3, r0
 800e370:	4313      	orrs	r3, r2
 800e372:	9341      	str	r3, [sp, #260]	@ 0x104
 800e374:	464d      	mov	r5, r9
 800e376:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e37a:	2b78      	cmp	r3, #120	@ 0x78
 800e37c:	d806      	bhi.n	800e38c <__ssvfiscanf_r+0xec>
 800e37e:	2b57      	cmp	r3, #87	@ 0x57
 800e380:	d810      	bhi.n	800e3a4 <__ssvfiscanf_r+0x104>
 800e382:	2b25      	cmp	r3, #37	@ 0x25
 800e384:	d0c5      	beq.n	800e312 <__ssvfiscanf_r+0x72>
 800e386:	d857      	bhi.n	800e438 <__ssvfiscanf_r+0x198>
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d065      	beq.n	800e458 <__ssvfiscanf_r+0x1b8>
 800e38c:	2303      	movs	r3, #3
 800e38e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e390:	230a      	movs	r3, #10
 800e392:	9342      	str	r3, [sp, #264]	@ 0x108
 800e394:	e078      	b.n	800e488 <__ssvfiscanf_r+0x1e8>
 800e396:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e398:	fb02 1103 	mla	r1, r2, r3, r1
 800e39c:	3930      	subs	r1, #48	@ 0x30
 800e39e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e3a0:	464d      	mov	r5, r9
 800e3a2:	e7d2      	b.n	800e34a <__ssvfiscanf_r+0xaa>
 800e3a4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e3a8:	2a20      	cmp	r2, #32
 800e3aa:	d8ef      	bhi.n	800e38c <__ssvfiscanf_r+0xec>
 800e3ac:	a101      	add	r1, pc, #4	@ (adr r1, 800e3b4 <__ssvfiscanf_r+0x114>)
 800e3ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e3b2:	bf00      	nop
 800e3b4:	0800e467 	.word	0x0800e467
 800e3b8:	0800e38d 	.word	0x0800e38d
 800e3bc:	0800e38d 	.word	0x0800e38d
 800e3c0:	0800e4c1 	.word	0x0800e4c1
 800e3c4:	0800e38d 	.word	0x0800e38d
 800e3c8:	0800e38d 	.word	0x0800e38d
 800e3cc:	0800e38d 	.word	0x0800e38d
 800e3d0:	0800e38d 	.word	0x0800e38d
 800e3d4:	0800e38d 	.word	0x0800e38d
 800e3d8:	0800e38d 	.word	0x0800e38d
 800e3dc:	0800e38d 	.word	0x0800e38d
 800e3e0:	0800e4d7 	.word	0x0800e4d7
 800e3e4:	0800e4bd 	.word	0x0800e4bd
 800e3e8:	0800e43f 	.word	0x0800e43f
 800e3ec:	0800e43f 	.word	0x0800e43f
 800e3f0:	0800e43f 	.word	0x0800e43f
 800e3f4:	0800e38d 	.word	0x0800e38d
 800e3f8:	0800e479 	.word	0x0800e479
 800e3fc:	0800e38d 	.word	0x0800e38d
 800e400:	0800e38d 	.word	0x0800e38d
 800e404:	0800e38d 	.word	0x0800e38d
 800e408:	0800e38d 	.word	0x0800e38d
 800e40c:	0800e4e7 	.word	0x0800e4e7
 800e410:	0800e481 	.word	0x0800e481
 800e414:	0800e45f 	.word	0x0800e45f
 800e418:	0800e38d 	.word	0x0800e38d
 800e41c:	0800e38d 	.word	0x0800e38d
 800e420:	0800e4e3 	.word	0x0800e4e3
 800e424:	0800e38d 	.word	0x0800e38d
 800e428:	0800e4bd 	.word	0x0800e4bd
 800e42c:	0800e38d 	.word	0x0800e38d
 800e430:	0800e38d 	.word	0x0800e38d
 800e434:	0800e467 	.word	0x0800e467
 800e438:	3b45      	subs	r3, #69	@ 0x45
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d8a6      	bhi.n	800e38c <__ssvfiscanf_r+0xec>
 800e43e:	2305      	movs	r3, #5
 800e440:	e021      	b.n	800e486 <__ssvfiscanf_r+0x1e6>
 800e442:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e444:	4621      	mov	r1, r4
 800e446:	4630      	mov	r0, r6
 800e448:	4798      	blx	r3
 800e44a:	2800      	cmp	r0, #0
 800e44c:	f43f af66 	beq.w	800e31c <__ssvfiscanf_r+0x7c>
 800e450:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e452:	2800      	cmp	r0, #0
 800e454:	f040 808b 	bne.w	800e56e <__ssvfiscanf_r+0x2ce>
 800e458:	f04f 30ff 	mov.w	r0, #4294967295
 800e45c:	e08b      	b.n	800e576 <__ssvfiscanf_r+0x2d6>
 800e45e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e460:	f042 0220 	orr.w	r2, r2, #32
 800e464:	9241      	str	r2, [sp, #260]	@ 0x104
 800e466:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e46c:	9241      	str	r2, [sp, #260]	@ 0x104
 800e46e:	2210      	movs	r2, #16
 800e470:	2b6e      	cmp	r3, #110	@ 0x6e
 800e472:	9242      	str	r2, [sp, #264]	@ 0x108
 800e474:	d902      	bls.n	800e47c <__ssvfiscanf_r+0x1dc>
 800e476:	e005      	b.n	800e484 <__ssvfiscanf_r+0x1e4>
 800e478:	2300      	movs	r3, #0
 800e47a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e47c:	2303      	movs	r3, #3
 800e47e:	e002      	b.n	800e486 <__ssvfiscanf_r+0x1e6>
 800e480:	2308      	movs	r3, #8
 800e482:	9342      	str	r3, [sp, #264]	@ 0x108
 800e484:	2304      	movs	r3, #4
 800e486:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e488:	6863      	ldr	r3, [r4, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	dd39      	ble.n	800e502 <__ssvfiscanf_r+0x262>
 800e48e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e490:	0659      	lsls	r1, r3, #25
 800e492:	d404      	bmi.n	800e49e <__ssvfiscanf_r+0x1fe>
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	781a      	ldrb	r2, [r3, #0]
 800e498:	5cba      	ldrb	r2, [r7, r2]
 800e49a:	0712      	lsls	r2, r2, #28
 800e49c:	d438      	bmi.n	800e510 <__ssvfiscanf_r+0x270>
 800e49e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	dc47      	bgt.n	800e534 <__ssvfiscanf_r+0x294>
 800e4a4:	466b      	mov	r3, sp
 800e4a6:	4622      	mov	r2, r4
 800e4a8:	a941      	add	r1, sp, #260	@ 0x104
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	f000 f9fa 	bl	800e8a4 <_scanf_chars>
 800e4b0:	2801      	cmp	r0, #1
 800e4b2:	d064      	beq.n	800e57e <__ssvfiscanf_r+0x2de>
 800e4b4:	2802      	cmp	r0, #2
 800e4b6:	f47f af18 	bne.w	800e2ea <__ssvfiscanf_r+0x4a>
 800e4ba:	e7c9      	b.n	800e450 <__ssvfiscanf_r+0x1b0>
 800e4bc:	220a      	movs	r2, #10
 800e4be:	e7d7      	b.n	800e470 <__ssvfiscanf_r+0x1d0>
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	f000 fbe8 	bl	800ec98 <__sccl>
 800e4c8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e4ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4ce:	9341      	str	r3, [sp, #260]	@ 0x104
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e7d7      	b.n	800e486 <__ssvfiscanf_r+0x1e6>
 800e4d6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4dc:	9341      	str	r3, [sp, #260]	@ 0x104
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e7d1      	b.n	800e486 <__ssvfiscanf_r+0x1e6>
 800e4e2:	2302      	movs	r3, #2
 800e4e4:	e7cf      	b.n	800e486 <__ssvfiscanf_r+0x1e6>
 800e4e6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e4e8:	06c3      	lsls	r3, r0, #27
 800e4ea:	f53f aefe 	bmi.w	800e2ea <__ssvfiscanf_r+0x4a>
 800e4ee:	9b00      	ldr	r3, [sp, #0]
 800e4f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e4f2:	1d19      	adds	r1, r3, #4
 800e4f4:	9100      	str	r1, [sp, #0]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	07c0      	lsls	r0, r0, #31
 800e4fa:	bf4c      	ite	mi
 800e4fc:	801a      	strhmi	r2, [r3, #0]
 800e4fe:	601a      	strpl	r2, [r3, #0]
 800e500:	e6f3      	b.n	800e2ea <__ssvfiscanf_r+0x4a>
 800e502:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e504:	4621      	mov	r1, r4
 800e506:	4630      	mov	r0, r6
 800e508:	4798      	blx	r3
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d0bf      	beq.n	800e48e <__ssvfiscanf_r+0x1ee>
 800e50e:	e79f      	b.n	800e450 <__ssvfiscanf_r+0x1b0>
 800e510:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e512:	3201      	adds	r2, #1
 800e514:	9245      	str	r2, [sp, #276]	@ 0x114
 800e516:	6862      	ldr	r2, [r4, #4]
 800e518:	3a01      	subs	r2, #1
 800e51a:	2a00      	cmp	r2, #0
 800e51c:	6062      	str	r2, [r4, #4]
 800e51e:	dd02      	ble.n	800e526 <__ssvfiscanf_r+0x286>
 800e520:	3301      	adds	r3, #1
 800e522:	6023      	str	r3, [r4, #0]
 800e524:	e7b6      	b.n	800e494 <__ssvfiscanf_r+0x1f4>
 800e526:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e528:	4621      	mov	r1, r4
 800e52a:	4630      	mov	r0, r6
 800e52c:	4798      	blx	r3
 800e52e:	2800      	cmp	r0, #0
 800e530:	d0b0      	beq.n	800e494 <__ssvfiscanf_r+0x1f4>
 800e532:	e78d      	b.n	800e450 <__ssvfiscanf_r+0x1b0>
 800e534:	2b04      	cmp	r3, #4
 800e536:	dc0f      	bgt.n	800e558 <__ssvfiscanf_r+0x2b8>
 800e538:	466b      	mov	r3, sp
 800e53a:	4622      	mov	r2, r4
 800e53c:	a941      	add	r1, sp, #260	@ 0x104
 800e53e:	4630      	mov	r0, r6
 800e540:	f000 fa0a 	bl	800e958 <_scanf_i>
 800e544:	e7b4      	b.n	800e4b0 <__ssvfiscanf_r+0x210>
 800e546:	bf00      	nop
 800e548:	0800e1f1 	.word	0x0800e1f1
 800e54c:	0800e267 	.word	0x0800e267
 800e550:	0800f7f9 	.word	0x0800f7f9
 800e554:	0800fae6 	.word	0x0800fae6
 800e558:	4b0a      	ldr	r3, [pc, #40]	@ (800e584 <__ssvfiscanf_r+0x2e4>)
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f43f aec5 	beq.w	800e2ea <__ssvfiscanf_r+0x4a>
 800e560:	466b      	mov	r3, sp
 800e562:	4622      	mov	r2, r4
 800e564:	a941      	add	r1, sp, #260	@ 0x104
 800e566:	4630      	mov	r0, r6
 800e568:	f3af 8000 	nop.w
 800e56c:	e7a0      	b.n	800e4b0 <__ssvfiscanf_r+0x210>
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	065b      	lsls	r3, r3, #25
 800e572:	f53f af71 	bmi.w	800e458 <__ssvfiscanf_r+0x1b8>
 800e576:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e57e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e580:	e7f9      	b.n	800e576 <__ssvfiscanf_r+0x2d6>
 800e582:	bf00      	nop
 800e584:	00000000 	.word	0x00000000

0800e588 <_printf_common>:
 800e588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e58c:	4616      	mov	r6, r2
 800e58e:	4698      	mov	r8, r3
 800e590:	688a      	ldr	r2, [r1, #8]
 800e592:	690b      	ldr	r3, [r1, #16]
 800e594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e598:	4293      	cmp	r3, r2
 800e59a:	bfb8      	it	lt
 800e59c:	4613      	movlt	r3, r2
 800e59e:	6033      	str	r3, [r6, #0]
 800e5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5a4:	4607      	mov	r7, r0
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	b10a      	cbz	r2, 800e5ae <_printf_common+0x26>
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	6033      	str	r3, [r6, #0]
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	0699      	lsls	r1, r3, #26
 800e5b2:	bf42      	ittt	mi
 800e5b4:	6833      	ldrmi	r3, [r6, #0]
 800e5b6:	3302      	addmi	r3, #2
 800e5b8:	6033      	strmi	r3, [r6, #0]
 800e5ba:	6825      	ldr	r5, [r4, #0]
 800e5bc:	f015 0506 	ands.w	r5, r5, #6
 800e5c0:	d106      	bne.n	800e5d0 <_printf_common+0x48>
 800e5c2:	f104 0a19 	add.w	sl, r4, #25
 800e5c6:	68e3      	ldr	r3, [r4, #12]
 800e5c8:	6832      	ldr	r2, [r6, #0]
 800e5ca:	1a9b      	subs	r3, r3, r2
 800e5cc:	42ab      	cmp	r3, r5
 800e5ce:	dc26      	bgt.n	800e61e <_printf_common+0x96>
 800e5d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5d4:	6822      	ldr	r2, [r4, #0]
 800e5d6:	3b00      	subs	r3, #0
 800e5d8:	bf18      	it	ne
 800e5da:	2301      	movne	r3, #1
 800e5dc:	0692      	lsls	r2, r2, #26
 800e5de:	d42b      	bmi.n	800e638 <_printf_common+0xb0>
 800e5e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5e4:	4641      	mov	r1, r8
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	47c8      	blx	r9
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	d01e      	beq.n	800e62c <_printf_common+0xa4>
 800e5ee:	6823      	ldr	r3, [r4, #0]
 800e5f0:	6922      	ldr	r2, [r4, #16]
 800e5f2:	f003 0306 	and.w	r3, r3, #6
 800e5f6:	2b04      	cmp	r3, #4
 800e5f8:	bf02      	ittt	eq
 800e5fa:	68e5      	ldreq	r5, [r4, #12]
 800e5fc:	6833      	ldreq	r3, [r6, #0]
 800e5fe:	1aed      	subeq	r5, r5, r3
 800e600:	68a3      	ldr	r3, [r4, #8]
 800e602:	bf0c      	ite	eq
 800e604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e608:	2500      	movne	r5, #0
 800e60a:	4293      	cmp	r3, r2
 800e60c:	bfc4      	itt	gt
 800e60e:	1a9b      	subgt	r3, r3, r2
 800e610:	18ed      	addgt	r5, r5, r3
 800e612:	2600      	movs	r6, #0
 800e614:	341a      	adds	r4, #26
 800e616:	42b5      	cmp	r5, r6
 800e618:	d11a      	bne.n	800e650 <_printf_common+0xc8>
 800e61a:	2000      	movs	r0, #0
 800e61c:	e008      	b.n	800e630 <_printf_common+0xa8>
 800e61e:	2301      	movs	r3, #1
 800e620:	4652      	mov	r2, sl
 800e622:	4641      	mov	r1, r8
 800e624:	4638      	mov	r0, r7
 800e626:	47c8      	blx	r9
 800e628:	3001      	adds	r0, #1
 800e62a:	d103      	bne.n	800e634 <_printf_common+0xac>
 800e62c:	f04f 30ff 	mov.w	r0, #4294967295
 800e630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e634:	3501      	adds	r5, #1
 800e636:	e7c6      	b.n	800e5c6 <_printf_common+0x3e>
 800e638:	18e1      	adds	r1, r4, r3
 800e63a:	1c5a      	adds	r2, r3, #1
 800e63c:	2030      	movs	r0, #48	@ 0x30
 800e63e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e642:	4422      	add	r2, r4
 800e644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e64c:	3302      	adds	r3, #2
 800e64e:	e7c7      	b.n	800e5e0 <_printf_common+0x58>
 800e650:	2301      	movs	r3, #1
 800e652:	4622      	mov	r2, r4
 800e654:	4641      	mov	r1, r8
 800e656:	4638      	mov	r0, r7
 800e658:	47c8      	blx	r9
 800e65a:	3001      	adds	r0, #1
 800e65c:	d0e6      	beq.n	800e62c <_printf_common+0xa4>
 800e65e:	3601      	adds	r6, #1
 800e660:	e7d9      	b.n	800e616 <_printf_common+0x8e>
	...

0800e664 <_printf_i>:
 800e664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e668:	7e0f      	ldrb	r7, [r1, #24]
 800e66a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e66c:	2f78      	cmp	r7, #120	@ 0x78
 800e66e:	4691      	mov	r9, r2
 800e670:	4680      	mov	r8, r0
 800e672:	460c      	mov	r4, r1
 800e674:	469a      	mov	sl, r3
 800e676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e67a:	d807      	bhi.n	800e68c <_printf_i+0x28>
 800e67c:	2f62      	cmp	r7, #98	@ 0x62
 800e67e:	d80a      	bhi.n	800e696 <_printf_i+0x32>
 800e680:	2f00      	cmp	r7, #0
 800e682:	f000 80d2 	beq.w	800e82a <_printf_i+0x1c6>
 800e686:	2f58      	cmp	r7, #88	@ 0x58
 800e688:	f000 80b9 	beq.w	800e7fe <_printf_i+0x19a>
 800e68c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e694:	e03a      	b.n	800e70c <_printf_i+0xa8>
 800e696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e69a:	2b15      	cmp	r3, #21
 800e69c:	d8f6      	bhi.n	800e68c <_printf_i+0x28>
 800e69e:	a101      	add	r1, pc, #4	@ (adr r1, 800e6a4 <_printf_i+0x40>)
 800e6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6a4:	0800e6fd 	.word	0x0800e6fd
 800e6a8:	0800e711 	.word	0x0800e711
 800e6ac:	0800e68d 	.word	0x0800e68d
 800e6b0:	0800e68d 	.word	0x0800e68d
 800e6b4:	0800e68d 	.word	0x0800e68d
 800e6b8:	0800e68d 	.word	0x0800e68d
 800e6bc:	0800e711 	.word	0x0800e711
 800e6c0:	0800e68d 	.word	0x0800e68d
 800e6c4:	0800e68d 	.word	0x0800e68d
 800e6c8:	0800e68d 	.word	0x0800e68d
 800e6cc:	0800e68d 	.word	0x0800e68d
 800e6d0:	0800e811 	.word	0x0800e811
 800e6d4:	0800e73b 	.word	0x0800e73b
 800e6d8:	0800e7cb 	.word	0x0800e7cb
 800e6dc:	0800e68d 	.word	0x0800e68d
 800e6e0:	0800e68d 	.word	0x0800e68d
 800e6e4:	0800e833 	.word	0x0800e833
 800e6e8:	0800e68d 	.word	0x0800e68d
 800e6ec:	0800e73b 	.word	0x0800e73b
 800e6f0:	0800e68d 	.word	0x0800e68d
 800e6f4:	0800e68d 	.word	0x0800e68d
 800e6f8:	0800e7d3 	.word	0x0800e7d3
 800e6fc:	6833      	ldr	r3, [r6, #0]
 800e6fe:	1d1a      	adds	r2, r3, #4
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	6032      	str	r2, [r6, #0]
 800e704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e70c:	2301      	movs	r3, #1
 800e70e:	e09d      	b.n	800e84c <_printf_i+0x1e8>
 800e710:	6833      	ldr	r3, [r6, #0]
 800e712:	6820      	ldr	r0, [r4, #0]
 800e714:	1d19      	adds	r1, r3, #4
 800e716:	6031      	str	r1, [r6, #0]
 800e718:	0606      	lsls	r6, r0, #24
 800e71a:	d501      	bpl.n	800e720 <_printf_i+0xbc>
 800e71c:	681d      	ldr	r5, [r3, #0]
 800e71e:	e003      	b.n	800e728 <_printf_i+0xc4>
 800e720:	0645      	lsls	r5, r0, #25
 800e722:	d5fb      	bpl.n	800e71c <_printf_i+0xb8>
 800e724:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e728:	2d00      	cmp	r5, #0
 800e72a:	da03      	bge.n	800e734 <_printf_i+0xd0>
 800e72c:	232d      	movs	r3, #45	@ 0x2d
 800e72e:	426d      	negs	r5, r5
 800e730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e734:	4859      	ldr	r0, [pc, #356]	@ (800e89c <_printf_i+0x238>)
 800e736:	230a      	movs	r3, #10
 800e738:	e011      	b.n	800e75e <_printf_i+0xfa>
 800e73a:	6821      	ldr	r1, [r4, #0]
 800e73c:	6833      	ldr	r3, [r6, #0]
 800e73e:	0608      	lsls	r0, r1, #24
 800e740:	f853 5b04 	ldr.w	r5, [r3], #4
 800e744:	d402      	bmi.n	800e74c <_printf_i+0xe8>
 800e746:	0649      	lsls	r1, r1, #25
 800e748:	bf48      	it	mi
 800e74a:	b2ad      	uxthmi	r5, r5
 800e74c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e74e:	4853      	ldr	r0, [pc, #332]	@ (800e89c <_printf_i+0x238>)
 800e750:	6033      	str	r3, [r6, #0]
 800e752:	bf14      	ite	ne
 800e754:	230a      	movne	r3, #10
 800e756:	2308      	moveq	r3, #8
 800e758:	2100      	movs	r1, #0
 800e75a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e75e:	6866      	ldr	r6, [r4, #4]
 800e760:	60a6      	str	r6, [r4, #8]
 800e762:	2e00      	cmp	r6, #0
 800e764:	bfa2      	ittt	ge
 800e766:	6821      	ldrge	r1, [r4, #0]
 800e768:	f021 0104 	bicge.w	r1, r1, #4
 800e76c:	6021      	strge	r1, [r4, #0]
 800e76e:	b90d      	cbnz	r5, 800e774 <_printf_i+0x110>
 800e770:	2e00      	cmp	r6, #0
 800e772:	d04b      	beq.n	800e80c <_printf_i+0x1a8>
 800e774:	4616      	mov	r6, r2
 800e776:	fbb5 f1f3 	udiv	r1, r5, r3
 800e77a:	fb03 5711 	mls	r7, r3, r1, r5
 800e77e:	5dc7      	ldrb	r7, [r0, r7]
 800e780:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e784:	462f      	mov	r7, r5
 800e786:	42bb      	cmp	r3, r7
 800e788:	460d      	mov	r5, r1
 800e78a:	d9f4      	bls.n	800e776 <_printf_i+0x112>
 800e78c:	2b08      	cmp	r3, #8
 800e78e:	d10b      	bne.n	800e7a8 <_printf_i+0x144>
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	07df      	lsls	r7, r3, #31
 800e794:	d508      	bpl.n	800e7a8 <_printf_i+0x144>
 800e796:	6923      	ldr	r3, [r4, #16]
 800e798:	6861      	ldr	r1, [r4, #4]
 800e79a:	4299      	cmp	r1, r3
 800e79c:	bfde      	ittt	le
 800e79e:	2330      	movle	r3, #48	@ 0x30
 800e7a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7a8:	1b92      	subs	r2, r2, r6
 800e7aa:	6122      	str	r2, [r4, #16]
 800e7ac:	f8cd a000 	str.w	sl, [sp]
 800e7b0:	464b      	mov	r3, r9
 800e7b2:	aa03      	add	r2, sp, #12
 800e7b4:	4621      	mov	r1, r4
 800e7b6:	4640      	mov	r0, r8
 800e7b8:	f7ff fee6 	bl	800e588 <_printf_common>
 800e7bc:	3001      	adds	r0, #1
 800e7be:	d14a      	bne.n	800e856 <_printf_i+0x1f2>
 800e7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c4:	b004      	add	sp, #16
 800e7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	f043 0320 	orr.w	r3, r3, #32
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	4833      	ldr	r0, [pc, #204]	@ (800e8a0 <_printf_i+0x23c>)
 800e7d4:	2778      	movs	r7, #120	@ 0x78
 800e7d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7da:	6823      	ldr	r3, [r4, #0]
 800e7dc:	6831      	ldr	r1, [r6, #0]
 800e7de:	061f      	lsls	r7, r3, #24
 800e7e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7e4:	d402      	bmi.n	800e7ec <_printf_i+0x188>
 800e7e6:	065f      	lsls	r7, r3, #25
 800e7e8:	bf48      	it	mi
 800e7ea:	b2ad      	uxthmi	r5, r5
 800e7ec:	6031      	str	r1, [r6, #0]
 800e7ee:	07d9      	lsls	r1, r3, #31
 800e7f0:	bf44      	itt	mi
 800e7f2:	f043 0320 	orrmi.w	r3, r3, #32
 800e7f6:	6023      	strmi	r3, [r4, #0]
 800e7f8:	b11d      	cbz	r5, 800e802 <_printf_i+0x19e>
 800e7fa:	2310      	movs	r3, #16
 800e7fc:	e7ac      	b.n	800e758 <_printf_i+0xf4>
 800e7fe:	4827      	ldr	r0, [pc, #156]	@ (800e89c <_printf_i+0x238>)
 800e800:	e7e9      	b.n	800e7d6 <_printf_i+0x172>
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	f023 0320 	bic.w	r3, r3, #32
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	e7f6      	b.n	800e7fa <_printf_i+0x196>
 800e80c:	4616      	mov	r6, r2
 800e80e:	e7bd      	b.n	800e78c <_printf_i+0x128>
 800e810:	6833      	ldr	r3, [r6, #0]
 800e812:	6825      	ldr	r5, [r4, #0]
 800e814:	6961      	ldr	r1, [r4, #20]
 800e816:	1d18      	adds	r0, r3, #4
 800e818:	6030      	str	r0, [r6, #0]
 800e81a:	062e      	lsls	r6, r5, #24
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	d501      	bpl.n	800e824 <_printf_i+0x1c0>
 800e820:	6019      	str	r1, [r3, #0]
 800e822:	e002      	b.n	800e82a <_printf_i+0x1c6>
 800e824:	0668      	lsls	r0, r5, #25
 800e826:	d5fb      	bpl.n	800e820 <_printf_i+0x1bc>
 800e828:	8019      	strh	r1, [r3, #0]
 800e82a:	2300      	movs	r3, #0
 800e82c:	6123      	str	r3, [r4, #16]
 800e82e:	4616      	mov	r6, r2
 800e830:	e7bc      	b.n	800e7ac <_printf_i+0x148>
 800e832:	6833      	ldr	r3, [r6, #0]
 800e834:	1d1a      	adds	r2, r3, #4
 800e836:	6032      	str	r2, [r6, #0]
 800e838:	681e      	ldr	r6, [r3, #0]
 800e83a:	6862      	ldr	r2, [r4, #4]
 800e83c:	2100      	movs	r1, #0
 800e83e:	4630      	mov	r0, r6
 800e840:	f7f1 fcde 	bl	8000200 <memchr>
 800e844:	b108      	cbz	r0, 800e84a <_printf_i+0x1e6>
 800e846:	1b80      	subs	r0, r0, r6
 800e848:	6060      	str	r0, [r4, #4]
 800e84a:	6863      	ldr	r3, [r4, #4]
 800e84c:	6123      	str	r3, [r4, #16]
 800e84e:	2300      	movs	r3, #0
 800e850:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e854:	e7aa      	b.n	800e7ac <_printf_i+0x148>
 800e856:	6923      	ldr	r3, [r4, #16]
 800e858:	4632      	mov	r2, r6
 800e85a:	4649      	mov	r1, r9
 800e85c:	4640      	mov	r0, r8
 800e85e:	47d0      	blx	sl
 800e860:	3001      	adds	r0, #1
 800e862:	d0ad      	beq.n	800e7c0 <_printf_i+0x15c>
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	079b      	lsls	r3, r3, #30
 800e868:	d413      	bmi.n	800e892 <_printf_i+0x22e>
 800e86a:	68e0      	ldr	r0, [r4, #12]
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	4298      	cmp	r0, r3
 800e870:	bfb8      	it	lt
 800e872:	4618      	movlt	r0, r3
 800e874:	e7a6      	b.n	800e7c4 <_printf_i+0x160>
 800e876:	2301      	movs	r3, #1
 800e878:	4632      	mov	r2, r6
 800e87a:	4649      	mov	r1, r9
 800e87c:	4640      	mov	r0, r8
 800e87e:	47d0      	blx	sl
 800e880:	3001      	adds	r0, #1
 800e882:	d09d      	beq.n	800e7c0 <_printf_i+0x15c>
 800e884:	3501      	adds	r5, #1
 800e886:	68e3      	ldr	r3, [r4, #12]
 800e888:	9903      	ldr	r1, [sp, #12]
 800e88a:	1a5b      	subs	r3, r3, r1
 800e88c:	42ab      	cmp	r3, r5
 800e88e:	dcf2      	bgt.n	800e876 <_printf_i+0x212>
 800e890:	e7eb      	b.n	800e86a <_printf_i+0x206>
 800e892:	2500      	movs	r5, #0
 800e894:	f104 0619 	add.w	r6, r4, #25
 800e898:	e7f5      	b.n	800e886 <_printf_i+0x222>
 800e89a:	bf00      	nop
 800e89c:	0800faf1 	.word	0x0800faf1
 800e8a0:	0800fb02 	.word	0x0800fb02

0800e8a4 <_scanf_chars>:
 800e8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a8:	4615      	mov	r5, r2
 800e8aa:	688a      	ldr	r2, [r1, #8]
 800e8ac:	4680      	mov	r8, r0
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	b932      	cbnz	r2, 800e8c0 <_scanf_chars+0x1c>
 800e8b2:	698a      	ldr	r2, [r1, #24]
 800e8b4:	2a00      	cmp	r2, #0
 800e8b6:	bf14      	ite	ne
 800e8b8:	f04f 32ff 	movne.w	r2, #4294967295
 800e8bc:	2201      	moveq	r2, #1
 800e8be:	608a      	str	r2, [r1, #8]
 800e8c0:	6822      	ldr	r2, [r4, #0]
 800e8c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e954 <_scanf_chars+0xb0>
 800e8c6:	06d1      	lsls	r1, r2, #27
 800e8c8:	bf5f      	itttt	pl
 800e8ca:	681a      	ldrpl	r2, [r3, #0]
 800e8cc:	1d11      	addpl	r1, r2, #4
 800e8ce:	6019      	strpl	r1, [r3, #0]
 800e8d0:	6816      	ldrpl	r6, [r2, #0]
 800e8d2:	2700      	movs	r7, #0
 800e8d4:	69a0      	ldr	r0, [r4, #24]
 800e8d6:	b188      	cbz	r0, 800e8fc <_scanf_chars+0x58>
 800e8d8:	2801      	cmp	r0, #1
 800e8da:	d107      	bne.n	800e8ec <_scanf_chars+0x48>
 800e8dc:	682b      	ldr	r3, [r5, #0]
 800e8de:	781a      	ldrb	r2, [r3, #0]
 800e8e0:	6963      	ldr	r3, [r4, #20]
 800e8e2:	5c9b      	ldrb	r3, [r3, r2]
 800e8e4:	b953      	cbnz	r3, 800e8fc <_scanf_chars+0x58>
 800e8e6:	2f00      	cmp	r7, #0
 800e8e8:	d031      	beq.n	800e94e <_scanf_chars+0xaa>
 800e8ea:	e022      	b.n	800e932 <_scanf_chars+0x8e>
 800e8ec:	2802      	cmp	r0, #2
 800e8ee:	d120      	bne.n	800e932 <_scanf_chars+0x8e>
 800e8f0:	682b      	ldr	r3, [r5, #0]
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e8f8:	071b      	lsls	r3, r3, #28
 800e8fa:	d41a      	bmi.n	800e932 <_scanf_chars+0x8e>
 800e8fc:	6823      	ldr	r3, [r4, #0]
 800e8fe:	06da      	lsls	r2, r3, #27
 800e900:	bf5e      	ittt	pl
 800e902:	682b      	ldrpl	r3, [r5, #0]
 800e904:	781b      	ldrbpl	r3, [r3, #0]
 800e906:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e90a:	682a      	ldr	r2, [r5, #0]
 800e90c:	686b      	ldr	r3, [r5, #4]
 800e90e:	3201      	adds	r2, #1
 800e910:	602a      	str	r2, [r5, #0]
 800e912:	68a2      	ldr	r2, [r4, #8]
 800e914:	3b01      	subs	r3, #1
 800e916:	3a01      	subs	r2, #1
 800e918:	606b      	str	r3, [r5, #4]
 800e91a:	3701      	adds	r7, #1
 800e91c:	60a2      	str	r2, [r4, #8]
 800e91e:	b142      	cbz	r2, 800e932 <_scanf_chars+0x8e>
 800e920:	2b00      	cmp	r3, #0
 800e922:	dcd7      	bgt.n	800e8d4 <_scanf_chars+0x30>
 800e924:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e928:	4629      	mov	r1, r5
 800e92a:	4640      	mov	r0, r8
 800e92c:	4798      	blx	r3
 800e92e:	2800      	cmp	r0, #0
 800e930:	d0d0      	beq.n	800e8d4 <_scanf_chars+0x30>
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	f013 0310 	ands.w	r3, r3, #16
 800e938:	d105      	bne.n	800e946 <_scanf_chars+0xa2>
 800e93a:	68e2      	ldr	r2, [r4, #12]
 800e93c:	3201      	adds	r2, #1
 800e93e:	60e2      	str	r2, [r4, #12]
 800e940:	69a2      	ldr	r2, [r4, #24]
 800e942:	b102      	cbz	r2, 800e946 <_scanf_chars+0xa2>
 800e944:	7033      	strb	r3, [r6, #0]
 800e946:	6923      	ldr	r3, [r4, #16]
 800e948:	443b      	add	r3, r7
 800e94a:	6123      	str	r3, [r4, #16]
 800e94c:	2000      	movs	r0, #0
 800e94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e952:	bf00      	nop
 800e954:	0800f7f9 	.word	0x0800f7f9

0800e958 <_scanf_i>:
 800e958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e95c:	4698      	mov	r8, r3
 800e95e:	4b74      	ldr	r3, [pc, #464]	@ (800eb30 <_scanf_i+0x1d8>)
 800e960:	460c      	mov	r4, r1
 800e962:	4682      	mov	sl, r0
 800e964:	4616      	mov	r6, r2
 800e966:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e96a:	b087      	sub	sp, #28
 800e96c:	ab03      	add	r3, sp, #12
 800e96e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e972:	4b70      	ldr	r3, [pc, #448]	@ (800eb34 <_scanf_i+0x1dc>)
 800e974:	69a1      	ldr	r1, [r4, #24]
 800e976:	4a70      	ldr	r2, [pc, #448]	@ (800eb38 <_scanf_i+0x1e0>)
 800e978:	2903      	cmp	r1, #3
 800e97a:	bf08      	it	eq
 800e97c:	461a      	moveq	r2, r3
 800e97e:	68a3      	ldr	r3, [r4, #8]
 800e980:	9201      	str	r2, [sp, #4]
 800e982:	1e5a      	subs	r2, r3, #1
 800e984:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e988:	bf88      	it	hi
 800e98a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e98e:	4627      	mov	r7, r4
 800e990:	bf82      	ittt	hi
 800e992:	eb03 0905 	addhi.w	r9, r3, r5
 800e996:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e99a:	60a3      	strhi	r3, [r4, #8]
 800e99c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e9a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e9a4:	bf98      	it	ls
 800e9a6:	f04f 0900 	movls.w	r9, #0
 800e9aa:	6023      	str	r3, [r4, #0]
 800e9ac:	463d      	mov	r5, r7
 800e9ae:	f04f 0b00 	mov.w	fp, #0
 800e9b2:	6831      	ldr	r1, [r6, #0]
 800e9b4:	ab03      	add	r3, sp, #12
 800e9b6:	7809      	ldrb	r1, [r1, #0]
 800e9b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e9bc:	2202      	movs	r2, #2
 800e9be:	f7f1 fc1f 	bl	8000200 <memchr>
 800e9c2:	b328      	cbz	r0, 800ea10 <_scanf_i+0xb8>
 800e9c4:	f1bb 0f01 	cmp.w	fp, #1
 800e9c8:	d159      	bne.n	800ea7e <_scanf_i+0x126>
 800e9ca:	6862      	ldr	r2, [r4, #4]
 800e9cc:	b92a      	cbnz	r2, 800e9da <_scanf_i+0x82>
 800e9ce:	6822      	ldr	r2, [r4, #0]
 800e9d0:	2108      	movs	r1, #8
 800e9d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e9d6:	6061      	str	r1, [r4, #4]
 800e9d8:	6022      	str	r2, [r4, #0]
 800e9da:	6822      	ldr	r2, [r4, #0]
 800e9dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e9e0:	6022      	str	r2, [r4, #0]
 800e9e2:	68a2      	ldr	r2, [r4, #8]
 800e9e4:	1e51      	subs	r1, r2, #1
 800e9e6:	60a1      	str	r1, [r4, #8]
 800e9e8:	b192      	cbz	r2, 800ea10 <_scanf_i+0xb8>
 800e9ea:	6832      	ldr	r2, [r6, #0]
 800e9ec:	1c51      	adds	r1, r2, #1
 800e9ee:	6031      	str	r1, [r6, #0]
 800e9f0:	7812      	ldrb	r2, [r2, #0]
 800e9f2:	f805 2b01 	strb.w	r2, [r5], #1
 800e9f6:	6872      	ldr	r2, [r6, #4]
 800e9f8:	3a01      	subs	r2, #1
 800e9fa:	2a00      	cmp	r2, #0
 800e9fc:	6072      	str	r2, [r6, #4]
 800e9fe:	dc07      	bgt.n	800ea10 <_scanf_i+0xb8>
 800ea00:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ea04:	4631      	mov	r1, r6
 800ea06:	4650      	mov	r0, sl
 800ea08:	4790      	blx	r2
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	f040 8085 	bne.w	800eb1a <_scanf_i+0x1c2>
 800ea10:	f10b 0b01 	add.w	fp, fp, #1
 800ea14:	f1bb 0f03 	cmp.w	fp, #3
 800ea18:	d1cb      	bne.n	800e9b2 <_scanf_i+0x5a>
 800ea1a:	6863      	ldr	r3, [r4, #4]
 800ea1c:	b90b      	cbnz	r3, 800ea22 <_scanf_i+0xca>
 800ea1e:	230a      	movs	r3, #10
 800ea20:	6063      	str	r3, [r4, #4]
 800ea22:	6863      	ldr	r3, [r4, #4]
 800ea24:	4945      	ldr	r1, [pc, #276]	@ (800eb3c <_scanf_i+0x1e4>)
 800ea26:	6960      	ldr	r0, [r4, #20]
 800ea28:	1ac9      	subs	r1, r1, r3
 800ea2a:	f000 f935 	bl	800ec98 <__sccl>
 800ea2e:	f04f 0b00 	mov.w	fp, #0
 800ea32:	68a3      	ldr	r3, [r4, #8]
 800ea34:	6822      	ldr	r2, [r4, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d03d      	beq.n	800eab6 <_scanf_i+0x15e>
 800ea3a:	6831      	ldr	r1, [r6, #0]
 800ea3c:	6960      	ldr	r0, [r4, #20]
 800ea3e:	f891 c000 	ldrb.w	ip, [r1]
 800ea42:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d035      	beq.n	800eab6 <_scanf_i+0x15e>
 800ea4a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ea4e:	d124      	bne.n	800ea9a <_scanf_i+0x142>
 800ea50:	0510      	lsls	r0, r2, #20
 800ea52:	d522      	bpl.n	800ea9a <_scanf_i+0x142>
 800ea54:	f10b 0b01 	add.w	fp, fp, #1
 800ea58:	f1b9 0f00 	cmp.w	r9, #0
 800ea5c:	d003      	beq.n	800ea66 <_scanf_i+0x10e>
 800ea5e:	3301      	adds	r3, #1
 800ea60:	f109 39ff 	add.w	r9, r9, #4294967295
 800ea64:	60a3      	str	r3, [r4, #8]
 800ea66:	6873      	ldr	r3, [r6, #4]
 800ea68:	3b01      	subs	r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	6073      	str	r3, [r6, #4]
 800ea6e:	dd1b      	ble.n	800eaa8 <_scanf_i+0x150>
 800ea70:	6833      	ldr	r3, [r6, #0]
 800ea72:	3301      	adds	r3, #1
 800ea74:	6033      	str	r3, [r6, #0]
 800ea76:	68a3      	ldr	r3, [r4, #8]
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	60a3      	str	r3, [r4, #8]
 800ea7c:	e7d9      	b.n	800ea32 <_scanf_i+0xda>
 800ea7e:	f1bb 0f02 	cmp.w	fp, #2
 800ea82:	d1ae      	bne.n	800e9e2 <_scanf_i+0x8a>
 800ea84:	6822      	ldr	r2, [r4, #0]
 800ea86:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ea8a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ea8e:	d1bf      	bne.n	800ea10 <_scanf_i+0xb8>
 800ea90:	2110      	movs	r1, #16
 800ea92:	6061      	str	r1, [r4, #4]
 800ea94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ea98:	e7a2      	b.n	800e9e0 <_scanf_i+0x88>
 800ea9a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ea9e:	6022      	str	r2, [r4, #0]
 800eaa0:	780b      	ldrb	r3, [r1, #0]
 800eaa2:	f805 3b01 	strb.w	r3, [r5], #1
 800eaa6:	e7de      	b.n	800ea66 <_scanf_i+0x10e>
 800eaa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800eaac:	4631      	mov	r1, r6
 800eaae:	4650      	mov	r0, sl
 800eab0:	4798      	blx	r3
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d0df      	beq.n	800ea76 <_scanf_i+0x11e>
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	05d9      	lsls	r1, r3, #23
 800eaba:	d50d      	bpl.n	800ead8 <_scanf_i+0x180>
 800eabc:	42bd      	cmp	r5, r7
 800eabe:	d909      	bls.n	800ead4 <_scanf_i+0x17c>
 800eac0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800eac8:	4632      	mov	r2, r6
 800eaca:	4650      	mov	r0, sl
 800eacc:	4798      	blx	r3
 800eace:	f105 39ff 	add.w	r9, r5, #4294967295
 800ead2:	464d      	mov	r5, r9
 800ead4:	42bd      	cmp	r5, r7
 800ead6:	d028      	beq.n	800eb2a <_scanf_i+0x1d2>
 800ead8:	6822      	ldr	r2, [r4, #0]
 800eada:	f012 0210 	ands.w	r2, r2, #16
 800eade:	d113      	bne.n	800eb08 <_scanf_i+0x1b0>
 800eae0:	702a      	strb	r2, [r5, #0]
 800eae2:	6863      	ldr	r3, [r4, #4]
 800eae4:	9e01      	ldr	r6, [sp, #4]
 800eae6:	4639      	mov	r1, r7
 800eae8:	4650      	mov	r0, sl
 800eaea:	47b0      	blx	r6
 800eaec:	f8d8 3000 	ldr.w	r3, [r8]
 800eaf0:	6821      	ldr	r1, [r4, #0]
 800eaf2:	1d1a      	adds	r2, r3, #4
 800eaf4:	f8c8 2000 	str.w	r2, [r8]
 800eaf8:	f011 0f20 	tst.w	r1, #32
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	d00f      	beq.n	800eb20 <_scanf_i+0x1c8>
 800eb00:	6018      	str	r0, [r3, #0]
 800eb02:	68e3      	ldr	r3, [r4, #12]
 800eb04:	3301      	adds	r3, #1
 800eb06:	60e3      	str	r3, [r4, #12]
 800eb08:	6923      	ldr	r3, [r4, #16]
 800eb0a:	1bed      	subs	r5, r5, r7
 800eb0c:	445d      	add	r5, fp
 800eb0e:	442b      	add	r3, r5
 800eb10:	6123      	str	r3, [r4, #16]
 800eb12:	2000      	movs	r0, #0
 800eb14:	b007      	add	sp, #28
 800eb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb1a:	f04f 0b00 	mov.w	fp, #0
 800eb1e:	e7ca      	b.n	800eab6 <_scanf_i+0x15e>
 800eb20:	07ca      	lsls	r2, r1, #31
 800eb22:	bf4c      	ite	mi
 800eb24:	8018      	strhmi	r0, [r3, #0]
 800eb26:	6018      	strpl	r0, [r3, #0]
 800eb28:	e7eb      	b.n	800eb02 <_scanf_i+0x1aa>
 800eb2a:	2001      	movs	r0, #1
 800eb2c:	e7f2      	b.n	800eb14 <_scanf_i+0x1bc>
 800eb2e:	bf00      	nop
 800eb30:	0800f764 	.word	0x0800f764
 800eb34:	0800ef0d 	.word	0x0800ef0d
 800eb38:	0800efed 	.word	0x0800efed
 800eb3c:	0800fb23 	.word	0x0800fb23

0800eb40 <__sflush_r>:
 800eb40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb48:	0716      	lsls	r6, r2, #28
 800eb4a:	4605      	mov	r5, r0
 800eb4c:	460c      	mov	r4, r1
 800eb4e:	d454      	bmi.n	800ebfa <__sflush_r+0xba>
 800eb50:	684b      	ldr	r3, [r1, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	dc02      	bgt.n	800eb5c <__sflush_r+0x1c>
 800eb56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dd48      	ble.n	800ebee <__sflush_r+0xae>
 800eb5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb5e:	2e00      	cmp	r6, #0
 800eb60:	d045      	beq.n	800ebee <__sflush_r+0xae>
 800eb62:	2300      	movs	r3, #0
 800eb64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb68:	682f      	ldr	r7, [r5, #0]
 800eb6a:	6a21      	ldr	r1, [r4, #32]
 800eb6c:	602b      	str	r3, [r5, #0]
 800eb6e:	d030      	beq.n	800ebd2 <__sflush_r+0x92>
 800eb70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	0759      	lsls	r1, r3, #29
 800eb76:	d505      	bpl.n	800eb84 <__sflush_r+0x44>
 800eb78:	6863      	ldr	r3, [r4, #4]
 800eb7a:	1ad2      	subs	r2, r2, r3
 800eb7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb7e:	b10b      	cbz	r3, 800eb84 <__sflush_r+0x44>
 800eb80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	2300      	movs	r3, #0
 800eb86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	47b0      	blx	r6
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	d106      	bne.n	800eba2 <__sflush_r+0x62>
 800eb94:	6829      	ldr	r1, [r5, #0]
 800eb96:	291d      	cmp	r1, #29
 800eb98:	d82b      	bhi.n	800ebf2 <__sflush_r+0xb2>
 800eb9a:	4a2a      	ldr	r2, [pc, #168]	@ (800ec44 <__sflush_r+0x104>)
 800eb9c:	410a      	asrs	r2, r1
 800eb9e:	07d6      	lsls	r6, r2, #31
 800eba0:	d427      	bmi.n	800ebf2 <__sflush_r+0xb2>
 800eba2:	2200      	movs	r2, #0
 800eba4:	6062      	str	r2, [r4, #4]
 800eba6:	04d9      	lsls	r1, r3, #19
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	6022      	str	r2, [r4, #0]
 800ebac:	d504      	bpl.n	800ebb8 <__sflush_r+0x78>
 800ebae:	1c42      	adds	r2, r0, #1
 800ebb0:	d101      	bne.n	800ebb6 <__sflush_r+0x76>
 800ebb2:	682b      	ldr	r3, [r5, #0]
 800ebb4:	b903      	cbnz	r3, 800ebb8 <__sflush_r+0x78>
 800ebb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ebb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebba:	602f      	str	r7, [r5, #0]
 800ebbc:	b1b9      	cbz	r1, 800ebee <__sflush_r+0xae>
 800ebbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ebc2:	4299      	cmp	r1, r3
 800ebc4:	d002      	beq.n	800ebcc <__sflush_r+0x8c>
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f7fe f95e 	bl	800ce88 <_free_r>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	6363      	str	r3, [r4, #52]	@ 0x34
 800ebd0:	e00d      	b.n	800ebee <__sflush_r+0xae>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	47b0      	blx	r6
 800ebd8:	4602      	mov	r2, r0
 800ebda:	1c50      	adds	r0, r2, #1
 800ebdc:	d1c9      	bne.n	800eb72 <__sflush_r+0x32>
 800ebde:	682b      	ldr	r3, [r5, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d0c6      	beq.n	800eb72 <__sflush_r+0x32>
 800ebe4:	2b1d      	cmp	r3, #29
 800ebe6:	d001      	beq.n	800ebec <__sflush_r+0xac>
 800ebe8:	2b16      	cmp	r3, #22
 800ebea:	d11e      	bne.n	800ec2a <__sflush_r+0xea>
 800ebec:	602f      	str	r7, [r5, #0]
 800ebee:	2000      	movs	r0, #0
 800ebf0:	e022      	b.n	800ec38 <__sflush_r+0xf8>
 800ebf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebf6:	b21b      	sxth	r3, r3
 800ebf8:	e01b      	b.n	800ec32 <__sflush_r+0xf2>
 800ebfa:	690f      	ldr	r7, [r1, #16]
 800ebfc:	2f00      	cmp	r7, #0
 800ebfe:	d0f6      	beq.n	800ebee <__sflush_r+0xae>
 800ec00:	0793      	lsls	r3, r2, #30
 800ec02:	680e      	ldr	r6, [r1, #0]
 800ec04:	bf08      	it	eq
 800ec06:	694b      	ldreq	r3, [r1, #20]
 800ec08:	600f      	str	r7, [r1, #0]
 800ec0a:	bf18      	it	ne
 800ec0c:	2300      	movne	r3, #0
 800ec0e:	eba6 0807 	sub.w	r8, r6, r7
 800ec12:	608b      	str	r3, [r1, #8]
 800ec14:	f1b8 0f00 	cmp.w	r8, #0
 800ec18:	dde9      	ble.n	800ebee <__sflush_r+0xae>
 800ec1a:	6a21      	ldr	r1, [r4, #32]
 800ec1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec1e:	4643      	mov	r3, r8
 800ec20:	463a      	mov	r2, r7
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b0      	blx	r6
 800ec26:	2800      	cmp	r0, #0
 800ec28:	dc08      	bgt.n	800ec3c <__sflush_r+0xfc>
 800ec2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec32:	81a3      	strh	r3, [r4, #12]
 800ec34:	f04f 30ff 	mov.w	r0, #4294967295
 800ec38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec3c:	4407      	add	r7, r0
 800ec3e:	eba8 0800 	sub.w	r8, r8, r0
 800ec42:	e7e7      	b.n	800ec14 <__sflush_r+0xd4>
 800ec44:	dfbffffe 	.word	0xdfbffffe

0800ec48 <_fflush_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	690b      	ldr	r3, [r1, #16]
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	b913      	cbnz	r3, 800ec58 <_fflush_r+0x10>
 800ec52:	2500      	movs	r5, #0
 800ec54:	4628      	mov	r0, r5
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	b118      	cbz	r0, 800ec62 <_fflush_r+0x1a>
 800ec5a:	6a03      	ldr	r3, [r0, #32]
 800ec5c:	b90b      	cbnz	r3, 800ec62 <_fflush_r+0x1a>
 800ec5e:	f7fd ff0b 	bl	800ca78 <__sinit>
 800ec62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0f3      	beq.n	800ec52 <_fflush_r+0xa>
 800ec6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec6c:	07d0      	lsls	r0, r2, #31
 800ec6e:	d404      	bmi.n	800ec7a <_fflush_r+0x32>
 800ec70:	0599      	lsls	r1, r3, #22
 800ec72:	d402      	bmi.n	800ec7a <_fflush_r+0x32>
 800ec74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec76:	f7fe f8ee 	bl	800ce56 <__retarget_lock_acquire_recursive>
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	f7ff ff5f 	bl	800eb40 <__sflush_r>
 800ec82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec84:	07da      	lsls	r2, r3, #31
 800ec86:	4605      	mov	r5, r0
 800ec88:	d4e4      	bmi.n	800ec54 <_fflush_r+0xc>
 800ec8a:	89a3      	ldrh	r3, [r4, #12]
 800ec8c:	059b      	lsls	r3, r3, #22
 800ec8e:	d4e1      	bmi.n	800ec54 <_fflush_r+0xc>
 800ec90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec92:	f7fe f8e1 	bl	800ce58 <__retarget_lock_release_recursive>
 800ec96:	e7dd      	b.n	800ec54 <_fflush_r+0xc>

0800ec98 <__sccl>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	780b      	ldrb	r3, [r1, #0]
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	2b5e      	cmp	r3, #94	@ 0x5e
 800eca0:	bf0b      	itete	eq
 800eca2:	784b      	ldrbeq	r3, [r1, #1]
 800eca4:	1c4a      	addne	r2, r1, #1
 800eca6:	1c8a      	addeq	r2, r1, #2
 800eca8:	2100      	movne	r1, #0
 800ecaa:	bf08      	it	eq
 800ecac:	2101      	moveq	r1, #1
 800ecae:	3801      	subs	r0, #1
 800ecb0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ecb4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ecb8:	42a8      	cmp	r0, r5
 800ecba:	d1fb      	bne.n	800ecb4 <__sccl+0x1c>
 800ecbc:	b90b      	cbnz	r3, 800ecc2 <__sccl+0x2a>
 800ecbe:	1e50      	subs	r0, r2, #1
 800ecc0:	bd70      	pop	{r4, r5, r6, pc}
 800ecc2:	f081 0101 	eor.w	r1, r1, #1
 800ecc6:	54e1      	strb	r1, [r4, r3]
 800ecc8:	4610      	mov	r0, r2
 800ecca:	4602      	mov	r2, r0
 800eccc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ecd0:	2d2d      	cmp	r5, #45	@ 0x2d
 800ecd2:	d005      	beq.n	800ece0 <__sccl+0x48>
 800ecd4:	2d5d      	cmp	r5, #93	@ 0x5d
 800ecd6:	d016      	beq.n	800ed06 <__sccl+0x6e>
 800ecd8:	2d00      	cmp	r5, #0
 800ecda:	d0f1      	beq.n	800ecc0 <__sccl+0x28>
 800ecdc:	462b      	mov	r3, r5
 800ecde:	e7f2      	b.n	800ecc6 <__sccl+0x2e>
 800ece0:	7846      	ldrb	r6, [r0, #1]
 800ece2:	2e5d      	cmp	r6, #93	@ 0x5d
 800ece4:	d0fa      	beq.n	800ecdc <__sccl+0x44>
 800ece6:	42b3      	cmp	r3, r6
 800ece8:	dcf8      	bgt.n	800ecdc <__sccl+0x44>
 800ecea:	3002      	adds	r0, #2
 800ecec:	461a      	mov	r2, r3
 800ecee:	3201      	adds	r2, #1
 800ecf0:	4296      	cmp	r6, r2
 800ecf2:	54a1      	strb	r1, [r4, r2]
 800ecf4:	dcfb      	bgt.n	800ecee <__sccl+0x56>
 800ecf6:	1af2      	subs	r2, r6, r3
 800ecf8:	3a01      	subs	r2, #1
 800ecfa:	1c5d      	adds	r5, r3, #1
 800ecfc:	42b3      	cmp	r3, r6
 800ecfe:	bfa8      	it	ge
 800ed00:	2200      	movge	r2, #0
 800ed02:	18ab      	adds	r3, r5, r2
 800ed04:	e7e1      	b.n	800ecca <__sccl+0x32>
 800ed06:	4610      	mov	r0, r2
 800ed08:	e7da      	b.n	800ecc0 <__sccl+0x28>

0800ed0a <__submore>:
 800ed0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed0e:	460c      	mov	r4, r1
 800ed10:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ed12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed16:	4299      	cmp	r1, r3
 800ed18:	d11d      	bne.n	800ed56 <__submore+0x4c>
 800ed1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ed1e:	f7fc ff4d 	bl	800bbbc <_malloc_r>
 800ed22:	b918      	cbnz	r0, 800ed2c <__submore+0x22>
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed30:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ed32:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ed36:	6360      	str	r0, [r4, #52]	@ 0x34
 800ed38:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ed3c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ed40:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ed44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ed48:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ed4c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ed50:	6020      	str	r0, [r4, #0]
 800ed52:	2000      	movs	r0, #0
 800ed54:	e7e8      	b.n	800ed28 <__submore+0x1e>
 800ed56:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ed58:	0077      	lsls	r7, r6, #1
 800ed5a:	463a      	mov	r2, r7
 800ed5c:	f7fc ffc2 	bl	800bce4 <_realloc_r>
 800ed60:	4605      	mov	r5, r0
 800ed62:	2800      	cmp	r0, #0
 800ed64:	d0de      	beq.n	800ed24 <__submore+0x1a>
 800ed66:	eb00 0806 	add.w	r8, r0, r6
 800ed6a:	4601      	mov	r1, r0
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f7fe f873 	bl	800ce5a <memcpy>
 800ed74:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ed78:	f8c4 8000 	str.w	r8, [r4]
 800ed7c:	e7e9      	b.n	800ed52 <__submore+0x48>

0800ed7e <memmove>:
 800ed7e:	4288      	cmp	r0, r1
 800ed80:	b510      	push	{r4, lr}
 800ed82:	eb01 0402 	add.w	r4, r1, r2
 800ed86:	d902      	bls.n	800ed8e <memmove+0x10>
 800ed88:	4284      	cmp	r4, r0
 800ed8a:	4623      	mov	r3, r4
 800ed8c:	d807      	bhi.n	800ed9e <memmove+0x20>
 800ed8e:	1e43      	subs	r3, r0, #1
 800ed90:	42a1      	cmp	r1, r4
 800ed92:	d008      	beq.n	800eda6 <memmove+0x28>
 800ed94:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed98:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed9c:	e7f8      	b.n	800ed90 <memmove+0x12>
 800ed9e:	4402      	add	r2, r0
 800eda0:	4601      	mov	r1, r0
 800eda2:	428a      	cmp	r2, r1
 800eda4:	d100      	bne.n	800eda8 <memmove+0x2a>
 800eda6:	bd10      	pop	{r4, pc}
 800eda8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edb0:	e7f7      	b.n	800eda2 <memmove+0x24>
	...

0800edb4 <__assert_func>:
 800edb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edb6:	4614      	mov	r4, r2
 800edb8:	461a      	mov	r2, r3
 800edba:	4b09      	ldr	r3, [pc, #36]	@ (800ede0 <__assert_func+0x2c>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4605      	mov	r5, r0
 800edc0:	68d8      	ldr	r0, [r3, #12]
 800edc2:	b954      	cbnz	r4, 800edda <__assert_func+0x26>
 800edc4:	4b07      	ldr	r3, [pc, #28]	@ (800ede4 <__assert_func+0x30>)
 800edc6:	461c      	mov	r4, r3
 800edc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800edcc:	9100      	str	r1, [sp, #0]
 800edce:	462b      	mov	r3, r5
 800edd0:	4905      	ldr	r1, [pc, #20]	@ (800ede8 <__assert_func+0x34>)
 800edd2:	f000 f90d 	bl	800eff0 <fiprintf>
 800edd6:	f000 f91d 	bl	800f014 <abort>
 800edda:	4b04      	ldr	r3, [pc, #16]	@ (800edec <__assert_func+0x38>)
 800eddc:	e7f4      	b.n	800edc8 <__assert_func+0x14>
 800edde:	bf00      	nop
 800ede0:	20000198 	.word	0x20000198
 800ede4:	0800fb69 	.word	0x0800fb69
 800ede8:	0800fb3b 	.word	0x0800fb3b
 800edec:	0800fb2e 	.word	0x0800fb2e

0800edf0 <_calloc_r>:
 800edf0:	b570      	push	{r4, r5, r6, lr}
 800edf2:	fba1 5402 	umull	r5, r4, r1, r2
 800edf6:	b93c      	cbnz	r4, 800ee08 <_calloc_r+0x18>
 800edf8:	4629      	mov	r1, r5
 800edfa:	f7fc fedf 	bl	800bbbc <_malloc_r>
 800edfe:	4606      	mov	r6, r0
 800ee00:	b928      	cbnz	r0, 800ee0e <_calloc_r+0x1e>
 800ee02:	2600      	movs	r6, #0
 800ee04:	4630      	mov	r0, r6
 800ee06:	bd70      	pop	{r4, r5, r6, pc}
 800ee08:	220c      	movs	r2, #12
 800ee0a:	6002      	str	r2, [r0, #0]
 800ee0c:	e7f9      	b.n	800ee02 <_calloc_r+0x12>
 800ee0e:	462a      	mov	r2, r5
 800ee10:	4621      	mov	r1, r4
 800ee12:	f7fd ff2f 	bl	800cc74 <memset>
 800ee16:	e7f5      	b.n	800ee04 <_calloc_r+0x14>

0800ee18 <_strtol_l.constprop.0>:
 800ee18:	2b24      	cmp	r3, #36	@ 0x24
 800ee1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee1e:	4686      	mov	lr, r0
 800ee20:	4690      	mov	r8, r2
 800ee22:	d801      	bhi.n	800ee28 <_strtol_l.constprop.0+0x10>
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d106      	bne.n	800ee36 <_strtol_l.constprop.0+0x1e>
 800ee28:	f7fd ffea 	bl	800ce00 <__errno>
 800ee2c:	2316      	movs	r3, #22
 800ee2e:	6003      	str	r3, [r0, #0]
 800ee30:	2000      	movs	r0, #0
 800ee32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee36:	4834      	ldr	r0, [pc, #208]	@ (800ef08 <_strtol_l.constprop.0+0xf0>)
 800ee38:	460d      	mov	r5, r1
 800ee3a:	462a      	mov	r2, r5
 800ee3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee40:	5d06      	ldrb	r6, [r0, r4]
 800ee42:	f016 0608 	ands.w	r6, r6, #8
 800ee46:	d1f8      	bne.n	800ee3a <_strtol_l.constprop.0+0x22>
 800ee48:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee4a:	d12d      	bne.n	800eea8 <_strtol_l.constprop.0+0x90>
 800ee4c:	782c      	ldrb	r4, [r5, #0]
 800ee4e:	2601      	movs	r6, #1
 800ee50:	1c95      	adds	r5, r2, #2
 800ee52:	f033 0210 	bics.w	r2, r3, #16
 800ee56:	d109      	bne.n	800ee6c <_strtol_l.constprop.0+0x54>
 800ee58:	2c30      	cmp	r4, #48	@ 0x30
 800ee5a:	d12a      	bne.n	800eeb2 <_strtol_l.constprop.0+0x9a>
 800ee5c:	782a      	ldrb	r2, [r5, #0]
 800ee5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ee62:	2a58      	cmp	r2, #88	@ 0x58
 800ee64:	d125      	bne.n	800eeb2 <_strtol_l.constprop.0+0x9a>
 800ee66:	786c      	ldrb	r4, [r5, #1]
 800ee68:	2310      	movs	r3, #16
 800ee6a:	3502      	adds	r5, #2
 800ee6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ee70:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ee74:	2200      	movs	r2, #0
 800ee76:	fbbc f9f3 	udiv	r9, ip, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ee80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ee84:	2f09      	cmp	r7, #9
 800ee86:	d81b      	bhi.n	800eec0 <_strtol_l.constprop.0+0xa8>
 800ee88:	463c      	mov	r4, r7
 800ee8a:	42a3      	cmp	r3, r4
 800ee8c:	dd27      	ble.n	800eede <_strtol_l.constprop.0+0xc6>
 800ee8e:	1c57      	adds	r7, r2, #1
 800ee90:	d007      	beq.n	800eea2 <_strtol_l.constprop.0+0x8a>
 800ee92:	4581      	cmp	r9, r0
 800ee94:	d320      	bcc.n	800eed8 <_strtol_l.constprop.0+0xc0>
 800ee96:	d101      	bne.n	800ee9c <_strtol_l.constprop.0+0x84>
 800ee98:	45a2      	cmp	sl, r4
 800ee9a:	db1d      	blt.n	800eed8 <_strtol_l.constprop.0+0xc0>
 800ee9c:	fb00 4003 	mla	r0, r0, r3, r4
 800eea0:	2201      	movs	r2, #1
 800eea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eea6:	e7eb      	b.n	800ee80 <_strtol_l.constprop.0+0x68>
 800eea8:	2c2b      	cmp	r4, #43	@ 0x2b
 800eeaa:	bf04      	itt	eq
 800eeac:	782c      	ldrbeq	r4, [r5, #0]
 800eeae:	1c95      	addeq	r5, r2, #2
 800eeb0:	e7cf      	b.n	800ee52 <_strtol_l.constprop.0+0x3a>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1da      	bne.n	800ee6c <_strtol_l.constprop.0+0x54>
 800eeb6:	2c30      	cmp	r4, #48	@ 0x30
 800eeb8:	bf0c      	ite	eq
 800eeba:	2308      	moveq	r3, #8
 800eebc:	230a      	movne	r3, #10
 800eebe:	e7d5      	b.n	800ee6c <_strtol_l.constprop.0+0x54>
 800eec0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eec4:	2f19      	cmp	r7, #25
 800eec6:	d801      	bhi.n	800eecc <_strtol_l.constprop.0+0xb4>
 800eec8:	3c37      	subs	r4, #55	@ 0x37
 800eeca:	e7de      	b.n	800ee8a <_strtol_l.constprop.0+0x72>
 800eecc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800eed0:	2f19      	cmp	r7, #25
 800eed2:	d804      	bhi.n	800eede <_strtol_l.constprop.0+0xc6>
 800eed4:	3c57      	subs	r4, #87	@ 0x57
 800eed6:	e7d8      	b.n	800ee8a <_strtol_l.constprop.0+0x72>
 800eed8:	f04f 32ff 	mov.w	r2, #4294967295
 800eedc:	e7e1      	b.n	800eea2 <_strtol_l.constprop.0+0x8a>
 800eede:	1c53      	adds	r3, r2, #1
 800eee0:	d108      	bne.n	800eef4 <_strtol_l.constprop.0+0xdc>
 800eee2:	2322      	movs	r3, #34	@ 0x22
 800eee4:	f8ce 3000 	str.w	r3, [lr]
 800eee8:	4660      	mov	r0, ip
 800eeea:	f1b8 0f00 	cmp.w	r8, #0
 800eeee:	d0a0      	beq.n	800ee32 <_strtol_l.constprop.0+0x1a>
 800eef0:	1e69      	subs	r1, r5, #1
 800eef2:	e006      	b.n	800ef02 <_strtol_l.constprop.0+0xea>
 800eef4:	b106      	cbz	r6, 800eef8 <_strtol_l.constprop.0+0xe0>
 800eef6:	4240      	negs	r0, r0
 800eef8:	f1b8 0f00 	cmp.w	r8, #0
 800eefc:	d099      	beq.n	800ee32 <_strtol_l.constprop.0+0x1a>
 800eefe:	2a00      	cmp	r2, #0
 800ef00:	d1f6      	bne.n	800eef0 <_strtol_l.constprop.0+0xd8>
 800ef02:	f8c8 1000 	str.w	r1, [r8]
 800ef06:	e794      	b.n	800ee32 <_strtol_l.constprop.0+0x1a>
 800ef08:	0800f7f9 	.word	0x0800f7f9

0800ef0c <_strtol_r>:
 800ef0c:	f7ff bf84 	b.w	800ee18 <_strtol_l.constprop.0>

0800ef10 <_strtoul_l.constprop.0>:
 800ef10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef14:	4e34      	ldr	r6, [pc, #208]	@ (800efe8 <_strtoul_l.constprop.0+0xd8>)
 800ef16:	4686      	mov	lr, r0
 800ef18:	460d      	mov	r5, r1
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef20:	5d37      	ldrb	r7, [r6, r4]
 800ef22:	f017 0708 	ands.w	r7, r7, #8
 800ef26:	d1f8      	bne.n	800ef1a <_strtoul_l.constprop.0+0xa>
 800ef28:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef2a:	d12f      	bne.n	800ef8c <_strtoul_l.constprop.0+0x7c>
 800ef2c:	782c      	ldrb	r4, [r5, #0]
 800ef2e:	2701      	movs	r7, #1
 800ef30:	1c85      	adds	r5, r0, #2
 800ef32:	f033 0010 	bics.w	r0, r3, #16
 800ef36:	d109      	bne.n	800ef4c <_strtoul_l.constprop.0+0x3c>
 800ef38:	2c30      	cmp	r4, #48	@ 0x30
 800ef3a:	d12c      	bne.n	800ef96 <_strtoul_l.constprop.0+0x86>
 800ef3c:	7828      	ldrb	r0, [r5, #0]
 800ef3e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ef42:	2858      	cmp	r0, #88	@ 0x58
 800ef44:	d127      	bne.n	800ef96 <_strtoul_l.constprop.0+0x86>
 800ef46:	786c      	ldrb	r4, [r5, #1]
 800ef48:	2310      	movs	r3, #16
 800ef4a:	3502      	adds	r5, #2
 800ef4c:	f04f 38ff 	mov.w	r8, #4294967295
 800ef50:	2600      	movs	r6, #0
 800ef52:	fbb8 f8f3 	udiv	r8, r8, r3
 800ef56:	fb03 f908 	mul.w	r9, r3, r8
 800ef5a:	ea6f 0909 	mvn.w	r9, r9
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ef64:	f1bc 0f09 	cmp.w	ip, #9
 800ef68:	d81c      	bhi.n	800efa4 <_strtoul_l.constprop.0+0x94>
 800ef6a:	4664      	mov	r4, ip
 800ef6c:	42a3      	cmp	r3, r4
 800ef6e:	dd2a      	ble.n	800efc6 <_strtoul_l.constprop.0+0xb6>
 800ef70:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ef74:	d007      	beq.n	800ef86 <_strtoul_l.constprop.0+0x76>
 800ef76:	4580      	cmp	r8, r0
 800ef78:	d322      	bcc.n	800efc0 <_strtoul_l.constprop.0+0xb0>
 800ef7a:	d101      	bne.n	800ef80 <_strtoul_l.constprop.0+0x70>
 800ef7c:	45a1      	cmp	r9, r4
 800ef7e:	db1f      	blt.n	800efc0 <_strtoul_l.constprop.0+0xb0>
 800ef80:	fb00 4003 	mla	r0, r0, r3, r4
 800ef84:	2601      	movs	r6, #1
 800ef86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef8a:	e7e9      	b.n	800ef60 <_strtoul_l.constprop.0+0x50>
 800ef8c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef8e:	bf04      	itt	eq
 800ef90:	782c      	ldrbeq	r4, [r5, #0]
 800ef92:	1c85      	addeq	r5, r0, #2
 800ef94:	e7cd      	b.n	800ef32 <_strtoul_l.constprop.0+0x22>
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1d8      	bne.n	800ef4c <_strtoul_l.constprop.0+0x3c>
 800ef9a:	2c30      	cmp	r4, #48	@ 0x30
 800ef9c:	bf0c      	ite	eq
 800ef9e:	2308      	moveq	r3, #8
 800efa0:	230a      	movne	r3, #10
 800efa2:	e7d3      	b.n	800ef4c <_strtoul_l.constprop.0+0x3c>
 800efa4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800efa8:	f1bc 0f19 	cmp.w	ip, #25
 800efac:	d801      	bhi.n	800efb2 <_strtoul_l.constprop.0+0xa2>
 800efae:	3c37      	subs	r4, #55	@ 0x37
 800efb0:	e7dc      	b.n	800ef6c <_strtoul_l.constprop.0+0x5c>
 800efb2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800efb6:	f1bc 0f19 	cmp.w	ip, #25
 800efba:	d804      	bhi.n	800efc6 <_strtoul_l.constprop.0+0xb6>
 800efbc:	3c57      	subs	r4, #87	@ 0x57
 800efbe:	e7d5      	b.n	800ef6c <_strtoul_l.constprop.0+0x5c>
 800efc0:	f04f 36ff 	mov.w	r6, #4294967295
 800efc4:	e7df      	b.n	800ef86 <_strtoul_l.constprop.0+0x76>
 800efc6:	1c73      	adds	r3, r6, #1
 800efc8:	d106      	bne.n	800efd8 <_strtoul_l.constprop.0+0xc8>
 800efca:	2322      	movs	r3, #34	@ 0x22
 800efcc:	f8ce 3000 	str.w	r3, [lr]
 800efd0:	4630      	mov	r0, r6
 800efd2:	b932      	cbnz	r2, 800efe2 <_strtoul_l.constprop.0+0xd2>
 800efd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efd8:	b107      	cbz	r7, 800efdc <_strtoul_l.constprop.0+0xcc>
 800efda:	4240      	negs	r0, r0
 800efdc:	2a00      	cmp	r2, #0
 800efde:	d0f9      	beq.n	800efd4 <_strtoul_l.constprop.0+0xc4>
 800efe0:	b106      	cbz	r6, 800efe4 <_strtoul_l.constprop.0+0xd4>
 800efe2:	1e69      	subs	r1, r5, #1
 800efe4:	6011      	str	r1, [r2, #0]
 800efe6:	e7f5      	b.n	800efd4 <_strtoul_l.constprop.0+0xc4>
 800efe8:	0800f7f9 	.word	0x0800f7f9

0800efec <_strtoul_r>:
 800efec:	f7ff bf90 	b.w	800ef10 <_strtoul_l.constprop.0>

0800eff0 <fiprintf>:
 800eff0:	b40e      	push	{r1, r2, r3}
 800eff2:	b503      	push	{r0, r1, lr}
 800eff4:	4601      	mov	r1, r0
 800eff6:	ab03      	add	r3, sp, #12
 800eff8:	4805      	ldr	r0, [pc, #20]	@ (800f010 <fiprintf+0x20>)
 800effa:	f853 2b04 	ldr.w	r2, [r3], #4
 800effe:	6800      	ldr	r0, [r0, #0]
 800f000:	9301      	str	r3, [sp, #4]
 800f002:	f000 f837 	bl	800f074 <_vfiprintf_r>
 800f006:	b002      	add	sp, #8
 800f008:	f85d eb04 	ldr.w	lr, [sp], #4
 800f00c:	b003      	add	sp, #12
 800f00e:	4770      	bx	lr
 800f010:	20000198 	.word	0x20000198

0800f014 <abort>:
 800f014:	b508      	push	{r3, lr}
 800f016:	2006      	movs	r0, #6
 800f018:	f000 fa00 	bl	800f41c <raise>
 800f01c:	2001      	movs	r0, #1
 800f01e:	f7f5 fe15 	bl	8004c4c <_exit>

0800f022 <__sfputc_r>:
 800f022:	6893      	ldr	r3, [r2, #8]
 800f024:	3b01      	subs	r3, #1
 800f026:	2b00      	cmp	r3, #0
 800f028:	b410      	push	{r4}
 800f02a:	6093      	str	r3, [r2, #8]
 800f02c:	da08      	bge.n	800f040 <__sfputc_r+0x1e>
 800f02e:	6994      	ldr	r4, [r2, #24]
 800f030:	42a3      	cmp	r3, r4
 800f032:	db01      	blt.n	800f038 <__sfputc_r+0x16>
 800f034:	290a      	cmp	r1, #10
 800f036:	d103      	bne.n	800f040 <__sfputc_r+0x1e>
 800f038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f03c:	f000 b932 	b.w	800f2a4 <__swbuf_r>
 800f040:	6813      	ldr	r3, [r2, #0]
 800f042:	1c58      	adds	r0, r3, #1
 800f044:	6010      	str	r0, [r2, #0]
 800f046:	7019      	strb	r1, [r3, #0]
 800f048:	4608      	mov	r0, r1
 800f04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <__sfputs_r>:
 800f050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f052:	4606      	mov	r6, r0
 800f054:	460f      	mov	r7, r1
 800f056:	4614      	mov	r4, r2
 800f058:	18d5      	adds	r5, r2, r3
 800f05a:	42ac      	cmp	r4, r5
 800f05c:	d101      	bne.n	800f062 <__sfputs_r+0x12>
 800f05e:	2000      	movs	r0, #0
 800f060:	e007      	b.n	800f072 <__sfputs_r+0x22>
 800f062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f066:	463a      	mov	r2, r7
 800f068:	4630      	mov	r0, r6
 800f06a:	f7ff ffda 	bl	800f022 <__sfputc_r>
 800f06e:	1c43      	adds	r3, r0, #1
 800f070:	d1f3      	bne.n	800f05a <__sfputs_r+0xa>
 800f072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f074 <_vfiprintf_r>:
 800f074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f078:	460d      	mov	r5, r1
 800f07a:	b09d      	sub	sp, #116	@ 0x74
 800f07c:	4614      	mov	r4, r2
 800f07e:	4698      	mov	r8, r3
 800f080:	4606      	mov	r6, r0
 800f082:	b118      	cbz	r0, 800f08c <_vfiprintf_r+0x18>
 800f084:	6a03      	ldr	r3, [r0, #32]
 800f086:	b90b      	cbnz	r3, 800f08c <_vfiprintf_r+0x18>
 800f088:	f7fd fcf6 	bl	800ca78 <__sinit>
 800f08c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f08e:	07d9      	lsls	r1, r3, #31
 800f090:	d405      	bmi.n	800f09e <_vfiprintf_r+0x2a>
 800f092:	89ab      	ldrh	r3, [r5, #12]
 800f094:	059a      	lsls	r2, r3, #22
 800f096:	d402      	bmi.n	800f09e <_vfiprintf_r+0x2a>
 800f098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f09a:	f7fd fedc 	bl	800ce56 <__retarget_lock_acquire_recursive>
 800f09e:	89ab      	ldrh	r3, [r5, #12]
 800f0a0:	071b      	lsls	r3, r3, #28
 800f0a2:	d501      	bpl.n	800f0a8 <_vfiprintf_r+0x34>
 800f0a4:	692b      	ldr	r3, [r5, #16]
 800f0a6:	b99b      	cbnz	r3, 800f0d0 <_vfiprintf_r+0x5c>
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f000 f938 	bl	800f320 <__swsetup_r>
 800f0b0:	b170      	cbz	r0, 800f0d0 <_vfiprintf_r+0x5c>
 800f0b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0b4:	07dc      	lsls	r4, r3, #31
 800f0b6:	d504      	bpl.n	800f0c2 <_vfiprintf_r+0x4e>
 800f0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0bc:	b01d      	add	sp, #116	@ 0x74
 800f0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0c2:	89ab      	ldrh	r3, [r5, #12]
 800f0c4:	0598      	lsls	r0, r3, #22
 800f0c6:	d4f7      	bmi.n	800f0b8 <_vfiprintf_r+0x44>
 800f0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0ca:	f7fd fec5 	bl	800ce58 <__retarget_lock_release_recursive>
 800f0ce:	e7f3      	b.n	800f0b8 <_vfiprintf_r+0x44>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0d4:	2320      	movs	r3, #32
 800f0d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0de:	2330      	movs	r3, #48	@ 0x30
 800f0e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f290 <_vfiprintf_r+0x21c>
 800f0e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f0e8:	f04f 0901 	mov.w	r9, #1
 800f0ec:	4623      	mov	r3, r4
 800f0ee:	469a      	mov	sl, r3
 800f0f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0f4:	b10a      	cbz	r2, 800f0fa <_vfiprintf_r+0x86>
 800f0f6:	2a25      	cmp	r2, #37	@ 0x25
 800f0f8:	d1f9      	bne.n	800f0ee <_vfiprintf_r+0x7a>
 800f0fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f0fe:	d00b      	beq.n	800f118 <_vfiprintf_r+0xa4>
 800f100:	465b      	mov	r3, fp
 800f102:	4622      	mov	r2, r4
 800f104:	4629      	mov	r1, r5
 800f106:	4630      	mov	r0, r6
 800f108:	f7ff ffa2 	bl	800f050 <__sfputs_r>
 800f10c:	3001      	adds	r0, #1
 800f10e:	f000 80a7 	beq.w	800f260 <_vfiprintf_r+0x1ec>
 800f112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f114:	445a      	add	r2, fp
 800f116:	9209      	str	r2, [sp, #36]	@ 0x24
 800f118:	f89a 3000 	ldrb.w	r3, [sl]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 809f 	beq.w	800f260 <_vfiprintf_r+0x1ec>
 800f122:	2300      	movs	r3, #0
 800f124:	f04f 32ff 	mov.w	r2, #4294967295
 800f128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f12c:	f10a 0a01 	add.w	sl, sl, #1
 800f130:	9304      	str	r3, [sp, #16]
 800f132:	9307      	str	r3, [sp, #28]
 800f134:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f138:	931a      	str	r3, [sp, #104]	@ 0x68
 800f13a:	4654      	mov	r4, sl
 800f13c:	2205      	movs	r2, #5
 800f13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f142:	4853      	ldr	r0, [pc, #332]	@ (800f290 <_vfiprintf_r+0x21c>)
 800f144:	f7f1 f85c 	bl	8000200 <memchr>
 800f148:	9a04      	ldr	r2, [sp, #16]
 800f14a:	b9d8      	cbnz	r0, 800f184 <_vfiprintf_r+0x110>
 800f14c:	06d1      	lsls	r1, r2, #27
 800f14e:	bf44      	itt	mi
 800f150:	2320      	movmi	r3, #32
 800f152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f156:	0713      	lsls	r3, r2, #28
 800f158:	bf44      	itt	mi
 800f15a:	232b      	movmi	r3, #43	@ 0x2b
 800f15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f160:	f89a 3000 	ldrb.w	r3, [sl]
 800f164:	2b2a      	cmp	r3, #42	@ 0x2a
 800f166:	d015      	beq.n	800f194 <_vfiprintf_r+0x120>
 800f168:	9a07      	ldr	r2, [sp, #28]
 800f16a:	4654      	mov	r4, sl
 800f16c:	2000      	movs	r0, #0
 800f16e:	f04f 0c0a 	mov.w	ip, #10
 800f172:	4621      	mov	r1, r4
 800f174:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f178:	3b30      	subs	r3, #48	@ 0x30
 800f17a:	2b09      	cmp	r3, #9
 800f17c:	d94b      	bls.n	800f216 <_vfiprintf_r+0x1a2>
 800f17e:	b1b0      	cbz	r0, 800f1ae <_vfiprintf_r+0x13a>
 800f180:	9207      	str	r2, [sp, #28]
 800f182:	e014      	b.n	800f1ae <_vfiprintf_r+0x13a>
 800f184:	eba0 0308 	sub.w	r3, r0, r8
 800f188:	fa09 f303 	lsl.w	r3, r9, r3
 800f18c:	4313      	orrs	r3, r2
 800f18e:	9304      	str	r3, [sp, #16]
 800f190:	46a2      	mov	sl, r4
 800f192:	e7d2      	b.n	800f13a <_vfiprintf_r+0xc6>
 800f194:	9b03      	ldr	r3, [sp, #12]
 800f196:	1d19      	adds	r1, r3, #4
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	9103      	str	r1, [sp, #12]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	bfbb      	ittet	lt
 800f1a0:	425b      	neglt	r3, r3
 800f1a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f1a6:	9307      	strge	r3, [sp, #28]
 800f1a8:	9307      	strlt	r3, [sp, #28]
 800f1aa:	bfb8      	it	lt
 800f1ac:	9204      	strlt	r2, [sp, #16]
 800f1ae:	7823      	ldrb	r3, [r4, #0]
 800f1b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1b2:	d10a      	bne.n	800f1ca <_vfiprintf_r+0x156>
 800f1b4:	7863      	ldrb	r3, [r4, #1]
 800f1b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1b8:	d132      	bne.n	800f220 <_vfiprintf_r+0x1ac>
 800f1ba:	9b03      	ldr	r3, [sp, #12]
 800f1bc:	1d1a      	adds	r2, r3, #4
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	9203      	str	r2, [sp, #12]
 800f1c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1c6:	3402      	adds	r4, #2
 800f1c8:	9305      	str	r3, [sp, #20]
 800f1ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f2a0 <_vfiprintf_r+0x22c>
 800f1ce:	7821      	ldrb	r1, [r4, #0]
 800f1d0:	2203      	movs	r2, #3
 800f1d2:	4650      	mov	r0, sl
 800f1d4:	f7f1 f814 	bl	8000200 <memchr>
 800f1d8:	b138      	cbz	r0, 800f1ea <_vfiprintf_r+0x176>
 800f1da:	9b04      	ldr	r3, [sp, #16]
 800f1dc:	eba0 000a 	sub.w	r0, r0, sl
 800f1e0:	2240      	movs	r2, #64	@ 0x40
 800f1e2:	4082      	lsls	r2, r0
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	3401      	adds	r4, #1
 800f1e8:	9304      	str	r3, [sp, #16]
 800f1ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1ee:	4829      	ldr	r0, [pc, #164]	@ (800f294 <_vfiprintf_r+0x220>)
 800f1f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f1f4:	2206      	movs	r2, #6
 800f1f6:	f7f1 f803 	bl	8000200 <memchr>
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	d03f      	beq.n	800f27e <_vfiprintf_r+0x20a>
 800f1fe:	4b26      	ldr	r3, [pc, #152]	@ (800f298 <_vfiprintf_r+0x224>)
 800f200:	bb1b      	cbnz	r3, 800f24a <_vfiprintf_r+0x1d6>
 800f202:	9b03      	ldr	r3, [sp, #12]
 800f204:	3307      	adds	r3, #7
 800f206:	f023 0307 	bic.w	r3, r3, #7
 800f20a:	3308      	adds	r3, #8
 800f20c:	9303      	str	r3, [sp, #12]
 800f20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f210:	443b      	add	r3, r7
 800f212:	9309      	str	r3, [sp, #36]	@ 0x24
 800f214:	e76a      	b.n	800f0ec <_vfiprintf_r+0x78>
 800f216:	fb0c 3202 	mla	r2, ip, r2, r3
 800f21a:	460c      	mov	r4, r1
 800f21c:	2001      	movs	r0, #1
 800f21e:	e7a8      	b.n	800f172 <_vfiprintf_r+0xfe>
 800f220:	2300      	movs	r3, #0
 800f222:	3401      	adds	r4, #1
 800f224:	9305      	str	r3, [sp, #20]
 800f226:	4619      	mov	r1, r3
 800f228:	f04f 0c0a 	mov.w	ip, #10
 800f22c:	4620      	mov	r0, r4
 800f22e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f232:	3a30      	subs	r2, #48	@ 0x30
 800f234:	2a09      	cmp	r2, #9
 800f236:	d903      	bls.n	800f240 <_vfiprintf_r+0x1cc>
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d0c6      	beq.n	800f1ca <_vfiprintf_r+0x156>
 800f23c:	9105      	str	r1, [sp, #20]
 800f23e:	e7c4      	b.n	800f1ca <_vfiprintf_r+0x156>
 800f240:	fb0c 2101 	mla	r1, ip, r1, r2
 800f244:	4604      	mov	r4, r0
 800f246:	2301      	movs	r3, #1
 800f248:	e7f0      	b.n	800f22c <_vfiprintf_r+0x1b8>
 800f24a:	ab03      	add	r3, sp, #12
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	462a      	mov	r2, r5
 800f250:	4b12      	ldr	r3, [pc, #72]	@ (800f29c <_vfiprintf_r+0x228>)
 800f252:	a904      	add	r1, sp, #16
 800f254:	4630      	mov	r0, r6
 800f256:	f3af 8000 	nop.w
 800f25a:	4607      	mov	r7, r0
 800f25c:	1c78      	adds	r0, r7, #1
 800f25e:	d1d6      	bne.n	800f20e <_vfiprintf_r+0x19a>
 800f260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f262:	07d9      	lsls	r1, r3, #31
 800f264:	d405      	bmi.n	800f272 <_vfiprintf_r+0x1fe>
 800f266:	89ab      	ldrh	r3, [r5, #12]
 800f268:	059a      	lsls	r2, r3, #22
 800f26a:	d402      	bmi.n	800f272 <_vfiprintf_r+0x1fe>
 800f26c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f26e:	f7fd fdf3 	bl	800ce58 <__retarget_lock_release_recursive>
 800f272:	89ab      	ldrh	r3, [r5, #12]
 800f274:	065b      	lsls	r3, r3, #25
 800f276:	f53f af1f 	bmi.w	800f0b8 <_vfiprintf_r+0x44>
 800f27a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f27c:	e71e      	b.n	800f0bc <_vfiprintf_r+0x48>
 800f27e:	ab03      	add	r3, sp, #12
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	462a      	mov	r2, r5
 800f284:	4b05      	ldr	r3, [pc, #20]	@ (800f29c <_vfiprintf_r+0x228>)
 800f286:	a904      	add	r1, sp, #16
 800f288:	4630      	mov	r0, r6
 800f28a:	f7ff f9eb 	bl	800e664 <_printf_i>
 800f28e:	e7e4      	b.n	800f25a <_vfiprintf_r+0x1e6>
 800f290:	0800fae0 	.word	0x0800fae0
 800f294:	0800faea 	.word	0x0800faea
 800f298:	00000000 	.word	0x00000000
 800f29c:	0800f051 	.word	0x0800f051
 800f2a0:	0800fae6 	.word	0x0800fae6

0800f2a4 <__swbuf_r>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	460e      	mov	r6, r1
 800f2a8:	4614      	mov	r4, r2
 800f2aa:	4605      	mov	r5, r0
 800f2ac:	b118      	cbz	r0, 800f2b6 <__swbuf_r+0x12>
 800f2ae:	6a03      	ldr	r3, [r0, #32]
 800f2b0:	b90b      	cbnz	r3, 800f2b6 <__swbuf_r+0x12>
 800f2b2:	f7fd fbe1 	bl	800ca78 <__sinit>
 800f2b6:	69a3      	ldr	r3, [r4, #24]
 800f2b8:	60a3      	str	r3, [r4, #8]
 800f2ba:	89a3      	ldrh	r3, [r4, #12]
 800f2bc:	071a      	lsls	r2, r3, #28
 800f2be:	d501      	bpl.n	800f2c4 <__swbuf_r+0x20>
 800f2c0:	6923      	ldr	r3, [r4, #16]
 800f2c2:	b943      	cbnz	r3, 800f2d6 <__swbuf_r+0x32>
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f000 f82a 	bl	800f320 <__swsetup_r>
 800f2cc:	b118      	cbz	r0, 800f2d6 <__swbuf_r+0x32>
 800f2ce:	f04f 37ff 	mov.w	r7, #4294967295
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d6:	6823      	ldr	r3, [r4, #0]
 800f2d8:	6922      	ldr	r2, [r4, #16]
 800f2da:	1a98      	subs	r0, r3, r2
 800f2dc:	6963      	ldr	r3, [r4, #20]
 800f2de:	b2f6      	uxtb	r6, r6
 800f2e0:	4283      	cmp	r3, r0
 800f2e2:	4637      	mov	r7, r6
 800f2e4:	dc05      	bgt.n	800f2f2 <__swbuf_r+0x4e>
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	f7ff fcad 	bl	800ec48 <_fflush_r>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d1ed      	bne.n	800f2ce <__swbuf_r+0x2a>
 800f2f2:	68a3      	ldr	r3, [r4, #8]
 800f2f4:	3b01      	subs	r3, #1
 800f2f6:	60a3      	str	r3, [r4, #8]
 800f2f8:	6823      	ldr	r3, [r4, #0]
 800f2fa:	1c5a      	adds	r2, r3, #1
 800f2fc:	6022      	str	r2, [r4, #0]
 800f2fe:	701e      	strb	r6, [r3, #0]
 800f300:	6962      	ldr	r2, [r4, #20]
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	429a      	cmp	r2, r3
 800f306:	d004      	beq.n	800f312 <__swbuf_r+0x6e>
 800f308:	89a3      	ldrh	r3, [r4, #12]
 800f30a:	07db      	lsls	r3, r3, #31
 800f30c:	d5e1      	bpl.n	800f2d2 <__swbuf_r+0x2e>
 800f30e:	2e0a      	cmp	r6, #10
 800f310:	d1df      	bne.n	800f2d2 <__swbuf_r+0x2e>
 800f312:	4621      	mov	r1, r4
 800f314:	4628      	mov	r0, r5
 800f316:	f7ff fc97 	bl	800ec48 <_fflush_r>
 800f31a:	2800      	cmp	r0, #0
 800f31c:	d0d9      	beq.n	800f2d2 <__swbuf_r+0x2e>
 800f31e:	e7d6      	b.n	800f2ce <__swbuf_r+0x2a>

0800f320 <__swsetup_r>:
 800f320:	b538      	push	{r3, r4, r5, lr}
 800f322:	4b29      	ldr	r3, [pc, #164]	@ (800f3c8 <__swsetup_r+0xa8>)
 800f324:	4605      	mov	r5, r0
 800f326:	6818      	ldr	r0, [r3, #0]
 800f328:	460c      	mov	r4, r1
 800f32a:	b118      	cbz	r0, 800f334 <__swsetup_r+0x14>
 800f32c:	6a03      	ldr	r3, [r0, #32]
 800f32e:	b90b      	cbnz	r3, 800f334 <__swsetup_r+0x14>
 800f330:	f7fd fba2 	bl	800ca78 <__sinit>
 800f334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f338:	0719      	lsls	r1, r3, #28
 800f33a:	d422      	bmi.n	800f382 <__swsetup_r+0x62>
 800f33c:	06da      	lsls	r2, r3, #27
 800f33e:	d407      	bmi.n	800f350 <__swsetup_r+0x30>
 800f340:	2209      	movs	r2, #9
 800f342:	602a      	str	r2, [r5, #0]
 800f344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f348:	81a3      	strh	r3, [r4, #12]
 800f34a:	f04f 30ff 	mov.w	r0, #4294967295
 800f34e:	e033      	b.n	800f3b8 <__swsetup_r+0x98>
 800f350:	0758      	lsls	r0, r3, #29
 800f352:	d512      	bpl.n	800f37a <__swsetup_r+0x5a>
 800f354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f356:	b141      	cbz	r1, 800f36a <__swsetup_r+0x4a>
 800f358:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f35c:	4299      	cmp	r1, r3
 800f35e:	d002      	beq.n	800f366 <__swsetup_r+0x46>
 800f360:	4628      	mov	r0, r5
 800f362:	f7fd fd91 	bl	800ce88 <_free_r>
 800f366:	2300      	movs	r3, #0
 800f368:	6363      	str	r3, [r4, #52]	@ 0x34
 800f36a:	89a3      	ldrh	r3, [r4, #12]
 800f36c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f370:	81a3      	strh	r3, [r4, #12]
 800f372:	2300      	movs	r3, #0
 800f374:	6063      	str	r3, [r4, #4]
 800f376:	6923      	ldr	r3, [r4, #16]
 800f378:	6023      	str	r3, [r4, #0]
 800f37a:	89a3      	ldrh	r3, [r4, #12]
 800f37c:	f043 0308 	orr.w	r3, r3, #8
 800f380:	81a3      	strh	r3, [r4, #12]
 800f382:	6923      	ldr	r3, [r4, #16]
 800f384:	b94b      	cbnz	r3, 800f39a <__swsetup_r+0x7a>
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f38c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f390:	d003      	beq.n	800f39a <__swsetup_r+0x7a>
 800f392:	4621      	mov	r1, r4
 800f394:	4628      	mov	r0, r5
 800f396:	f000 f883 	bl	800f4a0 <__smakebuf_r>
 800f39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f39e:	f013 0201 	ands.w	r2, r3, #1
 800f3a2:	d00a      	beq.n	800f3ba <__swsetup_r+0x9a>
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	60a2      	str	r2, [r4, #8]
 800f3a8:	6962      	ldr	r2, [r4, #20]
 800f3aa:	4252      	negs	r2, r2
 800f3ac:	61a2      	str	r2, [r4, #24]
 800f3ae:	6922      	ldr	r2, [r4, #16]
 800f3b0:	b942      	cbnz	r2, 800f3c4 <__swsetup_r+0xa4>
 800f3b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f3b6:	d1c5      	bne.n	800f344 <__swsetup_r+0x24>
 800f3b8:	bd38      	pop	{r3, r4, r5, pc}
 800f3ba:	0799      	lsls	r1, r3, #30
 800f3bc:	bf58      	it	pl
 800f3be:	6962      	ldrpl	r2, [r4, #20]
 800f3c0:	60a2      	str	r2, [r4, #8]
 800f3c2:	e7f4      	b.n	800f3ae <__swsetup_r+0x8e>
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	e7f7      	b.n	800f3b8 <__swsetup_r+0x98>
 800f3c8:	20000198 	.word	0x20000198

0800f3cc <_raise_r>:
 800f3cc:	291f      	cmp	r1, #31
 800f3ce:	b538      	push	{r3, r4, r5, lr}
 800f3d0:	4605      	mov	r5, r0
 800f3d2:	460c      	mov	r4, r1
 800f3d4:	d904      	bls.n	800f3e0 <_raise_r+0x14>
 800f3d6:	2316      	movs	r3, #22
 800f3d8:	6003      	str	r3, [r0, #0]
 800f3da:	f04f 30ff 	mov.w	r0, #4294967295
 800f3de:	bd38      	pop	{r3, r4, r5, pc}
 800f3e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f3e2:	b112      	cbz	r2, 800f3ea <_raise_r+0x1e>
 800f3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3e8:	b94b      	cbnz	r3, 800f3fe <_raise_r+0x32>
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f000 f830 	bl	800f450 <_getpid_r>
 800f3f0:	4622      	mov	r2, r4
 800f3f2:	4601      	mov	r1, r0
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3fa:	f000 b817 	b.w	800f42c <_kill_r>
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d00a      	beq.n	800f418 <_raise_r+0x4c>
 800f402:	1c59      	adds	r1, r3, #1
 800f404:	d103      	bne.n	800f40e <_raise_r+0x42>
 800f406:	2316      	movs	r3, #22
 800f408:	6003      	str	r3, [r0, #0]
 800f40a:	2001      	movs	r0, #1
 800f40c:	e7e7      	b.n	800f3de <_raise_r+0x12>
 800f40e:	2100      	movs	r1, #0
 800f410:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f414:	4620      	mov	r0, r4
 800f416:	4798      	blx	r3
 800f418:	2000      	movs	r0, #0
 800f41a:	e7e0      	b.n	800f3de <_raise_r+0x12>

0800f41c <raise>:
 800f41c:	4b02      	ldr	r3, [pc, #8]	@ (800f428 <raise+0xc>)
 800f41e:	4601      	mov	r1, r0
 800f420:	6818      	ldr	r0, [r3, #0]
 800f422:	f7ff bfd3 	b.w	800f3cc <_raise_r>
 800f426:	bf00      	nop
 800f428:	20000198 	.word	0x20000198

0800f42c <_kill_r>:
 800f42c:	b538      	push	{r3, r4, r5, lr}
 800f42e:	4d07      	ldr	r5, [pc, #28]	@ (800f44c <_kill_r+0x20>)
 800f430:	2300      	movs	r3, #0
 800f432:	4604      	mov	r4, r0
 800f434:	4608      	mov	r0, r1
 800f436:	4611      	mov	r1, r2
 800f438:	602b      	str	r3, [r5, #0]
 800f43a:	f7f5 fbf7 	bl	8004c2c <_kill>
 800f43e:	1c43      	adds	r3, r0, #1
 800f440:	d102      	bne.n	800f448 <_kill_r+0x1c>
 800f442:	682b      	ldr	r3, [r5, #0]
 800f444:	b103      	cbz	r3, 800f448 <_kill_r+0x1c>
 800f446:	6023      	str	r3, [r4, #0]
 800f448:	bd38      	pop	{r3, r4, r5, pc}
 800f44a:	bf00      	nop
 800f44c:	20008f18 	.word	0x20008f18

0800f450 <_getpid_r>:
 800f450:	f7f5 bbe4 	b.w	8004c1c <_getpid>

0800f454 <__swhatbuf_r>:
 800f454:	b570      	push	{r4, r5, r6, lr}
 800f456:	460c      	mov	r4, r1
 800f458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f45c:	2900      	cmp	r1, #0
 800f45e:	b096      	sub	sp, #88	@ 0x58
 800f460:	4615      	mov	r5, r2
 800f462:	461e      	mov	r6, r3
 800f464:	da0d      	bge.n	800f482 <__swhatbuf_r+0x2e>
 800f466:	89a3      	ldrh	r3, [r4, #12]
 800f468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f46c:	f04f 0100 	mov.w	r1, #0
 800f470:	bf14      	ite	ne
 800f472:	2340      	movne	r3, #64	@ 0x40
 800f474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f478:	2000      	movs	r0, #0
 800f47a:	6031      	str	r1, [r6, #0]
 800f47c:	602b      	str	r3, [r5, #0]
 800f47e:	b016      	add	sp, #88	@ 0x58
 800f480:	bd70      	pop	{r4, r5, r6, pc}
 800f482:	466a      	mov	r2, sp
 800f484:	f000 f848 	bl	800f518 <_fstat_r>
 800f488:	2800      	cmp	r0, #0
 800f48a:	dbec      	blt.n	800f466 <__swhatbuf_r+0x12>
 800f48c:	9901      	ldr	r1, [sp, #4]
 800f48e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f496:	4259      	negs	r1, r3
 800f498:	4159      	adcs	r1, r3
 800f49a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f49e:	e7eb      	b.n	800f478 <__swhatbuf_r+0x24>

0800f4a0 <__smakebuf_r>:
 800f4a0:	898b      	ldrh	r3, [r1, #12]
 800f4a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4a4:	079d      	lsls	r5, r3, #30
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	460c      	mov	r4, r1
 800f4aa:	d507      	bpl.n	800f4bc <__smakebuf_r+0x1c>
 800f4ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	6123      	str	r3, [r4, #16]
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	6163      	str	r3, [r4, #20]
 800f4b8:	b003      	add	sp, #12
 800f4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4bc:	ab01      	add	r3, sp, #4
 800f4be:	466a      	mov	r2, sp
 800f4c0:	f7ff ffc8 	bl	800f454 <__swhatbuf_r>
 800f4c4:	9f00      	ldr	r7, [sp, #0]
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f7fc fb76 	bl	800bbbc <_malloc_r>
 800f4d0:	b948      	cbnz	r0, 800f4e6 <__smakebuf_r+0x46>
 800f4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4d6:	059a      	lsls	r2, r3, #22
 800f4d8:	d4ee      	bmi.n	800f4b8 <__smakebuf_r+0x18>
 800f4da:	f023 0303 	bic.w	r3, r3, #3
 800f4de:	f043 0302 	orr.w	r3, r3, #2
 800f4e2:	81a3      	strh	r3, [r4, #12]
 800f4e4:	e7e2      	b.n	800f4ac <__smakebuf_r+0xc>
 800f4e6:	89a3      	ldrh	r3, [r4, #12]
 800f4e8:	6020      	str	r0, [r4, #0]
 800f4ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4ee:	81a3      	strh	r3, [r4, #12]
 800f4f0:	9b01      	ldr	r3, [sp, #4]
 800f4f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f4f6:	b15b      	cbz	r3, 800f510 <__smakebuf_r+0x70>
 800f4f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f000 f81d 	bl	800f53c <_isatty_r>
 800f502:	b128      	cbz	r0, 800f510 <__smakebuf_r+0x70>
 800f504:	89a3      	ldrh	r3, [r4, #12]
 800f506:	f023 0303 	bic.w	r3, r3, #3
 800f50a:	f043 0301 	orr.w	r3, r3, #1
 800f50e:	81a3      	strh	r3, [r4, #12]
 800f510:	89a3      	ldrh	r3, [r4, #12]
 800f512:	431d      	orrs	r5, r3
 800f514:	81a5      	strh	r5, [r4, #12]
 800f516:	e7cf      	b.n	800f4b8 <__smakebuf_r+0x18>

0800f518 <_fstat_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4d07      	ldr	r5, [pc, #28]	@ (800f538 <_fstat_r+0x20>)
 800f51c:	2300      	movs	r3, #0
 800f51e:	4604      	mov	r4, r0
 800f520:	4608      	mov	r0, r1
 800f522:	4611      	mov	r1, r2
 800f524:	602b      	str	r3, [r5, #0]
 800f526:	f7f5 fbe1 	bl	8004cec <_fstat>
 800f52a:	1c43      	adds	r3, r0, #1
 800f52c:	d102      	bne.n	800f534 <_fstat_r+0x1c>
 800f52e:	682b      	ldr	r3, [r5, #0]
 800f530:	b103      	cbz	r3, 800f534 <_fstat_r+0x1c>
 800f532:	6023      	str	r3, [r4, #0]
 800f534:	bd38      	pop	{r3, r4, r5, pc}
 800f536:	bf00      	nop
 800f538:	20008f18 	.word	0x20008f18

0800f53c <_isatty_r>:
 800f53c:	b538      	push	{r3, r4, r5, lr}
 800f53e:	4d06      	ldr	r5, [pc, #24]	@ (800f558 <_isatty_r+0x1c>)
 800f540:	2300      	movs	r3, #0
 800f542:	4604      	mov	r4, r0
 800f544:	4608      	mov	r0, r1
 800f546:	602b      	str	r3, [r5, #0]
 800f548:	f7f5 fbe0 	bl	8004d0c <_isatty>
 800f54c:	1c43      	adds	r3, r0, #1
 800f54e:	d102      	bne.n	800f556 <_isatty_r+0x1a>
 800f550:	682b      	ldr	r3, [r5, #0]
 800f552:	b103      	cbz	r3, 800f556 <_isatty_r+0x1a>
 800f554:	6023      	str	r3, [r4, #0]
 800f556:	bd38      	pop	{r3, r4, r5, pc}
 800f558:	20008f18 	.word	0x20008f18

0800f55c <_init>:
 800f55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55e:	bf00      	nop
 800f560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f562:	bc08      	pop	{r3}
 800f564:	469e      	mov	lr, r3
 800f566:	4770      	bx	lr

0800f568 <_fini>:
 800f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56a:	bf00      	nop
 800f56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56e:	bc08      	pop	{r3}
 800f570:	469e      	mov	lr, r3
 800f572:	4770      	bx	lr
